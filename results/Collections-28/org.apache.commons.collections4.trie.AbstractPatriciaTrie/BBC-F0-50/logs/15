* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 10362
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 89097470
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 21:13:51.807 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 21:13:51.807 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 21:14:32.461 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 21:14:54.354 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(Ljava/lang/Object;)Ljava/lang/Object;
[MASTER] 21:22:02.793 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 21:22:26.154 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry due to org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.Integer, java.lang.Comparable<java.lang.Integer>>.TrieEntry<java.util.AbstractMap<java.lang.String, java.lang.Object>.SimpleEntry<java.lang.String, java.lang.Object>, java.lang.Object> canUseFunctionalMocks=false, canBeMocked: false
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.comparator()Ljava/util/Comparator;: Line 1713: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 1142: 70
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I47 Branch 112 IFEQ L1029 - true: 1216
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I40 Branch 136 IFEQ L1201 - false: 60
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.remove()V: Line 2335: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I93 Branch 55 IF_ACMPNE L553 - true: 3040
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.iterator()Ljava/util/Iterator;: I35 Branch 242 IFNONNULL L2295 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.remove(Ljava/lang/Object;)Ljava/lang/Object;: Line 1727: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I16 Branch 267 IFNULL L2071 - false: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(Ljava/io/ObjectOutputStream;)V: I19 Branch 148 IFEQ L2435 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I106 Branch 107 IFEQ L982 - false: 1697
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.iterator()Ljava/util/Iterator;: I35 Branch 242 IFNONNULL L2295 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousKey(Ljava/lang/Object;)Ljava/lang/Object;: I3 Branch 89 IFNONNULL L811 - true: 637
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousKey(Ljava/lang/Object;)Ljava/lang/Object;: I3 Branch 89 IFNONNULL L811 - false: 736
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I16 Branch 267 IFNULL L2071 - true: 4524
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(Ljava/io/ObjectOutputStream;)V: I19 Branch 148 IFEQ L2435 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I106 Branch 107 IFEQ L982 - true: 1697
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2408: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.size()I: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2398: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I15 Branch 104 IFNE L962 - false: 41
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.contains(Ljava/lang/Object;)Z: Line 1400: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.selectKey(Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 25 IFNONNULL L312 - true: 56
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.setValue(Ljava/lang/Object;)Ljava/lang/Object;: I4 Branch 172 IFNONNULL L1636 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2405: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.createEntrySet()Ljava/util/Set;: Line 1930: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2390: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(Ljava/lang/Object;)Ljava/lang/Object;: I42 Branch 40 IFNE L430 - true: 184
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2394: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.toString()Ljava/lang/String;: I218 Branch 160 IFNULL L1373 - true: 160
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.setValue(Ljava/lang/Object;)Ljava/lang/Object;: I4 Branch 172 IFNONNULL L1636 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.clear()V: Line 1472: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.clear()V: Line 1471: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.getFromKey()Ljava/lang/Object;: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.remove(Ljava/lang/Object;)Z: I4 Branch 255 IFNE L2041 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.hasNext()Z: I11 Branch 269 IFNE L2076 - false: 809
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2388: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2389: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstKey()Ljava/lang/Object;: I4 Branch 84 IFNE L781 - false: 47
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inFromRange(Ljava/lang/Object;Z)Z: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I52 Branch 97 IFEQ L907 - false: 317
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.remove(Ljava/lang/Object;)Z: I4 Branch 255 IFNE L2041 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.clear()V: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Ljava/lang/Object;: I5 Branch 45 IF_ACMPEQ L480 - true: 1534
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I39 Branch 117 IFEQ L1065 - false: 18
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.clear()V: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.iterator()Ljava/util/Iterator;: root-Branch: 3465
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I146 Branch 130 IFLT L1142 - true: 1306
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.containsKey(Ljava/lang/Object;)Z: I8 Branch 199 IFNE L1718 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I146 Branch 130 IFLT L1142 - false: 70
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: I19 Branch 245 IFNONNULL L1988 - true: 5926
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: I41 Branch 246 IFNULL L1995 - true: 5926
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstKey()Ljava/lang/Object;: I4 Branch 84 IFNE L781 - true: 182
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: I19 Branch 245 IFNONNULL L1988 - false: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I52 Branch 97 IFEQ L907 - true: 105
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: I41 Branch 246 IFNULL L1995 - false: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.remove()V: I4 Branch 179 IFNONNULL L1590 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.size()I: Line 2013: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.remove()V: I4 Branch 179 IFNONNULL L1590 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.iterator()Ljava/util/Iterator;: Line 2290: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.hasNext()Z: Line 2320: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I4 Branch 134 IFNONNULL L1196 - false: 3204
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.firstKey()Ljava/lang/Object;: Line 781: 47
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.iterator()Ljava/util/Iterator;: Line 2295: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: Line 2376: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I15 Branch 95 IFNE L894 - false: 331
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: Line 2373: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I64 Branch 137 IFNULL L1207 - true: 216
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: Line 2372: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I64 Branch 137 IFNULL L1207 - false: 118
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I101 Branch 141 IF_ACMPNE L1216 - true: 6
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I137 Branch 78 IF_ACMPEQ L724 - true: 1506
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;: I5 Branch 207 IFNE L1782 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.remove(Ljava/lang/Object;)Z: I17 Branch 167 IF_ICMPEQ L1466 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I30 Branch 48 IFNE L501 - false: 6011
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;: I5 Branch 207 IFNE L1782 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I85 Branch 127 IF_ACMPNE L1127 - false: 137
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.getToKey()Ljava/lang/Object;: Line 2243: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.next()Ljava/util/Map$Entry;: I4 Branch 265 IFEQ L2325 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.size()I: Line 2004: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.next()Ljava/util/Map$Entry;: I4 Branch 265 IFEQ L2325 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I85 Branch 127 IF_ACMPNE L1127 - true: 81
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.isEmpty()Z: Line 2018: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.hasNext()Z: I4 Branch 264 IFNE L2320 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;I)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I101 Branch 18 IFNE L220 - false: 19
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.toString()Ljava/lang/String;: I171 Branch 159 IF_ICMPNE L1363 - false: 1390
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: I11 Branch 271 IFEQ L2081 - false: 786
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.hasNext()Z: I4 Branch 264 IFNE L2320 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.nextEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I22 Branch 177 IFNONNULL L1567 - false: 5181
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.isToInclusive()Z: Line 2253: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.remove(Ljava/lang/Object;)Z: I17 Branch 167 IF_ICMPEQ L1466 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.remove(Ljava/lang/Object;)Z: I4 Branch 165 IFNE L1410 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: Line 1745: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2069: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2070: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.next()Ljava/lang/Object;: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I120 Branch 99 IFEQ L920 - true: 3651
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.remove(Ljava/lang/Object;)Z: I4 Branch 165 IFNE L1410 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: Line 2192: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2071: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: Line 2191: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2072: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.createRangeMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/SortedMap;: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: I16 Branch 260 IF_ACMPNE L2390 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: I16 Branch 260 IF_ACMPNE L2390 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: I8 Branch 229 IFNONNULL L1891 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator.next()Ljava/lang/Object;: Line 1528: 3465
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I101 Branch 75 IF_ACMPNE L706 - true: 145
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I120 Branch 99 IFEQ L920 - false: 3651
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange(Ljava/lang/Object;)Z: I13 Branch 208 IFNULL L1795 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.entrySet()Ljava/util/Set;: I4 Branch 203 IFNONNULL L1753 - false: 5926
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;: I5 Branch 206 IFNE L1774 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I101 Branch 75 IF_ACMPNE L706 - false: 2166
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.isToInclusive()Z: Line 1950: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeMap;)V: I15 Branch 244 IFNONNULL L1975 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange(Ljava/lang/Object;)Z: I13 Branch 208 IFNULL L1795 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange(Ljava/lang/Object;)Z: Line 1792: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange(Ljava/lang/Object;)Z: Line 1793: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: I8 Branch 229 IFNONNULL L1891 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange(Ljava/lang/Object;)Z: Line 1795: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.entrySet()Ljava/util/Set;: I4 Branch 203 IFNONNULL L1753 - true: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;: I5 Branch 206 IFNE L1774 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: Line 2182: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: Line 2184: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: Line 2185: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inRange2(Ljava/lang/Object;)Z: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeMap;)V: I15 Branch 244 IFNONNULL L1975 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: I32 Branch 196 IFNULL L2191 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeMap;)V: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.nextEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 1654: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeMap;)V: Line 2273: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.nextEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 1655: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.fixup()I: I5 Branch 181 IF_ICMPEQ L2125 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.nextEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 1656: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.clear()V: Line 1429: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.clear()V: Line 1428: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: I32 Branch 196 IFNULL L2191 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I91 Branch 128 IF_ICMPGE L1127 - true: 56
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeMap;)V: Line 2278: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.contains(Ljava/lang/Object;)Z: Line 1459: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeMap;)V: Line 2281: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeMap;)V: Line 2280: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeMap;)V: Line 2279: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: Line 1922: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I160 Branch 80 IF_ACMPNE L730 - true: 52
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: Line 1921: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I160 Branch 80 IF_ACMPNE L730 - false: 1019
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I109 Branch 57 IF_ACMPNE L557 - false: 194
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I139 Branch 8 IFEQ L165 - true: 11696
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: Line 1911: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Ljava/lang/Object;: I10 Branch 46 IFEQ L481 - false: 110
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I97 Branch 56 IF_ACMPEQ L553 - false: 400
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I139 Branch 8 IFEQ L165 - false: 11696
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I40 Branch 105 IFEQ L969 - true: 41
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Ljava/lang/Object;ZLjava/lang/Object;Z)V: I14 Branch 225 IFNONNULL L1874 - false: 25
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(Ljava/lang/Object;II)Ljava/util/SortedMap;: I53 Branch 93 IFNE L861 - false: 72
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I40 Branch 105 IFEQ L969 - false: 73
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2312: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2315: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2314: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.remove(Ljava/lang/Object;)Z: I8 Branch 168 IFEQ L1512 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.remove(Ljava/lang/Object;)Z: I8 Branch 168 IFEQ L1512 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2316: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inToRange(Ljava/lang/Object;Z)Z: Line 2228: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inRange(Ljava/lang/Object;)Z: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.next()Ljava/lang/Object;: Line 1615: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.hasPrevious()Z: Line 1644: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(Ljava/lang/Object;II)Ljava/util/SortedMap;: I12 Branch 92 IF_ICMPLE L856 - false: 3727
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: I13 Branch 191 IFNONNULL L2166 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: I13 Branch 191 IFNONNULL L2166 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I96 Branch 74 IF_ACMPNE L704 - false: 145
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$KeySet;)V: Line 1477: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I216 Branch 63 IFEQ L600 - true: 194
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.fixup()I: I5 Branch 181 IF_ICMPEQ L2125 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.remove(Ljava/lang/Object;)Z: Line 1512: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: I43 Branch 197 IFNULL L2192 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: I43 Branch 197 IFNULL L2192 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 1556: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.iterator()Ljava/util/Iterator;: Line 1492: 3465
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 1555: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: I55 Branch 263 IF_ICMPLT L2405 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 1554: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: I9 Branch 259 IFEQ L2373 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange2(Ljava/lang/Object;)Z: I13 Branch 212 IFNULL L1805 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryInSubtree(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I3 Branch 143 IFNONNULL L1237 - false: 179
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I56 Branch 118 IFEQ L1070 - true: 3723
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: I9 Branch 259 IFEQ L2373 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 531: 453
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.createRangeMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/SortedMap;: Line 2259: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.createEntrySet()Ljava/util/Set;: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator.next()Ljava/lang/Object;: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.contains(Ljava/lang/Object;)Z: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.remove()V: I5 Branch 266 IF_ICMPEQ L2335 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.size()I: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.containsKey(Ljava/lang/Object;)Z: I8 Branch 199 IFNE L1718 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I49 Branch 70 IFEQ L674 - false: 478
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inRange2(Ljava/lang/Object;)Z: Line 2212: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.getKey()Ljava/lang/Object;: Line 1620: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: I55 Branch 263 IF_ICMPLT L2405 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: I31 Branch 261 IF_ICMPNE L2398 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.remove()V: I5 Branch 266 IF_ICMPEQ L2335 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.size()I: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: I31 Branch 261 IF_ICMPNE L2398 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: root-Branch: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I203 Branch 62 IFEQ L596 - false: 194
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.getValue()Ljava/lang/Object;: I4 Branch 171 IFNONNULL L1628 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I100 Branch 51 IF_ICMPLE L515 - false: 211
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.fixup()I: Line 2158: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.iterator()Ljava/util/Iterator;: I7 Branch 241 IF_ICMPEQ L2290 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.getValue()Ljava/lang/Object;: I4 Branch 171 IFNONNULL L1628 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;: Line 1782: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.getToKey()Ljava/lang/Object;: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I146 Branch 79 IFEQ L725 - true: 52
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.contains(Ljava/lang/Object;)Z: I4 Branch 251 IFNE L2024 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange2(Ljava/lang/Object;)Z: I13 Branch 212 IFNULL L1805 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.contains(Ljava/lang/Object;)Z: I4 Branch 251 IFNE L2024 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I75 Branch 73 IFEQ L694 - true: 108
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I41 Branch 124 IFNE L1106 - false: 68
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I41 Branch 124 IFNE L1106 - true: 72
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.findNext(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.fixup()I: Line 2125: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.contains(Ljava/lang/Object;)Z: Line 1502: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I17 Branch 122 IF_ICMPLE L1101 - false: 79
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I21 Branch 123 IF_ICMPGT L1101 - false: 81
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: I26 Branch 147 IF_ICMPGE L2422 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I21 Branch 123 IF_ICMPGT L1101 - true: 149
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I9 Branch 94 IFNE L893 - true: 474
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I9 Branch 94 IFNE L893 - false: 371
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: I39 Branch 237 IFNULL L1921 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.isFromInclusive()Z: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: I26 Branch 147 IF_ICMPGE L2422 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I69 Branch 126 IFEQ L1117 - true: 79
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I33 Branch 69 IFEQ L665 - true: 44
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: I39 Branch 237 IFNULL L1921 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator.next()Ljava/lang/Object;: Line 1480: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.remove(Ljava/lang/Object;)Z: Line 1465: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.remove(Ljava/lang/Object;)Z: Line 1464: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeMap;)V: Line 1967: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inToRange(Ljava/lang/Object;Z)Z: I22 Branch 220 IFNE L1830 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeMap;)V: Line 1974: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.createRangeMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/SortedMap;: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.remove(Ljava/lang/Object;)Z: Line 1466: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.iterator()Ljava/util/Iterator;: I7 Branch 241 IF_ICMPEQ L2290 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inToRange(Ljava/lang/Object;Z)Z: I22 Branch 220 IFNE L1830 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.getFromKey()Ljava/lang/Object;: Line 2238: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.isValidUplink(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Z: I8 Branch 145 IF_ICMPGT L1247 - true: 17
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.previousEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 1660: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange2(Ljava/lang/Object;)Z: Line 1803: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange2(Ljava/lang/Object;)Z: Line 1802: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange2(Ljava/lang/Object;)Z: Line 1805: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1984: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I105 Branch 6 IFNE L158 - true: 11696
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1987: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1988: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inToRange(Ljava/lang/Object;Z)Z: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(Ljava/lang/Object;)Ljava/lang/Object;: I71 Branch 42 IFNE L438 - false: 908
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.size()I: Line 1497: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1985: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextKey(Ljava/lang/Object;)Ljava/lang/Object;: I30 Branch 87 IFNULL L802 - false: 92
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1995: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeMap;)V: Line 1975: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1994: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1999: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: I4 Branch 270 IFNULL L2081 - false: 15184
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I30 Branch 53 IFNE L533 - false: 5011
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.toString()Ljava/lang/String;: I225 Branch 161 IF_ICMPNE L1374 - false: 58
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: I4 Branch 270 IFNULL L2081 - true: 15969
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.iterator()Ljava/util/Iterator;: Line 1449: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.isToInclusive()Z: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I28 Branch 111 IFEQ L1024 - false: 40
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(Ljava/lang/Object;)Ljava/lang/Object;: I48 Branch 41 IFEQ L430 - true: 509
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.selectR(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;ILjava/lang/Object;ILorg/apache/commons/collections4/trie/AbstractPatriciaTrie$Reference;)Z: I68 Branch 31 IFEQ L370 - false: 4471
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousKey(Ljava/lang/Object;)Ljava/lang/Object;: I30 Branch 90 IFNULL L815 - true: 53
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.previousEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I7 Branch 174 IF_ICMPEQ L1660 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.createRangeMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/SortedMap;: Line 1956: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.remove(Ljava/lang/Object;)Z: Line 2041: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I118 Branch 129 IF_ICMPEQ L1134 - false: 70
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.previousEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I7 Branch 174 IF_ICMPEQ L1660 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I96 Branch 113 IFEQ L1037 - true: 1216
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inToRange(Ljava/lang/Object;Z)Z: Line 1827: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inToRange(Ljava/lang/Object;Z)Z: Line 1830: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inToRange(Ljava/lang/Object;Z)Z: Line 1829: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.isEmpty()Z: I5 Branch 250 IFNE L2018 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inToRange(Ljava/lang/Object;Z)Z: Line 1826: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.isEmpty()Z: I5 Branch 250 IFNE L2018 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inFromRange(Ljava/lang/Object;Z)Z: I22 Branch 216 IFNE L1816 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.hasPrevious()Z: I4 Branch 173 IFNULL L1644 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inFromRange(Ljava/lang/Object;Z)Z: I22 Branch 216 IFNE L1816 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I21 Branch 96 IF_ICMPLE L896 - false: 331
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.remove(Ljava/lang/Object;)Ljava/lang/Object;: I8 Branch 200 IFNE L1727 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.size()I: Line 1423: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.hasPrevious()Z: I4 Branch 173 IFNULL L1644 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.containsKey(Ljava/lang/Object;)Z: I31 Branch 33 IFNE L386 - false: 27
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.getToKey()Ljava/lang/Object;: Line 1940: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: I50 Branch 238 IFNULL L1922 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.previous()Ljava/lang/Object;: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.remove(Ljava/lang/Object;)Ljava/lang/Object;: I8 Branch 200 IFNE L1727 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: I50 Branch 238 IFNULL L1922 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.size()I: Line 2285: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$Values;)V: Line 1525: 3465
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I21 Branch 96 IF_ICMPLE L896 - true: 342
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: I4 Branch 235 IFNONNULL L1911 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: Line 2419: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I17 Branch 67 IFNE L658 - false: 65
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I31 Branch 135 IF_ACMPNE L1200 - true: 118
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(Ljava/lang/Object;)Ljava/lang/Object;: I3 Branch 38 IFNONNULL L420 - false: 24
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inFromRange(Ljava/lang/Object;Z)Z: Line 1816: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I17 Branch 67 IFNE L658 - true: 247
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inFromRange(Ljava/lang/Object;Z)Z: Line 1815: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inFromRange(Ljava/lang/Object;Z)Z: Line 1812: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inFromRange(Ljava/lang/Object;Z)Z: Line 1813: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2368: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: I4 Branch 235 IFNONNULL L1911 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2367: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2366: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.containsKey(Ljava/lang/Object;)Z: Line 1718: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2365: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: Line 2427: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: Line 2420: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: Line 2421: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: Line 2422: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2364: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2363: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2362: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I9 Branch 103 IFNE L961 - true: 41
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I91 Branch 128 IF_ICMPGE L1127 - false: 67
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I96 Branch 113 IFEQ L1037 - false: 1216
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.iterator()Ljava/util/Iterator;: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.hasNext()Z: I4 Branch 268 IFNULL L2076 - false: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.selectR(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;ILjava/lang/Object;ILorg/apache/commons/collections4/trie/AbstractPatriciaTrie$Reference;)Z: I32 Branch 29 IFNE L365 - false: 47
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.selectR(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;ILjava/lang/Object;ILorg/apache/commons/collections4/trie/AbstractPatriciaTrie$Reference;)Z: I44 Branch 30 IFEQ L366 - true: 47
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.hasNext()Z: I4 Branch 268 IFNULL L2076 - true: 4524
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I71 Branch 98 IFEQ L912 - true: 3651
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.selectR(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;ILjava/lang/Object;ILorg/apache/commons/collections4/trie/AbstractPatriciaTrie$Reference;)Z: I44 Branch 30 IFEQ L366 - false: 68
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.contains(Ljava/lang/Object;)Z: Line 2024: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.hasNext()Z: Line 2076: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 891: 371
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator.next()Ljava/lang/Object;: root-Branch: 3465
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 893: 371
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.remove()V: Line 1590: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.size()I: I5 Branch 247 IF_ICMPEQ L2004 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.contains(Ljava/lang/Object;)Z: I4 Branch 162 IFNE L1400 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: I43 Branch 193 IFNULL L2173 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.followRight(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I16 Branch 133 IF_ICMPLE L1169 - false: 33
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I105 Branch 119 IFEQ L1078 - true: 3723
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.isFromInclusive()Z: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I127 Branch 58 IF_ICMPLE L563 - false: 3031
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I105 Branch 119 IFEQ L1078 - false: 3723
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextKey(Ljava/lang/Object;)Ljava/lang/Object;: I40 Branch 88 IFNULL L804 - false: 92
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.isInternalNode()Z: I9 Branch 151 IF_ACMPEQ L1316 - false: 71
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.remove(Ljava/lang/Object;)Z: Line 1410: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.createEntrySet()Ljava/util/Set;: Line 2233: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;: Line 1761: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(Ljava/io/ObjectOutputStream;)V: Line 2439: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I23 Branch 68 IF_ACMPNE L661 - false: 198
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.entrySet()Ljava/util/Set;: Line 1753: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.entrySet()Ljava/util/Set;: Line 1756: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: Line 2081: 15184
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextKey(Ljava/lang/Object;)Ljava/lang/Object;: I40 Branch 88 IFNULL L804 - true: 120
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.getToKey()Ljava/lang/Object;: root-Branch: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I110 Branch 7 IFEQ L159 - true: 11696
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: I43 Branch 193 IFNULL L2173 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(Ljava/io/ObjectOutputStream;)V: Line 2434: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(Ljava/io/ObjectOutputStream;)V: Line 2435: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.contains(Ljava/lang/Object;)Z: I4 Branch 162 IFNE L1400 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(Ljava/io/ObjectOutputStream;)V: Line 2433: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;: Line 1774: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.isFromInclusive()Z: Line 1945: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I5 Branch 52 IF_ACMPNE L531 - true: 453
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I5 Branch 52 IF_ACMPNE L531 - false: 5464
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.getValue()Ljava/lang/Object;: Line 1628: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.getFromKey()Ljava/lang/Object;: root-Branch: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.size()I: I5 Branch 247 IF_ICMPEQ L2004 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.nextEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I149 Branch 131 IF_ICMPGE L1142 - false: 1236
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.size()I: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.getFromKey()Ljava/lang/Object;: Line 1935: 4431
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I165 Branch 61 IF_ACMPNE L581 - true: 2680
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.isExternalNode()Z: I4 Branch 152 IFNE L1323 - true: 442
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.isToInclusive()Z: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.getKey()Ljava/lang/Object;: I4 Branch 170 IFNONNULL L1620 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I139 Branch 59 IF_ACMPNE L572 - false: 194
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.containsKey(Ljava/lang/Object;)Z: I37 Branch 34 IFEQ L386 - true: 27
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.containsKey(Ljava/lang/Object;)Z: I37 Branch 34 IFEQ L386 - false: 66
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.getKey()Ljava/lang/Object;: I4 Branch 170 IFNONNULL L1620 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I80 Branch 139 IFNONNULL L1211 - false: 98
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.keySet()Ljava/util/Set;: I4 Branch 36 IFNONNULL L399 - true: 2098
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I79 Branch 54 IF_ACMPNE L545 - false: 194
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.get(Ljava/lang/Object;)Ljava/lang/Object;: I8 Branch 201 IFNE L1736 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.get(Ljava/lang/Object;)Ljava/lang/Object;: I8 Branch 201 IFNE L1736 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: Line 2163: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.getEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I37 Branch 23 IFEQ L260 - true: 9
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.toString()Ljava/lang/String;: I11 Branch 153 IF_ICMPNE L1330 - false: 58
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.next()Ljava/util/Map$Entry;: Line 2325: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: I13 Branch 195 IFNONNULL L2185 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.addEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;I)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I130 Branch 19 IFNE L231 - false: 19
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: I13 Branch 195 IFNONNULL L2185 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I107 Branch 142 IFEQ L1217 - false: 935
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inFromRange(Ljava/lang/Object;Z)Z: Line 2220: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I57 Branch 106 IFEQ L974 - true: 1697
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: I32 Branch 192 IFNULL L2172 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.findNext(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 2381: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: I32 Branch 192 IFNULL L2172 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I82 Branch 50 IF_ACMPNE L508 - true: 60
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I58 Branch 125 IFEQ L1114 - true: 79
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: I41 Branch 231 IFNULL L1901 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: I41 Branch 231 IFNULL L1901 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: Line 2173: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.get(Ljava/lang/Object;)Ljava/lang/Object;: Line 1736: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: Line 2172: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: Line 2166: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: Line 2165: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: Line 1890: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.clear()V: Line 1508: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: Line 1891: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.toString()Ljava/lang/String;: I110 Branch 156 IFNULL L1351 - true: 3613
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.values()Ljava/util/Collection;: I4 Branch 37 IFNONNULL L407 - true: 1879
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Ljava/lang/Object;ZLjava/lang/Object;Z)V: I46 Branch 228 IFLE L1878 - false: 56
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: Line 1902: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: Line 1901: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.clear()V: Line 1507: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.createEntrySet()Ljava/util/Set;: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.size()I: Line 1454: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.contains(Ljava/lang/Object;)Z: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousKey(Ljava/lang/Object;)Ljava/lang/Object;: I40 Branch 91 IFNULL L817 - false: 215
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousKey(Ljava/lang/Object;)Ljava/lang/Object;: Line 811: 637
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;: I5 Branch 204 IFNE L1761 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I5 Branch 47 IF_ACMPNE L499 - false: 6009
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;: I5 Branch 204 IFNE L1761 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.setValue(Ljava/lang/Object;)Ljava/lang/Object;: Line 1636: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.previous()Ljava/lang/Object;: Line 1649: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.isFromInclusive()Z: Line 2248: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.clear()V: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I69 Branch 138 IF_ACMPNE L1207 - false: 1065
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I116 Branch 76 IF_ACMPNE L714 - false: 4518
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I76 Branch 5 IFEQ L149 - false: 3600
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inRange(Ljava/lang/Object;)Z: Line 2204: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.nextEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I7 Branch 176 IF_ICMPEQ L1562 - false: 5181
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I5 Branch 202 IFNE L1745 - false: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: I52 Branch 232 IFNULL L1902 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I152 Branch 60 IF_ACMPNE L576 - true: 4822
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextKey(Ljava/lang/Object;)Ljava/lang/Object;: I3 Branch 86 IFNONNULL L798 - false: 37
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.comparator()Ljava/util/Comparator;: root-Branch: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I5 Branch 202 IFNE L1745 - true: 21967
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: I52 Branch 232 IFNULL L1902 - false: 21967
Number of times BBC is called in total: 6299493
* Search finished after 603s and 234 generations, 106824 statements, best individual has fitness: 1411.0
* Minimizing test suite
[MASTER] 21:24:56.855 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 59%
* Total number of goals: 822
* Number of covered goals: 485
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 52%
* Total number of goals: 602
* Number of covered goals: 316
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 57%
* Total number of goals: 569
* Number of covered goals: 323
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 58%
* Total number of goals: 186
* Number of covered goals: 107
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 52%
* Total number of goals: 602
* Number of covered goals: 314
* Generated 186 tests with total length 3014
* Resulting test suite's coverage: 50% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:25:53.993 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8505% of time used, but only 15/186 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 21:26:02.343 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_19_1627593962260/org/apache/commons/collections4/trie/AbstractPatriciaTrie_19_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_19_1627593962260/org/apache/commons/collections4/trie/AbstractPatriciaTrie_19_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:02.343 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:02.343 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:02.353 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.String>>: 79
[MASTER] 21:26:02.353 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_19_1627593962260/org/apache/commons/collections4/trie/AbstractPatriciaTrie_19_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:02.353 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:02.355 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_19_1627593962260/org/apache/commons/collections4/trie/AbstractPatriciaTrie_19_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:02 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
14: import org.apache.commons.collections4.trie.PatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_19_tmp__ESTest extends AbstractPatriciaTrie_19_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("T+/|,U", "T+/|,U", (-1548));
26:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
27:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
29:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
30:       
31:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
32:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("KTAR$", "T+/|,U", 0);
33:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
34:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
35:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
36:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
37:       
38:       abstractPatriciaTrie_TrieEntry1.value = null;
39:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
40:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
41:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
42:       
43:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(abstractPatriciaTrie_TrieEntry1);
44:       assertFalse(boolean0);
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
50:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
51:       
52:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
58:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
61:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
62:       
63:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
64:       assertEquals("Entry(key=KTAR$ [0], value=null, parent=null, left=KTAR$ [0], right=null, predecessor=KTAR$ [0])", string0);
65:       assertNotNull(string0);
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       
70:       Object object0 = new Object();
71:       assertNotNull(object0);
72:       
73:       Object object1 = abstractPatriciaTrie_TrieEntry1.setKeyValue("iWytw``-w^0)qo1Px;", object0);
74:       assertNull(object1);
75:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
77:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
78:       
79:       Comparator<Map.Entry<Integer, String>> comparator1 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
80:       assertNotNull(comparator1);
81:       
82:       boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
83:       assertFalse(boolean1);
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
86:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
87:       assertTrue(boolean1 == boolean0);
88:       
89:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
90:       assertNotNull(patriciaTrie0);
91:       
92:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
93:       assertNotNull(patriciaTrie1);
94:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
95:       
96:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "P?s+Dw ilL7~", (-3));
97:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
98:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
99:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
100:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
101:       
102:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", (-975));
103:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
104:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
106:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
107:       
108:       abstractPatriciaTrie_TrieEntry2.left = abstractPatriciaTrie_TrieEntry3;
109:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
110:       assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
113:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
114:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry2.left.isInternalNode());
116:       assertTrue(abstractPatriciaTrie_TrieEntry2.left.isExternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry2.left.isEmpty());
118:       
119:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry2.predecessor;
120:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
121:       assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
123:       assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
124:       
125:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
126:       assertNotSame(patriciaTrie0, patriciaTrie1);
127:       assertNotSame(patriciaTrie1, patriciaTrie0);
128:       assertNull(abstractPatriciaTrie_TrieEntry5);
129:       assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
130:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
131:       assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
132:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
133:       assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
134:       assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
135:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
136:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
137:       
138:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
139:       assertNotNull(patriciaTrie2);
140:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
141:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
142:       
143:       String string1 = patriciaTrie2.nextKey("KTAR$");
144:       assertNotSame(patriciaTrie0, patriciaTrie1);
145:       assertNotSame(patriciaTrie1, patriciaTrie0);
146:       assertNull(string1);
147:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
148:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
149:   }
150: }
RegularFileObject[/tmp/EvoSuite_19_1627593962260/org/apache/commons/collections4/trie/AbstractPatriciaTrie_19_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:02 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_19_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_19_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_19_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_19_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:02.356 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("T+/|,U", "T+/|,U", (-1548));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("KTAR$", "T+/|,U", 0);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

abstractPatriciaTrie_TrieEntry1.value = null;
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(abstractPatriciaTrie_TrieEntry1);
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertEquals("Entry(key=KTAR$ [0], value=null, parent=null, left=KTAR$ [0], right=null, predecessor=KTAR$ [0])", string0);
assertNotNull(string0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Object object0 = new Object();
assertNotNull(object0);

Object object1 = abstractPatriciaTrie_TrieEntry1.setKeyValue("iWytw``-w^0)qo1Px;", object0);
assertNull(object1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Comparator<Map.Entry<Integer, String>> comparator1 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(boolean1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(boolean1 == boolean0);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "P?s+Dw ilL7~", (-3));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", (-975));
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

abstractPatriciaTrie_TrieEntry2.left = abstractPatriciaTrie_TrieEntry3;
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.left.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry2.predecessor;
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNull(abstractPatriciaTrie_TrieEntry5);
assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
assertNotNull(patriciaTrie2);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

String string1 = patriciaTrie2.nextKey("KTAR$");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNull(string1);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));


[MASTER] 21:26:02.607 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_23_1627593962551/org/apache/commons/collections4/trie/AbstractPatriciaTrie_23_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_23_1627593962551/org/apache/commons/collections4/trie/AbstractPatriciaTrie_23_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:02.607 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:02.607 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:02.608 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>>: 73
[MASTER] 21:26:02.608 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_23_1627593962551/org/apache/commons/collections4/trie/AbstractPatriciaTrie_23_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:02.608 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:02.609 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_23_1627593962551/org/apache/commons/collections4/trie/AbstractPatriciaTrie_23_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:02 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import java.util.NoSuchElementException;
16: import java.util.SortedMap;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_23_tmp__ESTest extends AbstractPatriciaTrie_23_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       Integer integer0 = new Integer(603);
30:       assertEquals(603, (int)integer0);
31:       assertNotNull(integer0);
32:       
33:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, integer0, 603);
34:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
35:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
36:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
38:       
39:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
40:       assertNotNull(hashMap0);
41:       assertTrue(hashMap0.isEmpty());
42:       assertEquals(0, hashMap0.size());
43:       
44:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
45:       assertNotNull(patriciaTrie0);
46:       assertTrue(hashMap0.isEmpty());
47:       assertEquals(0, hashMap0.size());
48:       
49:       String string0 = "g+o]4f%_R=*";
50:       SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("g+o]4f%_R=*");
51:       assertNotNull(sortedMap0);
52:       assertTrue(hashMap0.isEmpty());
53:       assertEquals(0, hashMap0.size());
54:       assertTrue(sortedMap0.isEmpty());
55:       assertEquals(0, sortedMap0.size());
56:       
57:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
58:       assertNotNull(patriciaTrie1);
59:       assertTrue(hashMap0.isEmpty());
60:       assertEquals(0, hashMap0.size());
61:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
62:       
63:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "g+o]4f%_R=*", 1248);
64:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
65:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       
69:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
70:       Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByValue();
71:       assertNotNull(comparator1);
72:       
73:       Comparator<Map.Entry<Object, String>> comparator2 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
74:       assertNotNull(comparator2);
75:       
76:       String string1 = patriciaTrie0.put("g+o]4f%_R=*", "g+o]4f%_R=*");
77:       assertNotSame(patriciaTrie0, patriciaTrie1);
78:       assertNull(string1);
79:       assertTrue(hashMap0.isEmpty());
80:       assertEquals(0, hashMap0.size());
81:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
82:       
83:       // Undeclared exception!
84:       try { 
85:         patriciaTrie1.lastKey();
86:         fail("Expecting exception: NoSuchElementException");
87:       
88:       } catch(NoSuchElementException e) {
89:          //
90:          // no message in exception (getMessage() returned null)
91:          //
92:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
93:       }
94:   }
95: }
RegularFileObject[/tmp/EvoSuite_23_1627593962551/org/apache/commons/collections4/trie/AbstractPatriciaTrie_23_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:02 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_23_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_23_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_23_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_23_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:02.610 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(603);
assertEquals(603, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, integer0, 603);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertNotNull(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
assertNotNull(patriciaTrie0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

String string0 = "g+o]4f%_R=*";
SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("g+o]4f%_R=*");
assertNotNull(sortedMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertNotNull(patriciaTrie1);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "g+o]4f%_R=*", 1248);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByValue();
assertNotNull(comparator1);

Comparator<Map.Entry<Object, String>> comparator2 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator2);

String string1 = patriciaTrie0.put("g+o]4f%_R=*", "g+o]4f%_R=*");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNull(string1);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));

patriciaTrie1.lastKey();

[MASTER] 21:26:02.828 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_26_1627593962758/org/apache/commons/collections4/trie/AbstractPatriciaTrie_26_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_26_1627593962758/org/apache/commons/collections4/trie/AbstractPatriciaTrie_26_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:02.828 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:02.828 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:02.829 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>>>>: 65
[MASTER] 21:26:02.829 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_26_1627593962758/org/apache/commons/collections4/trie/AbstractPatriciaTrie_26_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:02.829 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:02.829 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_26_1627593962758/org/apache/commons/collections4/trie/AbstractPatriciaTrie_26_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:02 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.Set;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_26_tmp__ESTest extends AbstractPatriciaTrie_26_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Y&\")##Yl$:tv<4X", "Y&\")##Yl$:tv<4X", 0);
28:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
29:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
32:       
33:       Comparator<Map.Entry<String, Object>> comparator0 = Map.Entry.comparingByKey();
34:       assertNotNull(comparator0);
35:       
36:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
37:       assertNotNull(abstractMap_SimpleEntry0);
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       
42:       Object object0 = abstractMap_SimpleEntry0.setValue("!?*F\":G7");
43:       assertEquals("Y&\")##Yl$:tv<4X", object0);
44:       assertNotNull(object0);
45:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
48:       
49:       Object object1 = abstractMap_SimpleEntry0.setValue("Y&\")##Yl$:tv<4X");
50:       assertEquals("!?*F\":G7", object1);
51:       assertNotNull(object1);
52:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
55:       assertFalse(object1.equals((Object)object0));
56:       
57:       Comparator<Map.Entry<String, Object>> comparator1 = Map.Entry.comparingByKey();
58:       assertSame(comparator1, comparator0);
59:       assertNotNull(comparator1);
60:       
61:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
62:       Comparator<Map.Entry<Object, String>> comparator3 = Map.Entry.comparingByValue();
63:       assertNotNull(comparator3);
64:       
65:       Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<String, Object>>>> comparator4 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<String, Object>>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator2);
66:       assertNotNull(comparator4);
67:       
68:       Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
69:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>> comparator6 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Integer>>) comparator5);
70:       assertNotNull(comparator6);
71:       
72:       Comparator<Map.Entry<String, Object>> comparator7 = Map.Entry.comparingByKey();
73:       assertSame(comparator7, comparator0);
74:       assertSame(comparator7, comparator1);
75:       assertNotNull(comparator7);
76:       
77:       AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Object>>((Object) null, abstractMap_SimpleEntry0, 0);
78:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
79:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
83:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
84:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
85:       
86:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
87:       assertNotNull(patriciaTrie0);
88:       
89:       Set<String> set0 = patriciaTrie0.keySet();
90:       assertNotNull(set0);
91:       assertTrue(set0.isEmpty());
92:       assertEquals(0, set0.size());
93:       assertFalse(set0.contains("!?*F\":G7"));
94:   }
95: }
RegularFileObject[/tmp/EvoSuite_26_1627593962758/org/apache/commons/collections4/trie/AbstractPatriciaTrie_26_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:02 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_26_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_26_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_26_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_26_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:02.830 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Y&\")##Yl$:tv<4X", "Y&\")##Yl$:tv<4X", 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Map.Entry<String, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
assertNotNull(abstractMap_SimpleEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Object object0 = abstractMap_SimpleEntry0.setValue("!?*F\":G7");
assertEquals("Y&\")##Yl$:tv<4X", object0);
assertNotNull(object0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Object object1 = abstractMap_SimpleEntry0.setValue("Y&\")##Yl$:tv<4X");
assertEquals("!?*F\":G7", object1);
assertNotNull(object1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(object1.equals((Object)object0));

Comparator<Map.Entry<String, Object>> comparator1 = Map.Entry.comparingByKey();
assertSame(comparator1, comparator0);
assertNotNull(comparator1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator3 = Map.Entry.comparingByValue();
assertNotNull(comparator3);

Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<String, Object>>>> comparator4 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<String, Object>>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator2);
assertNotNull(comparator4);

Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>> comparator6 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Integer>>) comparator5);
assertNotNull(comparator6);

Comparator<Map.Entry<String, Object>> comparator7 = Map.Entry.comparingByKey();
assertSame(comparator7, comparator0);
assertSame(comparator7, comparator1);
assertNotNull(comparator7);

AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Object>>((Object) null, abstractMap_SimpleEntry0, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Set<String> set0 = patriciaTrie0.keySet();
assertNotNull(set0);
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());
assertFalse(set0.contains("!?*F\":G7"));


[MASTER] 21:26:04.296 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_47_1627593964247/org/apache/commons/collections4/trie/AbstractPatriciaTrie_47_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_47_1627593964247/org/apache/commons/collections4/trie/AbstractPatriciaTrie_47_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:04.296 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:04.296 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:04.296 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.lang.Integer>>: 75
[MASTER] 21:26:04.296 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_47_1627593964247/org/apache/commons/collections4/trie/AbstractPatriciaTrie_47_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:04.296 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:04.297 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_47_1627593964247/org/apache/commons/collections4/trie/AbstractPatriciaTrie_47_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:04 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Collection;
14: import java.util.Comparator;
15: import java.util.Map;
16: import java.util.SortedMap;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_47_tmp__ESTest extends AbstractPatriciaTrie_47_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
33:       assertNotNull(patriciaTrie1);
34:       
35:       String string0 = "Y+<v.(I0n+";
36:       SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap("Y+<v.(I0n+");
37:       assertNotNull(sortedMap0);
38:       assertEquals(0, sortedMap0.size());
39:       assertTrue(sortedMap0.isEmpty());
40:       
41:       patriciaTrie1.clear();
42:       String string1 = "hN0;w$KS85T_'b";
43:       Integer integer0 = new Integer((-561));
44:       assertEquals((-561), (int)integer0);
45:       assertNotNull(integer0);
46:       
47:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("");
48:       assertNull(abstractPatriciaTrie_TrieEntry0);
49:       
50:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("hN0;w$KS85T_'b", integer0, (-561));
51:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
53:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
55:       
56:       Object object0 = abstractPatriciaTrie_TrieEntry1.setValue(patriciaTrie1);
57:       assertEquals((-561), object0);
58:       assertNotNull(object0);
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
60:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
62:       
63:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
64:       assertNull(abstractPatriciaTrie_TrieEntry2);
65:       
66:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
67:       assertNull(abstractPatriciaTrie_TrieEntry3);
68:       
69:       String string2 = "";
70:       Collection<Object> collection0 = patriciaTrie1.values();
71:       assertNotNull(collection0);
72:       assertFalse(collection0.contains((-561)));
73:       
74:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
75:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
76:       assertNotNull(comparator1);
77:       
78:       // Undeclared exception!
79:       try { 
80:         patriciaTrie1.get(abstractPatriciaTrie_TrieEntry1);
81:         fail("Expecting exception: ClassCastException");
82:       
83:       } catch(ClassCastException e) {
84:          //
85:          // no message in exception (getMessage() returned null)
86:          //
87:       }
88:   }
89: }
RegularFileObject[/tmp/EvoSuite_47_1627593964247/org/apache/commons/collections4/trie/AbstractPatriciaTrie_47_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:04 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_47_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_47_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_47_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_47_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:04.298 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

String string0 = "Y+<v.(I0n+";
SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap("Y+<v.(I0n+");
assertNotNull(sortedMap0);
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());

patriciaTrie1.clear();
String string1 = "hN0;w$KS85T_'b";
Integer integer0 = new Integer((-561));
assertEquals((-561), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("");
assertNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("hN0;w$KS85T_'b", integer0, (-561));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

Object object0 = abstractPatriciaTrie_TrieEntry1.setValue(patriciaTrie1);
assertEquals((-561), object0);
assertNotNull(object0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
assertNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
assertNull(abstractPatriciaTrie_TrieEntry3);

String string2 = "";
Collection<Object> collection0 = patriciaTrie1.values();
assertNotNull(collection0);
assertFalse(collection0.contains((-561)));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

patriciaTrie1.get(abstractPatriciaTrie_TrieEntry1);

[MASTER] 21:26:05.094 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_60_1627593965020/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_60_1627593965020/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:05.094 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:05.094 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:05.094 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.String>>>>: 74
[MASTER] 21:26:05.094 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>>>>: 100
[MASTER] 21:26:05.095 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Object>>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Object>>>>: 107
[MASTER] 21:26:05.095 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_60_1627593965020/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:05.095 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:05.095 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_60_1627593965020/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:05 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_60_tmp__ESTest extends AbstractPatriciaTrie_60_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, (Object) null, (-1181));
28:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
29:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
30:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
31:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
32:       
33:       Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>> comparator0 = Map.Entry.comparingByKey();
34:       assertNotNull(comparator0);
35:       
36:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
37:       assertEquals("Entry(key=null [-1181], value=null, parent=null, left=null [-1181], right=null, predecessor=null [-1181])", string0);
38:       assertNotNull(string0);
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
41:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
42:       
43:       Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>> comparator1 = Map.Entry.comparingByKey();
44:       assertNotNull(comparator1);
45:       
46:       Integer integer0 = new Integer((-1181));
47:       assertEquals((-1181), (int)integer0);
48:       assertNotNull(integer0);
49:       
50:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0, integer0, 2295);
51:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
54:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
58:       
59:       abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
63:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
69:       
70:       Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByKey();
71:       assertNotNull(comparator2);
72:       
73:       Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
74:       Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>>>> comparator4 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator3);
75:       assertNotNull(comparator4);
76:       
77:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
79:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
80:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
83:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
87:       
88:       abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0;
89:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
90:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
91:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
92:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
94:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
95:       assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
96:       assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
97:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
98:       
99:       Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
100:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>>> comparator6 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>>) comparator5);
101:       assertNotNull(comparator6);
102:       
103:       Comparator<Map.Entry<Object, String>> comparator7 = Map.Entry.comparingByValue();
104:       assertNotNull(comparator7);
105:       
106:       Comparator<Object> comparator8 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
107:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>>> comparator9 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>>) comparator8);
108:       assertNotNull(comparator9);
109:       
110:       abstractPatriciaTrie_TrieEntry1.bitIndex = (-997);
111:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
112:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
113:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
114:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
116:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
117:       
118:       abstractPatriciaTrie_TrieEntry0.value = (Object) "Entry(key=null [-1181], value=null, parent=null, left=null [-1181], right=null, predecessor=null [-1181])";
119:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
120:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
121:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
122:       
123:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
124:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
125:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
126:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
127:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
128:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
130:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
132:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
133:       
134:       Integer integer1 = new Integer((-997));
135:       assertEquals((-997), (int)integer1);
136:       assertNotNull(integer1);
137:       assertFalse(integer1.equals((Object)integer0));
138:       
139:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
140:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
141:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
142:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
143:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
144:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
145:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
146:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
148:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
149:       
150:       abstractPatriciaTrie_TrieEntry1.key = (Object) integer1;
151:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
152:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
153:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
154:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
155:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
156:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
157:       
158:       String string1 = abstractPatriciaTrie_TrieEntry0.toString();
159:       assertEquals("Entry(key=null [-1181], value=Entry(key=null [-1181], value=null, parent=null, left=null [-1181], right=null, predecessor=null [-1181]), parent=-997 [-997], left=null [-1181], right=-997 [-997], predecessor=-997 [-997])", string1);
160:       assertNotNull(string1);
161:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
162:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
163:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
164:       assertFalse(string1.equals((Object)string0));
165:       
166:       Comparator<Map.Entry<String, String>> comparator10 = Map.Entry.comparingByKey();
167:       assertSame(comparator10, comparator2);
168:       assertNotNull(comparator10);
169:       
170:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("Entry(key=null [-1181], value=Entry(key=null [-1181], value=null, parent=null, left=null [-1181], right=null, predecessor=null [-1181]), parent=-997 [-997], left=null [-1181], right=-997 [-997], predecessor=-997 [-997])");
171:       assertFalse(boolean0);
172:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
173:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
174:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
175:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
176:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
177:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
178:       assertFalse(integer0.equals((Object)integer1));
179:       
180:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
181:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
182:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
183:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
184:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
185:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
186:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
187:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
188:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
189:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
190:       
191:       String string2 = abstractPatriciaTrie_TrieEntry0.toString();
192:       assertEquals("Entry(key=null [-1181], value=Entry(key=null [-1181], value=null, parent=null, left=null [-1181], right=null, predecessor=null [-1181]), parent=-997 [-997], left=-997 [-997], right=-997 [-997], predecessor=-997 [-997])", string2);
193:       assertNotNull(string2);
194:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
195:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
196:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
197:       assertFalse(string2.equals((Object)string0));
198:       assertFalse(string2.equals((Object)string1));
199:       
200:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
201:       assertFalse(boolean1);
202:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
203:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
204:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
205:       assertTrue(boolean1 == boolean0);
206:       
207:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
208:       assertNotNull(patriciaTrie0);
209:       
210:       PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
211:       assertNotNull(patriciaTrie1);
212:       
213:       AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("Entry(key=null [-1181], value=Entry(key=null [-1181], value=null, parent=null, left=null [-1181], right=null, predecessor=null [-1181]), parent=-997 [-997], left=-997 [-997], right=-997 [-997], predecessor=-997 [-997])", "");
214:       assertNotNull(abstractMap_SimpleImmutableEntry0);
215:       
216:       AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
217:       assertNotNull(abstractMap_SimpleEntry0);
218:       
219:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>("", abstractMap_SimpleEntry0, 0);
220:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
221:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
222:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
223:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
224:       
225:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.parent;
226:       assertNull(abstractPatriciaTrie_TrieEntry3);
227:       
228:       // Undeclared exception!
229:       try { 
230:         patriciaTrie1.previousEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>) null);
231:         fail("Expecting exception: NullPointerException");
232:       
233:       } catch(NullPointerException e) {
234:          //
235:          // no message in exception (getMessage() returned null)
236:          //
237:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
238:       }
239:   }
240: }
RegularFileObject[/tmp/EvoSuite_60_1627593965020/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:05 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_60_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_60_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_60_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_60_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:05.099 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, (Object) null, (-1181));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertEquals("Entry(key=null [-1181], value=null, parent=null, left=null [-1181], right=null, predecessor=null [-1181])", string0);
assertNotNull(string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, Object>>> comparator1 = Map.Entry.comparingByKey();
assertNotNull(comparator1);

Integer integer0 = new Integer((-1181));
assertEquals((-1181), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0, integer0, 2295);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());

Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>>>> comparator4 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator3);
assertNotNull(comparator4);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());

abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());

Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>>> comparator6 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<String, Object>>>) comparator5);
assertNotNull(comparator6);

Comparator<Map.Entry<Object, String>> comparator7 = Map.Entry.comparingByValue();
assertNotNull(comparator7);

Comparator<Object> comparator8 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>>> comparator9 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>>) comparator8);
assertNotNull(comparator9);

abstractPatriciaTrie_TrieEntry1.bitIndex = (-997);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry0.value = (Object) "Entry(key=null [-1181], value=null, parent=null, left=null [-1181], right=null, predecessor=null [-1181])";
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Integer integer1 = new Integer((-997));
assertEquals((-997), (int)integer1);
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry1.key = (Object) integer1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

String string1 = abstractPatriciaTrie_TrieEntry0.toString();
assertEquals("Entry(key=null [-1181], value=Entry(key=null [-1181], value=null, parent=null, left=null [-1181], right=null, predecessor=null [-1181]), parent=-997 [-997], left=null [-1181], right=-997 [-997], predecessor=-997 [-997])", string1);
assertNotNull(string1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(string1.equals((Object)string0));

Comparator<Map.Entry<String, String>> comparator10 = Map.Entry.comparingByKey();
assertSame(comparator10, comparator2);
assertNotNull(comparator10);

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("Entry(key=null [-1181], value=Entry(key=null [-1181], value=null, parent=null, left=null [-1181], right=null, predecessor=null [-1181]), parent=-997 [-997], left=null [-1181], right=-997 [-997], predecessor=-997 [-997])");
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(integer0.equals((Object)integer1));

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());

String string2 = abstractPatriciaTrie_TrieEntry0.toString();
assertEquals("Entry(key=null [-1181], value=Entry(key=null [-1181], value=null, parent=null, left=null [-1181], right=null, predecessor=null [-1181]), parent=-997 [-997], left=-997 [-997], right=-997 [-997], predecessor=-997 [-997])", string2);
assertNotNull(string2);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(string2.equals((Object)string0));
assertFalse(string2.equals((Object)string1));

boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertFalse(boolean1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(boolean1 == boolean0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
assertNotNull(patriciaTrie1);

AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("Entry(key=null [-1181], value=Entry(key=null [-1181], value=null, parent=null, left=null [-1181], right=null, predecessor=null [-1181]), parent=-997 [-997], left=-997 [-997], right=-997 [-997], predecessor=-997 [-997])", "");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleEntry0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>("", abstractMap_SimpleEntry0, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.parent;
assertNull(abstractPatriciaTrie_TrieEntry3);

patriciaTrie1.previousEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>) null);

[MASTER] 21:26:06.029 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_75_1627593965971/org/apache/commons/collections4/trie/AbstractPatriciaTrie_75_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_75_1627593965971/org/apache/commons/collections4/trie/AbstractPatriciaTrie_75_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:06.029 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:06.029 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:06.029 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>>: 44
[MASTER] 21:26:06.029 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_75_1627593965971/org/apache/commons/collections4/trie/AbstractPatriciaTrie_75_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:06.030 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:06.033 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_75_1627593965971/org/apache/commons/collections4/trie/AbstractPatriciaTrie_75_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:05 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_75_tmp__ESTest extends AbstractPatriciaTrie_75_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "ROOT", 1837);
27:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
28:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
29:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
31:       
32:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", "ROOT", 694);
33:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
34:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
35:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
36:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
37:       
38:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
39:       abstractPatriciaTrie_TrieEntry1.key = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator";
40:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
41:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
43:       
44:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator0);
45:       assertNotNull(comparator1);
46:       
47:       Integer integer0 = new Integer(2006);
48:       assertEquals(2006, (int)integer0);
49:       assertNotNull(integer0);
50:       
51:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
52:       assertNotNull(abstractMap_SimpleImmutableEntry0);
53:       
54:       AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", abstractMap_SimpleImmutableEntry0, 1837);
55:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
56:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
57:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
59:       
60:       Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry2.key;
61:       assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", comparable0);
62:       assertNotNull(comparable0);
63:       
64:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(comparable0);
65:       assertFalse(boolean0);
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
67:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
70:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
72:       
73:       Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByKey();
74:       assertNotNull(comparator2);
75:       
76:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
77:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
83:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
86:       
87:       Object object0 = abstractPatriciaTrie_TrieEntry1.setValue((Object) null);
88:       assertEquals("ROOT", object0);
89:       assertNotNull(object0);
90:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
91:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
93:       assertFalse(object0.equals((Object)comparable0));
94:       
95:       abstractPatriciaTrie_TrieEntry0.value = (Object) "keyAnalyzer";
96:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
99:       
100:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
101:       assertEquals("Entry(key=keyAnalyzer [1837], value=keyAnalyzer, parent=null, left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator [694], right=null, predecessor=keyAnalyzer [1837])", string0);
102:       assertNotNull(string0);
103:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
106:       assertFalse(string0.equals((Object)object0));
107:       assertFalse(string0.equals((Object)comparable0));
108:       
109:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
110:       assertNotNull(patriciaTrie0);
111:       
112:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.ceilingEntry("ROOT");
113:       assertNull(abstractPatriciaTrie_TrieEntry3);
114:       
115:       boolean boolean1 = patriciaTrie0.replace("", "ROOT", "ROOT");
116:       assertFalse(boolean1);
117:       assertTrue(boolean1 == boolean0);
118:       
119:       String string1 = patriciaTrie0.put("ROOT", "Entry(key=keyAnalyzer [1837], value=keyAnalyzer, parent=null, left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator [694], right=null, predecessor=keyAnalyzer [1837])");
120:       assertNull(string1);
121:       
122:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.getNearestEntryForKey("Key cannot be null", 3);
123:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
124:       assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
125:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
126:       assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
127:   }
128: }
RegularFileObject[/tmp/EvoSuite_75_1627593965971/org/apache/commons/collections4/trie/AbstractPatriciaTrie_75_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:05 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_75_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_75_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_75_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_75_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:06.035 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "ROOT", 1837);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", "ROOT", 694);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry1.key = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator";
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator0);
assertNotNull(comparator1);

Integer integer0 = new Integer(2006);
assertEquals(2006, (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", abstractMap_SimpleImmutableEntry0, 1837);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry2.key;
assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", comparable0);
assertNotNull(comparable0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(comparable0);
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

Object object0 = abstractPatriciaTrie_TrieEntry1.setValue((Object) null);
assertEquals("ROOT", object0);
assertNotNull(object0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(object0.equals((Object)comparable0));

abstractPatriciaTrie_TrieEntry0.value = (Object) "keyAnalyzer";
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertEquals("Entry(key=keyAnalyzer [1837], value=keyAnalyzer, parent=null, left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator [694], right=null, predecessor=keyAnalyzer [1837])", string0);
assertNotNull(string0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(string0.equals((Object)object0));
assertFalse(string0.equals((Object)comparable0));

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.ceilingEntry("ROOT");
assertNull(abstractPatriciaTrie_TrieEntry3);

boolean boolean1 = patriciaTrie0.replace("", "ROOT", "ROOT");
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

String string1 = patriciaTrie0.put("ROOT", "Entry(key=keyAnalyzer [1837], value=keyAnalyzer, parent=null, left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator [694], right=null, predecessor=keyAnalyzer [1837])");
assertNull(string1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.getNearestEntryForKey("Key cannot be null", 3);
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());


[MASTER] 21:26:06.787 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_86_1627593966704/org/apache/commons/collections4/trie/AbstractPatriciaTrie_86_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_86_1627593966704/org/apache/commons/collections4/trie/AbstractPatriciaTrie_86_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:06.787 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:06.787 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:06.788 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>>: 44
[MASTER] 21:26:06.788 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_86_1627593966704/org/apache/commons/collections4/trie/AbstractPatriciaTrie_86_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:06.788 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:06.789 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_86_1627593966704/org/apache/commons/collections4/trie/AbstractPatriciaTrie_86_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:06 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_86_tmp__ESTest extends AbstractPatriciaTrie_86_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "ROOT", 1837);
27:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
29:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
30:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
31:       
32:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", "ROOT", 694);
33:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
34:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
35:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
36:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
37:       
38:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
39:       abstractPatriciaTrie_TrieEntry1.key = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator";
40:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
41:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
43:       
44:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator0);
45:       assertNotNull(comparator1);
46:       
47:       Integer integer0 = new Integer(2006);
48:       assertEquals(2006, (int)integer0);
49:       assertNotNull(integer0);
50:       
51:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
52:       assertNotNull(abstractMap_SimpleImmutableEntry0);
53:       
54:       AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", abstractMap_SimpleImmutableEntry0, 1837);
55:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
56:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
57:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
59:       
60:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = abstractPatriciaTrie_TrieEntry2.setValue(abstractMap_SimpleImmutableEntry0);
61:       assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
62:       assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
63:       assertNotNull(abstractMap_SimpleImmutableEntry1);
64:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
65:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
67:       
68:       Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry2.key;
69:       assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", comparable0);
70:       assertNotNull(comparable0);
71:       
72:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("ROOT", "keyAnalyzer", 694);
73:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
74:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
76:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
77:       
78:       String string0 = abstractPatriciaTrie_TrieEntry3.toString();
79:       assertEquals("Entry(key=ROOT [694], value=keyAnalyzer, parent=null, left=ROOT [694], right=null, predecessor=ROOT [694])", string0);
80:       assertNotNull(string0);
81:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
83:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
84:       assertFalse(string0.equals((Object)comparable0));
85:       
86:       boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isEmpty();
87:       assertFalse(boolean0);
88:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
90:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
91:       
92:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
93:       assertNotNull(patriciaTrie0);
94:       
95:       Object object0 = patriciaTrie0.get((Object) null);
96:       assertNull(object0);
97:       
98:       Object object1 = patriciaTrie0.put("keyAnalyzer", abstractPatriciaTrie_TrieEntry0);
99:       assertNull(object1);
100:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
102:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
103:       
104:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
105:       assertNull(abstractPatriciaTrie_TrieEntry4);
106:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
108:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
110:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
112:   }
113: }
RegularFileObject[/tmp/EvoSuite_86_1627593966704/org/apache/commons/collections4/trie/AbstractPatriciaTrie_86_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:06 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_86_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_86_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_86_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_86_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:06.791 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "ROOT", 1837);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", "ROOT", 694);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry1.key = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator";
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator0);
assertNotNull(comparator1);

Integer integer0 = new Integer(2006);
assertEquals(2006, (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", abstractMap_SimpleImmutableEntry0, 1837);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry1 = abstractPatriciaTrie_TrieEntry2.setValue(abstractMap_SimpleImmutableEntry0);
assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry2.key;
assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", comparable0);
assertNotNull(comparable0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("ROOT", "keyAnalyzer", 694);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

String string0 = abstractPatriciaTrie_TrieEntry3.toString();
assertEquals("Entry(key=ROOT [694], value=keyAnalyzer, parent=null, left=ROOT [694], right=null, predecessor=ROOT [694])", string0);
assertNotNull(string0);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(string0.equals((Object)comparable0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isEmpty();
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Object object0 = patriciaTrie0.get((Object) null);
assertNull(object0);

Object object1 = patriciaTrie0.put("keyAnalyzer", abstractPatriciaTrie_TrieEntry0);
assertNull(object1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
assertNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());


[MASTER] 21:26:07.268 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_96_1627593967209/org/apache/commons/collections4/trie/AbstractPatriciaTrie_96_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_96_1627593967209/org/apache/commons/collections4/trie/AbstractPatriciaTrie_96_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:07.268 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:07.268 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:07.271 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>>: 35
[MASTER] 21:26:07.271 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_96_1627593967209/org/apache/commons/collections4/trie/AbstractPatriciaTrie_96_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:07.271 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:07.272 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_96_1627593967209/org/apache/commons/collections4/trie/AbstractPatriciaTrie_96_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:07 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.function.BiFunction;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_96_tmp__ESTest extends AbstractPatriciaTrie_96_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "ROOT", 1837);
29:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       
34:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
35:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator0);
36:       assertNotNull(comparator1);
37:       
38:       Integer integer0 = new Integer(2006);
39:       assertEquals(2006, (int)integer0);
40:       assertNotNull(integer0);
41:       
42:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
43:       assertNotNull(abstractMap_SimpleImmutableEntry0);
44:       
45:       AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", abstractMap_SimpleImmutableEntry0, 1837);
46:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
47:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
48:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
50:       
51:       Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry1.key;
52:       assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", comparable0);
53:       assertNotNull(comparable0);
54:       
55:       Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByKey();
56:       assertNotNull(comparator2);
57:       
58:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
59:       assertNotNull(patriciaTrie0);
60:       
61:       Integer integer1 = patriciaTrie0.put("keyAnalyzer", integer0);
62:       assertNull(integer1);
63:       
64:       Integer integer2 = new Integer(2341);
65:       assertEquals(2341, (int)integer2);
66:       assertNotNull(integer2);
67:       assertFalse(integer2.equals((Object)integer0));
68:       
69:       Integer integer3 = new Integer((-1188));
70:       assertEquals((-1188), (int)integer3);
71:       assertNotNull(integer3);
72:       assertFalse(integer3.equals((Object)integer2));
73:       assertFalse(integer3.equals((Object)integer0));
74:       
75:       Integer integer4 = patriciaTrie0.put("M`PE8{_BzaIn79", integer3);
76:       assertNull(integer4);
77:       assertFalse(integer3.equals((Object)integer2));
78:       assertFalse(integer3.equals((Object)integer0));
79:       
80:       BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
81:       doReturn((Object) null).when(biFunction0).apply(any() , any());
82:       Integer integer5 = patriciaTrie0.computeIfPresent("keyAnalyzer", biFunction0);
83:       assertNull(integer5);
84:       
85:       String string0 = "";
86:       Integer integer6 = new Integer(2006);
87:       assertEquals(2006, (int)integer6);
88:       assertNotNull(integer6);
89:       assertFalse(integer6.equals((Object)integer3));
90:       assertTrue(integer6.equals((Object)integer0));
91:       assertFalse(integer6.equals((Object)integer2));
92:       
93:       Integer integer7 = patriciaTrie0.put("\n", integer6);
94:       assertNull(integer7);
95:       assertFalse(integer6.equals((Object)integer3));
96:       assertTrue(integer6.equals((Object)integer0));
97:       assertFalse(integer6.equals((Object)integer2));
98:       
99:       Integer integer8 = new Integer(694);
100:       assertEquals(694, (int)integer8);
101:       assertNotNull(integer8);
102:       assertFalse(integer8.equals((Object)integer3));
103:       assertFalse(integer8.equals((Object)integer2));
104:       assertFalse(integer8.equals((Object)integer0));
105:       assertFalse(integer8.equals((Object)integer6));
106:       
107:       // Undeclared exception!
108:       try { 
109:         patriciaTrie0.remove((Object) integer8, (Object) abstractMap_SimpleImmutableEntry0);
110:         fail("Expecting exception: ClassCastException");
111:       
112:       } catch(ClassCastException e) {
113:          //
114:          // no message in exception (getMessage() returned null)
115:          //
116:       }
117:   }
118: }
RegularFileObject[/tmp/EvoSuite_96_1627593967209/org/apache/commons/collections4/trie/AbstractPatriciaTrie_96_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:07 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_96_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_96_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_96_tmp__ESTest_scaffolding.class.getClassLoader()));
121:     mock(Class.forName("java.util.function.BiFunction", false, AbstractPatriciaTrie_96_tmp__ESTest_scaffolding.class.getClassLoader()));
122:   }
123: 
124:   private static void resetClasses() {
125:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_96_tmp__ESTest_scaffolding.class.getClassLoader()); 
126: 
127:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
130:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
141:       "org.apache.commons.collections4.trie.PatriciaTrie",
142:       "org.apache.commons.collections4.trie.KeyAnalyzer",
143:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
150:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
151:     );
152:   }
153: }

[MASTER] 21:26:07.273 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "ROOT", 1837);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator0);
assertNotNull(comparator1);

Integer integer0 = new Integer(2006);
assertEquals(2006, (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", abstractMap_SimpleImmutableEntry0, 1837);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry1.key;
assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", comparable0);
assertNotNull(comparable0);

Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer1 = patriciaTrie0.put("keyAnalyzer", integer0);
assertNull(integer1);

Integer integer2 = new Integer(2341);
assertEquals(2341, (int)integer2);
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer0));

Integer integer3 = new Integer((-1188));
assertEquals((-1188), (int)integer3);
assertNotNull(integer3);
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer0));

Integer integer4 = patriciaTrie0.put("M`PE8{_BzaIn79", integer3);
assertNull(integer4);
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer0));

BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
doReturn((Object) null).when(biFunction0).apply(any() , any());
Integer integer5 = patriciaTrie0.computeIfPresent("keyAnalyzer", biFunction0);
assertNull(integer5);

String string0 = "";
Integer integer6 = new Integer(2006);
assertEquals(2006, (int)integer6);
assertNotNull(integer6);
assertFalse(integer6.equals((Object)integer3));
assertTrue(integer6.equals((Object)integer0));
assertFalse(integer6.equals((Object)integer2));

Integer integer7 = patriciaTrie0.put("\n", integer6);
assertNull(integer7);
assertFalse(integer6.equals((Object)integer3));
assertTrue(integer6.equals((Object)integer0));
assertFalse(integer6.equals((Object)integer2));

Integer integer8 = new Integer(694);
assertEquals(694, (int)integer8);
assertNotNull(integer8);
assertFalse(integer8.equals((Object)integer3));
assertFalse(integer8.equals((Object)integer2));
assertFalse(integer8.equals((Object)integer0));
assertFalse(integer8.equals((Object)integer6));

patriciaTrie0.remove((Object) integer8, (Object) abstractMap_SimpleImmutableEntry0);

[MASTER] 21:26:07.427 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_98_1627593967345/org/apache/commons/collections4/trie/AbstractPatriciaTrie_98_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_98_1627593967345/org/apache/commons/collections4/trie/AbstractPatriciaTrie_98_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:07.427 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:07.427 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:07.427 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>>: 33
[MASTER] 21:26:07.427 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_98_1627593967345/org/apache/commons/collections4/trie/AbstractPatriciaTrie_98_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:07.428 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:07.432 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_98_1627593967345/org/apache/commons/collections4/trie/AbstractPatriciaTrie_98_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:07 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_98_tmp__ESTest extends AbstractPatriciaTrie_98_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "Rm.}@", (-1));
27:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
29:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
30:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
31:       
32:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
33:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator0);
34:       assertNotNull(comparator1);
35:       
36:       Integer integer0 = new Integer(1837);
37:       assertEquals(1837, (int)integer0);
38:       assertNotNull(integer0);
39:       
40:       Integer integer1 = new Integer((-1597));
41:       assertEquals((-1597), (int)integer1);
42:       assertNotNull(integer1);
43:       assertFalse(integer1.equals((Object)integer0));
44:       
45:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer1, (String) null);
46:       assertNotNull(abstractMap_SimpleImmutableEntry0);
47:       assertFalse(integer1.equals((Object)integer0));
48:       
49:       AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>((Comparable<String>) null, abstractMap_SimpleImmutableEntry0, 2563);
50:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
51:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
53:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
54:       assertFalse(integer1.equals((Object)integer0));
55:       
56:       Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry1.key;
57:       assertNull(comparable0);
58:       
59:       Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByKey();
60:       assertNotNull(comparator2);
61:       
62:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
63:       assertEquals("RootEntry(key= [-1], value=Rm.}@, parent=null, left=ROOT, right=null, predecessor=ROOT)", string0);
64:       assertNotNull(string0);
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       
69:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
70:       assertNotNull(patriciaTrie0);
71:       
72:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
73:       assertNull(abstractPatriciaTrie_TrieEntry2);
74:       
75:       Integer integer2 = new Integer(3649);
76:       assertEquals(3649, (int)integer2);
77:       assertNotNull(integer2);
78:       assertFalse(integer2.equals((Object)integer0));
79:       assertFalse(integer2.equals((Object)integer1));
80:       
81:       Integer integer3 = new Integer((-1));
82:       assertEquals((-1), (int)integer3);
83:       assertNotNull(integer3);
84:       assertFalse(integer3.equals((Object)integer0));
85:       assertFalse(integer3.equals((Object)integer2));
86:       assertFalse(integer3.equals((Object)integer1));
87:       
88:       AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer3, integer1, 2563);
89:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
90:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
92:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
93:       assertFalse(integer1.equals((Object)integer0));
94:       assertFalse(integer1.equals((Object)integer2));
95:       assertFalse(integer1.equals((Object)integer3));
96:       assertFalse(integer3.equals((Object)integer0));
97:       assertFalse(integer3.equals((Object)integer2));
98:       assertFalse(integer3.equals((Object)integer1));
99:       
100:       String string1 = abstractPatriciaTrie_TrieEntry3.toString();
101:       assertEquals("Entry(key=-1 [2563], value=-1597, parent=null, left=-1 [2563], right=null, predecessor=-1 [2563])", string1);
102:       assertNotNull(string1);
103:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
105:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
106:       assertFalse(integer1.equals((Object)integer0));
107:       assertFalse(integer1.equals((Object)integer2));
108:       assertFalse(integer1.equals((Object)integer3));
109:       assertFalse(integer3.equals((Object)integer0));
110:       assertFalse(integer3.equals((Object)integer2));
111:       assertFalse(integer3.equals((Object)integer1));
112:       assertFalse(string1.equals((Object)string0));
113:   }
114: }
RegularFileObject[/tmp/EvoSuite_98_1627593967345/org/apache/commons/collections4/trie/AbstractPatriciaTrie_98_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:07 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_98_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_98_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_98_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_98_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:07.434 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "Rm.}@", (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator0);
assertNotNull(comparator1);

Integer integer0 = new Integer(1837);
assertEquals(1837, (int)integer0);
assertNotNull(integer0);

Integer integer1 = new Integer((-1597));
assertEquals((-1597), (int)integer1);
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer1, (String) null);
assertNotNull(abstractMap_SimpleImmutableEntry0);
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>((Comparable<String>) null, abstractMap_SimpleImmutableEntry0, 2563);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(integer1.equals((Object)integer0));

Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry1.key;
assertNull(comparable0);

Comparator<Map.Entry<String, String>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertEquals("RootEntry(key= [-1], value=Rm.}@, parent=null, left=ROOT, right=null, predecessor=ROOT)", string0);
assertNotNull(string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
assertNull(abstractPatriciaTrie_TrieEntry2);

Integer integer2 = new Integer(3649);
assertEquals(3649, (int)integer2);
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

Integer integer3 = new Integer((-1));
assertEquals((-1), (int)integer3);
assertNotNull(integer3);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer3, integer1, 2563);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer3));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));

String string1 = abstractPatriciaTrie_TrieEntry3.toString();
assertEquals("Entry(key=-1 [2563], value=-1597, parent=null, left=-1 [2563], right=null, predecessor=-1 [2563])", string1);
assertNotNull(string1);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer3));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));
assertFalse(string1.equals((Object)string0));


[MASTER] 21:26:08.257 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_113_1627593968205/org/apache/commons/collections4/trie/AbstractPatriciaTrie_113_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_113_1627593968205/org/apache/commons/collections4/trie/AbstractPatriciaTrie_113_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:08.258 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:08.258 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:08.259 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>>: 33
[MASTER] 21:26:08.259 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.lang.String>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.lang.String>,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>>,java.lang.Integer>>: 50
[MASTER] 21:26:08.260 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_113_1627593968205/org/apache/commons/collections4/trie/AbstractPatriciaTrie_113_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:08.260 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:08.260 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_113_1627593968205/org/apache/commons/collections4/trie/AbstractPatriciaTrie_113_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:08 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_113_tmp__ESTest extends AbstractPatriciaTrie_113_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "ROOT", 1837);
27:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
29:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
30:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
31:       
32:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
33:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator0);
34:       assertNotNull(comparator1);
35:       
36:       Integer integer0 = new Integer(2006);
37:       assertEquals(2006, (int)integer0);
38:       assertNotNull(integer0);
39:       
40:       AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
41:       assertNotNull(abstractMap_SimpleImmutableEntry0);
42:       
43:       AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", abstractMap_SimpleImmutableEntry0, 1837);
44:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
45:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
46:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
48:       
49:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
50:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleEntry<String, Object>>, Integer>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleEntry<String, Object>>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleEntry<String, Object>>>) comparator2);
51:       assertNotNull(comparator3);
52:       
53:       Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry1.key;
54:       assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", comparable0);
55:       assertNotNull(comparable0);
56:       
57:       Comparator<Map.Entry<String, String>> comparator4 = Map.Entry.comparingByKey();
58:       assertNotNull(comparator4);
59:       
60:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
61:       assertNotNull(patriciaTrie0);
62:       
63:       Integer integer1 = patriciaTrie0.put("keyAnalyzer", integer0);
64:       assertNull(integer1);
65:       
66:       Integer integer2 = new Integer(2341);
67:       assertEquals(2341, (int)integer2);
68:       assertNotNull(integer2);
69:       assertFalse(integer2.equals((Object)integer0));
70:       
71:       Integer integer3 = new Integer((-1));
72:       assertEquals((-1), (int)integer3);
73:       assertNotNull(integer3);
74:       assertFalse(integer3.equals((Object)integer0));
75:       assertFalse(integer3.equals((Object)integer2));
76:       
77:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
78:       assertNotNull(patriciaTrie1);
79:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
80:       
81:       Integer integer4 = patriciaTrie1.put("", integer2);
82:       assertNotSame(patriciaTrie0, patriciaTrie1);
83:       assertNotSame(patriciaTrie1, patriciaTrie0);
84:       assertNull(integer4);
85:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
86:       assertFalse(integer2.equals((Object)integer3));
87:       assertFalse(integer2.equals((Object)integer0));
88:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
89:       
90:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry("I[Nf/'e;L~%V`");
91:       assertNotSame(patriciaTrie0, patriciaTrie1);
92:       assertNull(abstractPatriciaTrie_TrieEntry2);
93:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
94:       
95:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie0);
96:       assertNotNull(patriciaTrie2);
97:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
98:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
99:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
100:       
101:       patriciaTrie1.incrementSize();
102:       assertNotSame(patriciaTrie0, patriciaTrie1);
103:       assertNotSame(patriciaTrie0, patriciaTrie2);
104:       assertNotSame(patriciaTrie1, patriciaTrie0);
105:       assertNotSame(patriciaTrie1, patriciaTrie2);
106:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
107:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
108:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
109:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
110:   }
111: }
RegularFileObject[/tmp/EvoSuite_113_1627593968205/org/apache/commons/collections4/trie/AbstractPatriciaTrie_113_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:08 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_113_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_113_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_113_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_113_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:08.262 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "ROOT", 1837);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator0);
assertNotNull(comparator1);

Integer integer0 = new Integer(2006);
assertEquals(2006, (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(integer0, "");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, AbstractMap.SimpleImmutableEntry<Integer, String>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", abstractMap_SimpleImmutableEntry0, 1837);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleEntry<String, Object>>, Integer>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleEntry<String, Object>>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleEntry<String, Object>>>) comparator2);
assertNotNull(comparator3);

Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry1.key;
assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", comparable0);
assertNotNull(comparable0);

Comparator<Map.Entry<String, String>> comparator4 = Map.Entry.comparingByKey();
assertNotNull(comparator4);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer1 = patriciaTrie0.put("keyAnalyzer", integer0);
assertNull(integer1);

Integer integer2 = new Integer(2341);
assertEquals(2341, (int)integer2);
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer0));

Integer integer3 = new Integer((-1));
assertEquals((-1), (int)integer3);
assertNotNull(integer3);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

Integer integer4 = patriciaTrie1.put("", integer2);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNull(integer4);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(integer2.equals((Object)integer3));
assertFalse(integer2.equals((Object)integer0));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry("I[Nf/'e;L~%V`");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie0);
assertNotNull(patriciaTrie2);
assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));

patriciaTrie1.incrementSize();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie0, patriciaTrie2);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));


[MASTER] 21:26:09.106 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_130_1627593969058/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_130_1627593969058/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:09.106 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:09.106 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:09.107 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>>: 86
[MASTER] 21:26:09.107 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_130_1627593969058/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:09.107 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:09.109 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_130_1627593969058/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:09 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_130_tmp__ESTest extends AbstractPatriciaTrie_130_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       String string0 = patriciaTrie0.previousKey("~Y\"Hl8VFu7?VF:Cu");
30:       assertNull(string0);
31:       
32:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("}W03R4G", "~Y\"Hl8VFu7?VF:Cu", 10);
33:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
35:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
36:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
37:       
38:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
39:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
40:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
41:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
43:       
44:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry1);
45:       assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
46:       assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
47:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
55:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
57:       
58:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("~Y\"Hl8VFu7?VF:Cu", "~Y\"Hl8VFu7?VF:Cu");
59:       assertNotNull(abstractMap_SimpleEntry0);
60:       
61:       abstractPatriciaTrie_TrieEntry0.key = "}W03R4G";
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
64:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
65:       
66:       String string1 = abstractMap_SimpleEntry0.setValue("~Y\"Hl8VFu7?VF:Cu");
67:       assertEquals("~Y\"Hl8VFu7?VF:Cu", string1);
68:       assertNotNull(string1);
69:       
70:       abstractPatriciaTrie_TrieEntry0.value = null;
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
73:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
74:       
75:       Integer integer0 = new Integer(899);
76:       assertEquals(899, (int)integer0);
77:       assertNotNull(integer0);
78:       
79:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Object>(abstractMap_SimpleEntry0, integer0, 62);
80:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
81:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
83:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
84:       
85:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
86:       Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
87:       assertNotNull(comparator1);
88:       
89:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Object>(abstractMap_SimpleEntry0, "}W03R4G", 62);
90:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
91:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
92:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
94:       
95:       abstractPatriciaTrie_TrieEntry3.predecessor = abstractPatriciaTrie_TrieEntry4;
96:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
98:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
100:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
102:       assertTrue(abstractPatriciaTrie_TrieEntry3.predecessor.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isInternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isEmpty());
105:       
106:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
107:       Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
108:       Comparator<Map.Entry<Integer, Object>> comparator4 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator3);
109:       assertNotNull(comparator4);
110:       
111:       Comparator<Map.Entry<String, Object>> comparator5 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
112:       assertNotNull(comparator5);
113:       assertFalse(comparator5.equals((Object)comparator1));
114:       
115:       String string2 = abstractPatriciaTrie_TrieEntry3.toString();
116:       assertEquals("Entry(key=~Y\"Hl8VFu7?VF:Cu=~Y\"Hl8VFu7?VF:Cu [62], value=899, parent=null, left=~Y\"Hl8VFu7?VF:Cu=~Y\"Hl8VFu7?VF:Cu [62], right=null, predecessor=~Y\"Hl8VFu7?VF:Cu=~Y\"Hl8VFu7?VF:Cu [62])", string2);
117:       assertNotNull(string2);
118:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
120:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
121:       assertFalse(string2.equals((Object)string1));
122:       
123:       boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
124:       assertFalse(boolean0);
125:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
126:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
127:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
128:       
129:       boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isExternalNode();
130:       assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
131:       assertTrue(boolean1);
132:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
133:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
134:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
135:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
136:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
137:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
138:       assertFalse(boolean1 == boolean0);
139:       
140:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
141:       assertNotNull(patriciaTrie1);
142:       
143:       Integer integer1 = new Integer((-1));
144:       assertEquals((-1), (int)integer1);
145:       assertNotNull(integer1);
146:       assertFalse(integer1.equals((Object)integer0));
147:       
148:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer1, 13);
149:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
150:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
151:       assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
152:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
153:       assertFalse(integer1.equals((Object)integer0));
154:       
155:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.followRight(abstractPatriciaTrie_TrieEntry5);
156:       assertNull(abstractPatriciaTrie_TrieEntry6);
157:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
158:       assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
159:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
160:       assertFalse(integer1.equals((Object)integer0));
161:       
162:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
163:       assertNotNull(patriciaTrie2);
164:       
165:       Integer integer2 = new Integer(13);
166:       assertEquals(13, (int)integer2);
167:       assertNotNull(integer2);
168:       assertFalse(integer2.equals((Object)integer0));
169:       assertFalse(integer2.equals((Object)integer1));
170:       
171:       Object object0 = patriciaTrie2.put("ROOT", integer2);
172:       assertNull(object0);
173:       assertFalse(integer2.equals((Object)integer0));
174:       assertFalse(integer2.equals((Object)integer1));
175:       
176:       Comparator<? super String> comparator6 = patriciaTrie2.comparator();
177:       assertNotNull(comparator6);
178:   }
179: }
RegularFileObject[/tmp/EvoSuite_130_1627593969058/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:09 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_130_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_130_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_130_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_130_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:09.111 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.previousKey("~Y\"Hl8VFu7?VF:Cu");
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("}W03R4G", "~Y\"Hl8VFu7?VF:Cu", 10);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry1);
assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("~Y\"Hl8VFu7?VF:Cu", "~Y\"Hl8VFu7?VF:Cu");
assertNotNull(abstractMap_SimpleEntry0);

abstractPatriciaTrie_TrieEntry0.key = "}W03R4G";
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

String string1 = abstractMap_SimpleEntry0.setValue("~Y\"Hl8VFu7?VF:Cu");
assertEquals("~Y\"Hl8VFu7?VF:Cu", string1);
assertNotNull(string1);

abstractPatriciaTrie_TrieEntry0.value = null;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Integer integer0 = new Integer(899);
assertEquals(899, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Object>(abstractMap_SimpleEntry0, integer0, 62);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Object>(abstractMap_SimpleEntry0, "}W03R4G", 62);
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());

abstractPatriciaTrie_TrieEntry3.predecessor = abstractPatriciaTrie_TrieEntry4;
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.predecessor.isEmpty());

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Object>> comparator4 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator3);
assertNotNull(comparator4);

Comparator<Map.Entry<String, Object>> comparator5 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
assertNotNull(comparator5);
assertFalse(comparator5.equals((Object)comparator1));

String string2 = abstractPatriciaTrie_TrieEntry3.toString();
assertEquals("Entry(key=~Y\"Hl8VFu7?VF:Cu=~Y\"Hl8VFu7?VF:Cu [62], value=899, parent=null, left=~Y\"Hl8VFu7?VF:Cu=~Y\"Hl8VFu7?VF:Cu [62], right=null, predecessor=~Y\"Hl8VFu7?VF:Cu=~Y\"Hl8VFu7?VF:Cu [62])", string2);
assertNotNull(string2);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(string2.equals((Object)string1));

boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isExternalNode();
assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
assertTrue(boolean1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(boolean1 == boolean0);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Integer integer1 = new Integer((-1));
assertEquals((-1), (int)integer1);
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer1, 13);
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.followRight(abstractPatriciaTrie_TrieEntry5);
assertNull(abstractPatriciaTrie_TrieEntry6);
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(integer1.equals((Object)integer0));

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
assertNotNull(patriciaTrie2);

Integer integer2 = new Integer(13);
assertEquals(13, (int)integer2);
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

Object object0 = patriciaTrie2.put("ROOT", integer2);
assertNull(object0);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

Comparator<? super String> comparator6 = patriciaTrie2.comparator();
assertNotNull(comparator6);


[MASTER] 21:26:09.157 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_131_1627593969112/org/apache/commons/collections4/trie/AbstractPatriciaTrie_131_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_131_1627593969112/org/apache/commons/collections4/trie/AbstractPatriciaTrie_131_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:09.162 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:09.162 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:09.163 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Integer>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Integer>>>: 45
[MASTER] 21:26:09.163 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_131_1627593969112/org/apache/commons/collections4/trie/AbstractPatriciaTrie_131_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:09.163 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:09.163 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_131_1627593969112/org/apache/commons/collections4/trie/AbstractPatriciaTrie_131_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:09 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_131_tmp__ESTest extends AbstractPatriciaTrie_131_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(",m<R8RMXYj[XV?o9?P&", ",m<R8RMXYj[XV?o9?P&");
30:       assertNotNull(abstractMap_SimpleImmutableEntry0);
31:       
32:       Comparator<Map.Entry<Comparable<Object>, Integer>> comparator0 = Map.Entry.comparingByKey();
33:       assertNotNull(comparator0);
34:       
35:       AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
36:       assertNotNull(abstractMap_SimpleEntry0);
37:       
38:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
39:       Comparator<Map.Entry<String, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
40:       assertNotNull(comparator2);
41:       
42:       Comparator<Map.Entry<Comparable<Object>, Comparable<Comparable<Comparable>>>> comparator3 = Map.Entry.comparingByKey();
43:       assertNotNull(comparator3);
44:       
45:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> comparator4 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>>) comparator1);
46:       assertNotNull(comparator4);
47:       
48:       AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = patriciaTrie0.put(",m<R8RMXYj[XV?o9?P&", abstractMap_SimpleEntry0);
49:       assertNull(abstractMap_SimpleEntry1);
50:       
51:       AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, String>("", "");
52:       assertNotNull(abstractMap_SimpleEntry2);
53:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
54:       
55:       String string0 = abstractMap_SimpleEntry2.setValue("");
56:       assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
57:       assertEquals("", string0);
58:       assertNotNull(string0);
59:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
60:       
61:       String string1 = patriciaTrie0.firstKey();
62:       assertEquals(",m<R8RMXYj[XV?o9?P&", string1);
63:       assertNotNull(string1);
64:       assertFalse(string1.equals((Object)string0));
65:       
66:       AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry3 = patriciaTrie0.put("", abstractMap_SimpleEntry2);
67:       assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
68:       assertNull(abstractMap_SimpleEntry3);
69:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
70:       
71:       Comparator<? super String> comparator5 = patriciaTrie0.comparator();
72:       assertNotNull(comparator5);
73:       
74:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
75:       assertNotNull(patriciaTrie1);
76:       
77:       AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie1.remove((Object) "");
78:       assertNull(abstractMap_SimpleImmutableEntry1);
79:       
80:       Integer integer0 = new Integer(4102);
81:       assertEquals(4102, (int)integer0);
82:       assertNotNull(integer0);
83:       
84:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer0);
85:       assertNotNull(abstractMap_SimpleImmutableEntry2);
86:       
87:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>(abstractMap_SimpleImmutableEntry2, "qX/JbfcCTAp9/[", 144);
88:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
89:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
90:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
92:       
93:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
94:       assertTrue(boolean0);
95:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
96:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
98:   }
99: }
RegularFileObject[/tmp/EvoSuite_131_1627593969112/org/apache/commons/collections4/trie/AbstractPatriciaTrie_131_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:09 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_131_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_131_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_131_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_131_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:09.165 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
assertNotNull(patriciaTrie0);

AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(",m<R8RMXYj[XV?o9?P&", ",m<R8RMXYj[XV?o9?P&");
assertNotNull(abstractMap_SimpleImmutableEntry0);

Comparator<Map.Entry<Comparable<Object>, Integer>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

Comparator<Map.Entry<Comparable<Object>, Comparable<Comparable<Comparable>>>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> comparator4 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>>) comparator1);
assertNotNull(comparator4);

AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = patriciaTrie0.put(",m<R8RMXYj[XV?o9?P&", abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry1);

AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, String>("", "");
assertNotNull(abstractMap_SimpleEntry2);
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));

String string0 = abstractMap_SimpleEntry2.setValue("");
assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
assertEquals("", string0);
assertNotNull(string0);
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));

String string1 = patriciaTrie0.firstKey();
assertEquals(",m<R8RMXYj[XV?o9?P&", string1);
assertNotNull(string1);
assertFalse(string1.equals((Object)string0));

AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry3 = patriciaTrie0.put("", abstractMap_SimpleEntry2);
assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry3);
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));

Comparator<? super String> comparator5 = patriciaTrie0.comparator();
assertNotNull(comparator5);

PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
assertNotNull(patriciaTrie1);

AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie1.remove((Object) "");
assertNull(abstractMap_SimpleImmutableEntry1);

Integer integer0 = new Integer(4102);
assertEquals(4102, (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer0);
assertNotNull(abstractMap_SimpleImmutableEntry2);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>(abstractMap_SimpleImmutableEntry2, "qX/JbfcCTAp9/[", 144);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
assertTrue(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());


[MASTER] 21:26:09.436 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_136_1627593969397/org/apache/commons/collections4/trie/AbstractPatriciaTrie_136_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_136_1627593969397/org/apache/commons/collections4/trie/AbstractPatriciaTrie_136_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:09.436 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:09.436 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:09.436 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.String,java.util.AbstractMap.SimpleEntry>>,java.lang.Integer>>: 61
[MASTER] 21:26:09.436 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_136_1627593969397/org/apache/commons/collections4/trie/AbstractPatriciaTrie_136_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:09.436 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:09.436 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_136_1627593969397/org/apache/commons/collections4/trie/AbstractPatriciaTrie_136_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:09 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_136_tmp__ESTest extends AbstractPatriciaTrie_136_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       String string0 = null;
32:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, "org.apache.commons.collections4.trie.AbstractBitwiseTrie", 0);
33:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
34:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
35:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
36:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
37:       
38:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
39:       assertNull(abstractPatriciaTrie_TrieEntry1);
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       
44:       Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
45:       assertEquals("org.apache.commons.collections4.trie.AbstractBitwiseTrie", object0);
46:       assertNotNull(object0);
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       
51:       Object object1 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", (Object) null);
52:       assertNull(object1);
53:       
54:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.subtree((String) null, 0, 0);
55:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
56:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
58:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
59:       
60:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
61:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
62:       assertNotNull(comparator1);
63:       
64:       patriciaTrie0.incrementSize();
65:       Object object2 = patriciaTrie0.selectValue("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
66:       assertNull(object2);
67:       
68:       Integer integer0 = new Integer(1307);
69:       assertEquals(1307, (int)integer0);
70:       assertNotNull(integer0);
71:       
72:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(integer0);
73:       assertFalse(boolean0);
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
76:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
77:       
78:       abstractPatriciaTrie_TrieEntry0.predecessor = null;
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
82:       
83:       abstractPatriciaTrie_TrieEntry0.right = null;
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
86:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
87:       
88:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.right;
89:       assertNull(abstractPatriciaTrie_TrieEntry3);
90:       
91:       // Undeclared exception!
92:       try { 
93:         patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, 0);
94:         fail("Expecting exception: NullPointerException");
95:       
96:       } catch(NullPointerException e) {
97:          //
98:          // no message in exception (getMessage() returned null)
99:          //
100:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
101:       }
102:   }
103: }
RegularFileObject[/tmp/EvoSuite_136_1627593969397/org/apache/commons/collections4/trie/AbstractPatriciaTrie_136_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:09 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_136_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_136_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_136_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_136_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:09.441 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

String string0 = null;
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, "org.apache.commons.collections4.trie.AbstractBitwiseTrie", 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
assertEquals("org.apache.commons.collections4.trie.AbstractBitwiseTrie", object0);
assertNotNull(object0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Object object1 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", (Object) null);
assertNull(object1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.subtree((String) null, 0, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

patriciaTrie0.incrementSize();
Object object2 = patriciaTrie0.selectValue("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
assertNull(object2);

Integer integer0 = new Integer(1307);
assertEquals(1307, (int)integer0);
assertNotNull(integer0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(integer0);
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

abstractPatriciaTrie_TrieEntry0.predecessor = null;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

abstractPatriciaTrie_TrieEntry0.right = null;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.right;
assertNull(abstractPatriciaTrie_TrieEntry3);

patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, 0);

[MASTER] 21:26:09.944 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_145_1627593969887/org/apache/commons/collections4/trie/AbstractPatriciaTrie_145_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_145_1627593969887/org/apache/commons/collections4/trie/AbstractPatriciaTrie_145_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:09.945 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:09.945 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:09.946 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>>: 37
[MASTER] 21:26:09.946 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Comparable<java.lang.Object>,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Comparable<java.lang.Object>,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>,java.lang.Integer>>: 51
[MASTER] 21:26:09.946 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 66
[MASTER] 21:26:09.946 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_145_1627593969887/org/apache/commons/collections4/trie/AbstractPatriciaTrie_145_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:09.946 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:09.947 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_145_1627593969887/org/apache/commons/collections4/trie/AbstractPatriciaTrie_145_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:09 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_145_tmp__ESTest extends AbstractPatriciaTrie_145_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, "=");
30:       assertNotNull(abstractMap_SimpleEntry0);
31:       
32:       String string0 = abstractMap_SimpleEntry0.setValue("4Z0H`NHD");
33:       assertEquals("=", string0);
34:       assertNotNull(string0);
35:       
36:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
37:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
38:       assertNotNull(comparator1);
39:       
40:       AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, String>>((Object) null, abstractMap_SimpleEntry0, (-1));
41:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       
46:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry0.value;
47:       assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
48:       assertNotNull(abstractMap_SimpleEntry1);
49:       
50:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
51:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Comparable<Object>, AbstractMap.SimpleEntry<Object, String>>, Integer>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Comparable<Object>, AbstractMap.SimpleEntry<Object, String>>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Comparable<Object>, AbstractMap.SimpleEntry<Object, String>>>) comparator2);
52:       assertNotNull(comparator3);
53:       
54:       abstractPatriciaTrie_TrieEntry0.key = (Object) "4Z0H`NHD";
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
58:       
59:       Comparator<Map.Entry<Object, String>> comparator4 = Map.Entry.comparingByValue();
60:       assertNotNull(comparator4);
61:       
62:       Comparator<Map.Entry<Comparable<AbstractMap.SimpleEntry<Object, String>>, String>> comparator5 = Map.Entry.comparingByValue();
63:       assertNotNull(comparator5);
64:       
65:       Comparator<Integer> comparator6 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
66:       Comparator<Map.Entry<Integer, Integer>> comparator7 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator6);
67:       assertNotNull(comparator7);
68:       
69:       String string1 = abstractMap_SimpleEntry0.setValue("");
70:       assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
71:       assertEquals("4Z0H`NHD", string1);
72:       assertNotNull(string1);
73:       assertFalse(string1.equals((Object)string0));
74:       
75:       Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Object, String>, String>>> comparator8 = Map.Entry.comparingByKey();
76:       assertNotNull(comparator8);
77:       
78:       String string2 = abstractMap_SimpleEntry1.setValue("");
79:       assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
80:       assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
81:       assertEquals("", string2);
82:       assertNotNull(string2);
83:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
86:       assertFalse(string2.equals((Object)string1));
87:       assertFalse(string2.equals((Object)string0));
88:       
89:       Object object0 = patriciaTrie0.put("", abstractMap_SimpleEntry1);
90:       assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
91:       assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
92:       assertNull(object0);
93:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
95:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
96:       
97:       Object object1 = patriciaTrie0.put("", "");
98:       assertNotNull(object1);
99:       
100:       Object object2 = patriciaTrie0.get("");
101:       assertEquals("", object2);
102:       assertNotNull(object2);
103:       assertTrue(object2.equals((Object)string2));
104:       assertFalse(object2.equals((Object)string0));
105:       assertFalse(object2.equals((Object)string1));
106:       
107:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.getNearestEntryForKey("Ci)Pm@Xu1<%E/B<", 1610);
108:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
109:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
110:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
112:       
113:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, (-2124));
114:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
115:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
116:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
117:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
118:       
119:       Comparator<Map.Entry<Object, String>> comparator9 = Map.Entry.comparingByValue();
120:       assertSame(comparator9, comparator4);
121:       assertNotNull(comparator9);
122:       
123:       Comparator<Map.Entry<Object, String>> comparator10 = Map.Entry.comparingByValue();
124:       assertSame(comparator10, comparator4);
125:       assertSame(comparator10, comparator9);
126:       assertNotNull(comparator10);
127:       
128:       abstractPatriciaTrie_TrieEntry2.key = "4Z0H`NHD";
129:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
130:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
132:       
133:       boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
134:       assertFalse(boolean0);
135:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
136:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
137:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
138:       
139:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.subtree("4Z0H`NHD", (-1), 1610);
140:       assertNull(abstractPatriciaTrie_TrieEntry3);
141:   }
142: }
RegularFileObject[/tmp/EvoSuite_145_1627593969887/org/apache/commons/collections4/trie/AbstractPatriciaTrie_145_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:09 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_145_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_145_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_145_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_145_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:09.949 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, "=");
assertNotNull(abstractMap_SimpleEntry0);

String string0 = abstractMap_SimpleEntry0.setValue("4Z0H`NHD");
assertEquals("=", string0);
assertNotNull(string0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, String>>((Object) null, abstractMap_SimpleEntry0, (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry0.value;
assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleEntry1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Comparable<Object>, AbstractMap.SimpleEntry<Object, String>>, Integer>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Comparable<Object>, AbstractMap.SimpleEntry<Object, String>>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Comparable<Object>, AbstractMap.SimpleEntry<Object, String>>>) comparator2);
assertNotNull(comparator3);

abstractPatriciaTrie_TrieEntry0.key = (Object) "4Z0H`NHD";
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Map.Entry<Object, String>> comparator4 = Map.Entry.comparingByValue();
assertNotNull(comparator4);

Comparator<Map.Entry<Comparable<AbstractMap.SimpleEntry<Object, String>>, String>> comparator5 = Map.Entry.comparingByValue();
assertNotNull(comparator5);

Comparator<Integer> comparator6 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator7 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator6);
assertNotNull(comparator7);

String string1 = abstractMap_SimpleEntry0.setValue("");
assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
assertEquals("4Z0H`NHD", string1);
assertNotNull(string1);
assertFalse(string1.equals((Object)string0));

Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Object, String>, String>>> comparator8 = Map.Entry.comparingByKey();
assertNotNull(comparator8);

String string2 = abstractMap_SimpleEntry1.setValue("");
assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
assertEquals("", string2);
assertNotNull(string2);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(string2.equals((Object)string1));
assertFalse(string2.equals((Object)string0));

Object object0 = patriciaTrie0.put("", abstractMap_SimpleEntry1);
assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
assertNull(object0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Object object1 = patriciaTrie0.put("", "");
assertNotNull(object1);

Object object2 = patriciaTrie0.get("");
assertEquals("", object2);
assertNotNull(object2);
assertTrue(object2.equals((Object)string2));
assertFalse(object2.equals((Object)string0));
assertFalse(object2.equals((Object)string1));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.getNearestEntryForKey("Ci)Pm@Xu1<%E/B<", 1610);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, (-2124));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

Comparator<Map.Entry<Object, String>> comparator9 = Map.Entry.comparingByValue();
assertSame(comparator9, comparator4);
assertNotNull(comparator9);

Comparator<Map.Entry<Object, String>> comparator10 = Map.Entry.comparingByValue();
assertSame(comparator10, comparator4);
assertSame(comparator10, comparator9);
assertNotNull(comparator10);

abstractPatriciaTrie_TrieEntry2.key = "4Z0H`NHD";
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.subtree("4Z0H`NHD", (-1), 1610);
assertNull(abstractPatriciaTrie_TrieEntry3);


[MASTER] 21:26:10.312 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_153_1627593970271/org/apache/commons/collections4/trie/AbstractPatriciaTrie_153_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_153_1627593970271/org/apache/commons/collections4/trie/AbstractPatriciaTrie_153_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:10.312 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:10.312 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:10.313 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Integer>,java.lang.Integer>>: 105
[MASTER] 21:26:10.313 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_153_1627593970271/org/apache/commons/collections4/trie/AbstractPatriciaTrie_153_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:10.313 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:10.314 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_153_1627593970271/org/apache/commons/collections4/trie/AbstractPatriciaTrie_153_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:10 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Collection;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.SortedMap;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_153_tmp__ESTest extends AbstractPatriciaTrie_153_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       Integer integer0 = new Integer(1008);
32:       assertEquals(1008, (int)integer0);
33:       assertNotNull(integer0);
34:       
35:       AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>((String) null, integer0);
36:       assertNotNull(abstractMap_SimpleImmutableEntry0);
37:       
38:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(patriciaTrie0, "{^a9U");
39:       assertNotNull(abstractMap_SimpleEntry0);
40:       
41:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>((String) null, abstractMap_SimpleEntry0, 1008);
42:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
45:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
46:       
47:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0, "");
48:       assertNotNull(abstractMap_SimpleEntry1);
49:       assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
50:       
51:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>((String) null, abstractMap_SimpleEntry1, 1008);
52:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
54:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
55:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
56:       assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
57:       assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
58:       
59:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
64:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
65:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
69:       
70:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-1));
71:       assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
72:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
74:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
75:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
76:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
77:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
79:       assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
80:       
81:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
82:       assertNotNull(abstractMap_SimpleEntry2);
83:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
84:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
85:       
86:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry3 = patriciaTrie0.put("{^a9U", abstractMap_SimpleEntry2);
87:       assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry1);
88:       assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
89:       assertNull(abstractMap_SimpleEntry3);
90:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
91:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
92:       
93:       patriciaTrie0.modCount = 1008;
94:       Comparator<Map.Entry<Comparable<Object>, String>> comparator0 = Map.Entry.comparingByKey();
95:       assertNotNull(comparator0);
96:       
97:       String string0 = patriciaTrie0.firstKey();
98:       assertEquals("{^a9U", string0);
99:       assertNotNull(string0);
100:       
101:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
102:       assertNotNull(patriciaTrie1);
103:       
104:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
105:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Integer>, Integer>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Integer>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, Integer>>) comparator1);
106:       assertNotNull(comparator2);
107:       
108:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry4 = patriciaTrie0.put("8vnt1GT!>/6,5rQT%S", (AbstractMap.SimpleEntry<Object, Object>) null);
109:       assertNull(abstractMap_SimpleEntry4);
110:       
111:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.higherEntry("{^a9U");
112:       assertNull(abstractPatriciaTrie_TrieEntry3);
113:       
114:       Collection<Object> collection0 = patriciaTrie1.values();
115:       assertNotNull(collection0);
116:       assertFalse(collection0.contains((-1)));
117:       
118:       SortedMap<String, Object> sortedMap0 = patriciaTrie1.headMap("{^a9U");
119:       assertNotNull(sortedMap0);
120:       assertTrue(sortedMap0.isEmpty());
121:       assertEquals(0, sortedMap0.size());
122:       
123:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
124:       assertNotNull(patriciaTrie2);
125:       
126:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.firstEntry();
127:       assertNull(abstractPatriciaTrie_TrieEntry4);
128:   }
129: }
RegularFileObject[/tmp/EvoSuite_153_1627593970271/org/apache/commons/collections4/trie/AbstractPatriciaTrie_153_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:10 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_153_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_153_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_153_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_153_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:10.315 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(1008);
assertEquals(1008, (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>((String) null, integer0);
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(patriciaTrie0, "{^a9U");
assertNotNull(abstractMap_SimpleEntry0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>((String) null, abstractMap_SimpleEntry0, 1008);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0, "");
assertNotNull(abstractMap_SimpleEntry1);
assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>((String) null, abstractMap_SimpleEntry1, 1008);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-1));
assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleEntry2);
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry3 = patriciaTrie0.put("{^a9U", abstractMap_SimpleEntry2);
assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry1);
assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry3);
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));

patriciaTrie0.modCount = 1008;
Comparator<Map.Entry<Comparable<Object>, String>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

String string0 = patriciaTrie0.firstKey();
assertEquals("{^a9U", string0);
assertNotNull(string0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Integer>, Integer>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Integer>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, Integer>>) comparator1);
assertNotNull(comparator2);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry4 = patriciaTrie0.put("8vnt1GT!>/6,5rQT%S", (AbstractMap.SimpleEntry<Object, Object>) null);
assertNull(abstractMap_SimpleEntry4);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.higherEntry("{^a9U");
assertNull(abstractPatriciaTrie_TrieEntry3);

Collection<Object> collection0 = patriciaTrie1.values();
assertNotNull(collection0);
assertFalse(collection0.contains((-1)));

SortedMap<String, Object> sortedMap0 = patriciaTrie1.headMap("{^a9U");
assertNotNull(sortedMap0);
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.firstEntry();
assertNull(abstractPatriciaTrie_TrieEntry4);


[MASTER] 21:26:11.072 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_168_1627593971024/org/apache/commons/collections4/trie/AbstractPatriciaTrie_168_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_168_1627593971024/org/apache/commons/collections4/trie/AbstractPatriciaTrie_168_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:11.072 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:11.072 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:11.072 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Comparable<java.lang.Integer>>>: 86
[MASTER] 21:26:11.072 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_168_1627593971024/org/apache/commons/collections4/trie/AbstractPatriciaTrie_168_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:11.072 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:11.073 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_168_1627593971024/org/apache/commons/collections4/trie/AbstractPatriciaTrie_168_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:11 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import java.util.Set;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_168_tmp__ESTest extends AbstractPatriciaTrie_168_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       Integer integer0 = new Integer((-943));
30:       assertEquals((-943), (int)integer0);
31:       assertNotNull(integer0);
32:       
33:       Integer integer1 = patriciaTrie0.put("pGK0nbaU,6eQ!", integer0);
34:       assertNull(integer1);
35:       
36:       Integer integer2 = new Integer(2);
37:       assertEquals(2, (int)integer2);
38:       assertNotNull(integer2);
39:       assertFalse(integer2.equals((Object)integer0));
40:       
41:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer2, 0);
42:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
46:       assertFalse(integer2.equals((Object)integer0));
47:       
48:       Integer integer3 = abstractPatriciaTrie_TrieEntry0.setValue(integer0);
49:       assertEquals(2, (int)integer3);
50:       assertNotNull(integer3);
51:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
54:       assertFalse(integer0.equals((Object)integer2));
55:       assertFalse(integer2.equals((Object)integer0));
56:       assertFalse(integer3.equals((Object)integer0));
57:       
58:       Integer integer4 = abstractPatriciaTrie_TrieEntry0.setKeyValue("V&4etv.:,9", integer0);
59:       assertEquals((-943), (int)integer4);
60:       assertNotNull(integer4);
61:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
64:       assertFalse(integer0.equals((Object)integer2));
65:       assertFalse(integer0.equals((Object)integer3));
66:       assertFalse(integer2.equals((Object)integer0));
67:       assertFalse(integer4.equals((Object)integer2));
68:       assertFalse(integer4.equals((Object)integer3));
69:       
70:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
71:       Integer integer5 = new Integer(2);
72:       assertEquals(2, (int)integer5);
73:       assertNotNull(integer5);
74:       assertTrue(integer5.equals((Object)integer2));
75:       assertTrue(integer5.equals((Object)integer3));
76:       assertFalse(integer5.equals((Object)integer0));
77:       assertFalse(integer5.equals((Object)integer4));
78:       
79:       Integer integer6 = patriciaTrie0.put("", integer5);
80:       assertNull(integer6);
81:       assertTrue(integer5.equals((Object)integer2));
82:       assertTrue(integer5.equals((Object)integer3));
83:       assertFalse(integer5.equals((Object)integer0));
84:       assertFalse(integer5.equals((Object)integer4));
85:       
86:       Comparator<Map.Entry<Integer, Comparable<Integer>>> comparator1 = (Comparator<Map.Entry<Integer, Comparable<Integer>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
87:       assertNotNull(comparator1);
88:       
89:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
90:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
91:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
92:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
94:       
95:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry1);
96:       assertNull(abstractPatriciaTrie_TrieEntry2);
97:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
100:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
101:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
103:       assertFalse(integer2.equals((Object)integer0));
104:       assertFalse(integer2.equals((Object)integer4));
105:       assertTrue(integer2.equals((Object)integer5));
106:       
107:       Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
108:       assertNotNull(set0);
109:       assertFalse(set0.isEmpty());
110:       assertEquals(2, set0.size());
111:       
112:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.firstEntry();
113:       assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
114:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
115:       assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
116:       assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
118:       assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
119:       
120:       Set<String> set1 = patriciaTrie0.keySet();
121:       assertNotNull(set1);
122:       assertFalse(set1.isEmpty());
123:       assertEquals(2, set1.size());
124:       assertTrue(set1.contains(""));
125:       assertFalse(set1.contains("V&4etv.:,9"));
126:       
127:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
128:       assertNotNull(patriciaTrie1);
129:       
130:       Set<String> set2 = patriciaTrie1.keySet();
131:       assertNotSame(set2, set1);
132:       assertNotNull(set2);
133:       assertTrue(set2.isEmpty());
134:       assertEquals(0, set2.size());
135:       assertFalse(set2.equals((Object)set1));
136:       assertFalse(set2.contains(""));
137:   }
138: }
RegularFileObject[/tmp/EvoSuite_168_1627593971024/org/apache/commons/collections4/trie/AbstractPatriciaTrie_168_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:11 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_168_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_168_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_168_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_168_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:11.075 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer((-943));
assertEquals((-943), (int)integer0);
assertNotNull(integer0);

Integer integer1 = patriciaTrie0.put("pGK0nbaU,6eQ!", integer0);
assertNull(integer1);

Integer integer2 = new Integer(2);
assertEquals(2, (int)integer2);
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer2, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(integer2.equals((Object)integer0));

Integer integer3 = abstractPatriciaTrie_TrieEntry0.setValue(integer0);
assertEquals(2, (int)integer3);
assertNotNull(integer3);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(integer0.equals((Object)integer2));
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer0));

Integer integer4 = abstractPatriciaTrie_TrieEntry0.setKeyValue("V&4etv.:,9", integer0);
assertEquals((-943), (int)integer4);
assertNotNull(integer4);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(integer0.equals((Object)integer2));
assertFalse(integer0.equals((Object)integer3));
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer2));
assertFalse(integer4.equals((Object)integer3));

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Integer integer5 = new Integer(2);
assertEquals(2, (int)integer5);
assertNotNull(integer5);
assertTrue(integer5.equals((Object)integer2));
assertTrue(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer4));

Integer integer6 = patriciaTrie0.put("", integer5);
assertNull(integer6);
assertTrue(integer5.equals((Object)integer2));
assertTrue(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer4));

Comparator<Map.Entry<Integer, Comparable<Integer>>> comparator1 = (Comparator<Map.Entry<Integer, Comparable<Integer>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry1);
assertNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer4));
assertTrue(integer2.equals((Object)integer5));

Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
assertNotNull(set0);
assertFalse(set0.isEmpty());
assertEquals(2, set0.size());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.firstEntry();
assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));

Set<String> set1 = patriciaTrie0.keySet();
assertNotNull(set1);
assertFalse(set1.isEmpty());
assertEquals(2, set1.size());
assertTrue(set1.contains(""));
assertFalse(set1.contains("V&4etv.:,9"));

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Set<String> set2 = patriciaTrie1.keySet();
assertNotSame(set2, set1);
assertNotNull(set2);
assertTrue(set2.isEmpty());
assertEquals(0, set2.size());
assertFalse(set2.equals((Object)set1));
assertFalse(set2.contains(""));


[MASTER] 21:26:11.382 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_173_1627593971340/org/apache/commons/collections4/trie/AbstractPatriciaTrie_173_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_173_1627593971340/org/apache/commons/collections4/trie/AbstractPatriciaTrie_173_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:11.383 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:11.383 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:11.386 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Comparable<java.lang.Integer>>>: 73
[MASTER] 21:26:11.386 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_173_1627593971340/org/apache/commons/collections4/trie/AbstractPatriciaTrie_173_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:11.387 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:11.387 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_173_1627593971340/org/apache/commons/collections4/trie/AbstractPatriciaTrie_173_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:11 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_173_tmp__ESTest extends AbstractPatriciaTrie_173_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "keyAnalyzer", 2112);
26:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
27:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
28:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
29:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
30:       
31:       abstractPatriciaTrie_TrieEntry0.key = "keyAnalyzer";
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
33:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, abstractPatriciaTrie_TrieEntry0, (-1));
37:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
39:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
41:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
43:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
44:       
45:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
51:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
55:       
56:       Integer integer0 = new Integer((-1));
57:       assertEquals((-1), (int)integer0);
58:       assertNotNull(integer0);
59:       
60:       abstractPatriciaTrie_TrieEntry1.value = (Object) integer0;
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
64:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
66:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
67:       
68:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
69:       Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
70:       assertNotNull(comparator1);
71:       
72:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
73:       Comparator<Map.Entry<Integer, Comparable<Integer>>> comparator3 = (Comparator<Map.Entry<Integer, Comparable<Integer>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator2);
74:       assertNotNull(comparator3);
75:       
76:       abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0;
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
78:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
83:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
84:       assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
86:       
87:       abstractPatriciaTrie_TrieEntry1.value = (Object) null;
88:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
89:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
90:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
91:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
93:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
94:       
95:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>, String>> comparator4 = Map.Entry.comparingByValue();
96:       assertNotNull(comparator4);
97:       
98:       Object object0 = abstractPatriciaTrie_TrieEntry0.setValue("keyAnalyzer");
99:       assertEquals("keyAnalyzer", object0);
100:       assertNotNull(object0);
101:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
102:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
104:       
105:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
106:       assertEquals("Entry(key=keyAnalyzer [2112], value=keyAnalyzer, parent=null, left=keyAnalyzer [2112], right=ROOT, predecessor=keyAnalyzer [2112])", string0);
107:       assertNotNull(string0);
108:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
109:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
111:       assertFalse(string0.equals((Object)object0));
112:   }
113: }
RegularFileObject[/tmp/EvoSuite_173_1627593971340/org/apache/commons/collections4/trie/AbstractPatriciaTrie_173_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:11 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_173_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_173_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_173_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_173_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:11.388 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", "keyAnalyzer", 2112);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

abstractPatriciaTrie_TrieEntry0.key = "keyAnalyzer";
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, abstractPatriciaTrie_TrieEntry0, (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());

Integer integer0 = new Integer((-1));
assertEquals((-1), (int)integer0);
assertNotNull(integer0);

abstractPatriciaTrie_TrieEntry1.value = (Object) integer0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Comparable<Integer>>> comparator3 = (Comparator<Map.Entry<Integer, Comparable<Integer>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator2);
assertNotNull(comparator3);

abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());

abstractPatriciaTrie_TrieEntry1.value = (Object) null;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>, String>> comparator4 = Map.Entry.comparingByValue();
assertNotNull(comparator4);

Object object0 = abstractPatriciaTrie_TrieEntry0.setValue("keyAnalyzer");
assertEquals("keyAnalyzer", object0);
assertNotNull(object0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertEquals("Entry(key=keyAnalyzer [2112], value=keyAnalyzer, parent=null, left=keyAnalyzer [2112], right=ROOT, predecessor=keyAnalyzer [2112])", string0);
assertNotNull(string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(string0.equals((Object)object0));


* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0-50/tests/15
* Done!

* Computation finished
