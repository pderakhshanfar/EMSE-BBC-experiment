* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 10362
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 89097470
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 19:02:27.673 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 19:02:27.673 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 19:02:31.859 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 19:02:37.219 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(Ljava/lang/Object;)Ljava/lang/Object;
[MASTER] 19:04:36.701 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 19:09:08.517 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.Comparable<java.lang.String>, java.lang.Integer>.TrieEntry<java.lang.Comparable<java.lang.Object>, java.lang.String> canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 19:09:44.293 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry due to org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.String, java.lang.String>.TrieEntry<java.lang.Integer, java.util.AbstractMap<java.lang.String, java.lang.Object>.SimpleEntry<java.lang.Object, java.lang.String>> canUseFunctionalMocks=false, canBeMocked: false
* Search finished after 602s and 769 generations, 295610 statements, best individual has fitness: 1412.0
* Minimizing test suite
[MASTER] 19:13:34.007 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 58%
* Total number of goals: 822
* Number of covered goals: 477
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 52%
* Total number of goals: 602
* Number of covered goals: 313
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 31
* Number of covered goals: 31
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 58%
* Total number of goals: 569
* Number of covered goals: 328
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 63%
* Total number of goals: 186
* Number of covered goals: 118
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 52%
* Total number of goals: 602
* Number of covered goals: 311
* Generated 186 tests with total length 2912
* Resulting test suite's coverage: 51% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 19:14:18.761 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6795833333333333% of time used, but only 22/186 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 19:14:27.387 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_26_1629227667314/org/apache/commons/collections4/trie/AbstractPatriciaTrie_26_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_26_1629227667314/org/apache/commons/collections4/trie/AbstractPatriciaTrie_26_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:27.387 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:27.388 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:27.392 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>>: 73
[MASTER] 19:14:27.392 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_26_1629227667314/org/apache/commons/collections4/trie/AbstractPatriciaTrie_26_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:27.392 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:27.393 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_26_1629227667314/org/apache/commons/collections4/trie/AbstractPatriciaTrie_26_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:27 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import java.util.NoSuchElementException;
16: import java.util.SortedMap;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_26_tmp__ESTest extends AbstractPatriciaTrie_26_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       Integer integer0 = new Integer(603);
30:       assertEquals(603, (int)integer0);
31:       assertNotNull(integer0);
32:       
33:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, integer0, 603);
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
35:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
36:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
37:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
38:       
39:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
40:       assertTrue(hashMap0.isEmpty());
41:       assertEquals(0, hashMap0.size());
42:       assertNotNull(hashMap0);
43:       
44:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
45:       assertTrue(hashMap0.isEmpty());
46:       assertEquals(0, hashMap0.size());
47:       assertNotNull(patriciaTrie0);
48:       
49:       String string0 = "g+o]4f%_R=*";
50:       SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("g+o]4f%_R=*");
51:       assertTrue(hashMap0.isEmpty());
52:       assertEquals(0, hashMap0.size());
53:       assertEquals(0, sortedMap0.size());
54:       assertTrue(sortedMap0.isEmpty());
55:       assertNotNull(sortedMap0);
56:       
57:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
58:       assertTrue(hashMap0.isEmpty());
59:       assertEquals(0, hashMap0.size());
60:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
61:       assertNotNull(patriciaTrie1);
62:       
63:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "g+o]4f%_R=*", 1248);
64:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
65:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
67:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
68:       
69:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
70:       Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByValue();
71:       assertNotNull(comparator1);
72:       
73:       Comparator<Map.Entry<Object, String>> comparator2 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
74:       assertNotNull(comparator2);
75:       
76:       String string1 = patriciaTrie0.put("g+o]4f%_R=*", "g+o]4f%_R=*");
77:       assertTrue(hashMap0.isEmpty());
78:       assertEquals(0, hashMap0.size());
79:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
80:       assertNull(string1);
81:       assertNotSame(patriciaTrie0, patriciaTrie1);
82:       
83:       // Undeclared exception!
84:       try { 
85:         patriciaTrie1.lastKey();
86:         fail("Expecting exception: NoSuchElementException");
87:       
88:       } catch(NoSuchElementException e) {
89:          //
90:          // no message in exception (getMessage() returned null)
91:          //
92:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
93:       }
94:   }
95: }
RegularFileObject[/tmp/EvoSuite_26_1629227667314/org/apache/commons/collections4/trie/AbstractPatriciaTrie_26_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:27 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_26_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_26_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_26_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_26_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
138:     );
139:   }
140: }

[MASTER] 19:14:27.394 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(603);
assertEquals(603, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, integer0, 603);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

String string0 = "g+o]4f%_R=*";
SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("g+o]4f%_R=*");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "g+o]4f%_R=*", 1248);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByValue();
assertNotNull(comparator1);

Comparator<Map.Entry<Object, String>> comparator2 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator2);

String string1 = patriciaTrie0.put("g+o]4f%_R=*", "g+o]4f%_R=*");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertNull(string1);
assertNotSame(patriciaTrie0, patriciaTrie1);

patriciaTrie1.lastKey();

[MASTER] 19:14:27.590 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_29_1629227667525/org/apache/commons/collections4/trie/AbstractPatriciaTrie_29_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_29_1629227667525/org/apache/commons/collections4/trie/AbstractPatriciaTrie_29_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:27.590 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:27.590 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:27.590 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>>>>: 65
[MASTER] 19:14:27.590 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_29_1629227667525/org/apache/commons/collections4/trie/AbstractPatriciaTrie_29_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:27.591 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:27.591 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_29_1629227667525/org/apache/commons/collections4/trie/AbstractPatriciaTrie_29_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:27 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.Set;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_29_tmp__ESTest extends AbstractPatriciaTrie_29_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Y&\")##Yl$:tv<4X", "Y&\")##Yl$:tv<4X", 0);
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
29:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
30:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
31:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
32:       
33:       Comparator<Map.Entry<String, Object>> comparator0 = Map.Entry.comparingByKey();
34:       assertNotNull(comparator0);
35:       
36:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
39:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
40:       assertNotNull(abstractMap_SimpleEntry0);
41:       
42:       Object object0 = abstractMap_SimpleEntry0.setValue("!?*F\":G7");
43:       assertEquals("Y&\")##Yl$:tv<4X", object0);
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
47:       assertNotNull(object0);
48:       
49:       Object object1 = abstractMap_SimpleEntry0.setValue("Y&\")##Yl$:tv<4X");
50:       assertEquals("!?*F\":G7", object1);
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
54:       assertFalse(object1.equals((Object)object0));
55:       assertNotNull(object1);
56:       
57:       Comparator<Map.Entry<String, Object>> comparator1 = Map.Entry.comparingByKey();
58:       assertNotNull(comparator1);
59:       assertSame(comparator1, comparator0);
60:       
61:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
62:       Comparator<Map.Entry<Object, String>> comparator3 = Map.Entry.comparingByValue();
63:       assertNotNull(comparator3);
64:       
65:       Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<String, Object>>>> comparator4 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<String, Object>>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator2);
66:       assertNotNull(comparator4);
67:       
68:       Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
69:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>> comparator6 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Integer>>) comparator5);
70:       assertNotNull(comparator6);
71:       
72:       Comparator<Map.Entry<String, Object>> comparator7 = Map.Entry.comparingByKey();
73:       assertNotNull(comparator7);
74:       assertSame(comparator7, comparator0);
75:       assertSame(comparator7, comparator1);
76:       
77:       AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Object>>((Object) null, abstractMap_SimpleEntry0, 0);
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
81:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
82:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
84:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
85:       
86:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
87:       assertNotNull(patriciaTrie0);
88:       
89:       Set<String> set0 = patriciaTrie0.keySet();
90:       assertEquals(0, set0.size());
91:       assertTrue(set0.isEmpty());
92:       assertNotNull(set0);
93:       assertFalse(set0.contains(object0));
94:   }
95: }
RegularFileObject[/tmp/EvoSuite_29_1629227667525/org/apache/commons/collections4/trie/AbstractPatriciaTrie_29_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:27 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_29_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_29_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_29_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_29_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
138:     );
139:   }
140: }

[MASTER] 19:14:27.597 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Y&\")##Yl$:tv<4X", "Y&\")##Yl$:tv<4X", 0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Map.Entry<String, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractMap_SimpleEntry0);

Object object0 = abstractMap_SimpleEntry0.setValue("!?*F\":G7");
assertEquals("Y&\")##Yl$:tv<4X", object0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(object0);

Object object1 = abstractMap_SimpleEntry0.setValue("Y&\")##Yl$:tv<4X");
assertEquals("!?*F\":G7", object1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(object1.equals((Object)object0));
assertNotNull(object1);

Comparator<Map.Entry<String, Object>> comparator1 = Map.Entry.comparingByKey();
assertNotNull(comparator1);
assertSame(comparator1, comparator0);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator3 = Map.Entry.comparingByValue();
assertNotNull(comparator3);

Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<String, Object>>>> comparator4 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleEntry<String, Object>>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator2);
assertNotNull(comparator4);

Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>> comparator6 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Integer>>) comparator5);
assertNotNull(comparator6);

Comparator<Map.Entry<String, Object>> comparator7 = Map.Entry.comparingByKey();
assertNotNull(comparator7);
assertSame(comparator7, comparator0);
assertSame(comparator7, comparator1);

AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Object>>((Object) null, abstractMap_SimpleEntry0, 0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Set<String> set0 = patriciaTrie0.keySet();
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertNotNull(set0);
assertFalse(set0.contains(object0));


[MASTER] 19:14:29.231 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_54_1629227669131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_54_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_54_1629227669131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_54_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:29.231 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:29.231 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:29.244 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry<java.util.AbstractMap.SimpleImmutableEntry,java.lang.Object>,java.lang.String>,java.lang.Integer>>: 75
[MASTER] 19:14:29.244 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_54_1629227669131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_54_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:29.244 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:29.245 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_54_1629227669131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_54_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:29 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Collection;
14: import java.util.Comparator;
15: import java.util.Map;
16: import java.util.SortedMap;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_54_tmp__ESTest extends AbstractPatriciaTrie_54_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
33:       assertNotNull(patriciaTrie1);
34:       
35:       String string0 = "Y+<v.(I0n+";
36:       SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap("Y+<v.(I0n+");
37:       assertEquals(0, sortedMap0.size());
38:       assertTrue(sortedMap0.isEmpty());
39:       assertNotNull(sortedMap0);
40:       
41:       patriciaTrie1.clear();
42:       String string1 = "hN0;w$KS85T_'b";
43:       Integer integer0 = new Integer((-561));
44:       assertEquals((-561), (int)integer0);
45:       assertNotNull(integer0);
46:       
47:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("");
48:       assertNull(abstractPatriciaTrie_TrieEntry0);
49:       
50:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("hN0;w$KS85T_'b", integer0, (-561));
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
53:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
54:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
55:       
56:       Object object0 = abstractPatriciaTrie_TrieEntry1.setValue(patriciaTrie1);
57:       assertEquals((-561), object0);
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
61:       assertNotNull(object0);
62:       
63:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
64:       assertNull(abstractPatriciaTrie_TrieEntry2);
65:       
66:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
67:       assertNull(abstractPatriciaTrie_TrieEntry3);
68:       
69:       String string2 = "";
70:       Collection<Object> collection0 = patriciaTrie1.values();
71:       assertNotNull(collection0);
72:       assertFalse(collection0.contains((-561)));
73:       
74:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
75:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
76:       assertNotNull(comparator1);
77:       
78:       // Undeclared exception!
79:       try { 
80:         patriciaTrie1.get(abstractPatriciaTrie_TrieEntry1);
81:         fail("Expecting exception: ClassCastException");
82:       
83:       } catch(ClassCastException e) {
84:          //
85:          // no message in exception (getMessage() returned null)
86:          //
87:       }
88:   }
89: }
RegularFileObject[/tmp/EvoSuite_54_1629227669131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_54_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:29 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_54_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_54_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_54_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_54_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
138:     );
139:   }
140: }

[MASTER] 19:14:29.245 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

String string0 = "Y+<v.(I0n+";
SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap("Y+<v.(I0n+");
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

patriciaTrie1.clear();
String string1 = "hN0;w$KS85T_'b";
Integer integer0 = new Integer((-561));
assertEquals((-561), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("");
assertNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("hN0;w$KS85T_'b", integer0, (-561));
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Object object0 = abstractPatriciaTrie_TrieEntry1.setValue(patriciaTrie1);
assertEquals((-561), object0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(object0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
assertNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
assertNull(abstractPatriciaTrie_TrieEntry3);

String string2 = "";
Collection<Object> collection0 = patriciaTrie1.values();
assertNotNull(collection0);
assertFalse(collection0.contains((-561)));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, Object>, String>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

patriciaTrie1.get(abstractPatriciaTrie_TrieEntry1);

[MASTER] 19:14:30.017 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_63_1629227669944/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_63_1629227669944/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:30.018 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:30.018 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:30.018 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.String>>: 93
[MASTER] 19:14:30.018 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_63_1629227669944/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:30.018 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:30.019 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_63_1629227669944/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:29 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_63_tmp__ESTest extends AbstractPatriciaTrie_63_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", "Rm.}@");
27:       assertNotNull(abstractMap_SimpleImmutableEntry0);
28:       
29:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator0 = Map.Entry.comparingByKey();
30:       assertNotNull(comparator0);
31:       
32:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = Map.Entry.comparingByKey();
33:       assertNotNull(comparator1);
34:       
35:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(abstractMap_SimpleImmutableEntry0, (Object) null, (-1428));
36:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
39:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
40:       
41:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(abstractMap_SimpleImmutableEntry0, "", (-389));
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
43:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
44:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
45:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
46:       
47:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
48:       assertEquals("Entry(key==Rm.}@ [-389], value=, parent=null, left==Rm.}@ [-389], right=null, predecessor==Rm.}@ [-389])", string0);
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
51:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
52:       assertNotNull(string0);
53:       
54:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
63:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
64:       
65:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
66:       assertFalse(boolean0);
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
70:       
71:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
72:       assertNotNull(patriciaTrie0);
73:       
74:       String string1 = patriciaTrie0.put("  ", (String) null);
75:       assertNull(string1);
76:       
77:       String string2 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "Rm.}@");
78:       assertNull(string2);
79:       
80:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
81:       assertNotNull(patriciaTrie1);
82:       
83:       int int0 = patriciaTrie1.size();
84:       assertEquals(2, int0);
85:       
86:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
87:       assertNotNull(patriciaTrie2);
88:       
89:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
90:       assertNotNull(abstractMap_SimpleEntry0);
91:       
92:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
93:       Comparator<Map.Entry<Integer, String>> comparator3 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator2);
94:       assertNotNull(comparator3);
95:       
96:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie2.put("Entry(key==Rm.}@ [-389], value=, parent=null, left==Rm.}@ [-389], right=null, predecessor==Rm.}@ [-389])", abstractMap_SimpleEntry0);
97:       assertNull(abstractMap_SimpleEntry1);
98:       
99:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.lastEntry();
100:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
103:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
104:       
105:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, "org.apache.commons.collections4.trie.AbstractBitwiseTrie", 2);
106:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
107:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
108:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
109:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
110:       
111:       String string3 = abstractPatriciaTrie_TrieEntry3.toString();
112:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
113:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
114:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
115:       assertFalse(string3.equals((Object)string0));
116:       assertNotNull(string3);
117:       
118:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.getNearestEntryForKey((String) null, 2);
119:       assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
120:       assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
121:       assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
122:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
123:       
124:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, abstractPatriciaTrie_TrieEntry3, 2);
125:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
126:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
127:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
128:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
129:       assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
130:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
131:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
132:       
133:       boolean boolean1 = abstractPatriciaTrie_TrieEntry5.isEmpty();
134:       assertTrue(boolean1);
135:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
136:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
137:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
138:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
139:       assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
140:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
141:       assertFalse(boolean1 == boolean0);
142:   }
143: }
RegularFileObject[/tmp/EvoSuite_63_1629227669944/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:29 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_63_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
138:     );
139:   }
140: }

[MASTER] 19:14:30.021 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", "Rm.}@");
assertNotNull(abstractMap_SimpleImmutableEntry0);

Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, String>>> comparator1 = Map.Entry.comparingByKey();
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(abstractMap_SimpleImmutableEntry0, (Object) null, (-1428));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(abstractMap_SimpleImmutableEntry0, "", (-389));
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertEquals("Entry(key==Rm.}@ [-389], value=, parent=null, left==Rm.}@ [-389], right=null, predecessor==Rm.}@ [-389])", string0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(string0);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
assertFalse(boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string1 = patriciaTrie0.put("  ", (String) null);
assertNull(string1);

String string2 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "Rm.}@");
assertNull(string2);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

int int0 = patriciaTrie1.size();
assertEquals(2, int0);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie2);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, String>> comparator3 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator2);
assertNotNull(comparator3);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie2.put("Entry(key==Rm.}@ [-389], value=, parent=null, left==Rm.}@ [-389], right=null, predecessor==Rm.}@ [-389])", abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.lastEntry();
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, "org.apache.commons.collections4.trie.AbstractBitwiseTrie", 2);
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

String string3 = abstractPatriciaTrie_TrieEntry3.toString();
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(string3.equals((Object)string0));
assertNotNull(string3);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.getNearestEntryForKey((String) null, 2);
assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>((AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, abstractPatriciaTrie_TrieEntry3, 2);
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

boolean boolean1 = abstractPatriciaTrie_TrieEntry5.isEmpty();
assertTrue(boolean1);
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(boolean1 == boolean0);


[MASTER] 19:14:32.289 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_102_1629227672228/org/apache/commons/collections4/trie/AbstractPatriciaTrie_102_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_102_1629227672228/org/apache/commons/collections4/trie/AbstractPatriciaTrie_102_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:32.289 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:32.289 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:32.290 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Integer>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Integer>,java.lang.String>>: 49
[MASTER] 19:14:32.290 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_102_1629227672228/org/apache/commons/collections4/trie/AbstractPatriciaTrie_102_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:32.290 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:32.298 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_102_1629227672228/org/apache/commons/collections4/trie/AbstractPatriciaTrie_102_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:32 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.SortedMap;
16: import java.util.function.BiFunction;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_102_tmp__ESTest extends AbstractPatriciaTrie_102_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       String string0 = "value=";
33:       SortedMap<String, Integer> sortedMap0 = patriciaTrie0.headMap("value=");
34:       assertTrue(sortedMap0.isEmpty());
35:       assertEquals(0, sortedMap0.size());
36:       assertNotNull(sortedMap0);
37:       
38:       Integer integer0 = new Integer(32768);
39:       assertEquals(32768, (int)integer0);
40:       assertNotNull(integer0);
41:       
42:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("value=", (Integer) null, 939);
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
46:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
47:       
48:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
49:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>>) comparator0);
50:       assertNotNull(comparator1);
51:       
52:       Integer integer1 = abstractPatriciaTrie_TrieEntry0.value;
53:       assertNull(integer1);
54:       
55:       Integer integer2 = patriciaTrie0.remove((Object) null);
56:       assertNull(integer2);
57:       
58:       Integer integer3 = patriciaTrie0.put("", integer0);
59:       assertNull(integer3);
60:       
61:       Integer integer4 = patriciaTrie0.putIfAbsent("value=", integer0);
62:       assertNull(integer4);
63:       
64:       Integer integer5 = new Integer(939);
65:       assertEquals(939, (int)integer5);
66:       assertFalse(integer5.equals((Object)integer0));
67:       assertNotNull(integer5);
68:       
69:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer5, 939);
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
71:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
73:       assertFalse(integer5.equals((Object)integer0));
74:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
75:       
76:       String string1 = abstractPatriciaTrie_TrieEntry1.toString();
77:       assertEquals("Entry(key= [939], value=939, parent=null, left= [939], right=null, predecessor= [939])", string1);
78:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
79:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
81:       assertFalse(integer5.equals((Object)integer0));
82:       assertFalse(string1.equals((Object)string0));
83:       assertNotNull(string1);
84:       
85:       Comparator<Map.Entry<Integer, String>> comparator2 = Map.Entry.comparingByValue();
86:       assertNotNull(comparator2);
87:       
88:       Comparator<Map.Entry<Integer, String>> comparator3 = Map.Entry.comparingByValue();
89:       assertNotNull(comparator3);
90:       assertSame(comparator3, comparator2);
91:       
92:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
93:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
95:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
96:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
97:       
98:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", integer0, 724);
99:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
100:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
101:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
102:       assertFalse(integer0.equals((Object)integer5));
103:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
104:       
105:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry3;
106:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
108:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
111:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
113:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
115:       
116:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, (-2));
117:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
119:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
121:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
123:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
124:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
125:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
126:       assertFalse(integer5.equals((Object)integer0));
127:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
128:       assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
129:       assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
130:       
131:       BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
132:       doReturn((Object) null).when(biFunction0).apply(anyString() , anyInt());
133:       Integer integer6 = patriciaTrie0.compute("`oikMb+vjdAje+vl0", biFunction0);
134:       assertNull(integer6);
135:       
136:       String string2 = "";
137:       SortedMap<String, Integer> sortedMap1 = patriciaTrie0.headMap("");
138:       assertTrue(sortedMap1.isEmpty());
139:       assertEquals(0, sortedMap1.size());
140:       assertFalse(sortedMap1.equals((Object)sortedMap0));
141:       assertNotNull(sortedMap1);
142:       assertNotSame(sortedMap1, sortedMap0);
143:       
144:       PatriciaTrie<String> patriciaTrie1 = null;
145:       try {
146:         patriciaTrie1 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
147:         fail("Expecting exception: NullPointerException");
148:       
149:       } catch(NullPointerException e) {
150:          //
151:          // no message in exception (getMessage() returned null)
152:          //
153:       }
154:   }
155: }
RegularFileObject[/tmp/EvoSuite_102_1629227672228/org/apache/commons/collections4/trie/AbstractPatriciaTrie_102_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:32 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_102_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_102_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_102_tmp__ESTest_scaffolding.class.getClassLoader()));
109:     mock(Class.forName("java.util.function.BiFunction", false, AbstractPatriciaTrie_102_tmp__ESTest_scaffolding.class.getClassLoader()));
110:   }
111: 
112:   private static void resetClasses() {
113:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_102_tmp__ESTest_scaffolding.class.getClassLoader()); 
114: 
115:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
118:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
129:       "org.apache.commons.collections4.trie.PatriciaTrie",
130:       "org.apache.commons.collections4.trie.KeyAnalyzer",
131:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
139:     );
140:   }
141: }

[MASTER] 19:14:32.301 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

String string0 = "value=";
SortedMap<String, Integer> sortedMap0 = patriciaTrie0.headMap("value=");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

Integer integer0 = new Integer(32768);
assertEquals(32768, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("value=", (Integer) null, 939);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>>) comparator0);
assertNotNull(comparator1);

Integer integer1 = abstractPatriciaTrie_TrieEntry0.value;
assertNull(integer1);

Integer integer2 = patriciaTrie0.remove((Object) null);
assertNull(integer2);

Integer integer3 = patriciaTrie0.put("", integer0);
assertNull(integer3);

Integer integer4 = patriciaTrie0.putIfAbsent("value=", integer0);
assertNull(integer4);

Integer integer5 = new Integer(939);
assertEquals(939, (int)integer5);
assertFalse(integer5.equals((Object)integer0));
assertNotNull(integer5);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer5, 939);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(integer5.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry1);

String string1 = abstractPatriciaTrie_TrieEntry1.toString();
assertEquals("Entry(key= [939], value=939, parent=null, left= [939], right=null, predecessor= [939])", string1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(integer5.equals((Object)integer0));
assertFalse(string1.equals((Object)string0));
assertNotNull(string1);

Comparator<Map.Entry<Integer, String>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

Comparator<Map.Entry<Integer, String>> comparator3 = Map.Entry.comparingByValue();
assertNotNull(comparator3);
assertSame(comparator3, comparator2);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", integer0, 724);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(integer0.equals((Object)integer5));
assertNotNull(abstractPatriciaTrie_TrieEntry3);

abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry3;
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, (-2));
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(integer5.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);

BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
doReturn((Object) null).when(biFunction0).apply(anyString() , anyInt());
Integer integer6 = patriciaTrie0.compute("`oikMb+vjdAje+vl0", biFunction0);
assertNull(integer6);

String string2 = "";
SortedMap<String, Integer> sortedMap1 = patriciaTrie0.headMap("");
assertTrue(sortedMap1.isEmpty());
assertEquals(0, sortedMap1.size());
assertFalse(sortedMap1.equals((Object)sortedMap0));
assertNotNull(sortedMap1);
assertNotSame(sortedMap1, sortedMap0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);

[MASTER] 19:14:32.620 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_109_1629227672586/org/apache/commons/collections4/trie/AbstractPatriciaTrie_109_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_109_1629227672586/org/apache/commons/collections4/trie/AbstractPatriciaTrie_109_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:32.620 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:32.620 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:32.620 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Comparable<java.lang.String>,java.lang.Integer>,java.lang.Object>>: 55
[MASTER] 19:14:32.620 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_109_1629227672586/org/apache/commons/collections4/trie/AbstractPatriciaTrie_109_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:32.620 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:32.621 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_109_1629227672586/org/apache/commons/collections4/trie/AbstractPatriciaTrie_109_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:32 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.SortedMap;
16: import java.util.function.BiFunction;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_109_tmp__ESTest extends AbstractPatriciaTrie_109_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       String string0 = "";
33:       SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap("");
34:       assertEquals(0, sortedMap0.size());
35:       assertTrue(sortedMap0.isEmpty());
36:       assertNotNull(sortedMap0);
37:       
38:       String string1 = null;
39:       int int0 = 80;
40:       Integer integer0 = new Integer(80);
41:       assertEquals(80, (int)integer0);
42:       assertTrue(integer0.equals((Object)int0));
43:       assertNotNull(integer0);
44:       
45:       int int1 = (-1150);
46:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, (-1150));
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertTrue(integer0.equals((Object)int0));
51:       assertFalse(integer0.equals((Object)int1));
52:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
53:       
54:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
55:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Comparable<String>, Integer>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Comparable<String>, Integer>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
56:       assertNotNull(comparator1);
57:       
58:       Comparator<Map.Entry<Comparable<Object>, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
59:       assertNotNull(comparator2);
60:       
61:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
62:       assertNull(abstractPatriciaTrie_TrieEntry1);
63:       
64:       // Undeclared exception!
65:       try { 
66:         patriciaTrie0.followRight((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
67:         fail("Expecting exception: NullPointerException");
68:       
69:       } catch(NullPointerException e) {
70:          //
71:          // no message in exception (getMessage() returned null)
72:          //
73:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
74:       }
75:   }
76: }
RegularFileObject[/tmp/EvoSuite_109_1629227672586/org/apache/commons/collections4/trie/AbstractPatriciaTrie_109_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:32 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_109_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_109_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_109_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_109_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
138:     );
139:   }
140: }

[MASTER] 19:14:32.622 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

String string0 = "";
SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap("");
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

String string1 = null;
int int0 = 80;
Integer integer0 = new Integer(80);
assertEquals(80, (int)integer0);
assertTrue(integer0.equals((Object)int0));
assertNotNull(integer0);

int int1 = (-1150);
AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, (-1150));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(integer0.equals((Object)int0));
assertFalse(integer0.equals((Object)int1));
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Comparable<String>, Integer>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Comparable<String>, Integer>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Comparator<Map.Entry<Comparable<Object>, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
assertNull(abstractPatriciaTrie_TrieEntry1);

patriciaTrie0.followRight((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);

[MASTER] 19:14:32.709 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_111_1629227672671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_111_1629227672671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:32.709 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:32.709 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:32.710 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.lang.Object>,java.lang.String>>: 87
[MASTER] 19:14:32.710 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_111_1629227672671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:32.710 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:32.711 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_111_1629227672671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:32 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_111_tmp__ESTest extends AbstractPatriciaTrie_111_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<Comparable<Integer>> patriciaTrie0 = new PatriciaTrie<Comparable<Integer>>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       Integer integer0 = new Integer(0);
30:       assertEquals(0, (int)integer0);
31:       assertNotNull(integer0);
32:       
33:       Comparable<Integer> comparable0 = patriciaTrie0.put("1#B%M2;IFX", integer0);
34:       assertNull(comparable0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>("Trie[", integer0, 693);
37:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
41:       
42:       int int0 = (-2);
43:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>("Trie[", integer0, (-2));
44:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
46:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
47:       assertFalse(integer0.equals((Object)int0));
48:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
49:       
50:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(patriciaTrie0);
51:       assertFalse(boolean0);
52:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       assertFalse(integer0.equals((Object)int0));
56:       
57:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>("Trie[", integer0, 693);
58:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
61:       assertFalse(integer0.equals((Object)int0));
62:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
63:       
64:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
65:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
73:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
74:       
75:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
76:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
78:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
79:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
84:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
85:       
86:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
87:       Comparator<Map.Entry<Comparable<Object>, String>> comparator1 = (Comparator<Map.Entry<Comparable<Object>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
88:       assertNotNull(comparator1);
89:       
90:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
91:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
92:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
94:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
95:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
96:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
98:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
100:       
101:       Comparable<Integer> comparable1 = abstractPatriciaTrie_TrieEntry0.setValue(integer0);
102:       assertEquals(0, comparable1);
103:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
104:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
106:       assertFalse(integer0.equals((Object)int0));
107:       assertNotNull(comparable1);
108:       assertSame(integer0, comparable1);
109:       
110:       abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
111:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
112:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
113:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
114:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
116:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
118:       assertTrue(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
120:       
121:       Comparator<Map.Entry<String, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
122:       assertNotNull(comparator2);
123:       
124:       boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals("Trie[");
125:       assertFalse(boolean1);
126:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
127:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
128:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
129:       assertTrue(boolean1 == boolean0);
130:       assertFalse(integer0.equals((Object)int0));
131:       assertSame(integer0, comparable1);
132:       
133:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.left;
134:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
135:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
136:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
137:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
138:       
139:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
140:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
141:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
142:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
143:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
144:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
145:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
146:       assertFalse(integer0.equals((Object)int0));
147:       assertNull(abstractPatriciaTrie_TrieEntry4);
148:       assertSame(integer0, comparable1);
149:       
150:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
151:       assertNotNull(patriciaTrie1);
152:       
153:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
154:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
155:       assertNotNull(patriciaTrie2);
156:       
157:       Integer integer1 = new Integer((-2));
158:       assertEquals((-2), (int)integer1);
159:       assertTrue(integer1.equals((Object)int0));
160:       assertFalse(integer1.equals((Object)comparable1));
161:       assertFalse(integer1.equals((Object)integer0));
162:       assertNotNull(integer1);
163:       
164:       Integer integer2 = new Integer(939);
165:       assertEquals(939, (int)integer2);
166:       assertFalse(integer2.equals((Object)comparable1));
167:       assertFalse(integer2.equals((Object)integer1));
168:       assertFalse(integer2.equals((Object)int0));
169:       assertFalse(integer2.equals((Object)integer0));
170:       assertNotNull(integer2);
171:       
172:       Integer integer3 = patriciaTrie2.put("1#B%M2;IFX", integer2);
173:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
174:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
175:       assertFalse(integer2.equals((Object)comparable1));
176:       assertFalse(integer2.equals((Object)integer1));
177:       assertFalse(integer2.equals((Object)int0));
178:       assertFalse(integer2.equals((Object)integer0));
179:       assertNull(integer3);
180:       assertNotSame(patriciaTrie1, patriciaTrie2);
181:       assertNotSame(patriciaTrie2, patriciaTrie1);
182:       assertNotSame(integer2, comparable1);
183:       
184:       Integer integer4 = patriciaTrie1.put("Trie[", integer1);
185:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
186:       assertTrue(integer1.equals((Object)int0));
187:       assertFalse(integer1.equals((Object)comparable1));
188:       assertFalse(integer1.equals((Object)integer0));
189:       assertFalse(integer1.equals((Object)integer2));
190:       assertNull(integer4);
191:       assertNotSame(patriciaTrie1, patriciaTrie2);
192:       assertNotSame(integer1, comparable1);
193:       
194:       // Undeclared exception!
195:       try { 
196:         patriciaTrie2.subtree("Trie[", (-2), (-3));
197:         fail("Expecting exception: IllegalArgumentException");
198:       
199:       } catch(IllegalArgumentException e) {
200:          //
201:          // The offsets and lengths must be at Character boundaries
202:          //
203:          verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
204:       }
205:   }
206: }
RegularFileObject[/tmp/EvoSuite_111_1629227672671/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:32 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_111_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_111_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_111_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_111_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
138:     );
139:   }
140: }

[MASTER] 19:14:32.715 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Comparable<Integer>> patriciaTrie0 = new PatriciaTrie<Comparable<Integer>>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

Comparable<Integer> comparable0 = patriciaTrie0.put("1#B%M2;IFX", integer0);
assertNull(comparable0);

AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>("Trie[", integer0, 693);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

int int0 = (-2);
AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>("Trie[", integer0, (-2));
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(integer0.equals((Object)int0));
assertNotNull(abstractPatriciaTrie_TrieEntry1);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(patriciaTrie0);
assertFalse(boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(integer0.equals((Object)int0));

AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>("Trie[", integer0, 693);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(integer0.equals((Object)int0));
assertNotNull(abstractPatriciaTrie_TrieEntry2);

abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());

abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Comparable<Object>, String>> comparator1 = (Comparator<Map.Entry<Comparable<Object>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());

Comparable<Integer> comparable1 = abstractPatriciaTrie_TrieEntry0.setValue(integer0);
assertEquals(0, comparable1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(integer0.equals((Object)int0));
assertNotNull(comparable1);
assertSame(integer0, comparable1);

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());

Comparator<Map.Entry<String, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals("Trie[");
assertFalse(boolean1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(boolean1 == boolean0);
assertFalse(integer0.equals((Object)int0));
assertSame(integer0, comparable1);

AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.left;
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(integer0.equals((Object)int0));
assertNull(abstractPatriciaTrie_TrieEntry4);
assertSame(integer0, comparable1);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
assertNotNull(patriciaTrie2);

Integer integer1 = new Integer((-2));
assertEquals((-2), (int)integer1);
assertTrue(integer1.equals((Object)int0));
assertFalse(integer1.equals((Object)comparable1));
assertFalse(integer1.equals((Object)integer0));
assertNotNull(integer1);

Integer integer2 = new Integer(939);
assertEquals(939, (int)integer2);
assertFalse(integer2.equals((Object)comparable1));
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)integer0));
assertNotNull(integer2);

Integer integer3 = patriciaTrie2.put("1#B%M2;IFX", integer2);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
assertFalse(integer2.equals((Object)comparable1));
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)integer0));
assertNull(integer3);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie1);
assertNotSame(integer2, comparable1);

Integer integer4 = patriciaTrie1.put("Trie[", integer1);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertTrue(integer1.equals((Object)int0));
assertFalse(integer1.equals((Object)comparable1));
assertFalse(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer2));
assertNull(integer4);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(integer1, comparable1);

patriciaTrie2.subtree("Trie[", (-2), (-3));

[MASTER] 19:14:32.903 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_116_1629227672839/org/apache/commons/collections4/trie/AbstractPatriciaTrie_116_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_116_1629227672839/org/apache/commons/collections4/trie/AbstractPatriciaTrie_116_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:32.903 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:32.903 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:32.904 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Comparable<java.lang.Integer>>>: 99
[MASTER] 19:14:32.904 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_116_1629227672839/org/apache/commons/collections4/trie/AbstractPatriciaTrie_116_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:32.904 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:32.905 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_116_1629227672839/org/apache/commons/collections4/trie/AbstractPatriciaTrie_116_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:32 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import java.util.Set;
14: import java.util.SortedMap;
15: import java.util.function.BiConsumer;
16: import org.apache.commons.collections4.OrderedMapIterator;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_116_tmp__ESTest extends AbstractPatriciaTrie_116_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       Integer integer0 = new Integer(1203);
33:       assertEquals(1203, (int)integer0);
34:       assertNotNull(integer0);
35:       
36:       Integer integer1 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", integer0);
37:       assertNull(integer1);
38:       
39:       String string0 = patriciaTrie0.selectKey("Cannot determine prefix outside of Character boundaries");
40:       assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", string0);
41:       assertNotNull(string0);
42:       
43:       BiConsumer<String, Integer> biConsumer0 = (BiConsumer<String, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
44:       patriciaTrie0.forEach(biConsumer0);
45:       Integer integer2 = patriciaTrie0.put("Key cannot be null", (Integer) null);
46:       assertNull(integer2);
47:       
48:       boolean boolean0 = patriciaTrie0.compareKeys("", "Key cannot be null");
49:       assertFalse(boolean0);
50:       
51:       OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie0.mapIterator();
52:       assertTrue(orderedMapIterator0.hasNext());
53:       assertFalse(orderedMapIterator0.hasPrevious());
54:       assertNotNull(orderedMapIterator0);
55:       
56:       SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap("  ");
57:       assertTrue(sortedMap0.isEmpty());
58:       assertEquals(0, sortedMap0.size());
59:       assertNotNull(sortedMap0);
60:       
61:       String string1 = patriciaTrie0.lastKey();
62:       assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", string1);
63:       assertNotNull(string1);
64:       
65:       Integer integer3 = new Integer((-2233));
66:       assertEquals((-2233), (int)integer3);
67:       assertFalse(integer3.equals((Object)integer0));
68:       assertNotNull(integer3);
69:       
70:       Integer integer4 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", integer3);
71:       assertEquals(1203, (int)integer4);
72:       assertFalse(integer3.equals((Object)integer0));
73:       assertFalse(integer4.equals((Object)integer3));
74:       assertNotNull(integer4);
75:       
76:       SortedMap<String, Integer> sortedMap1 = patriciaTrie0.headMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator");
77:       assertFalse(sortedMap1.isEmpty());
78:       assertEquals(1, sortedMap1.size());
79:       assertFalse(sortedMap1.equals((Object)sortedMap0));
80:       assertNotNull(sortedMap1);
81:       
82:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("%eFx", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator", 1787);
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
86:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
87:       
88:       Comparator<Map.Entry<Integer, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
89:       assertNotNull(comparator0);
90:       
91:       Comparator<Map.Entry<Comparable<Object>, Comparable<Integer>>> comparator1 = Map.Entry.comparingByKey();
92:       assertNotNull(comparator1);
93:       
94:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
95:       Comparator<Map.Entry<Integer, Comparable<Object>>> comparator3 = Map.Entry.comparingByValue();
96:       assertNotNull(comparator3);
97:       assertSame(comparator3, comparator0);
98:       
99:       Comparator<Map.Entry<Integer, Comparable<Integer>>> comparator4 = (Comparator<Map.Entry<Integer, Comparable<Integer>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator2);
100:       assertNotNull(comparator4);
101:       
102:       boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
103:       assertFalse(boolean1);
104:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
106:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
107:       assertTrue(boolean1 == boolean0);
108:       
109:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
110:       assertNotNull(patriciaTrie1);
111:       
112:       SortedMap<String, String> sortedMap2 = patriciaTrie1.prefixMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator");
113:       assertTrue(sortedMap2.isEmpty());
114:       assertEquals(0, sortedMap2.size());
115:       assertNotNull(sortedMap2);
116:       
117:       Set<String> set0 = patriciaTrie1.keySet();
118:       assertTrue(set0.isEmpty());
119:       assertEquals(0, set0.size());
120:       assertNotNull(set0);
121:       assertFalse(set0.contains("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet"));
122:       
123:       String string2 = patriciaTrie1.previousKey("Key cannot be null");
124:       assertNull(string2);
125:       
126:       Set<Map.Entry<String, Integer>> set1 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
127:       assertFalse(set1.isEmpty());
128:       assertEquals(2, set1.size());
129:       assertNotNull(set1);
130:   }
131: }
RegularFileObject[/tmp/EvoSuite_116_1629227672839/org/apache/commons/collections4/trie/AbstractPatriciaTrie_116_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:32 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_116_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_116_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_116_tmp__ESTest_scaffolding.class.getClassLoader()));
109:     mock(Class.forName("java.util.function.BiConsumer", false, AbstractPatriciaTrie_116_tmp__ESTest_scaffolding.class.getClassLoader()));
110:   }
111: 
112:   private static void resetClasses() {
113:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_116_tmp__ESTest_scaffolding.class.getClassLoader()); 
114: 
115:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
118:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
129:       "org.apache.commons.collections4.trie.PatriciaTrie",
130:       "org.apache.commons.collections4.trie.KeyAnalyzer",
131:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
139:     );
140:   }
141: }

[MASTER] 19:14:32.906 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(1203);
assertEquals(1203, (int)integer0);
assertNotNull(integer0);

Integer integer1 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", integer0);
assertNull(integer1);

String string0 = patriciaTrie0.selectKey("Cannot determine prefix outside of Character boundaries");
assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", string0);
assertNotNull(string0);

BiConsumer<String, Integer> biConsumer0 = (BiConsumer<String, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
patriciaTrie0.forEach(biConsumer0);
Integer integer2 = patriciaTrie0.put("Key cannot be null", (Integer) null);
assertNull(integer2);

boolean boolean0 = patriciaTrie0.compareKeys("", "Key cannot be null");
assertFalse(boolean0);

OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie0.mapIterator();
assertTrue(orderedMapIterator0.hasNext());
assertFalse(orderedMapIterator0.hasPrevious());
assertNotNull(orderedMapIterator0);

SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap("  ");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

String string1 = patriciaTrie0.lastKey();
assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", string1);
assertNotNull(string1);

Integer integer3 = new Integer((-2233));
assertEquals((-2233), (int)integer3);
assertFalse(integer3.equals((Object)integer0));
assertNotNull(integer3);

Integer integer4 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", integer3);
assertEquals(1203, (int)integer4);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer3));
assertNotNull(integer4);

SortedMap<String, Integer> sortedMap1 = patriciaTrie0.headMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator");
assertFalse(sortedMap1.isEmpty());
assertEquals(1, sortedMap1.size());
assertFalse(sortedMap1.equals((Object)sortedMap0));
assertNotNull(sortedMap1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("%eFx", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator", 1787);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Map.Entry<Integer, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

Comparator<Map.Entry<Comparable<Object>, Comparable<Integer>>> comparator1 = Map.Entry.comparingByKey();
assertNotNull(comparator1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Comparable<Object>>> comparator3 = Map.Entry.comparingByValue();
assertNotNull(comparator3);
assertSame(comparator3, comparator0);

Comparator<Map.Entry<Integer, Comparable<Integer>>> comparator4 = (Comparator<Map.Entry<Integer, Comparable<Integer>>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator2);
assertNotNull(comparator4);

boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(boolean1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(boolean1 == boolean0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);

SortedMap<String, String> sortedMap2 = patriciaTrie1.prefixMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator");
assertTrue(sortedMap2.isEmpty());
assertEquals(0, sortedMap2.size());
assertNotNull(sortedMap2);

Set<String> set0 = patriciaTrie1.keySet();
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());
assertNotNull(set0);
assertFalse(set0.contains("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet"));

String string2 = patriciaTrie1.previousKey("Key cannot be null");
assertNull(string2);

Set<Map.Entry<String, Integer>> set1 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
assertFalse(set1.isEmpty());
assertEquals(2, set1.size());
assertNotNull(set1);


[MASTER] 19:14:34.232 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_144_1629227674188/org/apache/commons/collections4/trie/AbstractPatriciaTrie_144_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_144_1629227674188/org/apache/commons/collections4/trie/AbstractPatriciaTrie_144_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:34.232 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:34.232 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:34.232 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.lang.String>,java.lang.String>>: 37
[MASTER] 19:14:34.232 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.lang.String>,java.lang.String>>: 73
[MASTER] 19:14:34.232 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Comparable<java.lang.Object>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Comparable<java.lang.Object>,java.lang.String>,java.lang.Comparable<java.lang.Object>>>: 78
[MASTER] 19:14:34.239 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>>: 92
[MASTER] 19:14:34.239 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_144_1629227674188/org/apache/commons/collections4/trie/AbstractPatriciaTrie_144_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:34.239 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:34.240 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_144_1629227674188/org/apache/commons/collections4/trie/AbstractPatriciaTrie_144_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:34 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_144_tmp__ESTest extends AbstractPatriciaTrie_144_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, "q_VcPx:(=u3ok;O");
31:       assertNotNull(abstractMap_SimpleEntry0);
32:       
33:       Comparator<Map.Entry<Comparable<Object>, String>> comparator0 = Map.Entry.comparingByKey();
34:       assertNotNull(comparator0);
35:       
36:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
37:       Comparator<Map.Entry<Comparable<String>, String>> comparator2 = (Comparator<Map.Entry<Comparable<String>, String>>)Map.Entry.comparingByKey((Comparator<? super Comparable<String>>) comparator1);
38:       assertNotNull(comparator2);
39:       
40:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = patriciaTrie0.put("q_VcPx:(=u3ok;O", abstractMap_SimpleEntry0);
41:       assertNull(abstractMap_SimpleEntry1);
42:       
43:       Object object0 = new Object();
44:       assertNotNull(object0);
45:       
46:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, String>(object0, "7");
47:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
48:       assertNotNull(abstractMap_SimpleEntry2);
49:       
50:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry3 = patriciaTrie0.put("7", abstractMap_SimpleEntry2);
51:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
52:       assertNull(abstractMap_SimpleEntry3);
53:       assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
54:       
55:       String string0 = abstractMap_SimpleEntry2.setValue("rT^3GW{[");
56:       assertEquals("7", string0);
57:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
58:       assertNotNull(string0);
59:       assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
60:       
61:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("7|.+s>", abstractMap_SimpleEntry2, (-410));
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
65:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
66:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
67:       
68:       Comparator<Map.Entry<Comparable<Object>, AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>>> comparator3 = Map.Entry.comparingByKey();
69:       assertNotNull(comparator3);
70:       
71:       Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
72:       Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
73:       Comparator<Map.Entry<Comparable<String>, String>> comparator6 = (Comparator<Map.Entry<Comparable<String>, String>>)Map.Entry.comparingByKey((Comparator<? super Comparable<String>>) comparator5);
74:       assertFalse(comparator6.equals((Object)comparator2));
75:       assertNotNull(comparator6);
76:       assertNotSame(comparator6, comparator2);
77:       
78:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Comparable<Object>, String>, Comparable<Object>>> comparator7 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Comparable<Object>, String>, Comparable<Object>>>)Map.Entry.comparingByValue((Comparator<? super Comparable<Object>>) comparator4);
79:       assertNotNull(comparator7);
80:       
81:       abstractPatriciaTrie_TrieEntry0.bitIndex = (-410);
82:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
85:       
86:       abstractPatriciaTrie_TrieEntry0.key = "7|.+s>";
87:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
88:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
89:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
90:       
91:       Comparator<Object> comparator8 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
92:       Comparator<Map.Entry<String, Object>> comparator9 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator8);
93:       assertNotNull(comparator9);
94:       
95:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
96:       assertNull(abstractPatriciaTrie_TrieEntry1);
97:       
98:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>) null);
99:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
100:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
102:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
103:       
104:       AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry4 = patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", abstractMap_SimpleEntry2);
105:       assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
106:       assertNull(abstractMap_SimpleEntry4);
107:       assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
108:       
109:       // Undeclared exception!
110:       try { 
111:         patriciaTrie0.subtree("", 665, 665);
112:         fail("Expecting exception: StringIndexOutOfBoundsException");
113:       
114:       } catch(StringIndexOutOfBoundsException e) {
115:       }
116:   }
117: }
RegularFileObject[/tmp/EvoSuite_144_1629227674188/org/apache/commons/collections4/trie/AbstractPatriciaTrie_144_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:34 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_144_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_144_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_144_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_144_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
138:     );
139:   }
140: }

[MASTER] 19:14:34.244 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
assertNotNull(patriciaTrie0);

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, "q_VcPx:(=u3ok;O");
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Map.Entry<Comparable<Object>, String>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Comparable<String>, String>> comparator2 = (Comparator<Map.Entry<Comparable<String>, String>>)Map.Entry.comparingByKey((Comparator<? super Comparable<String>>) comparator1);
assertNotNull(comparator2);

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = patriciaTrie0.put("q_VcPx:(=u3ok;O", abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry1);

Object object0 = new Object();
assertNotNull(object0);

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, String>(object0, "7");
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
assertNotNull(abstractMap_SimpleEntry2);

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry3 = patriciaTrie0.put("7", abstractMap_SimpleEntry2);
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
assertNull(abstractMap_SimpleEntry3);
assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);

String string0 = abstractMap_SimpleEntry2.setValue("rT^3GW{[");
assertEquals("7", string0);
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
assertNotNull(string0);
assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("7|.+s>", abstractMap_SimpleEntry2, (-410));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Map.Entry<Comparable<Object>, AbstractMap.SimpleEntry<Integer, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry>>>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Comparable<String>, String>> comparator6 = (Comparator<Map.Entry<Comparable<String>, String>>)Map.Entry.comparingByKey((Comparator<? super Comparable<String>>) comparator5);
assertFalse(comparator6.equals((Object)comparator2));
assertNotNull(comparator6);
assertNotSame(comparator6, comparator2);

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Comparable<Object>, String>, Comparable<Object>>> comparator7 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Comparable<Object>, String>, Comparable<Object>>>)Map.Entry.comparingByValue((Comparator<? super Comparable<Object>>) comparator4);
assertNotNull(comparator7);

abstractPatriciaTrie_TrieEntry0.bitIndex = (-410);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

abstractPatriciaTrie_TrieEntry0.key = "7|.+s>";
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Object> comparator8 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Object>> comparator9 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator8);
assertNotNull(comparator9);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
assertNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>) null);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry4 = patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", abstractMap_SimpleEntry2);
assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
assertNull(abstractMap_SimpleEntry4);
assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);

patriciaTrie0.subtree("", 665, 665);

[MASTER] 19:14:34.317 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_146_1629227674284/org/apache/commons/collections4/trie/AbstractPatriciaTrie_146_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_146_1629227674284/org/apache/commons/collections4/trie/AbstractPatriciaTrie_146_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:34.317 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:34.317 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:34.323 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.util.AbstractMap.SimpleEntry>>,java.lang.Integer>>: 89
[MASTER] 19:14:34.324 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_146_1629227674284/org/apache/commons/collections4/trie/AbstractPatriciaTrie_146_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:34.324 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:34.325 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_146_1629227674284/org/apache/commons/collections4/trie/AbstractPatriciaTrie_146_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:34 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.Set;
15: import java.util.function.BiConsumer;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_146_tmp__ESTest extends AbstractPatriciaTrie_146_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       Object object0 = patriciaTrie0.put("keyAnalyzer", "keyAnalyzer");
32:       assertNull(object0);
33:       
34:       Integer integer0 = new Integer(2338);
35:       assertEquals(2338, (int)integer0);
36:       assertNotNull(integer0);
37:       
38:       Object object1 = patriciaTrie0.put("zrPfTwi#Ndx!^g!4RN", integer0);
39:       assertNull(object1);
40:       
41:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("{on9Xz$&t~");
42:       assertNull(abstractPatriciaTrie_TrieEntry0);
43:       
44:       Integer integer1 = new Integer((-475));
45:       assertEquals((-475), (int)integer1);
46:       assertFalse(integer1.equals((Object)integer0));
47:       assertNotNull(integer1);
48:       
49:       Object object2 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", integer1);
50:       assertFalse(integer1.equals((Object)integer0));
51:       assertNull(object2);
52:       
53:       Set<String> set0 = patriciaTrie0.keySet();
54:       assertEquals(3, set0.size());
55:       assertFalse(set0.isEmpty());
56:       assertNotNull(set0);
57:       assertTrue(set0.contains("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1"));
58:       assertFalse(set0.contains("{on9Xz$&t~"));
59:       
60:       Object object3 = patriciaTrie0.put("zrPfTwi#Ndx!^g!4RN", (Object) null);
61:       assertEquals(2338, object3);
62:       assertFalse(object3.equals((Object)integer1));
63:       assertNotNull(object3);
64:       
65:       BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
66:       Object object4 = patriciaTrie0.put("zrPfTwi#Ndx!^g!4RN", set0);
67:       assertEquals(3, set0.size());
68:       assertFalse(set0.isEmpty());
69:       assertNull(object4);
70:       assertTrue(set0.contains("zrPfTwi#Ndx!^g!4RN"));
71:       assertFalse(set0.contains("{on9Xz$&t~"));
72:       
73:       patriciaTrie0.forEach(biConsumer0);
74:       Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select("fromKey > toKey");
75:       assertNotNull(map_Entry0);
76:       
77:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("{on9Xz$&t~", "{on9Xz$&t~", (-2955));
78:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
79:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
81:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
82:       
83:       abstractPatriciaTrie_TrieEntry1.right = null;
84:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
87:       
88:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
89:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
90:       assertNotNull(comparator1);
91:       
92:       Object object5 = abstractPatriciaTrie_TrieEntry1.setValue("Qo'E:|A9qn(");
93:       assertEquals("{on9Xz$&t~", object5);
94:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
95:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
97:       assertNotNull(object5);
98:       
99:       abstractPatriciaTrie_TrieEntry1.right = null;
100:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
101:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
103:       
104:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.right;
105:       assertNull(abstractPatriciaTrie_TrieEntry2);
106:       
107:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
108:       assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
109:       assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
111:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
112:       
113:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
114:       assertNotNull(patriciaTrie1);
115:       
116:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(map_Entry0);
117:       assertNotNull(abstractMap_SimpleEntry0);
118:       
119:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", abstractMap_SimpleEntry0);
120:       assertNull(abstractMap_SimpleEntry1);
121:       
122:       boolean boolean0 = patriciaTrie0.compareKeys("{on9Xz$&t~", "{on9Xz$&t~");
123:       assertTrue(boolean0);
124:       
125:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1");
126:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
128:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
129:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
130:       
131:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, (-475));
132:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
133:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
134:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
135:       assertFalse(integer0.equals((Object)integer1));
136:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
137:       
138:       Integer integer2 = new Integer((-2955));
139:       assertEquals((-2955), (int)integer2);
140:       assertFalse(integer2.equals((Object)object3));
141:       assertFalse(integer2.equals((Object)integer0));
142:       assertFalse(integer2.equals((Object)integer1));
143:       assertNotNull(integer2);
144:       
145:       abstractPatriciaTrie_TrieEntry5.key = integer2;
146:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
147:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
148:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
149:       
150:       String string0 = abstractPatriciaTrie_TrieEntry5.toString();
151:       assertEquals("Entry(key=-2955 [-475], value=null, parent=null, left=-2955 [-475], right=null, predecessor=-2955 [-475])", string0);
152:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
153:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
154:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
155:       assertFalse(integer0.equals((Object)integer1));
156:       assertFalse(integer0.equals((Object)integer2));
157:       assertFalse(string0.equals((Object)object5));
158:       assertNotNull(string0);
159:   }
160: }
RegularFileObject[/tmp/EvoSuite_146_1629227674284/org/apache/commons/collections4/trie/AbstractPatriciaTrie_146_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:34 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_146_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_146_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_146_tmp__ESTest_scaffolding.class.getClassLoader()));
109:     mock(Class.forName("java.util.function.BiConsumer", false, AbstractPatriciaTrie_146_tmp__ESTest_scaffolding.class.getClassLoader()));
110:   }
111: 
112:   private static void resetClasses() {
113:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_146_tmp__ESTest_scaffolding.class.getClassLoader()); 
114: 
115:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
118:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
129:       "org.apache.commons.collections4.trie.PatriciaTrie",
130:       "org.apache.commons.collections4.trie.KeyAnalyzer",
131:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
139:     );
140:   }
141: }

[MASTER] 19:14:34.328 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Object object0 = patriciaTrie0.put("keyAnalyzer", "keyAnalyzer");
assertNull(object0);

Integer integer0 = new Integer(2338);
assertEquals(2338, (int)integer0);
assertNotNull(integer0);

Object object1 = patriciaTrie0.put("zrPfTwi#Ndx!^g!4RN", integer0);
assertNull(object1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("{on9Xz$&t~");
assertNull(abstractPatriciaTrie_TrieEntry0);

Integer integer1 = new Integer((-475));
assertEquals((-475), (int)integer1);
assertFalse(integer1.equals((Object)integer0));
assertNotNull(integer1);

Object object2 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", integer1);
assertFalse(integer1.equals((Object)integer0));
assertNull(object2);

Set<String> set0 = patriciaTrie0.keySet();
assertEquals(3, set0.size());
assertFalse(set0.isEmpty());
assertNotNull(set0);
assertTrue(set0.contains("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1"));
assertFalse(set0.contains("{on9Xz$&t~"));

Object object3 = patriciaTrie0.put("zrPfTwi#Ndx!^g!4RN", (Object) null);
assertEquals(2338, object3);
assertFalse(object3.equals((Object)integer1));
assertNotNull(object3);

BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
Object object4 = patriciaTrie0.put("zrPfTwi#Ndx!^g!4RN", set0);
assertEquals(3, set0.size());
assertFalse(set0.isEmpty());
assertNull(object4);
assertTrue(set0.contains("zrPfTwi#Ndx!^g!4RN"));
assertFalse(set0.contains("{on9Xz$&t~"));

patriciaTrie0.forEach(biConsumer0);
Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select("fromKey > toKey");
assertNotNull(map_Entry0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("{on9Xz$&t~", "{on9Xz$&t~", (-2955));
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry1.right = null;
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

Object object5 = abstractPatriciaTrie_TrieEntry1.setValue("Qo'E:|A9qn(");
assertEquals("{on9Xz$&t~", object5);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(object5);

abstractPatriciaTrie_TrieEntry1.right = null;
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.right;
assertNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie1);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(map_Entry0);
assertNotNull(abstractMap_SimpleEntry0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry1);

boolean boolean0 = patriciaTrie0.compareKeys("{on9Xz$&t~", "{on9Xz$&t~");
assertTrue(boolean0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1");
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, (-475));
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(integer0.equals((Object)integer1));
assertNotNull(abstractPatriciaTrie_TrieEntry5);

Integer integer2 = new Integer((-2955));
assertEquals((-2955), (int)integer2);
assertFalse(integer2.equals((Object)object3));
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertNotNull(integer2);

abstractPatriciaTrie_TrieEntry5.key = integer2;
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());

String string0 = abstractPatriciaTrie_TrieEntry5.toString();
assertEquals("Entry(key=-2955 [-475], value=null, parent=null, left=-2955 [-475], right=null, predecessor=-2955 [-475])", string0);
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer2));
assertFalse(string0.equals((Object)object5));
assertNotNull(string0);


[MASTER] 19:14:35.304 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_166_1629227675266/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_166_1629227675266/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:35.304 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:35.304 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:35.317 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.String>>: 79
[MASTER] 19:14:35.317 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_166_1629227675266/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:35.317 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:35.318 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_166_1629227675266/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:35 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
14: import org.apache.commons.collections4.trie.PatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_166_tmp__ESTest extends AbstractPatriciaTrie_166_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("T+/|,U", "T+/|,U", (-1548));
26:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
27:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
28:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
29:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
30:       
31:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
32:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("KTAR$", "T+/|,U", 0);
33:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
34:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
35:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
36:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
37:       
38:       abstractPatriciaTrie_TrieEntry1.value = null;
39:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
40:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
41:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
42:       
43:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(abstractPatriciaTrie_TrieEntry1);
44:       assertFalse(boolean0);
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
48:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
51:       
52:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
56:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
62:       
63:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
64:       assertEquals("Entry(key=KTAR$ [0], value=null, parent=null, left=KTAR$ [0], right=null, predecessor=KTAR$ [0])", string0);
65:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       assertNotNull(string0);
69:       
70:       Object object0 = new Object();
71:       assertNotNull(object0);
72:       
73:       Object object1 = abstractPatriciaTrie_TrieEntry1.setKeyValue("iWytw``-w^0)qo1Px;", object0);
74:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
76:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
77:       assertNull(object1);
78:       
79:       Comparator<Map.Entry<Integer, String>> comparator1 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
80:       assertNotNull(comparator1);
81:       
82:       boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
83:       assertFalse(boolean1);
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
86:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
87:       assertTrue(boolean1 == boolean0);
88:       
89:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
90:       assertNotNull(patriciaTrie0);
91:       
92:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
93:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
94:       assertNotNull(patriciaTrie1);
95:       
96:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "P?s+Dw ilL7~", (-3));
97:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
100:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
101:       
102:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", (-975));
103:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
104:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
106:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
107:       
108:       abstractPatriciaTrie_TrieEntry2.left = abstractPatriciaTrie_TrieEntry3;
109:       assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
110:       assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
112:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
113:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry2.left.isEmpty());
116:       assertTrue(abstractPatriciaTrie_TrieEntry2.left.isExternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry2.left.isInternalNode());
118:       
119:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("P?s+Dw ilL7~", "Entry(key=KTAR$ [0], value=null, parent=null, left=KTAR$ [0], right=null, predecessor=KTAR$ [0])", (-1548));
120:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
122:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
123:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
124:       
125:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
126:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
128:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
129:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
130:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
132:       assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
133:       assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
134:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
135:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
136:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
137:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
138:       assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry5);
139:       assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
140:       assertNotSame(patriciaTrie0, patriciaTrie1);
141:       assertNotSame(patriciaTrie1, patriciaTrie0);
142:       
143:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
144:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
145:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
146:       assertNotNull(patriciaTrie2);
147:       
148:       String string1 = patriciaTrie2.nextKey("KTAR$");
149:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
150:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
151:       assertNull(string1);
152:       assertNotSame(patriciaTrie0, patriciaTrie1);
153:       assertNotSame(patriciaTrie1, patriciaTrie0);
154:   }
155: }
RegularFileObject[/tmp/EvoSuite_166_1629227675266/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:35 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_166_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_166_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_166_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_166_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator"
138:     );
139:   }
140: }

[MASTER] 19:14:35.320 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("T+/|,U", "T+/|,U", (-1548));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("KTAR$", "T+/|,U", 0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry1.value = null;
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(abstractPatriciaTrie_TrieEntry1);
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertEquals("Entry(key=KTAR$ [0], value=null, parent=null, left=KTAR$ [0], right=null, predecessor=KTAR$ [0])", string0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(string0);

Object object0 = new Object();
assertNotNull(object0);

Object object1 = abstractPatriciaTrie_TrieEntry1.setKeyValue("iWytw``-w^0)qo1Px;", object0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNull(object1);

Comparator<Map.Entry<Integer, String>> comparator1 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

boolean boolean1 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(boolean1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(boolean1 == boolean0);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "P?s+Dw ilL7~", (-3));
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", (-975));
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

abstractPatriciaTrie_TrieEntry2.left = abstractPatriciaTrie_TrieEntry3;
assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.left.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("P?s+Dw ilL7~", "Entry(key=KTAR$ [0], value=null, parent=null, left=KTAR$ [0], right=null, predecessor=KTAR$ [0])", (-1548));
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry5);
assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotNull(patriciaTrie2);

String string1 = patriciaTrie2.nextKey("KTAR$");
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNull(string1);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);


[MASTER] 19:14:39.624 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:39.821 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:39.978 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:40.146 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:40.326 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:40.491 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:40.768 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:40.920 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:41.034 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:41.181 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:41.272 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:41.359 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:41.506 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:41.603 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:41.676 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:41.764 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:41.862 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:41.997 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:42.086 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:42.201 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:42.309 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:42.379 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:42.467 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:42.537 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:42.620 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:42.718 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:42.800 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:42.880 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:42.935 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:42.999 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:43.105 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:43.182 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:43.276 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:43.365 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:43.431 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:43.486 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:43.585 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:43.720 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:43.814 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:43.902 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:44.017 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:44.101 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:44.163 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:44.246 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:44.347 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:44.572 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:44.640 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:44.766 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:44.859 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:44.977 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:45.075 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:45.142 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:45.258 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:45.367 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:45.480 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:45.538 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:45.598 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:45.685 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:45.752 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:45.841 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:45.906 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:46.029 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:46.143 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:46.270 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:46.341 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:46.489 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:46.564 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:46.841 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:47.041 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:47.209 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:47.289 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:47.385 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:47.488 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:47.578 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:47.670 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:47.763 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:47.830 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:47.899 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:48.009 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:48.109 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:48.241 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:48.371 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:48.665 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:48.774 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:48.834 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:48.957 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:49.025 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:49.105 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:49.192 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:49.292 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:49.375 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:49.464 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:49.526 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:49.590 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:49.663 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:49.727 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:49.809 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:49.880 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:49.973 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:50.080 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:50.197 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:50.302 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:50.418 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:51.214 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:51.356 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:51.414 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:51.502 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:51.579 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:51.693 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:51.802 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:51.943 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:52.038 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:52.114 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:52.209 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:52.293 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:52.361 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:52.437 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:52.524 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:52.584 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:52.658 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:52.828 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:52.914 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.024 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.084 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.140 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.218 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.275 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.328 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.377 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.459 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.517 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.593 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.708 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.780 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.846 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.912 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:53.968 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:54.045 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:54.125 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:54.186 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:54.249 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:54.423 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:54.497 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:54.556 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:54.617 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:54.693 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:54.800 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:54.900 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:55.060 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:55.141 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:55.201 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:55.297 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:55.375 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:55.434 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:55.556 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:55.649 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:55.723 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:55.789 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:55.871 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:55.982 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:56.085 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:59.207 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:59.429 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:59.529 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:59.612 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:59.684 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:59.793 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:59.877 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:59.929 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:00.013 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:00.132 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:00.219 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:00.330 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:00.524 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:00.632 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:07.356 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0-50/tests/15
* Done!

* Computation finished
