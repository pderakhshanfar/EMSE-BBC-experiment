* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 5207
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 1411756281
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 19:02:49.914 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 19:02:49.914 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 19:02:55.669 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 19:04:52.182 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 603s and 776 generations, 301177 statements, best individual has fitness: 1399.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 19:13:59.138 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 59%
* Total number of goals: 822
* Number of covered goals: 487
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 53%
* Total number of goals: 602
* Number of covered goals: 317
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 57%
* Total number of goals: 569
* Number of covered goals: 324
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 63%
* Total number of goals: 186
* Number of covered goals: 117
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 52%
* Total number of goals: 602
* Number of covered goals: 315
* Generated 217 tests with total length 3402
* Resulting test suite's coverage: 51% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 19:14:46.634 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7081% of time used, but only 9/217 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
[MASTER] 19:14:56.578 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_23_1629227693525/org/apache/commons/collections4/trie/AbstractPatriciaTrie_23_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_23_1629227693525/org/apache/commons/collections4/trie/AbstractPatriciaTrie_23_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:56.578 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:56.578 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:56.582 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Object cannot be converted to java.lang.String: 115
[MASTER] 19:14:56.582 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Some messages have been simplified; recompile with -Xdiags:verbose to get full output: -1
[MASTER] 19:14:56.583 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_23_1629227693525/org/apache/commons/collections4/trie/AbstractPatriciaTrie_23_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:56 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
12: import org.apache.commons.collections4.trie.PatriciaTrie;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class AbstractPatriciaTrie_23_tmp__ESTest extends AbstractPatriciaTrie_23_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
23:       assertNotNull(patriciaTrie0);
24:       
25:       int int0 = 790;
26:       Integer integer0 = new Integer(790);
27:       assertEquals(790, (int)integer0);
28:       assertTrue(integer0.equals((Object)int0));
29:       assertNotNull(integer0);
30:       
31:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "}\n", 790);
32:       assertTrue(integer0.equals((Object)int0));
33:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
34:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
35:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
36:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
37:       
38:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
39:       assertFalse(boolean0);
40:       assertTrue(integer0.equals((Object)int0));
41:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       
45:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "}\n", 790);
46:       assertTrue(integer0.equals((Object)int0));
47:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
48:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
49:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
51:       
52:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
57:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
62:       
63:       String string0 = "+k~\"]j#A{I ?R";
64:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("+k~\"]j#A{I ?R", abstractPatriciaTrie_TrieEntry1, 0);
65:       assertTrue(integer0.equals((Object)int0));
66:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
70:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
71:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
73:       
74:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
75:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
76:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
78:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
79:       
80:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry3, (-3768));
81:       assertTrue(integer0.equals((Object)int0));
82:       assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
83:       assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
84:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
85:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
86:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
88:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
89:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
90:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
91:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
93:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
94:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
95:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
96:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
97:       
98:       Integer integer1 = abstractPatriciaTrie_TrieEntry0.key;
99:       assertEquals(790, (int)integer1);
100:       assertTrue(integer1.equals((Object)int0));
101:       assertNotNull(integer1);
102:       
103:       Object object0 = patriciaTrie0.put("}\n", integer1);
104:       assertTrue(integer0.equals((Object)int0));
105:       assertTrue(integer1.equals((Object)int0));
106:       assertNull(object0);
107:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
109:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
110:       
111:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
112:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
113:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Object>(string0, string0, int0);
114:       Object object1 = null;
115:       Object object2 = abstractPatriciaTrie_TrieEntry5.setKeyValue((Object) object1, (Object) integer0);
116:       patriciaTrie2.getEntry(object2);
117:       PatriciaTrie<Comparable<Object>> patriciaTrie3 = new PatriciaTrie<Comparable<Object>>();
118:       PatriciaTrie<Comparable<Object>> patriciaTrie4 = new PatriciaTrie<Comparable<Object>>(patriciaTrie3);
119:       patriciaTrie4.lastKey();
120:       Object object3 = null;
121:       int int1 = (-1);
122:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<String, Object>(string0, object3, int1);
123:       patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry6);
124:   }
125: }
RegularFileObject[/tmp/EvoSuite_23_1629227693525/org/apache/commons/collections4/trie/AbstractPatriciaTrie_23_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:56 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class AbstractPatriciaTrie_23_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_23_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "org.apache.commons.collections4.MapIterator",
70:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
71:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
72:       "org.apache.commons.collections4.trie.PatriciaTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
74:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
76:       "org.apache.commons.collections4.Get",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
78:       "org.apache.commons.collections4.Trie",
79:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
80:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
81:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
82:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
85:       "org.apache.commons.collections4.IterableSortedMap",
86:       "org.apache.commons.collections4.OrderedMap",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
90:       "org.apache.commons.collections4.OrderedMapIterator",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
93:       "org.apache.commons.collections4.Put",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
95:       "org.apache.commons.collections4.trie.KeyAnalyzer",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
97:       "org.apache.commons.collections4.IterableMap",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
100:       "org.apache.commons.collections4.OrderedIterator",
101:       "org.apache.commons.collections4.IterableGet"
102:     );
103:   } 
104: 
105:   private static void resetClasses() {
106:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_23_tmp__ESTest_scaffolding.class.getClassLoader()); 
107: 
108:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
109:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
111:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
122:       "org.apache.commons.collections4.trie.PatriciaTrie",
123:       "org.apache.commons.collections4.trie.KeyAnalyzer",
124:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
132:     );
133:   }
134: }

[MASTER] 19:14:56.585 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

int int0 = 790;
Integer integer0 = new Integer(790);
assertEquals(790, (int)integer0);
assertTrue(integer0.equals((Object)int0));
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "}\n", 790);
assertTrue(integer0.equals((Object)int0));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals((Object) null);
assertFalse(boolean0);
assertTrue(integer0.equals((Object)int0));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "}\n", 790);
assertTrue(integer0.equals((Object)int0));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());

String string0 = "+k~\"]j#A{I ?R";
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("+k~\"]j#A{I ?R", abstractPatriciaTrie_TrieEntry1, 0);
assertTrue(integer0.equals((Object)int0));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry3, (-3768));
assertTrue(integer0.equals((Object)int0));
assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());

Integer integer1 = abstractPatriciaTrie_TrieEntry0.key;
assertEquals(790, (int)integer1);
assertTrue(integer1.equals((Object)int0));
assertNotNull(integer1);

Object object0 = patriciaTrie0.put("}\n", integer1);
assertTrue(integer0.equals((Object)int0));
assertTrue(integer1.equals((Object)int0));
assertNull(object0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Object>(string0, string0, int0);
Object object1 = null;
Object object2 = abstractPatriciaTrie_TrieEntry5.setKeyValue((Object) object1, (Object) integer0);
patriciaTrie2.getEntry(object2);
PatriciaTrie<Comparable<Object>> patriciaTrie3 = new PatriciaTrie<Comparable<Object>>();
PatriciaTrie<Comparable<Object>> patriciaTrie4 = new PatriciaTrie<Comparable<Object>>(patriciaTrie3);
patriciaTrie4.lastKey();
Object object3 = null;
int int1 = (-1);
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<String, Object>(string0, object3, int1);
patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry6);

[MASTER] 19:14:56.690 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_25_1629227696657/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_25_1629227696657/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:56.690 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:56.690 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:56.691 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Object cannot be converted to java.lang.Integer: 41
[MASTER] 19:14:56.691 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Some messages have been simplified; recompile with -Xdiags:verbose to get full output: -1
[MASTER] 19:14:56.691 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_25_1629227696657/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:56 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.AbstractMap;
11: import java.util.Comparator;
12: import java.util.Map;
13: import java.util.Set;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_25_tmp__ESTest extends AbstractPatriciaTrie_25_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
26:       assertNotNull(patriciaTrie0);
27:       
28:       Integer integer0 = new Integer((-32));
29:       assertEquals((-32), (int)integer0);
30:       assertNotNull(integer0);
31:       
32:       AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>((Integer) null, patriciaTrie0);
33:       assertNotNull(abstractMap_SimpleEntry0);
34:       
35:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, Object>>(integer0, abstractMap_SimpleEntry0, 896);
36:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
39:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
40:       
41:       Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue((Object) null, (Object) null);
42:       assertNotNull(object0);
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
46:       
47:       Object object1 = patriciaTrie0.put("Jh i'C5OIy/jf}Nf`", object0);
48:       assertNull(object1);
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
51:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
52:       
53:       Object object2 = patriciaTrie0.put("S~2@?l4HTT6Xmx9w", "S~2@?l4HTT6Xmx9w");
54:       assertNull(object2);
55:       
56:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
57:       assertNotNull(patriciaTrie1);
58:       
59:       String string0 = patriciaTrie0.nextKey("S~2@?l4HTT6Xmx9w");
60:       assertNull(string0);
61:       
62:       Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie1.entrySet();
63:       assertNotNull(set0);
64:       assertTrue(set0.isEmpty());
65:       assertEquals(0, set0.size());
66:       
67:       Integer integer1 = new Integer((-770));
68:       assertEquals((-770), (int)integer1);
69:       assertFalse(integer1.equals((Object)integer0));
70:       assertNotNull(integer1);
71:       
72:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.getNearestEntryForKey("YNy:", (-770));
73:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
74:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
75:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
76:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
77:       
78:       Comparator<Map.Entry<Comparable<Object>, String>> comparator0 = Map.Entry.comparingByKey();
79:       assertNotNull(comparator0);
80:       
81:       Comparator<Map.Entry<Comparable<Object>, String>> comparator1 = Map.Entry.comparingByKey();
82:       assertSame(comparator1, comparator0);
83:       assertNotNull(comparator1);
84:       
85:       AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object>((Comparable<Object>) null, set0, (-3233));
86:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
87:       assertTrue(set0.isEmpty());
88:       assertEquals(0, set0.size());
89:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
90:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
91:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
92:       
93:       boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
94:       assertFalse(boolean0);
95:       assertTrue(set0.isEmpty());
96:       assertEquals(0, set0.size());
97:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
98:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
99:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
100:   }
101: }
RegularFileObject[/tmp/EvoSuite_25_1629227696657/org/apache/commons/collections4/trie/AbstractPatriciaTrie_25_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:56 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class AbstractPatriciaTrie_25_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_25_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "org.apache.commons.collections4.MapIterator",
70:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
71:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
72:       "org.apache.commons.collections4.trie.PatriciaTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
74:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
76:       "org.apache.commons.collections4.Get",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
78:       "org.apache.commons.collections4.Trie",
79:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
80:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
81:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
82:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
85:       "org.apache.commons.collections4.IterableSortedMap",
86:       "org.apache.commons.collections4.OrderedMap",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
90:       "org.apache.commons.collections4.OrderedMapIterator",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
93:       "org.apache.commons.collections4.Put",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
95:       "org.apache.commons.collections4.trie.KeyAnalyzer",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
97:       "org.apache.commons.collections4.IterableMap",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
100:       "org.apache.commons.collections4.OrderedIterator",
101:       "org.apache.commons.collections4.IterableGet"
102:     );
103:   } 
104: 
105:   private static void resetClasses() {
106:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_25_tmp__ESTest_scaffolding.class.getClassLoader()); 
107: 
108:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
109:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
111:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
122:       "org.apache.commons.collections4.trie.PatriciaTrie",
123:       "org.apache.commons.collections4.trie.KeyAnalyzer",
124:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
132:     );
133:   }
134: }

[MASTER] 19:14:56.692 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer((-32));
assertEquals((-32), (int)integer0);
assertNotNull(integer0);

AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>((Integer) null, patriciaTrie0);
assertNotNull(abstractMap_SimpleEntry0);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, Object>>(integer0, abstractMap_SimpleEntry0, 896);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue((Object) null, (Object) null);
assertNotNull(object0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Object object1 = patriciaTrie0.put("Jh i'C5OIy/jf}Nf`", object0);
assertNull(object1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Object object2 = patriciaTrie0.put("S~2@?l4HTT6Xmx9w", "S~2@?l4HTT6Xmx9w");
assertNull(object2);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

String string0 = patriciaTrie0.nextKey("S~2@?l4HTT6Xmx9w");
assertNull(string0);

Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie1.entrySet();
assertNotNull(set0);
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());

Integer integer1 = new Integer((-770));
assertEquals((-770), (int)integer1);
assertFalse(integer1.equals((Object)integer0));
assertNotNull(integer1);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.getNearestEntryForKey("YNy:", (-770));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Comparator<Map.Entry<Comparable<Object>, String>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparator<Map.Entry<Comparable<Object>, String>> comparator1 = Map.Entry.comparingByKey();
assertSame(comparator1, comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object>((Comparable<Object>) null, set0, (-3233));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
assertFalse(boolean0);
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());


[MASTER] 19:14:57.870 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_43_1629227697769/org/apache/commons/collections4/trie/AbstractPatriciaTrie_43_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_43_1629227697769/org/apache/commons/collections4/trie/AbstractPatriciaTrie_43_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:57.870 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:57.870 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:57.871 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>,java.lang.String>>: 93
[MASTER] 19:14:57.871 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 96
[MASTER] 19:14:57.871 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_43_1629227697769/org/apache/commons/collections4/trie/AbstractPatriciaTrie_43_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:57.871 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:57.872 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_43_1629227697769/org/apache/commons/collections4/trie/AbstractPatriciaTrie_43_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:57 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_43_tmp__ESTest extends AbstractPatriciaTrie_43_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       String string0 = "=";
28:       int int0 = 1773;
29:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("=", "=", 1773);
30:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
31:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
34:       
35:       Integer integer0 = new Integer(1773);
36:       assertEquals(1773, (int)integer0);
37:       assertTrue(integer0.equals((Object)int0));
38:       assertNotNull(integer0);
39:       
40:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer0, 1773);
41:       assertTrue(integer0.equals((Object)int0));
42:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
43:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
44:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
46:       
47:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
57:       
58:       Integer integer1 = new Integer(1773);
59:       assertEquals(1773, (int)integer1);
60:       assertTrue(integer1.equals((Object)int0));
61:       assertTrue(integer1.equals((Object)integer0));
62:       assertNotNull(integer1);
63:       
64:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(integer1);
65:       assertFalse(boolean0);
66:       assertTrue(integer1.equals((Object)int0));
67:       assertTrue(integer1.equals((Object)integer0));
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
71:       
72:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
73:       Object object0 = abstractPatriciaTrie_TrieEntry0.setValue(integer0);
74:       assertEquals("=", object0);
75:       assertTrue(integer0.equals((Object)integer1));
76:       assertTrue(integer0.equals((Object)int0));
77:       assertTrue(object0.equals((Object)string0));
78:       assertNotNull(object0);
79:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
82:       
83:       String string1 = abstractPatriciaTrie_TrieEntry0.toString();
84:       assertEquals("Entry(key== [1773], value=1773, parent=null, left== [1773], right= [1773], predecessor== [1773])", string1);
85:       assertFalse(string1.equals((Object)string0));
86:       assertFalse(string1.equals((Object)object0));
87:       assertNotNull(string1);
88:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
90:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
91:       
92:       Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
93:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, String>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator1);
94:       assertNotNull(comparator2);
95:       
96:       Comparator<Map.Entry<String, String>> comparator3 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
97:       assertNotNull(comparator3);
98:       
99:       // Undeclared exception!
100:       try { 
101:         Map.Entry.comparingByKey((Comparator<? super String>) null);
102:         fail("Expecting exception: NullPointerException");
103:       
104:       } catch(NullPointerException e) {
105:          //
106:          // no message in exception (getMessage() returned null)
107:          //
108:          verifyException("java.util.Objects", e);
109:       }
110:   }
111: }
RegularFileObject[/tmp/EvoSuite_43_1629227697769/org/apache/commons/collections4/trie/AbstractPatriciaTrie_43_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:57 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_43_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_43_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_43_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_43_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:14:57.873 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "=";
int int0 = 1773;
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("=", "=", 1773);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Integer integer0 = new Integer(1773);
assertEquals(1773, (int)integer0);
assertTrue(integer0.equals((Object)int0));
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer0, 1773);
assertTrue(integer0.equals((Object)int0));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());

Integer integer1 = new Integer(1773);
assertEquals(1773, (int)integer1);
assertTrue(integer1.equals((Object)int0));
assertTrue(integer1.equals((Object)integer0));
assertNotNull(integer1);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(integer1);
assertFalse(boolean0);
assertTrue(integer1.equals((Object)int0));
assertTrue(integer1.equals((Object)integer0));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Object object0 = abstractPatriciaTrie_TrieEntry0.setValue(integer0);
assertEquals("=", object0);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)int0));
assertTrue(object0.equals((Object)string0));
assertNotNull(object0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

String string1 = abstractPatriciaTrie_TrieEntry0.toString();
assertEquals("Entry(key== [1773], value=1773, parent=null, left== [1773], right= [1773], predecessor== [1773])", string1);
assertFalse(string1.equals((Object)string0));
assertFalse(string1.equals((Object)object0));
assertNotNull(string1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, String>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator1);
assertNotNull(comparator2);

Comparator<Map.Entry<String, String>> comparator3 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator3);

Map.Entry.comparingByKey((Comparator<? super String>) null);

[MASTER] 19:14:58.876 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_57_1629227698782/org/apache/commons/collections4/trie/AbstractPatriciaTrie_57_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_57_1629227698782/org/apache/commons/collections4/trie/AbstractPatriciaTrie_57_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:58.876 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:58.876 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:58.876 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 73
[MASTER] 19:14:58.876 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_57_1629227698782/org/apache/commons/collections4/trie/AbstractPatriciaTrie_57_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:58.876 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:58.877 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_57_1629227698782/org/apache/commons/collections4/trie/AbstractPatriciaTrie_57_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:58 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_57_tmp__ESTest extends AbstractPatriciaTrie_57_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       int int0 = 1;
28:       Integer integer0 = new Integer(1);
29:       assertEquals(1, (int)integer0);
30:       assertTrue(integer0.equals((Object)int0));
31:       assertNotNull(integer0);
32:       
33:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 1);
34:       assertTrue(integer0.equals((Object)int0));
35:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
36:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
39:       
40:       Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
41:       assertNotNull(comparator0);
42:       
43:       abstractPatriciaTrie_TrieEntry0.key = null;
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
47:       
48:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
49:       Comparator<Map.Entry<Object, String>> comparator2 = Map.Entry.comparingByValue();
50:       assertSame(comparator2, comparator0);
51:       assertNotNull(comparator2);
52:       
53:       Comparator<Map.Entry<Object, Object>> comparator3 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
54:       assertNotNull(comparator3);
55:       
56:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
57:       assertFalse(boolean0);
58:       assertTrue(integer0.equals((Object)int0));
59:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
62:       
63:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
64:       assertNotNull(patriciaTrie0);
65:       
66:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "\n", 1);
67:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
71:       
72:       Comparator<String> comparator4 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
73:       Comparator<Map.Entry<String, String>> comparator5 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator4);
74:       assertNotNull(comparator5);
75:       
76:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
77:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
78:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
81:       
82:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
83:       assertNull(abstractPatriciaTrie_TrieEntry3);
84:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
85:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
87:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
88:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
89:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
90:       
91:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
92:       assertNotNull(patriciaTrie1);
93:       
94:       Integer integer1 = patriciaTrie1.put("", integer0);
95:       assertTrue(integer0.equals((Object)int0));
96:       assertNull(integer1);
97:       
98:       String string0 = patriciaTrie1.previousKey("");
99:       assertNull(string0);
100:       
101:       Comparator<Map.Entry<Integer, Object>> comparator6 = Map.Entry.comparingByKey();
102:       assertNotNull(comparator6);
103:       
104:       patriciaTrie1.incrementSize();
105:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, (AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry1);
106:       assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
107:       assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
108:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
109:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
110:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
111:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
113:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
115:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
116:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
117:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
118:       
119:       patriciaTrie0.clear();
120:       Object object0 = new Object();
121:       assertNotNull(object0);
122:       
123:       // Undeclared exception!
124:       try { 
125:         patriciaTrie1.containsKey(object0);
126:         fail("Expecting exception: ClassCastException");
127:       
128:       } catch(ClassCastException e) {
129:          //
130:          // no message in exception (getMessage() returned null)
131:          //
132:       }
133:   }
134: }
RegularFileObject[/tmp/EvoSuite_57_1629227698782/org/apache/commons/collections4/trie/AbstractPatriciaTrie_57_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:58 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_57_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_57_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_57_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_57_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:14:58.880 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int int0 = 1;
Integer integer0 = new Integer(1);
assertEquals(1, (int)integer0);
assertTrue(integer0.equals((Object)int0));
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 1);
assertTrue(integer0.equals((Object)int0));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

abstractPatriciaTrie_TrieEntry0.key = null;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator2 = Map.Entry.comparingByValue();
assertSame(comparator2, comparator0);
assertNotNull(comparator2);

Comparator<Map.Entry<Object, Object>> comparator3 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
assertNotNull(comparator3);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(boolean0);
assertTrue(integer0.equals((Object)int0));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "\n", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

Comparator<String> comparator4 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator5 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator4);
assertNotNull(comparator5);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
assertNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Integer integer1 = patriciaTrie1.put("", integer0);
assertTrue(integer0.equals((Object)int0));
assertNull(integer1);

String string0 = patriciaTrie1.previousKey("");
assertNull(string0);

Comparator<Map.Entry<Integer, Object>> comparator6 = Map.Entry.comparingByKey();
assertNotNull(comparator6);

patriciaTrie1.incrementSize();
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry2, (AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry1);
assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

patriciaTrie0.clear();
Object object0 = new Object();
assertNotNull(object0);

patriciaTrie1.containsKey(object0);

[MASTER] 19:14:59.303 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_67_1629227699267/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_67_1629227699267/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:59.304 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:59.304 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:59.304 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 71
[MASTER] 19:14:59.304 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_67_1629227699267/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:59.304 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:59.305 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_67_1629227699267/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:59 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.Set;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_67_tmp__ESTest extends AbstractPatriciaTrie_67_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       Integer integer0 = new Integer(1);
29:       assertEquals(1, (int)integer0);
30:       assertNotNull(integer0);
31:       
32:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 1);
33:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
35:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
36:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
37:       
38:       Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
39:       assertNotNull(comparator0);
40:       
41:       abstractPatriciaTrie_TrieEntry0.key = null;
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       
46:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
47:       Comparator<Map.Entry<Object, String>> comparator2 = Map.Entry.comparingByValue();
48:       assertSame(comparator2, comparator0);
49:       assertNotNull(comparator2);
50:       
51:       Comparator<Map.Entry<Object, Object>> comparator3 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
52:       assertNotNull(comparator3);
53:       
54:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
55:       assertFalse(boolean0);
56:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
58:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
59:       
60:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
61:       assertNotNull(patriciaTrie0);
62:       
63:       String string0 = "\n";
64:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "\n", 1);
65:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
69:       
70:       Comparator<String> comparator4 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
71:       Comparator<Map.Entry<String, String>> comparator5 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator4);
72:       assertNotNull(comparator5);
73:       
74:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
75:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
76:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
78:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
79:       
80:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
81:       assertNull(abstractPatriciaTrie_TrieEntry3);
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
83:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
87:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
88:       
89:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
90:       assertNotNull(patriciaTrie1);
91:       
92:       Set<String> set0 = patriciaTrie1.keySet();
93:       assertFalse(set0.contains(string0));
94:       assertNotNull(set0);
95:       assertEquals(0, set0.size());
96:       assertTrue(set0.isEmpty());
97:       
98:       Integer integer1 = patriciaTrie1.put("", integer0);
99:       assertNull(integer1);
100:       
101:       String string1 = patriciaTrie1.previousKey("");
102:       assertNull(string1);
103:       
104:       Comparator<Map.Entry<Integer, Object>> comparator6 = Map.Entry.comparingByKey();
105:       assertNotNull(comparator6);
106:       
107:       patriciaTrie1.incrementSize();
108:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
109:       assertNull(abstractPatriciaTrie_TrieEntry4);
110:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
111:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
113:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
115:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
116:       
117:       patriciaTrie0.clear();
118:       Object object0 = new Object();
119:       assertNotNull(object0);
120:       
121:       Object object1 = new Object();
122:       assertFalse(object1.equals((Object)object0));
123:       assertNotNull(object1);
124:       
125:       // Undeclared exception!
126:       try { 
127:         patriciaTrie1.containsKey(object1);
128:         fail("Expecting exception: ClassCastException");
129:       
130:       } catch(ClassCastException e) {
131:          //
132:          // no message in exception (getMessage() returned null)
133:          //
134:       }
135:   }
136: }
RegularFileObject[/tmp/EvoSuite_67_1629227699267/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:59 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_67_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_67_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_67_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_67_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:14:59.307 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(1);
assertEquals(1, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 1);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

abstractPatriciaTrie_TrieEntry0.key = null;
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator2 = Map.Entry.comparingByValue();
assertSame(comparator2, comparator0);
assertNotNull(comparator2);

Comparator<Map.Entry<Object, Object>> comparator3 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
assertNotNull(comparator3);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = "\n";
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "\n", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

Comparator<String> comparator4 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator5 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator4);
assertNotNull(comparator5);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
assertNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Set<String> set0 = patriciaTrie1.keySet();
assertFalse(set0.contains(string0));
assertNotNull(set0);
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());

Integer integer1 = patriciaTrie1.put("", integer0);
assertNull(integer1);

String string1 = patriciaTrie1.previousKey("");
assertNull(string1);

Comparator<Map.Entry<Integer, Object>> comparator6 = Map.Entry.comparingByKey();
assertNotNull(comparator6);

patriciaTrie1.incrementSize();
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
assertNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

patriciaTrie0.clear();
Object object0 = new Object();
assertNotNull(object0);

Object object1 = new Object();
assertFalse(object1.equals((Object)object0));
assertNotNull(object1);

patriciaTrie1.containsKey(object1);

[MASTER] 19:14:59.464 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_70_1629227699424/org/apache/commons/collections4/trie/AbstractPatriciaTrie_70_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_70_1629227699424/org/apache/commons/collections4/trie/AbstractPatriciaTrie_70_tmp__ESTest_scaffolding.java]]
[MASTER] 19:14:59.464 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:59.464 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:14:59.465 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 50
[MASTER] 19:14:59.465 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_70_1629227699424/org/apache/commons/collections4/trie/AbstractPatriciaTrie_70_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:14:59.465 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:14:59.466 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_70_1629227699424/org/apache/commons/collections4/trie/AbstractPatriciaTrie_70_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:59 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_70_tmp__ESTest extends AbstractPatriciaTrie_70_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, (Object) null, 3286);
28:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
29:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
31:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
32:       
33:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
34:       assertFalse(boolean0);
35:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
36:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
37:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
38:       
39:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
40:       assertNotNull(patriciaTrie0);
41:       
42:       String string0 = "";
43:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("jp!DzjpB*7", "", (-2232));
44:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
45:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
46:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
48:       
49:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
50:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
51:       assertNotNull(comparator1);
52:       
53:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
54:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
55:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
57:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
58:       
59:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.left;
60:       assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
61:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
62:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
63:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
65:       
66:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry3);
67:       assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
68:       assertNull(abstractPatriciaTrie_TrieEntry4);
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
72:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
73:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
74:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
75:       
76:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
77:       assertNotNull(patriciaTrie1);
78:       
79:       String string1 = patriciaTrie1.previousKey("must have a from or to!");
80:       assertNull(string1);
81:       
82:       Comparator<Map.Entry<Integer, Object>> comparator2 = Map.Entry.comparingByKey();
83:       assertNotNull(comparator2);
84:       
85:       patriciaTrie1.incrementSize();
86:       // Undeclared exception!
87:       try { 
88:         patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
89:         fail("Expecting exception: NullPointerException");
90:       
91:       } catch(NullPointerException e) {
92:          //
93:          // no message in exception (getMessage() returned null)
94:          //
95:       }
96:   }
97: }
RegularFileObject[/tmp/EvoSuite_70_1629227699424/org/apache/commons/collections4/trie/AbstractPatriciaTrie_70_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:59 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_70_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_70_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_70_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_70_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:14:59.467 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, (Object) null, 3286);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = "";
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("jp!DzjpB*7", "", (-2232));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.left;
assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry3);
assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
assertNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

String string1 = patriciaTrie1.previousKey("must have a from or to!");
assertNull(string1);

Comparator<Map.Entry<Integer, Object>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

patriciaTrie1.incrementSize();
patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);

[MASTER] 19:15:00.010 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_80_1629227699970/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_80_1629227699970/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:00.010 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:00.010 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:00.011 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>>>: 45
[MASTER] 19:15:00.011 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_80_1629227699970/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:00.011 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:00.011 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_80_1629227699970/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:14:59 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.SortedMap;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_80_tmp__ESTest extends AbstractPatriciaTrie_80_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       String string0 = "";
31:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", patriciaTrie0);
32:       assertNotNull(abstractMap_SimpleEntry0);
33:       
34:       Comparator<Map.Entry<Integer, String>> comparator0 = Map.Entry.comparingByValue();
35:       assertNotNull(comparator0);
36:       
37:       Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
38:       Comparator<Map.Entry<Integer, String>> comparator2 = Map.Entry.comparingByValue();
39:       assertSame(comparator2, comparator0);
40:       assertNotNull(comparator2);
41:       
42:       Comparator<Map.Entry<Integer, Object>> comparator3 = Map.Entry.comparingByKey();
43:       assertNotNull(comparator3);
44:       
45:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, Object>>> comparator4 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
46:       assertNotNull(comparator4);
47:       
48:       SortedMap<String, AbstractMap.SimpleEntry<String, Object>> sortedMap0 = patriciaTrie0.tailMap("(");
49:       assertNotNull(sortedMap0);
50:       assertEquals(0, sortedMap0.size());
51:       assertTrue(sortedMap0.isEmpty());
52:       
53:       Comparator<Map.Entry<Integer, String>> comparator5 = Map.Entry.comparingByValue();
54:       assertSame(comparator5, comparator2);
55:       assertSame(comparator5, comparator0);
56:       assertNotNull(comparator5);
57:       
58:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put("$t}X", abstractMap_SimpleEntry0);
59:       assertNull(abstractMap_SimpleEntry1);
60:       
61:       String string1 = patriciaTrie0.nextKey("fOGLqw7VQ>c<");
62:       assertNull(string1);
63:       
64:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
65:       assertNotNull(patriciaTrie1);
66:       
67:       String string2 = patriciaTrie1.put("$t}X", "org.apache.commons.collections4.trie.PatriciaTrie");
68:       assertNull(string2);
69:       
70:       String string3 = patriciaTrie1.put("LMwM", "E<");
71:       assertNull(string3);
72:       
73:       // Undeclared exception!
74:       try { 
75:         patriciaTrie1.subMap("$t}X", "");
76:         fail("Expecting exception: IllegalArgumentException");
77:       
78:       } catch(IllegalArgumentException e) {
79:          //
80:          // fromKey > toKey
81:          //
82:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
83:       }
84:   }
85: }
RegularFileObject[/tmp/EvoSuite_80_1629227699970/org/apache/commons/collections4/trie/AbstractPatriciaTrie_80_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:14:59 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_80_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_80_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_80_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_80_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:15:00.012 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
assertNotNull(patriciaTrie0);

String string0 = "";
AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", patriciaTrie0);
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Map.Entry<Integer, String>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, String>> comparator2 = Map.Entry.comparingByValue();
assertSame(comparator2, comparator0);
assertNotNull(comparator2);

Comparator<Map.Entry<Integer, Object>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, Object>>> comparator4 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
assertNotNull(comparator4);

SortedMap<String, AbstractMap.SimpleEntry<String, Object>> sortedMap0 = patriciaTrie0.tailMap("(");
assertNotNull(sortedMap0);
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());

Comparator<Map.Entry<Integer, String>> comparator5 = Map.Entry.comparingByValue();
assertSame(comparator5, comparator2);
assertSame(comparator5, comparator0);
assertNotNull(comparator5);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = patriciaTrie0.put("$t}X", abstractMap_SimpleEntry0);
assertNull(abstractMap_SimpleEntry1);

String string1 = patriciaTrie0.nextKey("fOGLqw7VQ>c<");
assertNull(string1);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);

String string2 = patriciaTrie1.put("$t}X", "org.apache.commons.collections4.trie.PatriciaTrie");
assertNull(string2);

String string3 = patriciaTrie1.put("LMwM", "E<");
assertNull(string3);

patriciaTrie1.subMap("$t}X", "");

[MASTER] 19:15:01.102 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_101_1629227701067/org/apache/commons/collections4/trie/AbstractPatriciaTrie_101_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_101_1629227701067/org/apache/commons/collections4/trie/AbstractPatriciaTrie_101_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:01.103 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:01.103 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:01.104 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>,java.lang.Object>>: 127
[MASTER] 19:15:01.104 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_101_1629227701067/org/apache/commons/collections4/trie/AbstractPatriciaTrie_101_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:01.104 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:01.105 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_101_1629227701067/org/apache/commons/collections4/trie/AbstractPatriciaTrie_101_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:01 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_101_tmp__ESTest extends AbstractPatriciaTrie_101_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Integer integer0 = new Integer((-2366));
31:       assertEquals((-2366), (int)integer0);
32:       assertNotNull(integer0);
33:       
34:       AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 1668);
35:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
36:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
39:       
40:       Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
41:       assertNotNull(comparator0);
42:       
43:       Integer integer1 = new Integer(43);
44:       assertEquals(43, (int)integer1);
45:       assertFalse(integer1.equals((Object)integer0));
46:       assertNotNull(integer1);
47:       
48:       AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer1, (-2366));
49:       assertFalse(integer1.equals((Object)integer0));
50:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
53:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
54:       
55:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
58:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
63:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
65:       
66:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0);
67:       assertFalse(integer0.equals((Object)integer1));
68:       assertNotNull(abstractMap_SimpleImmutableEntry0);
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
71:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
72:       
73:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("J6Yyu!|CS", abstractMap_SimpleImmutableEntry0);
74:       assertFalse(integer0.equals((Object)integer1));
75:       assertNull(abstractMap_SimpleImmutableEntry1);
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
78:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
79:       
80:       Integer integer2 = new Integer(3921);
81:       assertEquals(3921, (int)integer2);
82:       assertFalse(integer2.equals((Object)integer0));
83:       assertFalse(integer2.equals((Object)integer1));
84:       assertNotNull(integer2);
85:       
86:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer2);
87:       assertFalse(integer2.equals((Object)integer0));
88:       assertFalse(integer2.equals((Object)integer1));
89:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
90:       assertNotNull(abstractMap_SimpleImmutableEntry2);
91:       
92:       Comparator<Map.Entry<Comparable<Integer>, Comparable<Object>>> comparator1 = Map.Entry.comparingByValue();
93:       assertNotNull(comparator1);
94:       
95:       Comparator<Map.Entry<Comparable<Integer>, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
96:       assertSame(comparator2, comparator1);
97:       assertNotNull(comparator2);
98:       
99:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry3 = patriciaTrie0.put("~@Z' uV*l&M,", abstractMap_SimpleImmutableEntry2);
100:       assertFalse(integer2.equals((Object)integer0));
101:       assertFalse(integer2.equals((Object)integer1));
102:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
103:       assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
104:       assertNull(abstractMap_SimpleImmutableEntry3);
105:       
106:       Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
107:       Comparator<Map.Entry<Comparable<Object>, Object>> comparator4 = (Comparator<Map.Entry<Comparable<Object>, Object>>)Map.Entry.comparingByKey((Comparator<? super Comparable<Object>>) comparator3);
108:       assertFalse(comparator4.equals((Object)comparator0));
109:       assertNotNull(comparator4);
110:       
111:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry4 = patriciaTrie0.put("", abstractMap_SimpleImmutableEntry2);
112:       assertFalse(integer2.equals((Object)integer0));
113:       assertFalse(integer2.equals((Object)integer1));
114:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
115:       assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
116:       assertNull(abstractMap_SimpleImmutableEntry4);
117:       
118:       String string0 = patriciaTrie0.selectKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry");
119:       assertEquals("~@Z' uV*l&M,", string0);
120:       assertNotNull(string0);
121:       
122:       AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "~@Z' uV*l&M,");
123:       assertNotNull(abstractMap_SimpleEntry0);
124:       
125:       int int0 = (-4044);
126:       Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
127:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>> comparator6 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator5);
128:       assertNotNull(comparator6);
129:       
130:       // Undeclared exception!
131:       try { 
132:         Map.Entry.comparingByValue((Comparator<? super Object>) null);
133:         fail("Expecting exception: NullPointerException");
134:       
135:       } catch(NullPointerException e) {
136:          //
137:          // no message in exception (getMessage() returned null)
138:          //
139:          verifyException("java.util.Objects", e);
140:       }
141:   }
142: }
RegularFileObject[/tmp/EvoSuite_101_1629227701067/org/apache/commons/collections4/trie/AbstractPatriciaTrie_101_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:01 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_101_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_101_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_101_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_101_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:15:01.108 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer((-2366));
assertEquals((-2366), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 1668);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Integer integer1 = new Integer(43);
assertEquals(43, (int)integer1);
assertFalse(integer1.equals((Object)integer0));
assertNotNull(integer1);

AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer1, (-2366));
assertFalse(integer1.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0);
assertFalse(integer0.equals((Object)integer1));
assertNotNull(abstractMap_SimpleImmutableEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("J6Yyu!|CS", abstractMap_SimpleImmutableEntry0);
assertFalse(integer0.equals((Object)integer1));
assertNull(abstractMap_SimpleImmutableEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Integer integer2 = new Integer(3921);
assertEquals(3921, (int)integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertNotNull(integer2);

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotNull(abstractMap_SimpleImmutableEntry2);

Comparator<Map.Entry<Comparable<Integer>, Comparable<Object>>> comparator1 = Map.Entry.comparingByValue();
assertNotNull(comparator1);

Comparator<Map.Entry<Comparable<Integer>, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
assertSame(comparator2, comparator1);
assertNotNull(comparator2);

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry3 = patriciaTrie0.put("~@Z' uV*l&M,", abstractMap_SimpleImmutableEntry2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
assertNull(abstractMap_SimpleImmutableEntry3);

Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Comparable<Object>, Object>> comparator4 = (Comparator<Map.Entry<Comparable<Object>, Object>>)Map.Entry.comparingByKey((Comparator<? super Comparable<Object>>) comparator3);
assertFalse(comparator4.equals((Object)comparator0));
assertNotNull(comparator4);

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry4 = patriciaTrie0.put("", abstractMap_SimpleImmutableEntry2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
assertNull(abstractMap_SimpleImmutableEntry4);

String string0 = patriciaTrie0.selectKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry");
assertEquals("~@Z' uV*l&M,", string0);
assertNotNull(string0);

AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "~@Z' uV*l&M,");
assertNotNull(abstractMap_SimpleEntry0);

int int0 = (-4044);
Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>> comparator6 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator5);
assertNotNull(comparator6);

Map.Entry.comparingByValue((Comparator<? super Object>) null);

[MASTER] 19:15:01.604 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_112_1629227701569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_112_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_112_1629227701569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_112_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:01.604 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:01.604 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:01.605 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>,java.lang.Object>>: 139
[MASTER] 19:15:01.606 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_112_1629227701569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_112_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:01.606 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:01.606 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_112_1629227701569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_112_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:01 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_112_tmp__ESTest extends AbstractPatriciaTrie_112_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       String string0 = "J6Yyu!|CS";
31:       int int0 = (-2366);
32:       Integer integer0 = new Integer((-2366));
33:       assertEquals((-2366), (int)integer0);
34:       assertTrue(integer0.equals((Object)int0));
35:       assertNotNull(integer0);
36:       
37:       AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 1668);
38:       assertTrue(integer0.equals((Object)int0));
39:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       
44:       Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
45:       assertNotNull(comparator0);
46:       
47:       Integer integer1 = new Integer(43);
48:       assertEquals(43, (int)integer1);
49:       assertFalse(integer1.equals((Object)integer0));
50:       assertFalse(integer1.equals((Object)int0));
51:       assertNotNull(integer1);
52:       
53:       AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer1, (-2366));
54:       assertFalse(integer1.equals((Object)integer0));
55:       assertFalse(integer1.equals((Object)int0));
56:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
60:       
61:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
63:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
71:       
72:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0);
73:       assertTrue(integer0.equals((Object)int0));
74:       assertFalse(integer0.equals((Object)integer1));
75:       assertNotNull(abstractMap_SimpleImmutableEntry0);
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
77:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
79:       
80:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("J6Yyu!|CS", abstractMap_SimpleImmutableEntry0);
81:       assertTrue(integer0.equals((Object)int0));
82:       assertFalse(integer0.equals((Object)integer1));
83:       assertNull(abstractMap_SimpleImmutableEntry1);
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
85:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
87:       
88:       Integer integer2 = new Integer(3921);
89:       assertEquals(3921, (int)integer2);
90:       assertFalse(integer2.equals((Object)integer0));
91:       assertFalse(integer2.equals((Object)int0));
92:       assertFalse(integer2.equals((Object)integer1));
93:       assertNotNull(integer2);
94:       
95:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer2);
96:       assertFalse(integer2.equals((Object)integer0));
97:       assertFalse(integer2.equals((Object)int0));
98:       assertFalse(integer2.equals((Object)integer1));
99:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
100:       assertNotNull(abstractMap_SimpleImmutableEntry2);
101:       
102:       Comparator<Map.Entry<Comparable<Integer>, Comparable<Object>>> comparator1 = Map.Entry.comparingByValue();
103:       assertNotNull(comparator1);
104:       
105:       Comparator<Map.Entry<Comparable<Integer>, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
106:       assertSame(comparator2, comparator1);
107:       assertNotNull(comparator2);
108:       
109:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry3 = patriciaTrie0.put("~@Z' uV*l&M,", abstractMap_SimpleImmutableEntry2);
110:       assertFalse(integer2.equals((Object)integer0));
111:       assertFalse(integer2.equals((Object)int0));
112:       assertFalse(integer2.equals((Object)integer1));
113:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
114:       assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
115:       assertNull(abstractMap_SimpleImmutableEntry3);
116:       
117:       Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
118:       Comparator<Map.Entry<Comparable<Object>, Object>> comparator4 = (Comparator<Map.Entry<Comparable<Object>, Object>>)Map.Entry.comparingByKey((Comparator<? super Comparable<Object>>) comparator3);
119:       assertFalse(comparator4.equals((Object)comparator0));
120:       assertNotNull(comparator4);
121:       
122:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry4 = patriciaTrie0.put("", abstractMap_SimpleImmutableEntry2);
123:       assertFalse(integer2.equals((Object)integer0));
124:       assertFalse(integer2.equals((Object)int0));
125:       assertFalse(integer2.equals((Object)integer1));
126:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
127:       assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
128:       assertNull(abstractMap_SimpleImmutableEntry4);
129:       
130:       String string1 = patriciaTrie0.selectKey("C^s=*[h.~dRa4,l=");
131:       assertEquals("J6Yyu!|CS", string1);
132:       assertTrue(string1.equals((Object)string0));
133:       assertNotNull(string1);
134:       
135:       AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "J6Yyu!|CS");
136:       assertNotNull(abstractMap_SimpleEntry0);
137:       
138:       Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
139:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>> comparator6 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator5);
140:       assertNotNull(comparator6);
141:       
142:       // Undeclared exception!
143:       try { 
144:         Map.Entry.comparingByValue((Comparator<? super Object>) null);
145:         fail("Expecting exception: NullPointerException");
146:       
147:       } catch(NullPointerException e) {
148:          //
149:          // no message in exception (getMessage() returned null)
150:          //
151:          verifyException("java.util.Objects", e);
152:       }
153:   }
154: }
RegularFileObject[/tmp/EvoSuite_112_1629227701569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_112_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:01 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_112_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_112_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_112_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_112_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:15:01.608 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
assertNotNull(patriciaTrie0);

String string0 = "J6Yyu!|CS";
int int0 = (-2366);
Integer integer0 = new Integer((-2366));
assertEquals((-2366), (int)integer0);
assertTrue(integer0.equals((Object)int0));
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 1668);
assertTrue(integer0.equals((Object)int0));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Integer integer1 = new Integer(43);
assertEquals(43, (int)integer1);
assertFalse(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)int0));
assertNotNull(integer1);

AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer1, (-2366));
assertFalse(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)int0));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer0.equals((Object)int0));
assertFalse(integer0.equals((Object)integer1));
assertNotNull(abstractMap_SimpleImmutableEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("J6Yyu!|CS", abstractMap_SimpleImmutableEntry0);
assertTrue(integer0.equals((Object)int0));
assertFalse(integer0.equals((Object)integer1));
assertNull(abstractMap_SimpleImmutableEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Integer integer2 = new Integer(3921);
assertEquals(3921, (int)integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)integer1));
assertNotNull(integer2);

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotNull(abstractMap_SimpleImmutableEntry2);

Comparator<Map.Entry<Comparable<Integer>, Comparable<Object>>> comparator1 = Map.Entry.comparingByValue();
assertNotNull(comparator1);

Comparator<Map.Entry<Comparable<Integer>, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
assertSame(comparator2, comparator1);
assertNotNull(comparator2);

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry3 = patriciaTrie0.put("~@Z' uV*l&M,", abstractMap_SimpleImmutableEntry2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
assertNull(abstractMap_SimpleImmutableEntry3);

Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Comparable<Object>, Object>> comparator4 = (Comparator<Map.Entry<Comparable<Object>, Object>>)Map.Entry.comparingByKey((Comparator<? super Comparable<Object>>) comparator3);
assertFalse(comparator4.equals((Object)comparator0));
assertNotNull(comparator4);

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry4 = patriciaTrie0.put("", abstractMap_SimpleImmutableEntry2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
assertNull(abstractMap_SimpleImmutableEntry4);

String string1 = patriciaTrie0.selectKey("C^s=*[h.~dRa4,l=");
assertEquals("J6Yyu!|CS", string1);
assertTrue(string1.equals((Object)string0));
assertNotNull(string1);

AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "J6Yyu!|CS");
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>> comparator6 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator5);
assertNotNull(comparator6);

Map.Entry.comparingByValue((Comparator<? super Object>) null);

[MASTER] 19:15:01.642 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_113_1629227701609/org/apache/commons/collections4/trie/AbstractPatriciaTrie_113_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_113_1629227701609/org/apache/commons/collections4/trie/AbstractPatriciaTrie_113_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:01.642 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:01.642 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:01.643 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 64
[MASTER] 19:15:01.643 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_113_1629227701609/org/apache/commons/collections4/trie/AbstractPatriciaTrie_113_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:01.643 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:01.643 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_113_1629227701609/org/apache/commons/collections4/trie/AbstractPatriciaTrie_113_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:01 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
14: import org.apache.commons.collections4.trie.PatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_113_tmp__ESTest extends AbstractPatriciaTrie_113_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Integer integer0 = new Integer(1);
26:       assertEquals(1, (int)integer0);
27:       assertNotNull(integer0);
28:       
29:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 1);
30:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
34:       
35:       Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
36:       assertNotNull(comparator0);
37:       
38:       abstractPatriciaTrie_TrieEntry0.key = null;
39:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
42:       
43:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
44:       Comparator<Map.Entry<Object, String>> comparator2 = Map.Entry.comparingByValue();
45:       assertSame(comparator2, comparator0);
46:       assertNotNull(comparator2);
47:       
48:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
49:       assertFalse(boolean0);
50:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
51:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
53:       
54:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
55:       assertNotNull(patriciaTrie0);
56:       
57:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "\n", 1);
58:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
59:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
61:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
62:       
63:       Comparator<String> comparator3 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
64:       Comparator<Map.Entry<String, String>> comparator4 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator3);
65:       assertNotNull(comparator4);
66:       
67:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
68:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
69:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
71:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
72:       
73:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
74:       assertNull(abstractPatriciaTrie_TrieEntry3);
75:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
77:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
81:       
82:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
83:       assertNotNull(patriciaTrie1);
84:       
85:       Integer integer1 = patriciaTrie1.put("", integer0);
86:       assertNull(integer1);
87:       
88:       String string0 = patriciaTrie1.previousKey("");
89:       assertNull(string0);
90:       
91:       Comparator<Map.Entry<Integer, Object>> comparator5 = Map.Entry.comparingByKey();
92:       assertNotNull(comparator5);
93:       
94:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.subtree("\n", 1, 1072);
95:       assertNull(abstractPatriciaTrie_TrieEntry4);
96:       
97:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
98:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
99:       assertNotNull(patriciaTrie2);
100:       
101:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, abstractPatriciaTrie_TrieEntry2);
102:       assertFalse(boolean1);
103:       assertTrue(boolean1 == boolean0);
104:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
106:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
109:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
110:       
111:       boolean boolean2 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
112:       assertFalse(boolean2);
113:       assertTrue(boolean2 == boolean0);
114:       assertTrue(boolean2 == boolean1);
115:       
116:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", (Integer) null, 1);
117:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
118:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
119:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
120:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
121:       
122:       String string1 = abstractPatriciaTrie_TrieEntry5.toString();
123:       assertEquals("Entry(key= [1], value=null, parent=null, left= [1], right=null, predecessor= [1])", string1);
124:       assertNotNull(string1);
125:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
126:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
127:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
128:       
129:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.getEntry("");
130:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
131:       assertNotSame(patriciaTrie1, patriciaTrie2);
132:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
133:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
134:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
135:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
136:   }
137: }
RegularFileObject[/tmp/EvoSuite_113_1629227701609/org/apache/commons/collections4/trie/AbstractPatriciaTrie_113_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:01 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_113_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_113_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_113_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_113_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:15:01.645 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(1);
assertEquals(1, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 1);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

abstractPatriciaTrie_TrieEntry0.key = null;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator2 = Map.Entry.comparingByValue();
assertSame(comparator2, comparator0);
assertNotNull(comparator2);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "\n", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

Comparator<String> comparator3 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator4 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator3);
assertNotNull(comparator4);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry2);
assertNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Integer integer1 = patriciaTrie1.put("", integer0);
assertNull(integer1);

String string0 = patriciaTrie1.previousKey("");
assertNull(string0);

Comparator<Map.Entry<Integer, Object>> comparator5 = Map.Entry.comparingByKey();
assertNotNull(comparator5);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.subtree("\n", 1, 1072);
assertNull(abstractPatriciaTrie_TrieEntry4);

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
assertNotNull(patriciaTrie2);

boolean boolean1 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, abstractPatriciaTrie_TrieEntry2);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

boolean boolean2 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", (Integer) null, 1);
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());

String string1 = abstractPatriciaTrie_TrieEntry5.toString();
assertEquals("Entry(key= [1], value=null, parent=null, left= [1], right=null, predecessor= [1])", string1);
assertNotNull(string1);
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.getEntry("");
assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotNull(abstractPatriciaTrie_TrieEntry6);
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());


[MASTER] 19:15:02.512 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_130_1629227702490/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_130_1629227702490/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:02.512 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:02.512 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:02.513 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 43
[MASTER] 19:15:02.513 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_130_1629227702490/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:02.513 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:02.514 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_130_1629227702490/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:02 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
14: import org.apache.commons.collections4.trie.PatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_130_tmp__ESTest extends AbstractPatriciaTrie_130_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
26:       assertNotNull(comparator0);
27:       
28:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
29:       Comparator<Map.Entry<Object, String>> comparator2 = Map.Entry.comparingByValue();
30:       assertSame(comparator2, comparator0);
31:       assertNotNull(comparator2);
32:       
33:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
34:       assertNotNull(patriciaTrie0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("H", "\n", 1);
37:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
39:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
41:       
42:       Comparator<String> comparator3 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
43:       Comparator<Map.Entry<String, String>> comparator4 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator3);
44:       assertNotNull(comparator4);
45:       
46:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
47:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
48:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
51:       
52:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("\n", "\n", 1);
53:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
54:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
55:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
56:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
58:       
59:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
60:       assertNotNull(patriciaTrie1);
61:       
62:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.floorEntry("H6C");
63:       assertNull(abstractPatriciaTrie_TrieEntry3);
64:       
65:       String string0 = patriciaTrie1.previousKey("H");
66:       assertNull(string0);
67:       
68:       Comparator<Map.Entry<Integer, Object>> comparator5 = Map.Entry.comparingByKey();
69:       assertNotNull(comparator5);
70:       
71:       patriciaTrie1.incrementSize();
72:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
73:       assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry2));
74:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
75:       assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry2));
76:       assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
77:       assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry4);
78:       assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
79:       assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
80:       assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
81:       assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry1);
82:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
84:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
86:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
88:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
90:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
93:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
95:       
96:       patriciaTrie0.clear();
97:       Integer integer0 = new Integer(3967);
98:       assertEquals(3967, (int)integer0);
99:       assertNotNull(integer0);
100:       
101:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "H", 1);
102:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
103:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
104:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
106:   }
107: }
RegularFileObject[/tmp/EvoSuite_130_1629227702490/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:02 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_130_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_130_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_130_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_130_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:15:02.515 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator2 = Map.Entry.comparingByValue();
assertSame(comparator2, comparator0);
assertNotNull(comparator2);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("H", "\n", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<String> comparator3 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator4 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator3);
assertNotNull(comparator4);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("\n", "\n", 1);
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.floorEntry("H6C");
assertNull(abstractPatriciaTrie_TrieEntry3);

String string0 = patriciaTrie1.previousKey("H");
assertNull(string0);

Comparator<Map.Entry<Integer, Object>> comparator5 = Map.Entry.comparingByKey();
assertNotNull(comparator5);

patriciaTrie1.incrementSize();
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry2));
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry2));
assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry4);
assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry4);
assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry1);
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());

patriciaTrie0.clear();
Integer integer0 = new Integer(3967);
assertEquals(3967, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "H", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());


[MASTER] 19:15:02.793 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_135_1629227702769/org/apache/commons/collections4/trie/AbstractPatriciaTrie_135_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_135_1629227702769/org/apache/commons/collections4/trie/AbstractPatriciaTrie_135_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:02.794 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:02.794 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:02.795 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 48
[MASTER] 19:15:02.795 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_135_1629227702769/org/apache/commons/collections4/trie/AbstractPatriciaTrie_135_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:02.795 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:02.795 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_135_1629227702769/org/apache/commons/collections4/trie/AbstractPatriciaTrie_135_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:02 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.Set;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_135_tmp__ESTest extends AbstractPatriciaTrie_135_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Object object0 = patriciaTrie0.put("S~2@?l4HTT6Xmx9w", "S~2@?l4HTT6Xmx9w");
31:       assertNull(object0);
32:       
33:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
34:       assertNotNull(patriciaTrie1);
35:       
36:       String string0 = patriciaTrie0.nextKey("S~2@?l4HTT6Xmx9w");
37:       assertNull(string0);
38:       
39:       Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie1.entrySet();
40:       assertNotNull(set0);
41:       assertEquals(0, set0.size());
42:       assertTrue(set0.isEmpty());
43:       
44:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
45:       assertNotNull(patriciaTrie2);
46:       
47:       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
48:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
49:       assertNotNull(comparator1);
50:       
51:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "$!%$ajnx", 0);
52:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
54:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
56:       
57:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
58:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
59:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
62:       
63:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry1);
64:       assertNull(abstractPatriciaTrie_TrieEntry2);
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
71:       
72:       PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
73:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
74:       assertNotNull(patriciaTrie3);
75:       
76:       Integer integer0 = new Integer(0);
77:       assertEquals(0, (int)integer0);
78:       assertNotNull(integer0);
79:       
80:       Integer integer1 = patriciaTrie3.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", integer0);
81:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
82:       assertNotSame(patriciaTrie3, patriciaTrie1);
83:       assertNull(integer1);
84:       
85:       // Undeclared exception!
86:       try { 
87:         patriciaTrie1.previousKey((String) null);
88:         fail("Expecting exception: NullPointerException");
89:       
90:       } catch(NullPointerException e) {
91:          //
92:          // no message in exception (getMessage() returned null)
93:          //
94:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
95:       }
96:   }
97: }
RegularFileObject[/tmp/EvoSuite_135_1629227702769/org/apache/commons/collections4/trie/AbstractPatriciaTrie_135_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:02 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_135_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_135_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_135_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_135_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:15:02.797 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Object object0 = patriciaTrie0.put("S~2@?l4HTT6Xmx9w", "S~2@?l4HTT6Xmx9w");
assertNull(object0);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

String string0 = patriciaTrie0.nextKey("S~2@?l4HTT6Xmx9w");
assertNull(string0);

Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)patriciaTrie1.entrySet();
assertNotNull(set0);
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "$!%$ajnx", 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry1);
assertNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
assertNotNull(patriciaTrie3);

Integer integer0 = new Integer(0);
assertEquals(0, (int)integer0);
assertNotNull(integer0);

Integer integer1 = patriciaTrie3.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", integer0);
assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
assertNotSame(patriciaTrie3, patriciaTrie1);
assertNull(integer1);

patriciaTrie1.previousKey((String) null);

[MASTER] 19:15:03.703 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_157_1629227703662/org/apache/commons/collections4/trie/AbstractPatriciaTrie_157_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_157_1629227703662/org/apache/commons/collections4/trie/AbstractPatriciaTrie_157_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:03.703 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:03.703 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:03.703 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Comparable<java.lang.Comparable<java.lang.Comparable>>>>: 60
[MASTER] 19:15:03.703 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_157_1629227703662/org/apache/commons/collections4/trie/AbstractPatriciaTrie_157_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:03.703 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:03.704 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_157_1629227703662/org/apache/commons/collections4/trie/AbstractPatriciaTrie_157_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:03 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.HashMap;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_157_tmp__ESTest extends AbstractPatriciaTrie_157_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       int int0 = patriciaTrie0.size();
31:       assertEquals(0, int0);
32:       
33:       Object object0 = patriciaTrie0.put("", "Ai7kSsrrGmvk:wN");
34:       assertNull(object0);
35:       
36:       Integer integer0 = new Integer(336);
37:       assertEquals(336, (int)integer0);
38:       assertFalse(integer0.equals((Object)int0));
39:       assertNotNull(integer0);
40:       
41:       boolean boolean0 = patriciaTrie0.remove((Object) "Ai7kSsrrGmvk:wN", (Object) integer0);
42:       assertFalse(boolean0);
43:       assertFalse(integer0.equals((Object)int0));
44:       
45:       Integer integer1 = new Integer(336);
46:       assertEquals(336, (int)integer1);
47:       assertFalse(integer1.equals((Object)int0));
48:       assertTrue(integer1.equals((Object)integer0));
49:       assertNotNull(integer1);
50:       
51:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Ai7kSsrrGmvk:wN", integer1, 336);
52:       assertFalse(integer1.equals((Object)int0));
53:       assertTrue(integer1.equals((Object)integer0));
54:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
58:       
59:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
60:       Comparator<Map.Entry<String, Comparable<Comparable<Comparable>>>> comparator1 = (Comparator<Map.Entry<String, Comparable<Comparable<Comparable>>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
61:       assertNotNull(comparator1);
62:       
63:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
64:       assertNull(abstractPatriciaTrie_TrieEntry1);
65:       
66:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
67:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
68:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
69:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
70:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
71:       
72:       Object object1 = patriciaTrie0.put("wR;MR'2h=-+-.$", "wR;MR'2h=-+-.$");
73:       assertNull(object1);
74:       
75:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.lowerEntry("oEvQF@B");
76:       assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
77:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
78:       assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
81:       
82:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
83:       assertNotNull(hashMap0);
84:       assertTrue(hashMap0.isEmpty());
85:       assertEquals(0, hashMap0.size());
86:       
87:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
88:       assertNotNull(patriciaTrie1);
89:       assertTrue(hashMap0.isEmpty());
90:       assertEquals(0, hashMap0.size());
91:       
92:       String string0 = hashMap0.remove((Object) "oEvQF@B");
93:       assertNull(string0);
94:       assertTrue(hashMap0.isEmpty());
95:       assertEquals(0, hashMap0.size());
96:       
97:       String string1 = patriciaTrie1.put(":iS|G;6[$9nZF</?", "");
98:       assertNull(string1);
99:       assertTrue(hashMap0.isEmpty());
100:       assertEquals(0, hashMap0.size());
101:       
102:       SortedMap<String, String> sortedMap0 = patriciaTrie1.prefixMap("9Ljf9Z^|RLgqH");
103:       assertNotNull(sortedMap0);
104:       assertTrue(sortedMap0.isEmpty());
105:       assertEquals(0, sortedMap0.size());
106:       assertTrue(hashMap0.isEmpty());
107:       assertEquals(0, hashMap0.size());
108:       
109:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.lastEntry();
110:       assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry2));
111:       assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
112:       assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
113:       assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
114:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
115:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
116:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
117:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
118:       
119:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
120:       assertNotNull(patriciaTrie2);
121:       
122:       Integer integer2 = new Integer((-1010));
123:       assertEquals((-1010), (int)integer2);
124:       assertFalse(integer2.equals((Object)integer0));
125:       assertFalse(integer2.equals((Object)integer1));
126:       assertFalse(integer2.equals((Object)int0));
127:       assertNotNull(integer2);
128:       
129:       Integer integer3 = patriciaTrie2.put("", integer2);
130:       assertFalse(integer2.equals((Object)integer0));
131:       assertFalse(integer2.equals((Object)integer1));
132:       assertFalse(integer2.equals((Object)int0));
133:       assertNull(integer3);
134:       
135:       PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
136:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
137:       assertNotNull(patriciaTrie3);
138:       
139:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = patriciaTrie3.firstEntry();
140:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
141:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
142:       assertNotSame(patriciaTrie2, patriciaTrie3);
143:       assertNotSame(patriciaTrie3, patriciaTrie2);
144:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
145:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
146:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
147:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
148:   }
149: }
RegularFileObject[/tmp/EvoSuite_157_1629227703662/org/apache/commons/collections4/trie/AbstractPatriciaTrie_157_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:03 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_157_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_157_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_157_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_157_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:15:03.705 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

int int0 = patriciaTrie0.size();
assertEquals(0, int0);

Object object0 = patriciaTrie0.put("", "Ai7kSsrrGmvk:wN");
assertNull(object0);

Integer integer0 = new Integer(336);
assertEquals(336, (int)integer0);
assertFalse(integer0.equals((Object)int0));
assertNotNull(integer0);

boolean boolean0 = patriciaTrie0.remove((Object) "Ai7kSsrrGmvk:wN", (Object) integer0);
assertFalse(boolean0);
assertFalse(integer0.equals((Object)int0));

Integer integer1 = new Integer(336);
assertEquals(336, (int)integer1);
assertFalse(integer1.equals((Object)int0));
assertTrue(integer1.equals((Object)integer0));
assertNotNull(integer1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Ai7kSsrrGmvk:wN", integer1, 336);
assertFalse(integer1.equals((Object)int0));
assertTrue(integer1.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Comparable<Comparable<Comparable>>>> comparator1 = (Comparator<Map.Entry<String, Comparable<Comparable<Comparable>>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
assertNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

Object object1 = patriciaTrie0.put("wR;MR'2h=-+-.$", "wR;MR'2h=-+-.$");
assertNull(object1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.lowerEntry("oEvQF@B");
assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());

HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertNotNull(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
assertNotNull(patriciaTrie1);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

String string0 = hashMap0.remove((Object) "oEvQF@B");
assertNull(string0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

String string1 = patriciaTrie1.put(":iS|G;6[$9nZF</?", "");
assertNull(string1);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

SortedMap<String, String> sortedMap0 = patriciaTrie1.prefixMap("9Ljf9Z^|RLgqH");
assertNotNull(sortedMap0);
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.lastEntry();
assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry2));
assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);

Integer integer2 = new Integer((-1010));
assertEquals((-1010), (int)integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)int0));
assertNotNull(integer2);

Integer integer3 = patriciaTrie2.put("", integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)int0));
assertNull(integer3);

PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertNotNull(patriciaTrie3);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = patriciaTrie3.firstEntry();
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertNotSame(patriciaTrie2, patriciaTrie3);
assertNotSame(patriciaTrie3, patriciaTrie2);
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());


[MASTER] 19:15:04.909 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_189_1629227704834/org/apache/commons/collections4/trie/AbstractPatriciaTrie_189_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_189_1629227704834/org/apache/commons/collections4/trie/AbstractPatriciaTrie_189_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:04.915 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:04.915 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:04.916 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.String>>>: 97
[MASTER] 19:15:04.916 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_189_1629227704834/org/apache/commons/collections4/trie/AbstractPatriciaTrie_189_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:04.916 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:04.917 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_189_1629227704834/org/apache/commons/collections4/trie/AbstractPatriciaTrie_189_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:04 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.OrderedMapIterator;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_189_tmp__ESTest extends AbstractPatriciaTrie_189_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
32:       assertNotNull(patriciaTrie1);
33:       
34:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
35:       assertNull(abstractPatriciaTrie_TrieEntry0);
36:       
37:       String string0 = patriciaTrie0.put("", "");
38:       assertNull(string0);
39:       
40:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("");
41:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
42:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
43:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
44:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
45:       
46:       String string1 = patriciaTrie0.put("", "");
47:       assertEquals("", string1);
48:       assertNotNull(string1);
49:       
50:       OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
51:       assertNotNull(orderedMapIterator0);
52:       assertTrue(orderedMapIterator0.hasNext());
53:       assertFalse(orderedMapIterator0.hasPrevious());
54:       
55:       String string2 = patriciaTrie0.put("#7(==7+EOBb>r2", "#7(==7+EOBb>r2");
56:       assertNull(string2);
57:       
58:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", "org.apache.commons.collections4.trie.AbstractBitwiseTrie", 531);
59:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
60:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
63:       
64:       abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry1;
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
66:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
71:       assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
72:       assertTrue(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
74:       
75:       String string3 = patriciaTrie0.remove((Object) null);
76:       assertNull(string3);
77:       
78:       String string4 = abstractPatriciaTrie_TrieEntry2.setValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
79:       assertEquals("org.apache.commons.collections4.trie.AbstractBitwiseTrie", string4);
80:       assertFalse(string4.equals((Object)string1));
81:       assertNotNull(string4);
82:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
85:       
86:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
87:       assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
88:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
89:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
90:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
92:       assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
94:       assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
95:       
96:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
97:       Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, String>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
98:       assertNotNull(comparator1);
99:       
100:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>> comparator2 = Map.Entry.comparingByValue();
101:       assertNotNull(comparator2);
102:       
103:       abstractPatriciaTrie_TrieEntry2.bitIndex = 531;
104:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
107:       
108:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>> comparator3 = Map.Entry.comparingByValue();
109:       assertSame(comparator3, comparator2);
110:       assertNotNull(comparator3);
111:       
112:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry2.parent;
113:       assertNull(abstractPatriciaTrie_TrieEntry4);
114:       
115:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
116:       assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry3);
117:       assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry1);
118:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
119:       assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
121:       assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
122:       
123:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.higherEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
124:       assertNull(abstractPatriciaTrie_TrieEntry6);
125:       
126:       String string5 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", ")ey8d9j2;~#");
127:       assertNull(string5);
128:       
129:       SortedMap<String, Object> sortedMap0 = patriciaTrie1.subMap("", (String) null);
130:       assertNotNull(sortedMap0);
131:       assertEquals(0, sortedMap0.size());
132:       assertTrue(sortedMap0.isEmpty());
133:       
134:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
135:       assertNotNull(patriciaTrie2);
136:       
137:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry7 = patriciaTrie0.lowerEntry("uWhKq]MkoLX");
138:       assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry3));
139:       assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry5));
140:       assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry1));
141:       assertNotSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry3);
142:       assertNotSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry5);
143:       assertNotSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry1);
144:       assertNotNull(abstractPatriciaTrie_TrieEntry7);
145:       assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
146:       assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
147:       assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
148:       
149:       PatriciaTrie<Comparable<String>> patriciaTrie3 = new PatriciaTrie<Comparable<String>>();
150:       assertNotNull(patriciaTrie3);
151:       
152:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry8 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>((String) null, (Comparable<String>) null, 531);
153:       assertNotNull(abstractPatriciaTrie_TrieEntry8);
154:       assertTrue(abstractPatriciaTrie_TrieEntry8.isExternalNode());
155:       assertTrue(abstractPatriciaTrie_TrieEntry8.isEmpty());
156:       assertFalse(abstractPatriciaTrie_TrieEntry8.isInternalNode());
157:       
158:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry9 = abstractPatriciaTrie_TrieEntry8.predecessor;
159:       assertNotNull(abstractPatriciaTrie_TrieEntry9);
160:       assertTrue(abstractPatriciaTrie_TrieEntry9.isExternalNode());
161:       assertTrue(abstractPatriciaTrie_TrieEntry9.isEmpty());
162:       assertFalse(abstractPatriciaTrie_TrieEntry9.isInternalNode());
163:       
164:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry10 = patriciaTrie3.nextEntry(abstractPatriciaTrie_TrieEntry9);
165:       assertNull(abstractPatriciaTrie_TrieEntry10);
166:       assertTrue(abstractPatriciaTrie_TrieEntry8.isExternalNode());
167:       assertTrue(abstractPatriciaTrie_TrieEntry8.isEmpty());
168:       assertFalse(abstractPatriciaTrie_TrieEntry8.isInternalNode());
169:       assertTrue(abstractPatriciaTrie_TrieEntry9.isExternalNode());
170:       assertTrue(abstractPatriciaTrie_TrieEntry9.isEmpty());
171:       assertFalse(abstractPatriciaTrie_TrieEntry9.isInternalNode());
172:   }
173: }
RegularFileObject[/tmp/EvoSuite_189_1629227704834/org/apache/commons/collections4/trie/AbstractPatriciaTrie_189_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:04 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_189_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_189_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_189_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_189_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:15:04.924 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
assertNull(abstractPatriciaTrie_TrieEntry0);

String string0 = patriciaTrie0.put("", "");
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("");
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

String string1 = patriciaTrie0.put("", "");
assertEquals("", string1);
assertNotNull(string1);

OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
assertNotNull(orderedMapIterator0);
assertTrue(orderedMapIterator0.hasNext());
assertFalse(orderedMapIterator0.hasPrevious());

String string2 = patriciaTrie0.put("#7(==7+EOBb>r2", "#7(==7+EOBb>r2");
assertNull(string2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", "org.apache.commons.collections4.trie.AbstractBitwiseTrie", 531);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());

String string3 = patriciaTrie0.remove((Object) null);
assertNull(string3);

String string4 = abstractPatriciaTrie_TrieEntry2.setValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
assertEquals("org.apache.commons.collections4.trie.AbstractBitwiseTrie", string4);
assertFalse(string4.equals((Object)string1));
assertNotNull(string4);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, String>>> comparator1 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, String>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

abstractPatriciaTrie_TrieEntry2.bitIndex = 531;
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, String>> comparator3 = Map.Entry.comparingByValue();
assertSame(comparator3, comparator2);
assertNotNull(comparator3);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry2.parent;
assertNull(abstractPatriciaTrie_TrieEntry4);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry3);
assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry1);
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.higherEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
assertNull(abstractPatriciaTrie_TrieEntry6);

String string5 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", ")ey8d9j2;~#");
assertNull(string5);

SortedMap<String, Object> sortedMap0 = patriciaTrie1.subMap("", (String) null);
assertNotNull(sortedMap0);
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry7 = patriciaTrie0.lowerEntry("uWhKq]MkoLX");
assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry3));
assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry5));
assertFalse(abstractPatriciaTrie_TrieEntry7.equals((Object)abstractPatriciaTrie_TrieEntry1));
assertNotSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry3);
assertNotSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry5);
assertNotSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry1);
assertNotNull(abstractPatriciaTrie_TrieEntry7);
assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());

PatriciaTrie<Comparable<String>> patriciaTrie3 = new PatriciaTrie<Comparable<String>>();
assertNotNull(patriciaTrie3);

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry8 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>((String) null, (Comparable<String>) null, 531);
assertNotNull(abstractPatriciaTrie_TrieEntry8);
assertTrue(abstractPatriciaTrie_TrieEntry8.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry8.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry8.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry9 = abstractPatriciaTrie_TrieEntry8.predecessor;
assertNotNull(abstractPatriciaTrie_TrieEntry9);
assertTrue(abstractPatriciaTrie_TrieEntry9.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry9.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry9.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry10 = patriciaTrie3.nextEntry(abstractPatriciaTrie_TrieEntry9);
assertNull(abstractPatriciaTrie_TrieEntry10);
assertTrue(abstractPatriciaTrie_TrieEntry8.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry8.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry8.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry9.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry9.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry9.isInternalNode());


[MASTER] 19:15:05.185 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_194_1629227705139/org/apache/commons/collections4/trie/AbstractPatriciaTrie_194_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_194_1629227705139/org/apache/commons/collections4/trie/AbstractPatriciaTrie_194_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:05.186 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:05.186 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:05.191 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Comparable<java.lang.Object>,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Comparable<java.lang.Object>,java.lang.Object>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Integer>>>: 76
[MASTER] 19:15:05.191 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_194_1629227705139/org/apache/commons/collections4/trie/AbstractPatriciaTrie_194_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:05.192 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:05.193 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_194_1629227705139/org/apache/commons/collections4/trie/AbstractPatriciaTrie_194_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:05 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Collection;
14: import java.util.Comparator;
15: import java.util.Map;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_194_tmp__ESTest extends AbstractPatriciaTrie_194_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       Comparable<String> comparable0 = patriciaTrie0.selectValue("v3Se8'\"nyD!WfJeb8n");
32:       assertNull(comparable0);
33:       
34:       Collection<Comparable<String>> collection0 = patriciaTrie0.values();
35:       assertFalse(collection0.contains("v3Se8'\"nyD!WfJeb8n"));
36:       assertNotNull(collection0);
37:       
38:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("h", "h", (-242));
39:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
43:       
44:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("h", "v3Se8'\"nyD!WfJeb8n", (-753));
45:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
46:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
47:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
49:       
50:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
51:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
55:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
58:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
60:       
61:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
62:       assertNotNull(comparator0);
63:       
64:       abstractPatriciaTrie_TrieEntry0.bitIndex = (-1);
65:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
68:       
69:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("v3Se8'\"nyD!WfJeb8n", "h", (-753));
70:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
71:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
72:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
74:       
75:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
76:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Comparable<Object>, Object>>) comparator1);
77:       assertNotNull(comparator2);
78:       
79:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
84:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
86:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
88:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
89:       
90:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
91:       assertEquals("RootEntry(key=h [-1], value=h, parent=h [-753], left=v3Se8'\"nyD!WfJeb8n [-753], right=null, predecessor=ROOT)", string0);
92:       assertNotNull(string0);
93:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
94:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
95:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
96:       
97:       Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
98:       Comparator<Map.Entry<Object, String>> comparator4 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator3);
99:       assertNotNull(comparator4);
100:       
101:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.predecessor;
102:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
103:       assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
105:       assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
106:       
107:       // Undeclared exception!
108:       try { 
109:         patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry3);
110:         fail("Expecting exception: NullPointerException");
111:       
112:       } catch(NullPointerException e) {
113:          //
114:          // no message in exception (getMessage() returned null)
115:          //
116:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
117:       }
118:   }
119: }
RegularFileObject[/tmp/EvoSuite_194_1629227705139/org/apache/commons/collections4/trie/AbstractPatriciaTrie_194_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:05 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_194_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_194_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_194_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_194_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:15:05.194 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
assertNotNull(patriciaTrie0);

Comparable<String> comparable0 = patriciaTrie0.selectValue("v3Se8'\"nyD!WfJeb8n");
assertNull(comparable0);

Collection<Comparable<String>> collection0 = patriciaTrie0.values();
assertFalse(collection0.contains("v3Se8'\"nyD!WfJeb8n"));
assertNotNull(collection0);

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("h", "h", (-242));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("h", "v3Se8'\"nyD!WfJeb8n", (-753));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

abstractPatriciaTrie_TrieEntry0.bitIndex = (-1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("v3Se8'\"nyD!WfJeb8n", "h", (-753));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Comparable<Object>, Object>>) comparator1);
assertNotNull(comparator2);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertEquals("RootEntry(key=h [-1], value=h, parent=h [-753], left=v3Se8'\"nyD!WfJeb8n [-753], right=null, predecessor=ROOT)", string0);
assertNotNull(string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Object> comparator3 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator4 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator3);
assertNotNull(comparator4);

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.predecessor;
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());

patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry3);

[MASTER] 19:15:05.422 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_200_1629227705394/org/apache/commons/collections4/trie/AbstractPatriciaTrie_200_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_200_1629227705394/org/apache/commons/collections4/trie/AbstractPatriciaTrie_200_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:05.422 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:05.422 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:05.423 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Comparable<java.lang.Object>,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Comparable<java.lang.Object>,java.lang.Object>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Integer>>>: 74
[MASTER] 19:15:05.423 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_200_1629227705394/org/apache/commons/collections4/trie/AbstractPatriciaTrie_200_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:05.423 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:05.424 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_200_1629227705394/org/apache/commons/collections4/trie/AbstractPatriciaTrie_200_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:05 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Collection;
14: import java.util.Comparator;
15: import java.util.HashMap;
16: import java.util.Map;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_200_tmp__ESTest extends AbstractPatriciaTrie_200_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       HashMap<String, String> hashMap0 = new HashMap<String, String>(0);
33:       assertNotNull(hashMap0);
34:       assertEquals(0, hashMap0.size());
35:       assertTrue(hashMap0.isEmpty());
36:       
37:       PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(hashMap0);
38:       assertNotNull(patriciaTrie1);
39:       assertEquals(0, hashMap0.size());
40:       assertTrue(hashMap0.isEmpty());
41:       
42:       Collection<Comparable<String>> collection0 = patriciaTrie1.values();
43:       assertNotNull(collection0);
44:       assertEquals(0, hashMap0.size());
45:       assertTrue(hashMap0.isEmpty());
46:       
47:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("h", "h", 0);
48:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
52:       
53:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("", "h", 1799);
54:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
56:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
58:       
59:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
60:       assertNotNull(comparator0);
61:       
62:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("}.SId&1W{N:njBDZ", "", (-1));
63:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
64:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
66:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
67:       
68:       abstractPatriciaTrie_TrieEntry0.key = "";
69:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
72:       
73:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
74:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Comparable<Object>, Object>>) comparator1);
75:       assertNotNull(comparator2);
76:       
77:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("h", "}.SId&1W{N:njBDZ", 288);
78:       assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry0));
79:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
80:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
83:       
84:       abstractPatriciaTrie_TrieEntry3.right = abstractPatriciaTrie_TrieEntry2;
85:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
87:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
88:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
90:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
91:       assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());
94:       
95:       String string0 = abstractPatriciaTrie_TrieEntry3.toString();
96:       assertEquals("Entry(key=h [288], value=}.SId&1W{N:njBDZ, parent=null, left=h [288], right=ROOT, predecessor=h [288])", string0);
97:       assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry0));
98:       assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry0);
99:       assertNotNull(string0);
100:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
103:       
104:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry0.predecessor;
105:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
106:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
108:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
109:       
110:       // Undeclared exception!
111:       try { 
112:         patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry2);
113:         fail("Expecting exception: NullPointerException");
114:       
115:       } catch(NullPointerException e) {
116:          //
117:          // no message in exception (getMessage() returned null)
118:          //
119:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
120:       }
121:   }
122: }
RegularFileObject[/tmp/EvoSuite_200_1629227705394/org/apache/commons/collections4/trie/AbstractPatriciaTrie_200_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:05 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_200_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_200_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_200_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_200_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:15:05.425 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

HashMap<String, String> hashMap0 = new HashMap<String, String>(0);
assertNotNull(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(hashMap0);
assertNotNull(patriciaTrie1);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

Collection<Comparable<String>> collection0 = patriciaTrie1.values();
assertNotNull(collection0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("h", "h", 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("", "h", 1799);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("}.SId&1W{N:njBDZ", "", (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

abstractPatriciaTrie_TrieEntry0.key = "";
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Comparable<Object>, Object>>) comparator1);
assertNotNull(comparator2);

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("h", "}.SId&1W{N:njBDZ", 288);
assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry0));
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

abstractPatriciaTrie_TrieEntry3.right = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());

String string0 = abstractPatriciaTrie_TrieEntry3.toString();
assertEquals("Entry(key=h [288], value=}.SId&1W{N:njBDZ, parent=null, left=h [288], right=ROOT, predecessor=h [288])", string0);
assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry0));
assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry0);
assertNotNull(string0);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry0.predecessor;
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());

patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry2);

[MASTER] 19:15:05.676 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_203_1629227705628/org/apache/commons/collections4/trie/AbstractPatriciaTrie_203_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_203_1629227705628/org/apache/commons/collections4/trie/AbstractPatriciaTrie_203_tmp__ESTest_scaffolding.java]]
[MASTER] 19:15:05.676 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:05.676 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:15:05.677 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Comparable<java.lang.Object>,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Comparable<java.lang.Object>,java.lang.Object>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Integer>>>: 95
[MASTER] 19:15:05.677 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_203_1629227705628/org/apache/commons/collections4/trie/AbstractPatriciaTrie_203_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:15:05.677 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:15:05.677 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_203_1629227705628/org/apache/commons/collections4/trie/AbstractPatriciaTrie_203_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:15:05 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Collection;
14: import java.util.Comparator;
15: import java.util.Map;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_203_tmp__ESTest extends AbstractPatriciaTrie_203_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       Collection<Comparable<String>> collection0 = patriciaTrie0.values();
32:       assertNotNull(collection0);
33:       
34:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("h", "h", (-242));
35:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
36:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
37:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
39:       
40:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("h", "v3Se8'\"nyD!WfJeb8n", (-753));
41:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
43:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
44:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
45:       
46:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
56:       
57:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
58:       assertNotNull(comparator0);
59:       
60:       Integer integer0 = new Integer(1);
61:       assertEquals(1, (int)integer0);
62:       assertNotNull(integer0);
63:       
64:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer0);
65:       assertFalse(boolean0);
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       
70:       abstractPatriciaTrie_TrieEntry0.bitIndex = (-1);
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
72:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
74:       
75:       abstractPatriciaTrie_TrieEntry0.bitIndex = (-242);
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
77:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
79:       
80:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
81:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
82:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
83:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
86:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
88:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
90:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
91:       
92:       Comparator<Map.Entry<Comparable<Object>, Object>> comparator2 = Map.Entry.comparingByKey();
93:       assertNotNull(comparator2);
94:       
95:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Comparable<Object>, Object>>) comparator1);
96:       assertNotNull(comparator3);
97:       
98:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry0.parent;
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
100:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
104:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
105:       
106:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
107:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
108:       assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
109:       assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
111:       
112:       // Undeclared exception!
113:       try { 
114:         patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry2);
115:         fail("Expecting exception: NullPointerException");
116:       
117:       } catch(NullPointerException e) {
118:          //
119:          // no message in exception (getMessage() returned null)
120:          //
121:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
122:       }
123:   }
124: }
RegularFileObject[/tmp/EvoSuite_203_1629227705628/org/apache/commons/collections4/trie/AbstractPatriciaTrie_203_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:15:05 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_203_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_203_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
87:       "org.apache.commons.collections4.IterableSortedMap",
88:       "org.apache.commons.collections4.OrderedMap",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
92:       "org.apache.commons.collections4.OrderedMapIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
95:       "org.apache.commons.collections4.Put",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
97:       "org.apache.commons.collections4.trie.KeyAnalyzer",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
99:       "org.apache.commons.collections4.IterableMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
102:       "org.apache.commons.collections4.OrderedIterator",
103:       "org.apache.commons.collections4.IterableGet"
104:     );
105:   } 
106:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
107:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_203_tmp__ESTest_scaffolding.class.getClassLoader()));
108:   }
109: 
110:   private static void resetClasses() {
111:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_203_tmp__ESTest_scaffolding.class.getClassLoader()); 
112: 
113:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
114:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
115:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
127:       "org.apache.commons.collections4.trie.PatriciaTrie",
128:       "org.apache.commons.collections4.trie.KeyAnalyzer",
129:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
137:     );
138:   }
139: }

[MASTER] 19:15:05.679 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
assertNotNull(patriciaTrie0);

Collection<Comparable<String>> collection0 = patriciaTrie0.values();
assertNotNull(collection0);

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("h", "h", (-242));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("h", "v3Se8'\"nyD!WfJeb8n", (-753));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, Object>, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

Integer integer0 = new Integer(1);
assertEquals(1, (int)integer0);
assertNotNull(integer0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals(integer0);
assertFalse(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

abstractPatriciaTrie_TrieEntry0.bitIndex = (-1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

abstractPatriciaTrie_TrieEntry0.bitIndex = (-242);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());

Comparator<Map.Entry<Comparable<Object>, Object>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Comparable<Object>, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Comparable<Object>, Object>>) comparator1);
assertNotNull(comparator3);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry0.parent;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry2);

[MASTER] 19:15:06.664 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:06.874 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:07.014 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:07.123 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:07.262 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:07.376 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:07.473 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:07.599 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:07.698 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:07.791 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:07.895 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:08.005 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:08.158 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:08.348 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:08.448 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:08.601 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:08.698 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:08.804 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:08.919 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:09.017 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:09.210 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:09.334 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:09.467 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:09.527 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:09.613 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:09.662 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:09.747 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:09.827 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:09.896 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:10.071 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:10.130 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:10.266 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:10.379 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:10.485 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:10.573 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:10.635 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:10.698 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:10.803 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:10.897 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:10.970 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:11.051 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:11.111 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:11.186 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:11.254 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:11.341 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:11.422 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:11.491 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:11.565 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:11.631 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:11.692 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:11.757 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:12.389 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:12.533 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:12.636 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:12.741 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:12.812 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:12.904 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:13.077 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:13.164 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:13.224 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:13.285 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:13.348 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:13.421 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:13.516 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:13.578 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:13.694 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:13.782 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:13.842 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:13.902 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:13.974 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:14.045 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:14.114 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:14.169 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:14.229 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:14.308 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:14.397 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:14.509 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:14.580 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:14.670 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:14.748 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:14.829 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:14.910 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:14.975 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:15.059 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:15.155 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:15.243 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:15.338 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:15.492 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:15.573 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:15.799 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:15.887 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:15.974 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:16.081 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:16.180 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:16.259 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:16.333 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:16.438 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:16.535 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:16.608 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:16.690 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:16.763 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:16.812 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:16.877 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:16.940 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:17.084 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:17.180 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:17.317 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:17.413 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:17.508 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:17.600 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:17.701 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:17.774 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:17.845 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:17.917 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:18.008 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:18.111 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:18.199 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:18.272 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:18.336 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:18.407 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:18.494 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:18.681 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:18.873 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:18.958 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:19.058 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:19.177 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:19.270 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:19.359 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:19.431 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:19.658 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:19.790 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:19.873 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:19.965 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:20.048 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:20.136 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:20.221 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:20.305 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:20.434 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:20.569 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:20.637 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:20.729 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:20.858 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:20.993 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:21.112 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:21.243 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:21.378 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:21.483 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:21.601 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:21.689 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:21.795 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:21.945 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:22.099 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:22.242 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:22.364 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:22.441 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:22.534 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:22.616 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:22.682 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:22.791 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:22.867 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:22.935 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:23.094 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:23.208 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:23.303 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:23.399 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:23.508 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:23.618 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:23.714 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:23.911 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:24.016 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:24.105 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:24.209 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:24.371 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:24.468 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:24.572 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:24.672 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:24.801 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:24.884 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:24.970 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.057 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.141 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.305 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.383 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.497 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.645 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.737 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.818 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.881 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.950 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:25.957 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected not same
[MASTER] 19:15:25.958 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
assertNotNull(patriciaTrie0);

Comparable<String> comparable0 = patriciaTrie0.selectValue("");
assertNull(comparable0);

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("", "", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparable<String> comparable1 = abstractPatriciaTrie_TrieEntry0.setValue((Comparable<String>) null);
assertEquals("", comparable1);
assertNotNull(comparable1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

patriciaTrie0.clear();
AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("U9Pcr#<)R ", "U9Pcr#<)R ", (-3));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Integer integer0 = new Integer(1);
assertEquals(1, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Comparable<String>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, Integer>("", integer0, (-3));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

Comparable<String> comparable2 = abstractPatriciaTrie_TrieEntry2.key;
assertEquals("", comparable2);
assertTrue(comparable2.equals((Object)comparable1));
assertNotSame(comparable2, comparable1);
assertNotNull(comparable2);

Comparable<String> comparable3 = patriciaTrie0.get(comparable2);
assertTrue(comparable2.equals((Object)comparable1));
assertNotSame(comparable2, comparable1);
assertNull(comparable3);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

Comparable<String> comparable4 = abstractPatriciaTrie_TrieEntry1.setValue("U9Pcr#<)R ");
assertEquals("U9Pcr#<)R ", comparable4);
assertFalse(comparable4.equals((Object)comparable2));
assertFalse(comparable4.equals((Object)comparable1));
assertNotSame(comparable4, comparable2);
assertNotSame(comparable4, comparable1);
assertNotNull(comparable4);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());


[MASTER] 19:15:26.017 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.062 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.157 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.233 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.296 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.426 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.535 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.645 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.732 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.791 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:26.887 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:15:31.761 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0-50/tests/17
* Done!

* Computation finished
