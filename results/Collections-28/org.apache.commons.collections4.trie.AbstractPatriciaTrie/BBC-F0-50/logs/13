* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 9578
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 2161365989
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 21:13:48.481 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 21:13:48.487 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 21:14:16.418 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 21:16:23.679 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.comparator()Ljava/util/Comparator;: Line 1713: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I126 Branch 77 IFNONNULL L719 - true: 9
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I47 Branch 112 IFEQ L1029 - true: 1654
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.remove()V: Line 2335: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I93 Branch 55 IF_ACMPNE L553 - true: 1280
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.iterator()Ljava/util/Iterator;: I35 Branch 242 IFNONNULL L2295 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.remove(Ljava/lang/Object;)Ljava/lang/Object;: Line 1727: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I16 Branch 267 IFNULL L2071 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I106 Branch 107 IFEQ L982 - false: 3267
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(Ljava/io/ObjectOutputStream;)V: I19 Branch 148 IFEQ L2435 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.iterator()Ljava/util/Iterator;: I35 Branch 242 IFNONNULL L2295 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 1134: 56
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I16 Branch 267 IFNULL L2071 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I106 Branch 107 IFEQ L982 - true: 3267
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(Ljava/io/ObjectOutputStream;)V: I19 Branch 148 IFEQ L2435 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2408: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.size()I: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2398: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I15 Branch 104 IFNE L962 - false: 54
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.contains(Ljava/lang/Object;)Z: Line 1400: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.setValue(Ljava/lang/Object;)Ljava/lang/Object;: I4 Branch 172 IFNONNULL L1636 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2405: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.createEntrySet()Ljava/util/Set;: Line 1930: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2390: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2394: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.toString()Ljava/lang/String;: I218 Branch 160 IFNULL L1373 - true: 1351
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.setValue(Ljava/lang/Object;)Ljava/lang/Object;: I4 Branch 172 IFNONNULL L1636 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.clear()V: Line 1472: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.clear()V: Line 1471: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.getFromKey()Ljava/lang/Object;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.remove(Ljava/lang/Object;)Z: I4 Branch 255 IFNE L2041 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2388: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: Line 2389: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inFromRange(Ljava/lang/Object;Z)Z: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I52 Branch 97 IFEQ L907 - false: 500
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.remove(Ljava/lang/Object;)Z: I4 Branch 255 IFNE L2041 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.clear()V: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Ljava/lang/Object;: I5 Branch 45 IF_ACMPEQ L480 - true: 94
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I39 Branch 117 IFEQ L1065 - false: 29
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.clear()V: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.iterator()Ljava/util/Iterator;: root-Branch: 3508
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I146 Branch 130 IFLT L1142 - true: 2417
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.containsKey(Ljava/lang/Object;)Z: I8 Branch 199 IFNE L1718 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: I19 Branch 245 IFNONNULL L1988 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: I41 Branch 246 IFNULL L1995 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Ljava/lang/Object;ZLjava/lang/Object;Z)V: I40 Branch 227 IFNULL L1878 - true: 66
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: I19 Branch 245 IFNONNULL L1988 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: I41 Branch 246 IFNULL L1995 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.remove()V: I4 Branch 179 IFNONNULL L1590 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.size()I: Line 2013: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.remove()V: I4 Branch 179 IFNONNULL L1590 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.iterator()Ljava/util/Iterator;: Line 2290: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.hasNext()Z: Line 2320: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I4 Branch 134 IFNONNULL L1196 - false: 4943
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I15 Branch 95 IFNE L894 - true: 49
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.iterator()Ljava/util/Iterator;: Line 2295: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: Line 2376: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I15 Branch 95 IFNE L894 - false: 207
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: Line 2373: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Ljava/lang/Object;II)V: Line 2106: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: Line 2372: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Ljava/lang/Object;II)V: Line 2104: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Ljava/lang/Object;II)V: Line 2102: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I64 Branch 137 IFNULL L1207 - false: 1
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Ljava/lang/Object;II)V: Line 2115: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Ljava/lang/Object;II)V: Line 2114: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I101 Branch 141 IF_ACMPNE L1216 - true: 20
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Ljava/lang/Object;II)V: Line 2113: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Ljava/lang/Object;II)V: Line 2112: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I101 Branch 141 IF_ACMPNE L1216 - false: 13
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Ljava/lang/Object;II)V: Line 2111: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I137 Branch 78 IF_ACMPEQ L724 - true: 2296
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;: I5 Branch 207 IFNE L1782 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.remove(Ljava/lang/Object;)Z: I17 Branch 167 IF_ICMPEQ L1466 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I30 Branch 48 IFNE L501 - false: 10041
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;: I5 Branch 207 IFNE L1782 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I85 Branch 127 IF_ACMPNE L1127 - false: 122
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.getToKey()Ljava/lang/Object;: Line 2243: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.next()Ljava/util/Map$Entry;: I4 Branch 265 IFEQ L2325 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.size()I: Line 2004: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.next()Ljava/util/Map$Entry;: I4 Branch 265 IFEQ L2325 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.isEmpty()Z: Line 2018: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I15 Branch 116 IFNE L1058 - true: 5
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I15 Branch 116 IFNE L1058 - false: 60
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I11 Branch 66 IF_ACMPEQ L657 - false: 410
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.hasNext()Z: I4 Branch 264 IFNE L2320 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.toString()Ljava/lang/String;: I171 Branch 159 IF_ICMPNE L1363 - false: 45
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.hasNext()Z: I4 Branch 264 IFNE L2320 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.nextEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I22 Branch 177 IFNONNULL L1567 - false: 8753
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.isToInclusive()Z: Line 2253: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.remove(Ljava/lang/Object;)Z: I17 Branch 167 IF_ICMPEQ L1466 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.remove(Ljava/lang/Object;)Z: I4 Branch 165 IFNE L1410 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: Line 1745: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2069: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2070: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.next()Ljava/lang/Object;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I120 Branch 99 IFEQ L920 - true: 5227
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.remove(Ljava/lang/Object;)Z: I4 Branch 165 IFNE L1410 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.toString()Ljava/lang/String;: I171 Branch 159 IF_ICMPNE L1363 - true: 4
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: Line 2192: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2071: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: Line 2191: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2072: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.createRangeMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/SortedMap;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: I16 Branch 260 IF_ACMPNE L2390 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: I16 Branch 260 IF_ACMPNE L2390 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: I8 Branch 229 IFNONNULL L1891 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator.next()Ljava/lang/Object;: Line 1528: 3508
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I101 Branch 75 IF_ACMPNE L706 - true: 55
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I120 Branch 99 IFEQ L920 - false: 5227
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange(Ljava/lang/Object;)Z: I13 Branch 208 IFNULL L1795 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.entrySet()Ljava/util/Set;: I4 Branch 203 IFNONNULL L1753 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;: I5 Branch 206 IFNE L1774 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I101 Branch 75 IF_ACMPNE L706 - false: 3909
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.isToInclusive()Z: Line 1950: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeMap;)V: I15 Branch 244 IFNONNULL L1975 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange(Ljava/lang/Object;)Z: I13 Branch 208 IFNULL L1795 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange(Ljava/lang/Object;)Z: Line 1792: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange(Ljava/lang/Object;)Z: Line 1793: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: I8 Branch 229 IFNONNULL L1891 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange(Ljava/lang/Object;)Z: Line 1795: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.entrySet()Ljava/util/Set;: I4 Branch 203 IFNONNULL L1753 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;: I5 Branch 206 IFNE L1774 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: Line 2182: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: Line 2184: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: Line 2185: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inRange2(Ljava/lang/Object;)Z: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I137 Branch 78 IF_ACMPEQ L724 - false: 9
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeMap;)V: I15 Branch 244 IFNONNULL L1975 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: I32 Branch 196 IFNULL L2191 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeMap;)V: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.nextEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 1654: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeMap;)V: Line 2273: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.nextEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 1655: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.fixup()I: I5 Branch 181 IF_ICMPEQ L2125 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.nextEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 1656: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.clear()V: Line 1429: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.clear()V: Line 1428: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: I32 Branch 196 IFNULL L2191 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I91 Branch 128 IF_ICMPGE L1127 - true: 122
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeMap;)V: Line 2278: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.contains(Ljava/lang/Object;)Z: Line 1459: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeMap;)V: Line 2281: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeMap;)V: Line 2280: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeMap;)V: Line 2279: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: Line 1922: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I9 Branch 110 IFNE L1019 - false: 31
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I160 Branch 80 IF_ACMPNE L730 - true: 49
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: Line 1921: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I160 Branch 80 IF_ACMPNE L730 - false: 1561
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I109 Branch 57 IF_ACMPNE L557 - false: 2553
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I139 Branch 8 IFEQ L165 - true: 17402
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: Line 1911: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Ljava/lang/Object;: I10 Branch 46 IFEQ L481 - false: 90
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I97 Branch 56 IF_ACMPEQ L553 - false: 1092
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I139 Branch 8 IFEQ L165 - false: 17402
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I40 Branch 105 IFEQ L969 - false: 66
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2312: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2315: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2314: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.remove(Ljava/lang/Object;)Z: I8 Branch 168 IFEQ L1512 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.remove(Ljava/lang/Object;)Z: I8 Branch 168 IFEQ L1512 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 2316: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inToRange(Ljava/lang/Object;Z)Z: Line 2228: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inRange(Ljava/lang/Object;)Z: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.next()Ljava/lang/Object;: Line 1615: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.hasPrevious()Z: Line 1644: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(Ljava/lang/Object;II)Ljava/util/SortedMap;: I12 Branch 92 IF_ICMPLE L856 - true: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(Ljava/lang/Object;II)Ljava/util/SortedMap;: I12 Branch 92 IF_ICMPLE L856 - false: 5970
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: I13 Branch 191 IFNONNULL L2166 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: I13 Branch 191 IFNONNULL L2166 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I96 Branch 74 IF_ACMPNE L704 - false: 55
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$KeySet;)V: Line 1477: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I216 Branch 63 IFEQ L600 - true: 1271
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;: Line 880: 1510
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.fixup()I: I5 Branch 181 IF_ICMPEQ L2125 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.remove(Ljava/lang/Object;)Z: Line 1512: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: I43 Branch 197 IFNULL L2192 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: I43 Branch 197 IFNULL L2192 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 1556: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.iterator()Ljava/util/Iterator;: Line 1492: 3508
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 1555: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: I55 Branch 263 IF_ICMPLT L2405 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 1554: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: I9 Branch 259 IFEQ L2373 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange2(Ljava/lang/Object;)Z: I13 Branch 212 IFNULL L1805 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I56 Branch 118 IFEQ L1070 - true: 5580
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: I9 Branch 259 IFEQ L2373 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: Line 531: 290
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.createRangeMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/SortedMap;: Line 2259: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.createEntrySet()Ljava/util/Set;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator.next()Ljava/lang/Object;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.contains(Ljava/lang/Object;)Z: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.remove()V: I5 Branch 266 IF_ICMPEQ L2335 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.size()I: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.containsKey(Ljava/lang/Object;)Z: I8 Branch 199 IFNE L1718 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I49 Branch 70 IFEQ L674 - false: 12
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inRange2(Ljava/lang/Object;)Z: Line 2212: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.getKey()Ljava/lang/Object;: Line 1620: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: I55 Branch 263 IF_ICMPLT L2405 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: I31 Branch 261 IF_ICMPNE L2398 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.remove()V: I5 Branch 266 IF_ICMPEQ L2335 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.size()I: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.remove()V: I31 Branch 261 IF_ICMPNE L2398 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(Ljava/lang/Object;II)Ljava/util/SortedMap;: Line 856: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.getPrefixMapByBits(Ljava/lang/Object;II)Ljava/util/SortedMap;: Line 855: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.getValue()Ljava/lang/Object;: I4 Branch 171 IFNONNULL L1628 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.prefixMap(Ljava/lang/Object;)Ljava/util/SortedMap;: root-Branch: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I100 Branch 51 IF_ICMPLE L515 - false: 144
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.fixup()I: Line 2158: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.iterator()Ljava/util/Iterator;: I7 Branch 241 IF_ICMPEQ L2290 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.getValue()Ljava/lang/Object;: I4 Branch 171 IFNONNULL L1628 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;: Line 1782: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.getToKey()Ljava/lang/Object;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I203 Branch 62 IFEQ L596 - true: 188
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I146 Branch 79 IFEQ L725 - true: 49
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.contains(Ljava/lang/Object;)Z: I4 Branch 251 IFNE L2024 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange2(Ljava/lang/Object;)Z: I13 Branch 212 IFNULL L1805 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.contains(Ljava/lang/Object;)Z: I4 Branch 251 IFNE L2024 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I75 Branch 73 IFEQ L694 - true: 149
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I41 Branch 124 IFNE L1106 - false: 155
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I41 Branch 124 IFNE L1106 - true: 208
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.findNext(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.fixup()I: Line 2125: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.contains(Ljava/lang/Object;)Z: Line 1502: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: I26 Branch 147 IF_ICMPGE L2422 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I21 Branch 123 IF_ICMPGT L1101 - true: 73
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I9 Branch 94 IFNE L893 - false: 49
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: I39 Branch 237 IFNULL L1921 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.isFromInclusive()Z: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: I26 Branch 147 IF_ICMPGE L2422 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I68 Branch 49 IF_ACMPNE L506 - false: 9
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I33 Branch 69 IFEQ L665 - true: 331
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: I39 Branch 237 IFNULL L1921 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator.next()Ljava/lang/Object;: Line 1480: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.remove(Ljava/lang/Object;)Z: Line 1465: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.remove(Ljava/lang/Object;)Z: Line 1464: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeMap;)V: Line 1967: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inToRange(Ljava/lang/Object;Z)Z: I22 Branch 220 IFNE L1830 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeMap;)V: Line 1974: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.createRangeMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/SortedMap;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.remove(Ljava/lang/Object;)Z: Line 1466: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.iterator()Ljava/util/Iterator;: I7 Branch 241 IF_ICMPEQ L2290 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inToRange(Ljava/lang/Object;Z)Z: I22 Branch 220 IFNE L1830 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.getFromKey()Ljava/lang/Object;: Line 2238: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.previousEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 1660: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(Ljava/lang/Object;)Ljava/lang/Object;: I48 Branch 41 IFEQ L430 - false: 22
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I9 Branch 115 IFNE L1057 - false: 5
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange2(Ljava/lang/Object;)Z: Line 1803: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange2(Ljava/lang/Object;)Z: Line 1802: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inRange2(Ljava/lang/Object;)Z: Line 1805: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1984: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I105 Branch 6 IFNE L158 - true: 17402
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1987: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1988: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inToRange(Ljava/lang/Object;Z)Z: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(Ljava/lang/Object;)Ljava/lang/Object;: I71 Branch 42 IFNE L438 - false: 23
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.size()I: Line 1497: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1985: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextKey(Ljava/lang/Object;)Ljava/lang/Object;: I30 Branch 87 IFNULL L802 - false: 1261
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(Ljava/lang/Object;)Ljava/lang/Object;: I71 Branch 42 IFNE L438 - true: 6
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1995: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$RangeMap;)V: Line 1975: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1994: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.iterator()Ljava/util/Iterator;: Line 1999: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: I4 Branch 270 IFNULL L2081 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I30 Branch 53 IFNE L533 - false: 6056
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: I4 Branch 270 IFNULL L2081 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.iterator()Ljava/util/Iterator;: Line 1449: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.isToInclusive()Z: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.selectR(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;ILjava/lang/Object;ILorg/apache/commons/collections4/trie/AbstractPatriciaTrie$Reference;)Z: I68 Branch 31 IFEQ L370 - false: 7267
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I118 Branch 129 IF_ICMPEQ L1134 - true: 56
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.previousEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I7 Branch 174 IF_ICMPEQ L1660 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.createRangeMap(Ljava/lang/Object;ZLjava/lang/Object;Z)Ljava/util/SortedMap;: Line 1956: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.remove(Ljava/lang/Object;)Z: Line 2041: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I118 Branch 129 IF_ICMPEQ L1134 - false: 331
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.previousEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I7 Branch 174 IF_ICMPEQ L1660 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I96 Branch 113 IFEQ L1037 - true: 1654
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inToRange(Ljava/lang/Object;Z)Z: Line 1827: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inToRange(Ljava/lang/Object;Z)Z: Line 1830: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inToRange(Ljava/lang/Object;Z)Z: Line 1829: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.isEmpty()Z: I5 Branch 250 IFNE L2018 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inToRange(Ljava/lang/Object;Z)Z: Line 1826: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.isEmpty()Z: I5 Branch 250 IFNE L2018 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inFromRange(Ljava/lang/Object;Z)Z: I22 Branch 216 IFNE L1816 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.hasPrevious()Z: I4 Branch 173 IFNULL L1644 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inFromRange(Ljava/lang/Object;Z)Z: I22 Branch 216 IFNE L1816 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I21 Branch 96 IF_ICMPLE L896 - false: 158
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.remove(Ljava/lang/Object;)Ljava/lang/Object;: I8 Branch 200 IFNE L1727 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.size()I: Line 1423: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.hasPrevious()Z: I4 Branch 173 IFNULL L1644 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.toString()Ljava/lang/String;: I63 Branch 155 IF_ICMPNE L1341 - false: 3
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.getToKey()Ljava/lang/Object;: Line 1940: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: I50 Branch 238 IFNULL L1922 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.previous()Ljava/lang/Object;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.remove(Ljava/lang/Object;)Ljava/lang/Object;: I8 Branch 200 IFNE L1727 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: I50 Branch 238 IFNULL L1922 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet.size()I: Line 2285: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$Values;)V: Line 1525: 3508
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I21 Branch 96 IF_ICMPLE L896 - true: 202
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: I4 Branch 235 IFNONNULL L1911 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.tailMap(Ljava/lang/Object;)Ljava/util/SortedMap;: root-Branch: 1510
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: Line 2419: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I17 Branch 67 IFNE L658 - false: 410
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(Ljava/lang/Object;)Ljava/lang/Object;: I3 Branch 38 IFNONNULL L420 - false: 6
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inFromRange(Ljava/lang/Object;Z)Z: Line 1816: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.toString()Ljava/lang/String;: I164 Branch 158 IFNULL L1362 - false: 4
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I17 Branch 67 IFNE L658 - true: 2681
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inFromRange(Ljava/lang/Object;Z)Z: Line 1815: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inFromRange(Ljava/lang/Object;Z)Z: Line 1812: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.inFromRange(Ljava/lang/Object;Z)Z: Line 1813: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2368: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.lastKey()Ljava/lang/Object;: I4 Branch 235 IFNONNULL L1911 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2367: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2366: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.containsKey(Ljava/lang/Object;)Z: Line 1718: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2365: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: Line 2427: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: Line 2420: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: Line 2421: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.readObject(Ljava/io/ObjectInputStream;)V: Line 2422: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2364: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2363: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$PrefixRangeEntrySet;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Ljava/lang/Object;II)V: Line 2362: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I91 Branch 128 IF_ICMPGE L1127 - false: 163
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I96 Branch 113 IFEQ L1037 - false: 1654
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.iterator()Ljava/util/Iterator;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.hasNext()Z: I4 Branch 268 IFNULL L2076 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.hasNext()Z: I4 Branch 268 IFNULL L2076 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.higherEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I71 Branch 98 IFEQ L912 - true: 5227
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.contains(Ljava/lang/Object;)Z: Line 2024: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousKey(Ljava/lang/Object;)Ljava/lang/Object;: I30 Branch 90 IFNULL L815 - false: 156
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.hasNext()Z: Line 2076: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator.next()Ljava/lang/Object;: root-Branch: 3508
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.remove()V: Line 1590: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.size()I: I5 Branch 247 IF_ICMPEQ L2004 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I39 Branch 3 IFEQ L139 - true: 46
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.contains(Ljava/lang/Object;)Z: I4 Branch 162 IFNE L1400 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: I43 Branch 193 IFNULL L2173 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.followRight(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I16 Branch 133 IF_ICMPLE L1169 - false: 67
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I105 Branch 119 IFEQ L1078 - true: 5580
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.isFromInclusive()Z: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I127 Branch 58 IF_ICMPLE L563 - false: 1271
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.floorEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I105 Branch 119 IFEQ L1078 - false: 5580
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextKey(Ljava/lang/Object;)Ljava/lang/Object;: I40 Branch 88 IFNULL L804 - false: 1261
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.isInternalNode()Z: I9 Branch 151 IF_ACMPEQ L1316 - false: 76
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.remove(Ljava/lang/Object;)Z: Line 1410: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.createEntrySet()Ljava/util/Set;: Line 2233: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;: Line 1761: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(Ljava/io/ObjectOutputStream;)V: Line 2439: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I23 Branch 68 IF_ACMPNE L661 - false: 680
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.entrySet()Ljava/util/Set;: Line 1753: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.entrySet()Ljava/util/Set;: Line 1756: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator.next()Ljava/util/Map$Entry;: Line 2081: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.prefixMap(Ljava/lang/Object;)Ljava/util/SortedMap;: Line 829: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextKey(Ljava/lang/Object;)Ljava/lang/Object;: I40 Branch 88 IFNULL L804 - true: 1261
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.getToKey()Ljava/lang/Object;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I110 Branch 7 IFEQ L159 - true: 17402
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: I43 Branch 193 IFNULL L2173 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(Ljava/io/ObjectOutputStream;)V: Line 2434: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(Ljava/io/ObjectOutputStream;)V: Line 2435: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet.contains(Ljava/lang/Object;)Z: I4 Branch 162 IFNE L1400 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.writeObject(Ljava/io/ObjectOutputStream;)V: Line 2433: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.headMap(Ljava/lang/Object;)Ljava/util/SortedMap;: Line 1774: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.isFromInclusive()Z: Line 1945: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I5 Branch 52 IF_ACMPNE L531 - true: 290
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I5 Branch 52 IF_ACMPNE L531 - false: 6346
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.getValue()Ljava/lang/Object;: Line 1628: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.getFromKey()Ljava/lang/Object;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet.size()I: I5 Branch 247 IF_ICMPEQ L2004 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.nextEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.subtree(Ljava/lang/Object;II)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I149 Branch 131 IF_ICMPGE L1142 - false: 1247
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.size()I: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.remove(Ljava/lang/Object;)Ljava/lang/Object;: I37 Branch 39 IF_ICMPGT L429 - true: 6
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.getFromKey()Ljava/lang/Object;: Line 1935: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I165 Branch 61 IF_ACMPNE L581 - true: 6043
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.isExternalNode()Z: I4 Branch 152 IFNE L1323 - true: 2090
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.isToInclusive()Z: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.getKey()Ljava/lang/Object;: I4 Branch 170 IFNONNULL L1620 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I139 Branch 59 IF_ACMPNE L572 - false: 1108
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.containsKey(Ljava/lang/Object;)Z: I37 Branch 34 IFEQ L386 - false: 18
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.getKey()Ljava/lang/Object;: I4 Branch 170 IFNONNULL L1620 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I80 Branch 139 IFNONNULL L1211 - true: 1
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I79 Branch 54 IF_ACMPNE L545 - true: 68
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.get(Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 20 IFNULL L242 - false: 84
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.keySet()Ljava/util/Set;: I4 Branch 36 IFNONNULL L399 - true: 1051
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.get(Ljava/lang/Object;)Ljava/lang/Object;: I8 Branch 201 IFNE L1736 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.get(Ljava/lang/Object;)Ljava/lang/Object;: I8 Branch 201 IFNE L1736 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: Line 2163: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator.next()Ljava/util/Map$Entry;: Line 2325: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: I13 Branch 195 IFNONNULL L2185 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.lastKey()Ljava/lang/Object;: I13 Branch 195 IFNONNULL L2185 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Ljava/lang/Object;II)V: Line 2100: 125
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I107 Branch 142 IFEQ L1217 - false: 1501
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.ceilingEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I57 Branch 106 IFEQ L974 - true: 3267
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inFromRange(Ljava/lang/Object;Z)Z: Line 2220: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: I32 Branch 192 IFNULL L2172 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator.findNext(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: Line 2381: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: I32 Branch 192 IFNULL L2172 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I82 Branch 50 IF_ACMPNE L508 - true: 9
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: I41 Branch 231 IFNULL L1901 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: I41 Branch 231 IFNULL L1901 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: Line 2173: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.get(Ljava/lang/Object;)Ljava/lang/Object;: Line 1736: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: Line 2172: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: Line 2166: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.firstKey()Ljava/lang/Object;: Line 2165: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: Line 1890: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.getEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I37 Branch 23 IFEQ L260 - false: 48
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I69 Branch 138 IF_ACMPNE L1207 - true: 1
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.clear()V: Line 1508: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: Line 1891: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry.toString()Ljava/lang/String;: I110 Branch 156 IFNULL L1351 - true: 1596
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.values()Ljava/util/Collection;: I4 Branch 37 IFNONNULL L407 - true: 104
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I7 Branch 65 IFNULL L657 - true: 1677
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.<init>(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie;Ljava/lang/Object;ZLjava/lang/Object;Z)V: I46 Branch 228 IFLE L1878 - false: 19
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: Line 1902: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: Line 1901: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.clear()V: Line 1507: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.createEntrySet()Ljava/util/Set;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet.size()I: Line 1454: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.contains(Ljava/lang/Object;)Z: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousKey(Ljava/lang/Object;)Ljava/lang/Object;: I40 Branch 91 IFNULL L817 - false: 337
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousKey(Ljava/lang/Object;)Ljava/lang/Object;: I40 Branch 91 IFNULL L817 - true: 156
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.selectValue(Ljava/lang/Object;)Ljava/lang/Object;: I9 Branch 26 IFNONNULL L340 - false: 25
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;: I5 Branch 204 IFNE L1761 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeExternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I5 Branch 47 IF_ACMPNE L499 - false: 10041
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.subMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/SortedMap;: I5 Branch 204 IFNE L1761 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.setValue(Ljava/lang/Object;)Ljava/lang/Object;: Line 1636: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator.previous()Ljava/lang/Object;: Line 1649: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.isFromInclusive()Z: Line 2248: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I93 Branch 140 IFEQ L1215 - true: 1
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values.clear()V: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I69 Branch 138 IF_ACMPNE L1207 - false: 83
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.previousEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I93 Branch 140 IFEQ L1215 - false: 14
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.nextEntryImpl(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I116 Branch 76 IF_ACMPNE L714 - false: 474
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I76 Branch 5 IFEQ L149 - false: 5812
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap.inRange(Ljava/lang/Object;)Z: Line 2204: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator.nextEntry()Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;: I7 Branch 176 IF_ICMPEQ L1562 - false: 8753
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I5 Branch 202 IFNE L1745 - false: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: I52 Branch 232 IFNULL L1902 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie.removeInternalEntry(Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;)V: I152 Branch 60 IF_ACMPNE L576 - true: 6043
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.comparator()Ljava/util/Comparator;: root-Branch: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;: I5 Branch 202 IFNE L1745 - true: 29956
Number of times BBC is called for org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap.firstKey()Ljava/lang/Object;: I52 Branch 232 IFNULL L1902 - false: 29956
Number of times BBC is called in total: 9375559
* Search finished after 603s and 310 generations, 118473 statements, best individual has fitness: 1467.0
* Minimizing test suite
[MASTER] 21:24:54.512 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 56%
* Total number of goals: 822
* Number of covered goals: 463
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 50%
* Total number of goals: 602
* Number of covered goals: 302
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 55%
* Total number of goals: 569
* Number of covered goals: 313
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 60%
* Total number of goals: 186
* Number of covered goals: 111
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 50%
* Total number of goals: 602
* Number of covered goals: 300
* Generated 172 tests with total length 2744
* Resulting test suite's coverage: 49% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:25:41.389 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6878833333333333% of time used, but only 19/172 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 21:25:55.110 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_22_1627593954946/org/apache/commons/collections4/trie/AbstractPatriciaTrie_22_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_22_1627593954946/org/apache/commons/collections4/trie/AbstractPatriciaTrie_22_tmp__ESTest_scaffolding.java]]
[MASTER] 21:25:55.110 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:25:55.110 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:25:55.114 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry>>>>: 79
[MASTER] 21:25:55.115 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_22_1627593954946/org/apache/commons/collections4/trie/AbstractPatriciaTrie_22_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:25:55.115 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:25:55.115 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_22_1627593954946/org/apache/commons/collections4/trie/AbstractPatriciaTrie_22_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:25:54 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Collection;
14: import java.util.Comparator;
15: import java.util.Map;
16: import java.util.SortedMap;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_22_tmp__ESTest extends AbstractPatriciaTrie_22_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       int int0 = 0;
33:       Integer integer0 = new Integer(0);
34:       assertTrue(integer0.equals((Object)int0));
35:       assertNotNull(integer0);
36:       assertEquals(0, (int)integer0);
37:       
38:       Object object0 = patriciaTrie0.put("||eS]lshOcT8pPOW", integer0);
39:       assertTrue(integer0.equals((Object)int0));
40:       assertNull(object0);
41:       
42:       int int1 = patriciaTrie0.lengthInBits("||eS]lshOcT8pPOW");
43:       assertFalse(int1 == int0);
44:       assertEquals(256, int1);
45:       
46:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("||eS]lshOcT8pPOW");
47:       assertNull(abstractPatriciaTrie_TrieEntry0);
48:       
49:       boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
50:       assertFalse(boolean0);
51:       
52:       PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
53:       assertNotNull(patriciaTrie1);
54:       
55:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
56:       assertNotNull(patriciaTrie2);
57:       
58:       Collection<String> collection0 = patriciaTrie2.values();
59:       assertFalse(collection0.contains("||eS]lshOcT8pPOW"));
60:       assertNotNull(collection0);
61:       
62:       String string0 = patriciaTrie2.put("||eS]lshOcT8pPOW", "h%w");
63:       assertNull(string0);
64:       
65:       SortedMap<String, String> sortedMap0 = patriciaTrie2.headMap("||eS]lshOcT8pPOW");
66:       assertNotNull(sortedMap0);
67:       assertEquals(0, sortedMap0.size());
68:       assertTrue(sortedMap0.isEmpty());
69:       
70:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", 0);
71:       assertFalse(integer0.equals((Object)int1));
72:       assertTrue(integer0.equals((Object)int0));
73:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
74:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
76:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
77:       
78:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
79:       Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry>>>> comparator1 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry>>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
80:       assertNotNull(comparator1);
81:       
82:       boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isEmpty();
83:       assertFalse(integer0.equals((Object)int1));
84:       assertTrue(integer0.equals((Object)int0));
85:       assertTrue(boolean1 == boolean0);
86:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
88:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
89:       assertFalse(boolean1);
90:       
91:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = null;
92:       try {
93:         abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>((Map.Entry<? extends String, ?>) null);
94:         fail("Expecting exception: NullPointerException");
95:       
96:       } catch(NullPointerException e) {
97:          //
98:          // no message in exception (getMessage() returned null)
99:          //
100:          verifyException("java.util.AbstractMap$SimpleEntry", e);
101:       }
102:   }
103: }
RegularFileObject[/tmp/EvoSuite_22_1627593954946/org/apache/commons/collections4/trie/AbstractPatriciaTrie_22_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:25:54 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_22_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_22_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_22_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_22_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 21:25:55.116 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

int int0 = 0;
Integer integer0 = new Integer(0);
assertTrue(integer0.equals((Object)int0));
assertNotNull(integer0);
assertEquals(0, (int)integer0);

Object object0 = patriciaTrie0.put("||eS]lshOcT8pPOW", integer0);
assertTrue(integer0.equals((Object)int0));
assertNull(object0);

int int1 = patriciaTrie0.lengthInBits("||eS]lshOcT8pPOW");
assertFalse(int1 == int0);
assertEquals(256, int1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("||eS]lshOcT8pPOW");
assertNull(abstractPatriciaTrie_TrieEntry0);

boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
assertFalse(boolean0);

PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
assertNotNull(patriciaTrie1);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

Collection<String> collection0 = patriciaTrie2.values();
assertFalse(collection0.contains("||eS]lshOcT8pPOW"));
assertNotNull(collection0);

String string0 = patriciaTrie2.put("||eS]lshOcT8pPOW", "h%w");
assertNull(string0);

SortedMap<String, String> sortedMap0 = patriciaTrie2.headMap("||eS]lshOcT8pPOW");
assertNotNull(sortedMap0);
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", 0);
assertFalse(integer0.equals((Object)int1));
assertTrue(integer0.equals((Object)int0));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry>>>> comparator1 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry>>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isEmpty();
assertFalse(integer0.equals((Object)int1));
assertTrue(integer0.equals((Object)int0));
assertTrue(boolean1 == boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(boolean1);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>((Map.Entry<? extends String, ?>) null);

[MASTER] 21:25:56.810 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_33_1627593956613/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_33_1627593956613/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest_scaffolding.java]]
[MASTER] 21:25:56.810 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:25:56.810 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:25:56.811 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.String>,java.lang.String>>: 36
[MASTER] 21:25:56.811 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_33_1627593956613/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:25:56.811 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:25:56.812 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_33_1627593956613/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:25:56 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_33_tmp__ESTest extends AbstractPatriciaTrie_33_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("}>@'{XUc", "}>@'{XUc", 0);
30:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
34:       
35:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
36:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, String>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, String>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
37:       assertNotNull(comparator1);
38:       
39:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree((String) null, 0, 2);
40:       assertNull(abstractPatriciaTrie_TrieEntry1);
41:       
42:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
43:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
44:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
46:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
47:       
48:       int int0 = patriciaTrie0.bitsPerElement();
49:       assertEquals(16, int0);
50:       
51:       String string0 = patriciaTrie0.put("", (String) null);
52:       assertNull(string0);
53:       
54:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, (-1));
55:       assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
56:       assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
57:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
59:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
63:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
65:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
67:       
68:       boolean boolean0 = patriciaTrie0.isBitSet((String) null, 2, 0);
69:       assertFalse(boolean0);
70:       
71:       String string1 = patriciaTrie0.selectKey("5]G .");
72:       assertNotNull(string1);
73:       assertEquals("}>@'{XUc", string1);
74:       
75:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
76:       assertNotNull(patriciaTrie1);
77:       
78:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
79:       assertNotNull(patriciaTrie2);
80:       
81:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.subtree((String) null, 89, 89);
82:       assertNull(abstractPatriciaTrie_TrieEntry4);
83:       
84:       int int1 = patriciaTrie2.bitIndex((String) null, "Trie[");
85:       assertFalse(int1 == int0);
86:       assertEquals(9, int1);
87:       
88:       String string2 = patriciaTrie2.nextKey("");
89:       assertNull(string2);
90:       
91:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.firstEntry();
92:       assertNull(abstractPatriciaTrie_TrieEntry5);
93:       
94:       Comparator<? super String> comparator2 = patriciaTrie2.comparator();
95:       assertNotNull(comparator2);
96:       
97:       Integer integer0 = new Integer((-1082));
98:       assertFalse(integer0.equals((Object)int0));
99:       assertFalse(integer0.equals((Object)int1));
100:       assertNotNull(integer0);
101:       assertEquals((-1082), (int)integer0);
102:       
103:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "Trie[", 1314);
104:       assertFalse(integer0.equals((Object)int0));
105:       assertFalse(integer0.equals((Object)int1));
106:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
107:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
109:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
110:       
111:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry2);
112:       assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
113:       assertFalse(integer0.equals((Object)int0));
114:       assertFalse(integer0.equals((Object)int1));
115:       assertTrue(boolean1 == boolean0);
116:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
117:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
119:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
121:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
123:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
124:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
125:       assertFalse(boolean1);
126:   }
127: }
RegularFileObject[/tmp/EvoSuite_33_1627593956613/org/apache/commons/collections4/trie/AbstractPatriciaTrie_33_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:25:56 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_33_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_33_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_33_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_33_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 21:25:56.823 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("}>@'{XUc", "}>@'{XUc", 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, String>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, String>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree((String) null, 0, 2);
assertNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

int int0 = patriciaTrie0.bitsPerElement();
assertEquals(16, int0);

String string0 = patriciaTrie0.put("", (String) null);
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, (-1));
assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

boolean boolean0 = patriciaTrie0.isBitSet((String) null, 2, 0);
assertFalse(boolean0);

String string1 = patriciaTrie0.selectKey("5]G .");
assertNotNull(string1);
assertEquals("}>@'{XUc", string1);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.subtree((String) null, 89, 89);
assertNull(abstractPatriciaTrie_TrieEntry4);

int int1 = patriciaTrie2.bitIndex((String) null, "Trie[");
assertFalse(int1 == int0);
assertEquals(9, int1);

String string2 = patriciaTrie2.nextKey("");
assertNull(string2);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.firstEntry();
assertNull(abstractPatriciaTrie_TrieEntry5);

Comparator<? super String> comparator2 = patriciaTrie2.comparator();
assertNotNull(comparator2);

Integer integer0 = new Integer((-1082));
assertFalse(integer0.equals((Object)int0));
assertFalse(integer0.equals((Object)int1));
assertNotNull(integer0);
assertEquals((-1082), (int)integer0);

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "Trie[", 1314);
assertFalse(integer0.equals((Object)int0));
assertFalse(integer0.equals((Object)int1));
assertNotNull(abstractPatriciaTrie_TrieEntry6);
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());

boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry2);
assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
assertFalse(integer0.equals((Object)int0));
assertFalse(integer0.equals((Object)int1));
assertTrue(boolean1 == boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(boolean1);


[MASTER] 21:25:57.995 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_44_1627593957890/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_44_1627593957890/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.java]]
[MASTER] 21:25:57.995 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:25:57.995 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:25:57.996 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>,java.lang.String>>: 92
[MASTER] 21:25:57.996 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_44_1627593957890/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:25:57.996 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:25:57.996 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_44_1627593957890/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:25:57 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_44_tmp__ESTest extends AbstractPatriciaTrie_44_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
28:       assertNotNull(hashMap0);
29:       assertTrue(hashMap0.isEmpty());
30:       assertEquals(0, hashMap0.size());
31:       
32:       Object object0 = new Object();
33:       assertNotNull(object0);
34:       
35:       Object object1 = hashMap0.put("xcR)>&*zb2#WmHKW9f", object0);
36:       assertNull(object1);
37:       assertFalse(hashMap0.isEmpty());
38:       assertEquals(1, hashMap0.size());
39:       
40:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
41:       assertNotNull(patriciaTrie0);
42:       assertFalse(hashMap0.isEmpty());
43:       assertEquals(1, hashMap0.size());
44:       
45:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("CV}uS%>*VM`0", "CV}uS%>*VM`0", 398);
46:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       
51:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
52:       assertNull(abstractPatriciaTrie_TrieEntry1);
53:       
54:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, abstractPatriciaTrie_TrieEntry0);
55:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
56:       assertFalse(hashMap0.isEmpty());
57:       assertEquals(1, hashMap0.size());
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
63:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
64:       
65:       abstractPatriciaTrie_TrieEntry0.key = "CV}uS%>*VM`0";
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
69:       
70:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>((AbstractMap.SimpleEntry<String, Object>) null, (Object) null, 0);
71:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
72:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
73:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
74:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
75:       
76:       Integer integer0 = new Integer(0);
77:       assertNotNull(integer0);
78:       assertEquals(0, (int)integer0);
79:       
80:       Object object2 = abstractPatriciaTrie_TrieEntry3.setKeyValue((AbstractMap.SimpleEntry<String, Object>) null, integer0);
81:       assertNull(object2);
82:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
83:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
84:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
85:       
86:       abstractPatriciaTrie_TrieEntry3.bitIndex = 0;
87:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
88:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
89:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
90:       
91:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
92:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
93:       assertNotNull(comparator1);
94:       
95:       boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isExternalNode();
96:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
97:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
98:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
99:       assertTrue(boolean0);
100:       
101:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
102:       assertNotNull(patriciaTrie1);
103:       
104:       patriciaTrie1.incrementSize();
105:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
106:       assertFalse(boolean1 == boolean0);
107:       assertFalse(hashMap0.isEmpty());
108:       assertEquals(1, hashMap0.size());
109:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
110:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
111:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
113:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
114:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
116:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
117:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
118:       assertFalse(boolean1);
119:       
120:       boolean boolean2 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
121:       assertTrue(boolean2 == boolean1);
122:       assertFalse(boolean2 == boolean0);
123:       assertFalse(hashMap0.isEmpty());
124:       assertEquals(1, hashMap0.size());
125:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
126:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
127:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
128:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
130:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
132:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
133:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
134:       assertFalse(boolean2);
135:       
136:       Integer integer1 = new Integer(398);
137:       assertFalse(integer1.equals((Object)integer0));
138:       assertNotNull(integer1);
139:       assertEquals(398, (int)integer1);
140:       
141:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer1, (-2285));
142:       assertFalse(integer1.equals((Object)integer0));
143:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
144:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
145:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
146:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
147:       
148:       boolean boolean3 = abstractPatriciaTrie_TrieEntry4.isInternalNode();
149:       assertFalse(integer1.equals((Object)integer0));
150:       assertTrue(boolean3 == boolean1);
151:       assertFalse(boolean3 == boolean0);
152:       assertTrue(boolean3 == boolean2);
153:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
154:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
155:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
156:       assertFalse(boolean3);
157:       
158:       String string0 = patriciaTrie0.previousKey("CV}uS%>*VM`0");
159:       assertNull(string0);
160:       assertFalse(hashMap0.isEmpty());
161:       assertEquals(1, hashMap0.size());
162:       
163:       Integer integer2 = new Integer(0);
164:       assertTrue(integer2.equals((Object)integer0));
165:       assertFalse(integer2.equals((Object)integer1));
166:       assertNotNull(integer2);
167:       assertEquals(0, (int)integer2);
168:       
169:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>(integer2, (AbstractMap.SimpleEntry<Integer, String>) null, 0);
170:       assertTrue(integer2.equals((Object)integer0));
171:       assertFalse(integer2.equals((Object)integer1));
172:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
173:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
174:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
175:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
176:       
177:       boolean boolean4 = abstractPatriciaTrie_TrieEntry5.isInternalNode();
178:       assertTrue(integer2.equals((Object)integer0));
179:       assertFalse(integer2.equals((Object)integer1));
180:       assertTrue(boolean4 == boolean2);
181:       assertTrue(boolean4 == boolean1);
182:       assertFalse(boolean4 == boolean0);
183:       assertTrue(boolean4 == boolean3);
184:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
185:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
186:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
187:       assertFalse(boolean4);
188:   }
189: }
RegularFileObject[/tmp/EvoSuite_44_1627593957890/org/apache/commons/collections4/trie/AbstractPatriciaTrie_44_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:25:57 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_44_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_44_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 21:25:58.002 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
assertNotNull(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

Object object0 = new Object();
assertNotNull(object0);

Object object1 = hashMap0.put("xcR)>&*zb2#WmHKW9f", object0);
assertNull(object1);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
assertNotNull(patriciaTrie0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("CV}uS%>*VM`0", "CV}uS%>*VM`0", 398);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
assertNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, abstractPatriciaTrie_TrieEntry0);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

abstractPatriciaTrie_TrieEntry0.key = "CV}uS%>*VM`0";
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>((AbstractMap.SimpleEntry<String, Object>) null, (Object) null, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

Object object2 = abstractPatriciaTrie_TrieEntry3.setKeyValue((AbstractMap.SimpleEntry<String, Object>) null, integer0);
assertNull(object2);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

abstractPatriciaTrie_TrieEntry3.bitIndex = 0;
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
assertNotNull(comparator1);

boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isExternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(boolean0);

PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
assertNotNull(patriciaTrie1);

patriciaTrie1.incrementSize();
boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
assertFalse(boolean1 == boolean0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(boolean1);

boolean boolean2 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(boolean2);

Integer integer1 = new Integer(398);
assertFalse(integer1.equals((Object)integer0));
assertNotNull(integer1);
assertEquals(398, (int)integer1);

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer1, (-2285));
assertFalse(integer1.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());

boolean boolean3 = abstractPatriciaTrie_TrieEntry4.isInternalNode();
assertFalse(integer1.equals((Object)integer0));
assertTrue(boolean3 == boolean1);
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(boolean3);

String string0 = patriciaTrie0.previousKey("CV}uS%>*VM`0");
assertNull(string0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());

Integer integer2 = new Integer(0);
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertNotNull(integer2);
assertEquals(0, (int)integer2);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>(integer2, (AbstractMap.SimpleEntry<Integer, String>) null, 0);
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());

boolean boolean4 = abstractPatriciaTrie_TrieEntry5.isInternalNode();
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(boolean4);


[MASTER] 21:25:58.335 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_48_1627593958233/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_48_1627593958233/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest_scaffolding.java]]
[MASTER] 21:25:58.335 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:25:58.335 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:25:58.336 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>>>: 51
[MASTER] 21:25:58.336 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_48_1627593958233/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:25:58.336 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:25:58.336 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_48_1627593958233/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:25:58 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.Set;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_48_tmp__ESTest extends AbstractPatriciaTrie_48_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       String string0 = "";
32:       String string1 = "950ry?e`g'*E_QlU";
33:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("950ry?e`g'*E_QlU", "");
34:       assertNotNull(abstractMap_SimpleEntry0);
35:       
36:       Set<Map.Entry<String, AbstractMap.SimpleEntry<Object, Object>>> set0 = (Set<Map.Entry<String, AbstractMap.SimpleEntry<Object, Object>>>)patriciaTrie0.entrySet();
37:       assertNotNull(set0);
38:       assertTrue(set0.isEmpty());
39:       assertEquals(0, set0.size());
40:       
41:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
42:       assertNotNull(abstractMap_SimpleEntry1);
43:       
44:       Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Object, Object>, String>>> comparator0 = Map.Entry.comparingByKey();
45:       assertNotNull(comparator0);
46:       
47:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.put("", abstractMap_SimpleEntry1);
48:       assertNull(abstractMap_SimpleEntry2);
49:       
50:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
51:       Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>> comparator2 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
52:       assertNotNull(comparator2);
53:       
54:       // Undeclared exception!
55:       try { 
56:         patriciaTrie0.previousKey((String) null);
57:         fail("Expecting exception: NullPointerException");
58:       
59:       } catch(NullPointerException e) {
60:          //
61:          // no message in exception (getMessage() returned null)
62:          //
63:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
64:       }
65:   }
66: }
RegularFileObject[/tmp/EvoSuite_48_1627593958233/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:25:58 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_48_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_48_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_48_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_48_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 21:25:58.337 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie0);

String string0 = "";
String string1 = "950ry?e`g'*E_QlU";
AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("950ry?e`g'*E_QlU", "");
assertNotNull(abstractMap_SimpleEntry0);

Set<Map.Entry<String, AbstractMap.SimpleEntry<Object, Object>>> set0 = (Set<Map.Entry<String, AbstractMap.SimpleEntry<Object, Object>>>)patriciaTrie0.entrySet();
assertNotNull(set0);
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleEntry1);

Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Object, Object>, String>>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.put("", abstractMap_SimpleEntry1);
assertNull(abstractMap_SimpleEntry2);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>> comparator2 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

patriciaTrie0.previousKey((String) null);

[MASTER] 21:25:59.582 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_60_1627593959512/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_60_1627593959512/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest_scaffolding.java]]
[MASTER] 21:25:59.582 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:25:59.582 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:25:59.583 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>,java.lang.String>,java.lang.Integer>>: 76
[MASTER] 21:25:59.583 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_60_1627593959512/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:25:59.583 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:25:59.583 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_60_1627593959512/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:25:59 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_60_tmp__ESTest extends AbstractPatriciaTrie_60_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       int int0 = 32768;
31:       Integer integer0 = new Integer(32768);
32:       assertTrue(integer0.equals((Object)int0));
33:       assertNotNull(integer0);
34:       assertEquals(32768, (int)integer0);
35:       
36:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(integer0, integer0);
37:       assertTrue(integer0.equals((Object)int0));
38:       assertNotNull(abstractMap_SimpleImmutableEntry0);
39:       
40:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
41:       assertTrue(integer0.equals((Object)int0));
42:       assertNotNull(abstractMap_SimpleImmutableEntry1);
43:       
44:       Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
45:       assertNotNull(comparator0);
46:       
47:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>(integer0, abstractMap_SimpleImmutableEntry1, 1);
48:       assertTrue(integer0.equals((Object)int0));
49:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
53:       
54:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
55:       assertTrue(integer0.equals((Object)int0));
56:       assertNotNull(string0);
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
59:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
60:       assertEquals("Entry(key=32768 [1], value=32768=32768, parent=null, left=32768 [1], right=null, predecessor=32768 [1])", string0);
61:       
62:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
63:       assertNotNull(patriciaTrie1);
64:       
65:       String string1 = patriciaTrie1.selectKey("}\n");
66:       assertNull(string1);
67:       
68:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry0);
69:       assertTrue(integer0.equals((Object)int0));
70:       assertNotNull(abstractMap_SimpleImmutableEntry2);
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
73:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
74:       
75:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
76:       Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>>) comparator1);
77:       assertNotNull(comparator2);
78:       
79:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry3 = patriciaTrie1.put("we2q}XHt7", abstractMap_SimpleImmutableEntry2);
80:       assertTrue(integer0.equals((Object)int0));
81:       assertNull(abstractMap_SimpleImmutableEntry3);
82:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
84:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
85:       
86:       int int1 = 0;
87:       // Undeclared exception!
88:       try { 
89:         patriciaTrie1.subtree("", 32768, 0);
90:         fail("Expecting exception: StringIndexOutOfBoundsException");
91:       
92:       } catch(StringIndexOutOfBoundsException e) {
93:       }
94:   }
95: }
RegularFileObject[/tmp/EvoSuite_60_1627593959512/org/apache/commons/collections4/trie/AbstractPatriciaTrie_60_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:25:59 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_60_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_60_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_60_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_60_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 21:25:59.584 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
assertNotNull(patriciaTrie0);

int int0 = 32768;
Integer integer0 = new Integer(32768);
assertTrue(integer0.equals((Object)int0));
assertNotNull(integer0);
assertEquals(32768, (int)integer0);

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(integer0, integer0);
assertTrue(integer0.equals((Object)int0));
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
assertTrue(integer0.equals((Object)int0));
assertNotNull(abstractMap_SimpleImmutableEntry1);

Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>(integer0, abstractMap_SimpleImmutableEntry1, 1);
assertTrue(integer0.equals((Object)int0));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertTrue(integer0.equals((Object)int0));
assertNotNull(string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertEquals("Entry(key=32768 [1], value=32768=32768, parent=null, left=32768 [1], right=null, predecessor=32768 [1])", string0);

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
assertNotNull(patriciaTrie1);

String string1 = patriciaTrie1.selectKey("}\n");
assertNull(string1);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer0.equals((Object)int0));
assertNotNull(abstractMap_SimpleImmutableEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>>) comparator1);
assertNotNull(comparator2);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry3 = patriciaTrie1.put("we2q}XHt7", abstractMap_SimpleImmutableEntry2);
assertTrue(integer0.equals((Object)int0));
assertNull(abstractMap_SimpleImmutableEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

int int1 = 0;
patriciaTrie1.subtree("", 32768, 0);

[MASTER] 21:26:00.517 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_68_1627593960467/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_68_1627593960467/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:00.517 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:00.517 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:00.519 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>>: 51
[MASTER] 21:26:00.520 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>>>: 55
[MASTER] 21:26:00.520 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.String>>: 62
[MASTER] 21:26:00.520 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_68_1627593960467/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:00.520 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:00.520 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_68_1627593960467/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:00 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import java.util.SortedMap;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_68_tmp__ESTest extends AbstractPatriciaTrie_68_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
29:       assertNotNull(hashMap0);
30:       assertEquals(0, hashMap0.size());
31:       assertTrue(hashMap0.isEmpty());
32:       
33:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
34:       assertNotNull(patriciaTrie0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("]={\n");
37:       assertNull(abstractPatriciaTrie_TrieEntry0);
38:       
39:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("]={\n");
40:       assertNull(abstractPatriciaTrie_TrieEntry1);
41:       
42:       patriciaTrie0.decrementSize();
43:       Integer integer0 = new Integer((-929));
44:       assertNotNull(integer0);
45:       assertEquals((-929), (int)integer0);
46:       
47:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("f k1*4?X7Br*g(", integer0);
48:       assertNotNull(abstractMap_SimpleEntry0);
49:       
50:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
51:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
52:       assertNotNull(comparator1);
53:       
54:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
55:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator2);
56:       assertNotNull(comparator3);
57:       
58:       Comparator<Map.Entry<Integer, Integer>> comparator4 = Map.Entry.comparingByKey();
59:       assertNotNull(comparator4);
60:       
61:       Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
62:       Comparator<Map.Entry<Integer, String>> comparator6 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator5);
63:       assertNotNull(comparator6);
64:       
65:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
66:       assertNotNull(patriciaTrie1);
67:       
68:       Object object0 = patriciaTrie1.putIfAbsent("f k1*4?X7Br*g(", "f k1*4?X7Br*g(");
69:       assertNull(object0);
70:       
71:       Object object1 = patriciaTrie1.selectValue("");
72:       assertNotNull(object1);
73:       assertEquals("f k1*4?X7Br*g(", object1);
74:       
75:       Object object2 = new Object();
76:       assertNotNull(object2);
77:       
78:       Object object3 = patriciaTrie1.put("f k1*4?X7Br*g(", comparator4);
79:       assertNotNull(object3);
80:       assertEquals("f k1*4?X7Br*g(", object3);
81:       
82:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
83:       assertNotNull(patriciaTrie2);
84:       
85:       SortedMap<String, AbstractMap.SimpleEntry<Object, Object>> sortedMap0 = patriciaTrie2.prefixMap("m>G.c:");
86:       assertNotNull(sortedMap0);
87:       assertTrue(sortedMap0.isEmpty());
88:       assertEquals(0, sortedMap0.size());
89:       
90:       PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
91:       assertNotNull(patriciaTrie3);
92:       
93:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
94:       assertNotNull(hashMap1);
95:       assertTrue(hashMap1.isEmpty());
96:       assertEquals(0, hashMap1.size());
97:       
98:       PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
99:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
100:       assertNotNull(patriciaTrie4);
101:       
102:       patriciaTrie4.incrementSize();
103:       assertNotSame(patriciaTrie3, patriciaTrie4);
104:       assertNotSame(patriciaTrie4, patriciaTrie3);
105:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
106:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
107:   }
108: }
RegularFileObject[/tmp/EvoSuite_68_1627593960467/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:00 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_68_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_68_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_68_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_68_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 21:26:00.522 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertNotNull(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("]={\n");
assertNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("]={\n");
assertNull(abstractPatriciaTrie_TrieEntry1);

patriciaTrie0.decrementSize();
Integer integer0 = new Integer((-929));
assertNotNull(integer0);
assertEquals((-929), (int)integer0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("f k1*4?X7Br*g(", integer0);
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator2);
assertNotNull(comparator3);

Comparator<Map.Entry<Integer, Integer>> comparator4 = Map.Entry.comparingByKey();
assertNotNull(comparator4);

Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, String>> comparator6 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator5);
assertNotNull(comparator6);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Object object0 = patriciaTrie1.putIfAbsent("f k1*4?X7Br*g(", "f k1*4?X7Br*g(");
assertNull(object0);

Object object1 = patriciaTrie1.selectValue("");
assertNotNull(object1);
assertEquals("f k1*4?X7Br*g(", object1);

Object object2 = new Object();
assertNotNull(object2);

Object object3 = patriciaTrie1.put("f k1*4?X7Br*g(", comparator4);
assertNotNull(object3);
assertEquals("f k1*4?X7Br*g(", object3);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie2);

SortedMap<String, AbstractMap.SimpleEntry<Object, Object>> sortedMap0 = patriciaTrie2.prefixMap("m>G.c:");
assertNotNull(sortedMap0);
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());

PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie3);

HashMap<String, String> hashMap1 = new HashMap<String, String>();
assertNotNull(hashMap1);
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());

PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
assertNotNull(patriciaTrie4);

patriciaTrie4.incrementSize();
assertNotSame(patriciaTrie3, patriciaTrie4);
assertNotSame(patriciaTrie4, patriciaTrie3);
assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));


[MASTER] 21:26:00.677 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_71_1627593960615/org/apache/commons/collections4/trie/AbstractPatriciaTrie_71_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_71_1627593960615/org/apache/commons/collections4/trie/AbstractPatriciaTrie_71_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:00.677 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:00.677 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:00.678 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>>: 55
[MASTER] 21:26:00.678 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>>>: 59
[MASTER] 21:26:00.678 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.String>>: 72
[MASTER] 21:26:00.678 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_71_1627593960615/org/apache/commons/collections4/trie/AbstractPatriciaTrie_71_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:00.678 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:00.679 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_71_1627593960615/org/apache/commons/collections4/trie/AbstractPatriciaTrie_71_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:00 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import java.util.SortedMap;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_71_tmp__ESTest extends AbstractPatriciaTrie_71_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
30:       assertNotNull(hashMap0);
31:       assertTrue(hashMap0.isEmpty());
32:       assertEquals(0, hashMap0.size());
33:       
34:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
35:       assertNotNull(patriciaTrie0);
36:       
37:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("]={\n");
38:       assertNull(abstractPatriciaTrie_TrieEntry0);
39:       
40:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("]={\n");
41:       assertNull(abstractPatriciaTrie_TrieEntry1);
42:       
43:       patriciaTrie0.decrementSize();
44:       Integer integer0 = new Integer((-929));
45:       assertNotNull(integer0);
46:       assertEquals((-929), (int)integer0);
47:       
48:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("f k1*4?X7Br*g(", integer0);
49:       assertNotNull(abstractMap_SimpleEntry0);
50:       
51:       AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
52:       assertNotNull(abstractMap_SimpleImmutableEntry0);
53:       
54:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
55:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
56:       assertNotNull(comparator1);
57:       
58:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
59:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator2);
60:       assertNotNull(comparator3);
61:       
62:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(abstractMap_SimpleImmutableEntry0, comparator1, 0);
63:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
64:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
67:       
68:       Comparator<Map.Entry<Integer, Integer>> comparator4 = Map.Entry.comparingByKey();
69:       assertNotNull(comparator4);
70:       
71:       Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
72:       Comparator<Map.Entry<Integer, String>> comparator6 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator5);
73:       assertNotNull(comparator6);
74:       
75:       String string0 = abstractPatriciaTrie_TrieEntry2.toString();
76:       assertNotNull(string0);
77:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
80:       
81:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
82:       assertNotNull(patriciaTrie1);
83:       
84:       Object object0 = patriciaTrie1.putIfAbsent("f k1*4?X7Br*g(", "f k1*4?X7Br*g(");
85:       assertNull(object0);
86:       
87:       Object object1 = patriciaTrie1.selectValue("");
88:       assertFalse(object1.equals((Object)string0));
89:       assertNotNull(object1);
90:       assertEquals("f k1*4?X7Br*g(", object1);
91:       
92:       Object object2 = new Object();
93:       assertNotNull(object2);
94:       
95:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
96:       assertNotNull(patriciaTrie2);
97:       
98:       SortedMap<String, AbstractMap.SimpleEntry<Object, Object>> sortedMap0 = patriciaTrie2.prefixMap("f k1*4?X7Br*g(");
99:       assertNotNull(sortedMap0);
100:       assertEquals(0, sortedMap0.size());
101:       assertTrue(sortedMap0.isEmpty());
102:       
103:       // Undeclared exception!
104:       try { 
105:         AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry2, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
106:         fail("Expecting exception: NullPointerException");
107:       
108:       } catch(NullPointerException e) {
109:          //
110:          // no message in exception (getMessage() returned null)
111:          //
112:       }
113:   }
114: }
RegularFileObject[/tmp/EvoSuite_71_1627593960615/org/apache/commons/collections4/trie/AbstractPatriciaTrie_71_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:00 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_71_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_71_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_71_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_71_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 21:26:00.681 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertNotNull(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("]={\n");
assertNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("]={\n");
assertNull(abstractPatriciaTrie_TrieEntry1);

patriciaTrie0.decrementSize();
Integer integer0 = new Integer((-929));
assertNotNull(integer0);
assertEquals((-929), (int)integer0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("f k1*4?X7Br*g(", integer0);
assertNotNull(abstractMap_SimpleEntry0);

AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator2);
assertNotNull(comparator3);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(abstractMap_SimpleImmutableEntry0, comparator1, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

Comparator<Map.Entry<Integer, Integer>> comparator4 = Map.Entry.comparingByKey();
assertNotNull(comparator4);

Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, String>> comparator6 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator5);
assertNotNull(comparator6);

String string0 = abstractPatriciaTrie_TrieEntry2.toString();
assertNotNull(string0);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Object object0 = patriciaTrie1.putIfAbsent("f k1*4?X7Br*g(", "f k1*4?X7Br*g(");
assertNull(object0);

Object object1 = patriciaTrie1.selectValue("");
assertFalse(object1.equals((Object)string0));
assertNotNull(object1);
assertEquals("f k1*4?X7Br*g(", object1);

Object object2 = new Object();
assertNotNull(object2);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie2);

SortedMap<String, AbstractMap.SimpleEntry<Object, Object>> sortedMap0 = patriciaTrie2.prefixMap("f k1*4?X7Br*g(");
assertNotNull(sortedMap0);
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());

AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry2, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);

[MASTER] 21:26:01.559 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_87_1627593961504/org/apache/commons/collections4/trie/AbstractPatriciaTrie_87_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_87_1627593961504/org/apache/commons/collections4/trie/AbstractPatriciaTrie_87_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:01.559 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:01.559 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:01.560 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>>: 97
[MASTER] 21:26:01.560 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_87_1627593961504/org/apache/commons/collections4/trie/AbstractPatriciaTrie_87_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:01.560 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:01.560 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_87_1627593961504/org/apache/commons/collections4/trie/AbstractPatriciaTrie_87_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:01 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_87_tmp__ESTest extends AbstractPatriciaTrie_87_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "The offsets and lengths must be at Character boundaries");
30:       assertNull(string0);
31:       
32:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
33:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
34:       assertNotNull(patriciaTrie1);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
37:       assertNotSame(patriciaTrie0, patriciaTrie1);
38:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
39:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       
44:       String string1 = patriciaTrie1.put("", "");
45:       assertNotSame(patriciaTrie0, patriciaTrie1);
46:       assertNotSame(patriciaTrie1, patriciaTrie0);
47:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
48:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
49:       assertNull(string1);
50:       
51:       String string2 = patriciaTrie1.put("", "Trie[");
52:       assertNotSame(patriciaTrie0, patriciaTrie1);
53:       assertNotSame(patriciaTrie1, patriciaTrie0);
54:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
55:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
56:       assertNotNull(string2);
57:       assertEquals("", string2);
58:       
59:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("K,_T]K[GiqcY#jly");
60:       assertNotSame(patriciaTrie0, patriciaTrie1);
61:       assertNotSame(patriciaTrie1, patriciaTrie0);
62:       assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
63:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
64:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
65:       assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
66:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
70:       
71:       String string3 = patriciaTrie0.toString();
72:       assertNotSame(patriciaTrie0, patriciaTrie1);
73:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
74:       assertFalse(string3.equals((Object)string2));
75:       assertNotNull(string3);
76:       assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=The offsets and lengths must be at Character boundaries, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string3);
77:       
78:       String string4 = patriciaTrie0.put("}\n", (String) null);
79:       assertNotSame(patriciaTrie0, patriciaTrie1);
80:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
81:       assertNull(string4);
82:       
83:       patriciaTrie1.decrementSize();
84:       assertNotSame(patriciaTrie0, patriciaTrie1);
85:       assertNotSame(patriciaTrie1, patriciaTrie0);
86:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
87:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
88:       
89:       String string5 = patriciaTrie1.remove((Object) "The offsets and lengths must be at Character boundaries");
90:       assertNotSame(patriciaTrie0, patriciaTrie1);
91:       assertNotSame(patriciaTrie1, patriciaTrie0);
92:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
93:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
94:       assertNull(string5);
95:       
96:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
97:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
98:       assertNotNull(comparator1);
99:       
100:       Integer integer0 = new Integer(600);
101:       assertNotNull(integer0);
102:       assertEquals(600, (int)integer0);
103:       
104:       Integer integer1 = new Integer(1);
105:       assertFalse(integer1.equals((Object)integer0));
106:       assertNotNull(integer1);
107:       assertEquals(1, (int)integer1);
108:       
109:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
110:       assertNotNull(patriciaTrie2);
111:       
112:       Integer integer2 = patriciaTrie2.put("`j5", integer0);
113:       assertFalse(integer0.equals((Object)integer1));
114:       assertNull(integer2);
115:       
116:       PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
117:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
118:       assertNotNull(patriciaTrie3);
119:       
120:       PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie1);
121:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
122:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
123:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie1));
124:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
125:       assertNotNull(patriciaTrie4);
126:       
127:       String string6 = patriciaTrie1.firstKey();
128:       assertNotSame(patriciaTrie0, patriciaTrie1);
129:       assertNotSame(patriciaTrie0, patriciaTrie4);
130:       assertNotSame(patriciaTrie1, patriciaTrie0);
131:       assertNotSame(patriciaTrie1, patriciaTrie4);
132:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
133:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
134:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
135:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie4));
136:       assertFalse(string6.equals((Object)string3));
137:       assertTrue(string6.equals((Object)string2));
138:       assertNotNull(string6);
139:       assertEquals("", string6);
140:       
141:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie5 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
142:       assertNotNull(patriciaTrie5);
143:       
144:       String string7 = patriciaTrie5.previousKey("zjl5[/,tNknkn");
145:       assertNull(string7);
146:   }
147: }
RegularFileObject[/tmp/EvoSuite_87_1627593961504/org/apache/commons/collections4/trie/AbstractPatriciaTrie_87_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:01 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_87_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_87_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_87_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_87_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 21:26:01.562 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "The offsets and lengths must be at Character boundaries");
assertNull(string0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

String string1 = patriciaTrie1.put("", "");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertNull(string1);

String string2 = patriciaTrie1.put("", "Trie[");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotNull(string2);
assertEquals("", string2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("K,_T]K[GiqcY#jly");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());

String string3 = patriciaTrie0.toString();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(string3.equals((Object)string2));
assertNotNull(string3);
assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=The offsets and lengths must be at Character boundaries, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string3);

String string4 = patriciaTrie0.put("}\n", (String) null);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertNull(string4);

patriciaTrie1.decrementSize();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

String string5 = patriciaTrie1.remove((Object) "The offsets and lengths must be at Character boundaries");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertNull(string5);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Integer integer0 = new Integer(600);
assertNotNull(integer0);
assertEquals(600, (int)integer0);

Integer integer1 = new Integer(1);
assertFalse(integer1.equals((Object)integer0));
assertNotNull(integer1);
assertEquals(1, (int)integer1);

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);

Integer integer2 = patriciaTrie2.put("`j5", integer0);
assertFalse(integer0.equals((Object)integer1));
assertNull(integer2);

PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertNotNull(patriciaTrie3);

PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotNull(patriciaTrie4);

String string6 = patriciaTrie1.firstKey();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie0, patriciaTrie4);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(patriciaTrie1, patriciaTrie4);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie4));
assertFalse(string6.equals((Object)string3));
assertTrue(string6.equals((Object)string2));
assertNotNull(string6);
assertEquals("", string6);

PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie5 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
assertNotNull(patriciaTrie5);

String string7 = patriciaTrie5.previousKey("zjl5[/,tNknkn");
assertNull(string7);


[MASTER] 21:26:01.971 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_94_1627593961917/org/apache/commons/collections4/trie/AbstractPatriciaTrie_94_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_94_1627593961917/org/apache/commons/collections4/trie/AbstractPatriciaTrie_94_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:01.971 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:01.971 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:01.972 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>>: 76
[MASTER] 21:26:01.972 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_94_1627593961917/org/apache/commons/collections4/trie/AbstractPatriciaTrie_94_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:01.972 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:01.973 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_94_1627593961917/org/apache/commons/collections4/trie/AbstractPatriciaTrie_94_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:01 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_94_tmp__ESTest extends AbstractPatriciaTrie_94_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "The offsets and lengths must be at Character boundaries");
30:       assertNull(string0);
31:       
32:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
33:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
34:       assertNotNull(patriciaTrie1);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
37:       assertNotSame(patriciaTrie0, patriciaTrie1);
38:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
39:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       
44:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("K,_T]K[GiqcY#jly");
45:       assertNotSame(patriciaTrie0, patriciaTrie1);
46:       assertNotSame(patriciaTrie1, patriciaTrie0);
47:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
48:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
49:       assertNull(abstractPatriciaTrie_TrieEntry1);
50:       
51:       String string1 = patriciaTrie0.toString();
52:       assertNotSame(patriciaTrie0, patriciaTrie1);
53:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
54:       assertNotNull(string1);
55:       assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=The offsets and lengths must be at Character boundaries, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string1);
56:       
57:       String string2 = patriciaTrie0.put("}\n", (String) null);
58:       assertNotSame(patriciaTrie0, patriciaTrie1);
59:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
60:       assertNull(string2);
61:       
62:       patriciaTrie1.decrementSize();
63:       assertNotSame(patriciaTrie0, patriciaTrie1);
64:       assertNotSame(patriciaTrie1, patriciaTrie0);
65:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
66:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
67:       
68:       String string3 = patriciaTrie1.remove((Object) "The offsets and lengths must be at Character boundaries");
69:       assertNotSame(patriciaTrie0, patriciaTrie1);
70:       assertNotSame(patriciaTrie1, patriciaTrie0);
71:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
72:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
73:       assertNull(string3);
74:       
75:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
76:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
77:       assertNotNull(comparator1);
78:       
79:       Integer integer0 = new Integer(600);
80:       assertNotNull(integer0);
81:       assertEquals(600, (int)integer0);
82:       
83:       Integer integer1 = new Integer(1);
84:       assertFalse(integer1.equals((Object)integer0));
85:       assertNotNull(integer1);
86:       assertEquals(1, (int)integer1);
87:       
88:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.getNearestEntryForKey("}\n", 0);
89:       assertNotSame(patriciaTrie0, patriciaTrie1);
90:       assertNotSame(patriciaTrie1, patriciaTrie0);
91:       assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
92:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
93:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
94:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry0));
95:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
96:       assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
97:       assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
98:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
99:       
100:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
101:       assertNotNull(patriciaTrie2);
102:       
103:       Integer integer2 = patriciaTrie2.put("`j5", integer0);
104:       assertFalse(integer0.equals((Object)integer1));
105:       assertNull(integer2);
106:       
107:       PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
108:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
109:       assertNotNull(patriciaTrie3);
110:       
111:       PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie1);
112:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
113:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
114:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
115:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
116:       assertNotNull(patriciaTrie4);
117:       
118:       Integer integer3 = new Integer(600);
119:       assertTrue(integer3.equals((Object)integer0));
120:       assertFalse(integer3.equals((Object)integer1));
121:       assertNotNull(integer3);
122:       assertEquals(600, (int)integer3);
123:       
124:       Integer integer4 = new Integer(600);
125:       assertTrue(integer4.equals((Object)integer0));
126:       assertFalse(integer4.equals((Object)integer1));
127:       assertTrue(integer4.equals((Object)integer3));
128:       assertNotNull(integer4);
129:       assertEquals(600, (int)integer4);
130:       
131:       Integer integer5 = new Integer(1);
132:       assertFalse(integer5.equals((Object)integer0));
133:       assertFalse(integer5.equals((Object)integer4));
134:       assertFalse(integer5.equals((Object)integer3));
135:       assertTrue(integer5.equals((Object)integer1));
136:       assertNotNull(integer5);
137:       assertEquals(1, (int)integer5);
138:       
139:       AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer4, integer5, 600);
140:       assertFalse(integer4.equals((Object)integer5));
141:       assertTrue(integer4.equals((Object)integer0));
142:       assertFalse(integer4.equals((Object)integer1));
143:       assertTrue(integer4.equals((Object)integer3));
144:       assertFalse(integer5.equals((Object)integer0));
145:       assertFalse(integer5.equals((Object)integer4));
146:       assertFalse(integer5.equals((Object)integer3));
147:       assertTrue(integer5.equals((Object)integer1));
148:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
149:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
150:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
151:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
152:       
153:       Integer integer6 = new Integer(600);
154:       assertFalse(integer6.equals((Object)integer1));
155:       assertTrue(integer6.equals((Object)integer3));
156:       assertTrue(integer6.equals((Object)integer0));
157:       assertTrue(integer6.equals((Object)integer4));
158:       assertFalse(integer6.equals((Object)integer5));
159:       assertNotNull(integer6);
160:       assertEquals(600, (int)integer6);
161:       
162:       Integer integer7 = new Integer(1);
163:       assertTrue(integer7.equals((Object)integer1));
164:       assertFalse(integer7.equals((Object)integer3));
165:       assertTrue(integer7.equals((Object)integer5));
166:       assertFalse(integer7.equals((Object)integer6));
167:       assertFalse(integer7.equals((Object)integer0));
168:       assertFalse(integer7.equals((Object)integer4));
169:       assertNotNull(integer7);
170:       assertEquals(1, (int)integer7);
171:       
172:       Integer integer8 = abstractPatriciaTrie_TrieEntry3.setKeyValue(integer6, integer7);
173:       assertFalse(integer4.equals((Object)integer7));
174:       assertFalse(integer4.equals((Object)integer5));
175:       assertTrue(integer4.equals((Object)integer6));
176:       assertTrue(integer4.equals((Object)integer0));
177:       assertFalse(integer4.equals((Object)integer1));
178:       assertTrue(integer4.equals((Object)integer3));
179:       assertFalse(integer5.equals((Object)integer6));
180:       assertFalse(integer5.equals((Object)integer0));
181:       assertFalse(integer5.equals((Object)integer4));
182:       assertFalse(integer5.equals((Object)integer3));
183:       assertTrue(integer5.equals((Object)integer1));
184:       assertTrue(integer5.equals((Object)integer7));
185:       assertFalse(integer6.equals((Object)integer1));
186:       assertFalse(integer6.equals((Object)integer7));
187:       assertTrue(integer6.equals((Object)integer3));
188:       assertTrue(integer6.equals((Object)integer0));
189:       assertTrue(integer6.equals((Object)integer4));
190:       assertFalse(integer6.equals((Object)integer5));
191:       assertTrue(integer7.equals((Object)integer1));
192:       assertFalse(integer7.equals((Object)integer3));
193:       assertTrue(integer7.equals((Object)integer5));
194:       assertFalse(integer7.equals((Object)integer6));
195:       assertFalse(integer7.equals((Object)integer0));
196:       assertFalse(integer7.equals((Object)integer4));
197:       assertFalse(integer8.equals((Object)integer3));
198:       assertFalse(integer8.equals((Object)integer6));
199:       assertFalse(integer8.equals((Object)integer0));
200:       assertFalse(integer8.equals((Object)integer4));
201:       assertTrue(integer8.equals((Object)integer7));
202:       assertTrue(integer8.equals((Object)integer1));
203:       assertNotNull(integer8);
204:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
205:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
206:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
207:       assertEquals(1, (int)integer8);
208:       
209:       boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
210:       assertFalse(integer4.equals((Object)integer8));
211:       assertFalse(integer4.equals((Object)integer7));
212:       assertFalse(integer4.equals((Object)integer5));
213:       assertTrue(integer4.equals((Object)integer6));
214:       assertTrue(integer4.equals((Object)integer0));
215:       assertFalse(integer4.equals((Object)integer1));
216:       assertTrue(integer4.equals((Object)integer3));
217:       assertFalse(integer5.equals((Object)integer6));
218:       assertFalse(integer5.equals((Object)integer0));
219:       assertFalse(integer5.equals((Object)integer4));
220:       assertFalse(integer5.equals((Object)integer3));
221:       assertTrue(integer5.equals((Object)integer1));
222:       assertTrue(integer5.equals((Object)integer7));
223:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
224:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
225:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
226:       assertFalse(boolean0);
227:   }
228: }
RegularFileObject[/tmp/EvoSuite_94_1627593961917/org/apache/commons/collections4/trie/AbstractPatriciaTrie_94_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:01 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_94_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_94_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_94_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_94_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 21:26:01.976 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "The offsets and lengths must be at Character boundaries");
assertNull(string0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("K,_T]K[GiqcY#jly");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNull(abstractPatriciaTrie_TrieEntry1);

String string1 = patriciaTrie0.toString();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertNotNull(string1);
assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=The offsets and lengths must be at Character boundaries, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string1);

String string2 = patriciaTrie0.put("}\n", (String) null);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertNull(string2);

patriciaTrie1.decrementSize();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

String string3 = patriciaTrie1.remove((Object) "The offsets and lengths must be at Character boundaries");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertNull(string3);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Integer integer0 = new Integer(600);
assertNotNull(integer0);
assertEquals(600, (int)integer0);

Integer integer1 = new Integer(1);
assertFalse(integer1.equals((Object)integer0));
assertNotNull(integer1);
assertEquals(1, (int)integer1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.getNearestEntryForKey("}\n", 0);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry0));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);

Integer integer2 = patriciaTrie2.put("`j5", integer0);
assertFalse(integer0.equals((Object)integer1));
assertNull(integer2);

PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertNotNull(patriciaTrie3);

PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotNull(patriciaTrie4);

Integer integer3 = new Integer(600);
assertTrue(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));
assertNotNull(integer3);
assertEquals(600, (int)integer3);

Integer integer4 = new Integer(600);
assertTrue(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer1));
assertTrue(integer4.equals((Object)integer3));
assertNotNull(integer4);
assertEquals(600, (int)integer4);

Integer integer5 = new Integer(1);
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer3));
assertTrue(integer5.equals((Object)integer1));
assertNotNull(integer5);
assertEquals(1, (int)integer5);

AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer4, integer5, 600);
assertFalse(integer4.equals((Object)integer5));
assertTrue(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer1));
assertTrue(integer4.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer3));
assertTrue(integer5.equals((Object)integer1));
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

Integer integer6 = new Integer(600);
assertFalse(integer6.equals((Object)integer1));
assertTrue(integer6.equals((Object)integer3));
assertTrue(integer6.equals((Object)integer0));
assertTrue(integer6.equals((Object)integer4));
assertFalse(integer6.equals((Object)integer5));
assertNotNull(integer6);
assertEquals(600, (int)integer6);

Integer integer7 = new Integer(1);
assertTrue(integer7.equals((Object)integer1));
assertFalse(integer7.equals((Object)integer3));
assertTrue(integer7.equals((Object)integer5));
assertFalse(integer7.equals((Object)integer6));
assertFalse(integer7.equals((Object)integer0));
assertFalse(integer7.equals((Object)integer4));
assertNotNull(integer7);
assertEquals(1, (int)integer7);

Integer integer8 = abstractPatriciaTrie_TrieEntry3.setKeyValue(integer6, integer7);
assertFalse(integer4.equals((Object)integer7));
assertFalse(integer4.equals((Object)integer5));
assertTrue(integer4.equals((Object)integer6));
assertTrue(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer1));
assertTrue(integer4.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer6));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer3));
assertTrue(integer5.equals((Object)integer1));
assertTrue(integer5.equals((Object)integer7));
assertFalse(integer6.equals((Object)integer1));
assertFalse(integer6.equals((Object)integer7));
assertTrue(integer6.equals((Object)integer3));
assertTrue(integer6.equals((Object)integer0));
assertTrue(integer6.equals((Object)integer4));
assertFalse(integer6.equals((Object)integer5));
assertTrue(integer7.equals((Object)integer1));
assertFalse(integer7.equals((Object)integer3));
assertTrue(integer7.equals((Object)integer5));
assertFalse(integer7.equals((Object)integer6));
assertFalse(integer7.equals((Object)integer0));
assertFalse(integer7.equals((Object)integer4));
assertFalse(integer8.equals((Object)integer3));
assertFalse(integer8.equals((Object)integer6));
assertFalse(integer8.equals((Object)integer0));
assertFalse(integer8.equals((Object)integer4));
assertTrue(integer8.equals((Object)integer7));
assertTrue(integer8.equals((Object)integer1));
assertNotNull(integer8);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertEquals(1, (int)integer8);

boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
assertFalse(integer4.equals((Object)integer8));
assertFalse(integer4.equals((Object)integer7));
assertFalse(integer4.equals((Object)integer5));
assertTrue(integer4.equals((Object)integer6));
assertTrue(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer1));
assertTrue(integer4.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer6));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer3));
assertTrue(integer5.equals((Object)integer1));
assertTrue(integer5.equals((Object)integer7));
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(boolean0);


[MASTER] 21:26:03.614 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_127_1627593963530/org/apache/commons/collections4/trie/AbstractPatriciaTrie_127_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_127_1627593963530/org/apache/commons/collections4/trie/AbstractPatriciaTrie_127_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:03.614 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:03.614 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:03.614 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 53
[MASTER] 21:26:03.614 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_127_1627593963530/org/apache/commons/collections4/trie/AbstractPatriciaTrie_127_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:03.614 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:03.614 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_127_1627593963530/org/apache/commons/collections4/trie/AbstractPatriciaTrie_127_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:03 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_127_tmp__ESTest extends AbstractPatriciaTrie_127_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Integer integer0 = new Integer((-2));
31:       assertNotNull(integer0);
32:       assertEquals((-2), (int)integer0);
33:       
34:       AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>((String) null, integer0);
35:       assertNotNull(abstractMap_SimpleEntry0);
36:       
37:       Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
38:       assertNotNull(comparator0);
39:       
40:       AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
41:       assertNotNull(abstractMap_SimpleImmutableEntry0);
42:       
43:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Comparable<Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Comparable<Integer>>(abstractMap_SimpleImmutableEntry0, integer0, (-2));
44:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
45:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       
49:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Comparable<Object>>> comparator1 = Map.Entry.comparingByValue();
50:       assertNotNull(comparator1);
51:       
52:       Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
53:       Comparator<Map.Entry<String, String>> comparator3 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
54:       assertNotNull(comparator3);
55:       
56:       AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = abstractPatriciaTrie_TrieEntry0.key;
57:       assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
58:       assertNotNull(abstractMap_SimpleImmutableEntry1);
59:       
60:       Comparator<Map.Entry<String, Comparable<Object>>> comparator4 = Map.Entry.comparingByValue();
61:       assertNotNull(comparator4);
62:       
63:       Object object0 = patriciaTrie0.put("", abstractMap_SimpleImmutableEntry1);
64:       assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
65:       assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
66:       assertNull(object0);
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
70:       
71:       Integer integer1 = new Integer(1574);
72:       assertFalse(integer1.equals((Object)integer0));
73:       assertNotNull(integer1);
74:       assertEquals(1574, (int)integer1);
75:       
76:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer1, 1574);
77:       assertFalse(integer1.equals((Object)integer0));
78:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
82:       
83:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, (-2));
84:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
85:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
86:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
88:       
89:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
90:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
91:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
93:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
94:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
95:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
96:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
98:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
99:       
100:       Object object1 = abstractPatriciaTrie_TrieEntry1.setValue(abstractMap_SimpleImmutableEntry0);
101:       assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
102:       assertFalse(object1.equals((Object)integer0));
103:       assertFalse(integer0.equals((Object)integer1));
104:       assertFalse(integer1.equals((Object)integer0));
105:       assertNotNull(object1);
106:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
107:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
109:       assertEquals(1574, object1);
110:       
111:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.left;
112:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
113:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
116:       
117:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
118:       assertFalse(integer1.equals((Object)integer0));
119:       assertNull(abstractPatriciaTrie_TrieEntry4);
120:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
123:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
124:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
125:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
126:       
127:       SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap("12w?", "12w?");
128:       assertNotNull(sortedMap0);
129:       assertTrue(sortedMap0.isEmpty());
130:       assertEquals(0, sortedMap0.size());
131:       
132:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.getNearestEntryForKey("jyNwwAeHR8`bdH^srh", (-3));
133:       assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry3);
134:       assertTrue(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry3));
135:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
136:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
137:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
138:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
139:       
140:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "jyNwwAeHR8`bdH^srh", 80);
141:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
142:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
143:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
144:       assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
145:       
146:       String string0 = abstractPatriciaTrie_TrieEntry6.toString();
147:       assertNotNull(string0);
148:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
149:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
150:       assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
151:       assertEquals("Entry(key=null [80], value=jyNwwAeHR8`bdH^srh, parent=null, left=null [80], right=null, predecessor=null [80])", string0);
152:   }
153: }
RegularFileObject[/tmp/EvoSuite_127_1627593963530/org/apache/commons/collections4/trie/AbstractPatriciaTrie_127_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:03 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_127_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_127_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_127_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_127_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 21:26:03.616 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer((-2));
assertNotNull(integer0);
assertEquals((-2), (int)integer0);

AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>((String) null, integer0);
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Comparable<Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Comparable<Integer>>(abstractMap_SimpleImmutableEntry0, integer0, (-2));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Comparable<Object>>> comparator1 = Map.Entry.comparingByValue();
assertNotNull(comparator1);

Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator3 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
assertNotNull(comparator3);

AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = abstractPatriciaTrie_TrieEntry0.key;
assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry1);

Comparator<Map.Entry<String, Comparable<Object>>> comparator4 = Map.Entry.comparingByValue();
assertNotNull(comparator4);

Object object0 = patriciaTrie0.put("", abstractMap_SimpleImmutableEntry1);
assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
assertNull(object0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Integer integer1 = new Integer(1574);
assertFalse(integer1.equals((Object)integer0));
assertNotNull(integer1);
assertEquals(1574, (int)integer1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer1, 1574);
assertFalse(integer1.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, (-2));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());

Object object1 = abstractPatriciaTrie_TrieEntry1.setValue(abstractMap_SimpleImmutableEntry0);
assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
assertFalse(object1.equals((Object)integer0));
assertFalse(integer0.equals((Object)integer1));
assertFalse(integer1.equals((Object)integer0));
assertNotNull(object1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertEquals(1574, object1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.left;
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
assertFalse(integer1.equals((Object)integer0));
assertNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap("12w?", "12w?");
assertNotNull(sortedMap0);
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.getNearestEntryForKey("jyNwwAeHR8`bdH^srh", (-3));
assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry3);
assertTrue(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry3));
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "jyNwwAeHR8`bdH^srh", 80);
assertNotNull(abstractPatriciaTrie_TrieEntry6);
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());

String string0 = abstractPatriciaTrie_TrieEntry6.toString();
assertNotNull(string0);
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertEquals("Entry(key=null [80], value=jyNwwAeHR8`bdH^srh, parent=null, left=null [80], right=null, predecessor=null [80])", string0);


[MASTER] 21:26:04.492 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_142_1627593964293/org/apache/commons/collections4/trie/AbstractPatriciaTrie_142_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_142_1627593964293/org/apache/commons/collections4/trie/AbstractPatriciaTrie_142_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:04.492 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:04.492 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:04.493 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.lang.Comparable<java.lang.Comparable>>,java.lang.Integer>>: 131
[MASTER] 21:26:04.493 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_142_1627593964293/org/apache/commons/collections4/trie/AbstractPatriciaTrie_142_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:04.493 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:04.493 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_142_1627593964293/org/apache/commons/collections4/trie/AbstractPatriciaTrie_142_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:04 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.HashMap;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import java.util.function.BiFunction;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_142_tmp__ESTest extends AbstractPatriciaTrie_142_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
29:       assertNotNull(hashMap0);
30:       assertTrue(hashMap0.isEmpty());
31:       assertEquals(0, hashMap0.size());
32:       
33:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
34:       assertNotNull(patriciaTrie0);
35:       assertTrue(hashMap0.isEmpty());
36:       assertEquals(0, hashMap0.size());
37:       
38:       BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
39:       patriciaTrie0.replaceAll(biFunction0);
40:       assertTrue(hashMap0.isEmpty());
41:       assertEquals(0, hashMap0.size());
42:       
43:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("}tveq=IcM@.7");
44:       assertNull(abstractPatriciaTrie_TrieEntry0);
45:       assertTrue(hashMap0.isEmpty());
46:       assertEquals(0, hashMap0.size());
47:       
48:       SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap("}tveq=IcM@.7", "}tveq=IcM@.7");
49:       assertNotNull(sortedMap0);
50:       assertTrue(hashMap0.isEmpty());
51:       assertEquals(0, hashMap0.size());
52:       assertEquals(0, sortedMap0.size());
53:       assertTrue(sortedMap0.isEmpty());
54:       
55:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", patriciaTrie0, 0);
56:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
57:       assertTrue(hashMap0.isEmpty());
58:       assertEquals(0, hashMap0.size());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
60:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
62:       
63:       SortedMap<String, Integer> sortedMap1 = patriciaTrie0.headMap("Failed to put: ");
64:       assertNotSame(sortedMap1, sortedMap0);
65:       assertTrue(sortedMap1.equals((Object)sortedMap0));
66:       assertNotNull(sortedMap1);
67:       assertTrue(hashMap0.isEmpty());
68:       assertEquals(0, hashMap0.size());
69:       assertTrue(sortedMap1.isEmpty());
70:       assertEquals(0, sortedMap1.size());
71:       
72:       Integer integer0 = new Integer(0);
73:       assertNotNull(integer0);
74:       assertEquals(0, (int)integer0);
75:       
76:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", integer0, 0);
77:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
78:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
81:       
82:       abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry2;
83:       assertTrue(hashMap0.isEmpty());
84:       assertEquals(0, hashMap0.size());
85:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
86:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
88:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
89:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
90:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
92:       assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
93:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
94:       
95:       abstractPatriciaTrie_TrieEntry2.predecessor = abstractPatriciaTrie_TrieEntry1;
96:       assertTrue(hashMap0.isEmpty());
97:       assertEquals(0, hashMap0.size());
98:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
99:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
100:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
101:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
103:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
104:       assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isEmpty());
105:       assertTrue(abstractPatriciaTrie_TrieEntry2.predecessor.isExternalNode());
106:       assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isInternalNode());
107:       
108:       Integer integer1 = hashMap0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", integer0);
109:       assertNull(integer1);
110:       assertEquals(1, hashMap0.size());
111:       assertFalse(hashMap0.isEmpty());
112:       
113:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals((Object) null);
114:       assertEquals(1, hashMap0.size());
115:       assertFalse(hashMap0.isEmpty());
116:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
117:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
119:       assertFalse(boolean0);
120:       
121:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
122:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
123:       assertNotNull(string0);
124:       assertEquals(1, hashMap0.size());
125:       assertFalse(hashMap0.isEmpty());
126:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
127:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
128:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
129:       assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap [0], value=Trie[0]={\n}\n, parent=null, left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap [0], right=null, predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet [0])", string0);
130:       
131:       Comparator<Map.Entry<Comparable<Comparable<Comparable>>, Integer>> comparator1 = (Comparator<Map.Entry<Comparable<Comparable<Comparable>>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
132:       assertNotNull(comparator1);
133:       
134:       boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isExternalNode();
135:       assertFalse(boolean1 == boolean0);
136:       assertEquals(1, hashMap0.size());
137:       assertFalse(hashMap0.isEmpty());
138:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
139:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
140:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
141:       assertTrue(boolean1);
142:       
143:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
144:       assertNotNull(patriciaTrie1);
145:       
146:       String string1 = patriciaTrie1.put("+/Zhe", "3I[J.yW4i0vt");
147:       assertNull(string1);
148:       
149:       String string2 = patriciaTrie1.put("}tveq=IcM@.7", "6K(9H);2F");
150:       assertNull(string2);
151:       
152:       String string3 = patriciaTrie1.replace("Bq", "Bq");
153:       assertNull(string3);
154:       
155:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
156:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
157:       assertNotNull(patriciaTrie2);
158:       
159:       int int0 = patriciaTrie2.size();
160:       assertNotSame(patriciaTrie1, patriciaTrie2);
161:       assertNotSame(patriciaTrie2, patriciaTrie1);
162:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
163:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
164:       assertEquals(2, int0);
165:   }
166: }
RegularFileObject[/tmp/EvoSuite_142_1627593964293/org/apache/commons/collections4/trie/AbstractPatriciaTrie_142_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:04 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_142_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_142_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_142_tmp__ESTest_scaffolding.class.getClassLoader()));
120:     mock(Class.forName("java.util.function.BiFunction", false, AbstractPatriciaTrie_142_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_142_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:04.495 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertNotNull(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
assertNotNull(patriciaTrie0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
patriciaTrie0.replaceAll(biFunction0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("}tveq=IcM@.7");
assertNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap("}tveq=IcM@.7", "}tveq=IcM@.7");
assertNotNull(sortedMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", patriciaTrie0, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

SortedMap<String, Integer> sortedMap1 = patriciaTrie0.headMap("Failed to put: ");
assertNotSame(sortedMap1, sortedMap0);
assertTrue(sortedMap1.equals((Object)sortedMap0));
assertNotNull(sortedMap1);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertTrue(sortedMap1.isEmpty());
assertEquals(0, sortedMap1.size());

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", integer0, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry2;
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());

abstractPatriciaTrie_TrieEntry2.predecessor = abstractPatriciaTrie_TrieEntry1;
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.predecessor.isInternalNode());

Integer integer1 = hashMap0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", integer0);
assertNull(integer1);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals((Object) null);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(boolean0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertNotNull(string0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap [0], value=Trie[0]={\n}\n, parent=null, left=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap [0], right=null, predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet [0])", string0);

Comparator<Map.Entry<Comparable<Comparable<Comparable>>, Integer>> comparator1 = (Comparator<Map.Entry<Comparable<Comparable<Comparable>>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

boolean boolean1 = abstractPatriciaTrie_TrieEntry1.isExternalNode();
assertFalse(boolean1 == boolean0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(boolean1);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);

String string1 = patriciaTrie1.put("+/Zhe", "3I[J.yW4i0vt");
assertNull(string1);

String string2 = patriciaTrie1.put("}tveq=IcM@.7", "6K(9H);2F");
assertNull(string2);

String string3 = patriciaTrie1.replace("Bq", "Bq");
assertNull(string3);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
assertNotNull(patriciaTrie2);

int int0 = patriciaTrie2.size();
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
assertEquals(2, int0);


[MASTER] 21:26:04.898 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_151_1627593964858/org/apache/commons/collections4/trie/AbstractPatriciaTrie_151_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_151_1627593964858/org/apache/commons/collections4/trie/AbstractPatriciaTrie_151_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:04.898 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:04.898 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:04.901 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.Integer>>>: 47
[MASTER] 21:26:04.901 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_151_1627593964858/org/apache/commons/collections4/trie/AbstractPatriciaTrie_151_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:04.901 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:04.902 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_151_1627593964858/org/apache/commons/collections4/trie/AbstractPatriciaTrie_151_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:04 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_151_tmp__ESTest extends AbstractPatriciaTrie_151_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Integer integer0 = new Integer(2);
26:       assertNotNull(integer0);
27:       assertEquals(2, (int)integer0);
28:       
29:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 2);
30:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
34:       
35:       abstractPatriciaTrie_TrieEntry0.left = null;
36:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
37:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
39:       
40:       AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, 2);
41:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
43:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
45:       
46:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
47:       Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>> comparator1 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
48:       assertNotNull(comparator1);
49:       
50:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
55:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
57:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
60:       
61:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
62:       assertNotNull(string0);
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
64:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
66:       assertEquals("Entry(key=2 [2], value=2, parent=null, left=null, right=2 [2], predecessor=2 [2])", string0);
67:   }
68: }
RegularFileObject[/tmp/EvoSuite_151_1627593964858/org/apache/commons/collections4/trie/AbstractPatriciaTrie_151_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:04 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_151_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_151_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_151_tmp__ESTest_scaffolding.class.getClassLoader()));
120:   }
121: 
122:   private static void resetClasses() {
123:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_151_tmp__ESTest_scaffolding.class.getClassLoader()); 
124: 
125:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
126:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
139:       "org.apache.commons.collections4.trie.PatriciaTrie",
140:       "org.apache.commons.collections4.trie.KeyAnalyzer",
141:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
149:     );
150:   }
151: }

[MASTER] 21:26:04.903 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(2);
assertNotNull(integer0);
assertEquals(2, (int)integer0);

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, 2);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

abstractPatriciaTrie_TrieEntry0.left = null;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, 2);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>> comparator1 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertNotNull(string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertEquals("Entry(key=2 [2], value=2, parent=null, left=null, right=2 [2], predecessor=2 [2])", string0);


[MASTER] 21:26:05.269 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_158_1627593965216/org/apache/commons/collections4/trie/AbstractPatriciaTrie_158_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_158_1627593965216/org/apache/commons/collections4/trie/AbstractPatriciaTrie_158_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:05.269 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:05.269 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:05.270 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>>: 87
[MASTER] 21:26:05.270 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_158_1627593965216/org/apache/commons/collections4/trie/AbstractPatriciaTrie_158_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:05.270 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:05.270 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_158_1627593965216/org/apache/commons/collections4/trie/AbstractPatriciaTrie_158_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:05 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import java.util.function.BiConsumer;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_158_tmp__ESTest extends AbstractPatriciaTrie_158_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
30:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
31:       assertNotNull(patriciaTrie1);
32:       
33:       BiConsumer<Object, Integer> biConsumer0 = (BiConsumer<Object, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
34:       patriciaTrie1.forEach(biConsumer0);
35:       assertNotSame(patriciaTrie0, patriciaTrie1);
36:       assertNotSame(patriciaTrie1, patriciaTrie0);
37:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
38:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
39:       
40:       int int0 = patriciaTrie0.bitIndex("_M{AsEQtZ{gs6;", "`N7vyz|( ");
41:       assertNotSame(patriciaTrie0, patriciaTrie1);
42:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
43:       assertEquals(10, int0);
44:       
45:       int int1 = patriciaTrie1.bitIndex("OXx", "FromKey is out of range: ");
46:       assertNotSame(patriciaTrie0, patriciaTrie1);
47:       assertNotSame(patriciaTrie1, patriciaTrie0);
48:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
49:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
50:       assertFalse(int1 == int0);
51:       assertEquals(12, int1);
52:       
53:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("!", (Integer) null, 0);
54:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
58:       
59:       boolean boolean0 = patriciaTrie0.compareKeys("\n", "?");
60:       assertNotSame(patriciaTrie0, patriciaTrie1);
61:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
62:       assertFalse(boolean0);
63:       
64:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("?", (Integer) null, 0);
65:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       
70:       Integer integer0 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", (Integer) null);
71:       assertNotSame(patriciaTrie0, patriciaTrie1);
72:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
73:       assertNull(integer0);
74:       
75:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
76:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
77:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
82:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
84:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
86:       
87:       Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
88:       assertNotNull(comparator1);
89:       
90:       abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
91:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
93:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
95:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
96:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
99:       assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
100:       
101:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
102:       assertNotSame(patriciaTrie0, patriciaTrie1);
103:       assertNotSame(patriciaTrie1, patriciaTrie0);
104:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
105:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
106:       assertNull(abstractPatriciaTrie_TrieEntry2);
107:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
108:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
109:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
110:   }
111: }
RegularFileObject[/tmp/EvoSuite_158_1627593965216/org/apache/commons/collections4/trie/AbstractPatriciaTrie_158_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:05 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_158_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_158_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_158_tmp__ESTest_scaffolding.class.getClassLoader()));
120:     mock(Class.forName("java.util.function.BiConsumer", false, AbstractPatriciaTrie_158_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_158_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:05.271 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertNotNull(patriciaTrie1);

BiConsumer<Object, Integer> biConsumer0 = (BiConsumer<Object, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
patriciaTrie1.forEach(biConsumer0);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

int int0 = patriciaTrie0.bitIndex("_M{AsEQtZ{gs6;", "`N7vyz|( ");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertEquals(10, int0);

int int1 = patriciaTrie1.bitIndex("OXx", "FromKey is out of range: ");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(int1 == int0);
assertEquals(12, int1);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("!", (Integer) null, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

boolean boolean0 = patriciaTrie0.compareKeys("\n", "?");
assertNotSame(patriciaTrie0, patriciaTrie1);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(boolean0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("?", (Integer) null, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Integer integer0 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", (Integer) null);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertNull(integer0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());

Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());


[MASTER] 21:26:05.895 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_171_1627593965846/org/apache/commons/collections4/trie/AbstractPatriciaTrie_171_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_171_1627593965846/org/apache/commons/collections4/trie/AbstractPatriciaTrie_171_tmp__ESTest_scaffolding.java]]
[MASTER] 21:26:05.896 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:05.896 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 21:26:05.896 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Integer>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Integer>>>: 43
[MASTER] 21:26:05.896 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_171_1627593965846/org/apache/commons/collections4/trie/AbstractPatriciaTrie_171_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 21:26:05.897 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 21:26:05.897 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_171_1627593965846/org/apache/commons/collections4/trie/AbstractPatriciaTrie_171_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Jul 29 21:26:05 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_171_tmp__ESTest extends AbstractPatriciaTrie_171_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       String string0 = patriciaTrie0.put("hg<|UJ$Fv/q~[AR:", "?;X3o+mj`#oV R");
31:       assertNull(string0);
32:       
33:       String string1 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "");
34:       assertNull(string1);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("o5", (String) null, (-1));
37:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       
42:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
43:       Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> comparator1 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>>) comparator0);
44:       assertNotNull(comparator1);
45:       
46:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap", "", (-1));
47:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
48:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
51:       
52:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
56:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
62:       
63:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "o5", 1);
64:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
65:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
67:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
68:       
69:       abstractPatriciaTrie_TrieEntry0.key = "org.apache.commons.collections4.trie.PatriciaTrie";
70:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
72:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
73:       
74:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry2;
75:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
78:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
83:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
84:       
85:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.right;
86:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
87:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
88:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
89:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
90:       
91:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry0);
92:       assertNull(abstractPatriciaTrie_TrieEntry4);
93:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
94:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
95:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
97:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
98:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
99:       
100:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
101:       assertNotNull(patriciaTrie1);
102:       
103:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.higherEntry("o5");
104:       assertNull(abstractPatriciaTrie_TrieEntry5);
105:       
106:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.firstEntry();
107:       assertNull(abstractPatriciaTrie_TrieEntry6);
108:       
109:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
110:       assertNotNull(patriciaTrie2);
111:       
112:       PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
113:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
114:       assertNotNull(patriciaTrie3);
115:       
116:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry7 = patriciaTrie3.higherEntry("s~i@lj<vROzg^IcP");
117:       assertNotSame(patriciaTrie2, patriciaTrie3);
118:       assertNotSame(patriciaTrie3, patriciaTrie2);
119:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
120:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
121:       assertNull(abstractPatriciaTrie_TrieEntry7);
122:       
123:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry8 = patriciaTrie3.lowerEntry((String) null);
124:       assertNotSame(patriciaTrie2, patriciaTrie3);
125:       assertNotSame(patriciaTrie3, patriciaTrie2);
126:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
127:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
128:       assertNull(abstractPatriciaTrie_TrieEntry8);
129:       
130:       PatriciaTrie<Comparable<Object>> patriciaTrie4 = new PatriciaTrie<Comparable<Object>>();
131:       assertNotNull(patriciaTrie4);
132:       
133:       Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
134:       AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry9 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>((String) null, comparable0, (-1));
135:       assertNotNull(abstractPatriciaTrie_TrieEntry9);
136:       assertFalse(abstractPatriciaTrie_TrieEntry9.isInternalNode());
137:       assertTrue(abstractPatriciaTrie_TrieEntry9.isExternalNode());
138:       assertTrue(abstractPatriciaTrie_TrieEntry9.isEmpty());
139:       
140:       abstractPatriciaTrie_TrieEntry9.predecessor = null;
141:       assertFalse(abstractPatriciaTrie_TrieEntry9.isInternalNode());
142:       assertTrue(abstractPatriciaTrie_TrieEntry9.isExternalNode());
143:       assertTrue(abstractPatriciaTrie_TrieEntry9.isEmpty());
144:       
145:       // Undeclared exception!
146:       try { 
147:         patriciaTrie4.nextEntry(abstractPatriciaTrie_TrieEntry9);
148:         fail("Expecting exception: NullPointerException");
149:       
150:       } catch(NullPointerException e) {
151:          //
152:          // no message in exception (getMessage() returned null)
153:          //
154:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
155:       }
156:   }
157: }
RegularFileObject[/tmp/EvoSuite_171_1627593965846/org/apache/commons/collections4/trie/AbstractPatriciaTrie_171_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Jul 29 21:26:05 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_171_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_171_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
99:       "org.apache.commons.collections4.IterableSortedMap",
100:       "org.apache.commons.collections4.OrderedMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
104:       "org.apache.commons.collections4.OrderedMapIterator",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
107:       "org.apache.commons.collections4.Put",
108:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
109:       "org.apache.commons.collections4.trie.KeyAnalyzer",
110:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
111:       "org.apache.commons.collections4.IterableMap",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
114:       "org.apache.commons.collections4.OrderedIterator",
115:       "org.apache.commons.collections4.IterableGet"
116:     );
117:   } 
118:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
119:     mock(Class.forName("java.lang.Comparable", false, AbstractPatriciaTrie_171_tmp__ESTest_scaffolding.class.getClassLoader()));
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_171_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_171_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 21:26:05.899 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("hg<|UJ$Fv/q~[AR:", "?;X3o+mj`#oV R");
assertNull(string0);

String string1 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "");
assertNull(string1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("o5", (String) null, (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>> comparator1 = (Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap", "", (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "o5", 1);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

abstractPatriciaTrie_TrieEntry0.key = "org.apache.commons.collections4.trie.PatriciaTrie";
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry2;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.right;
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry0);
assertNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.higherEntry("o5");
assertNull(abstractPatriciaTrie_TrieEntry5);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.firstEntry();
assertNull(abstractPatriciaTrie_TrieEntry6);

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);

PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertNotNull(patriciaTrie3);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry7 = patriciaTrie3.higherEntry("s~i@lj<vROzg^IcP");
assertNotSame(patriciaTrie2, patriciaTrie3);
assertNotSame(patriciaTrie3, patriciaTrie2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertNull(abstractPatriciaTrie_TrieEntry7);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry8 = patriciaTrie3.lowerEntry((String) null);
assertNotSame(patriciaTrie2, patriciaTrie3);
assertNotSame(patriciaTrie3, patriciaTrie2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertNull(abstractPatriciaTrie_TrieEntry8);

PatriciaTrie<Comparable<Object>> patriciaTrie4 = new PatriciaTrie<Comparable<Object>>();
assertNotNull(patriciaTrie4);

Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry9 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>((String) null, comparable0, (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry9);
assertFalse(abstractPatriciaTrie_TrieEntry9.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry9.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry9.isEmpty());

abstractPatriciaTrie_TrieEntry9.predecessor = null;
assertFalse(abstractPatriciaTrie_TrieEntry9.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry9.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry9.isEmpty());

patriciaTrie4.nextEntry(abstractPatriciaTrie_TrieEntry9);

[MASTER] 21:26:22.193 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected not same
[MASTER] 21:26:22.195 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

Object object0 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
assertNull(object0);

Object object1 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
assertNotNull(object1);
assertEquals("org.apache.commons.collections4.trie.PatriciaTrie", object1);

Object object2 = patriciaTrie0.replace("{,(FYQ5a\"", (Object) "{,(FYQ5a\"");
assertNull(object2);

SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("org.apache.commons.collections4.trie.PatriciaTrie");
assertNotNull(sortedMap0);
assertFalse(sortedMap0.isEmpty());
assertEquals(1, sortedMap0.size());

BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
doReturn("k0Ti").when(biFunction0).apply(anyString() , any());
int int0 = patriciaTrie0.lengthInBits("org.apache.commons.collections4.trie.PatriciaTrie");
assertEquals(784, int0);

patriciaTrie0.replaceAll(biFunction0);
Collection<Object> collection0 = patriciaTrie0.values();
assertFalse(collection0.contains("org.apache.commons.collections4.trie.PatriciaTrie"));
assertTrue(collection0.contains("k0Ti"));
assertNotNull(collection0);

Object object3 = patriciaTrie0.get("The offsets and lengths must be at Character boundaries");
assertNull(object3);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("org.apache.commons.collections4.trie.PatriciaTrie");
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Object object4 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
assertFalse(object4.equals((Object)object1));
assertNotNull(object4);
assertEquals("k0Ti", object4);

String string0 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.PatriciaTrie");
assertNull(string0);

BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
patriciaTrie0.forEach(biConsumer0);
BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
Object object5 = patriciaTrie0.merge("", "k0Ti", biFunction1);
assertFalse(object5.equals((Object)object1));
assertTrue(object5.equals((Object)object4));
assertNotNull(object5);
assertEquals("k0Ti", object5);

Object object6 = patriciaTrie0.remove((Object) null);
assertNull(object6);

PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>();
assertNotNull(patriciaTrie1);

BiFunction<Object, Object, String> biFunction2 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
Comparable<String> comparable0 = patriciaTrie1.merge("org.apache.commons.collections4.trie.PatriciaTrie", "The offsets and lengths must be at Character boundaries", biFunction2);
assertNotNull(comparable0);
assertEquals("The offsets and lengths must be at Character boundaries", comparable0);

Comparable<String> comparable1 = patriciaTrie1.getOrDefault((Object) null, "The offsets and lengths must be at Character boundaries");
assertNotSame(comparable1, comparable0);
assertTrue(comparable1.equals((Object)comparable0));
assertNotNull(comparable1);
assertEquals("The offsets and lengths must be at Character boundaries", comparable1);

String string1 = patriciaTrie1.nextKey("`US:&");
assertNull(string1);

OrderedMapIterator<String, Comparable<String>> orderedMapIterator0 = patriciaTrie1.mapIterator();
assertNotNull(orderedMapIterator0);
assertFalse(orderedMapIterator0.hasPrevious());
assertTrue(orderedMapIterator0.hasNext());

HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertNotNull(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
assertNotNull(patriciaTrie2);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

String string2 = patriciaTrie2.nextKey("org.apache.commons.collections4.trie.PatriciaTrie");
assertNull(string2);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());


[MASTER] 21:26:22.778 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected not same
[MASTER] 21:26:22.781 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
assertNotNull(patriciaTrie0);

BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
patriciaTrie0.replaceAll(biFunction0);
AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("ToKey is out of range: ", 2);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());

int int0 = patriciaTrie0.lengthInBits("ToKey is out of range: ");
assertEquals(368, int0);

Comparable<String> comparable0 = patriciaTrie0.put("#L", "#L");
assertNull(comparable0);

Comparable<String> comparable1 = patriciaTrie0.put("#L", "ToKey is out of range: ");
assertNotNull(comparable1);
assertEquals("#L", comparable1);

Comparable<String> comparable2 = patriciaTrie0.put("{D\"sN @e;b<F\"RM=", "ToKey is out of range: ");
assertNull(comparable2);

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("ToKey is out of range: ", "ToKey is out of range: ", 2);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertFalse(string0.equals((Object)comparable1));
assertNotNull(string0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertEquals("Entry(key=ToKey is out of range:  [2], value=ToKey is out of range: , parent=null, left=ToKey is out of range:  [2], right=null, predecessor=ToKey is out of range:  [2])", string0);

Comparable<String> comparable3 = patriciaTrie0.put("#L", "#L");
assertNotSame(comparable3, comparable1);
assertFalse(comparable3.equals((Object)comparable1));
assertNotNull(comparable3);
assertEquals("ToKey is out of range: ", comparable3);

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("", "ToKey is out of range: ", 2);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Comparator<Map.Entry<Object, Comparable<Object>>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

Comparator<Map.Entry<Object, Comparable<Object>>> comparator3 = Map.Entry.comparingByValue();
assertSame(comparator3, comparator2);
assertNotNull(comparator3);

Comparable<String> comparable4 = patriciaTrie0.put("{D\"sN @e;b<F\"RM=", "ToKey is out of range: ");
assertNotSame(comparable4, comparable3);
assertNotSame(comparable4, comparable1);
assertTrue(comparable4.equals((Object)comparable3));
assertFalse(comparable4.equals((Object)comparable1));
assertNotNull(comparable4);
assertEquals("ToKey is out of range: ", comparable4);

Comparable<String> comparable5 = patriciaTrie0.put("#L", "Entry(key=ToKey is out of range:  [2], value=ToKey is out of range: , parent=null, left=ToKey is out of range:  [2], right=null, predecessor=ToKey is out of range:  [2])");
assertNotSame(comparable5, comparable1);
assertNotSame(comparable5, comparable3);
assertNotSame(comparable5, comparable4);
assertTrue(comparable5.equals((Object)comparable1));
assertFalse(comparable5.equals((Object)comparable3));
assertFalse(comparable5.equals((Object)comparable4));
assertNotNull(comparable5);
assertEquals("#L", comparable5);

Comparable<String> comparable6 = abstractPatriciaTrie_TrieEntry1.setKeyValue("{D\"sN @e;b<F\"RM=", "ToKey is out of range: ");
assertNotSame(comparable6, comparable1);
assertNotSame(comparable6, comparable5);
assertNotSame(comparable6, comparable3);
assertNotSame(comparable6, comparable4);
assertTrue(comparable6.equals((Object)comparable4));
assertFalse(comparable6.equals((Object)comparable1));
assertFalse(comparable6.equals((Object)comparable5));
assertTrue(comparable6.equals((Object)comparable3));
assertNotNull(comparable6);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertEquals("ToKey is out of range: ", comparable6);

abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

Comparable<String> comparable7 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
assertNotSame(comparable7, comparable6);
assertNotSame(comparable7, comparable1);
assertNotSame(comparable7, comparable5);
assertNotSame(comparable7, comparable4);
assertNotSame(comparable7, comparable3);
assertTrue(comparable7.equals((Object)comparable4));
assertTrue(comparable7.equals((Object)comparable6));
assertFalse(comparable7.equals((Object)comparable1));
assertFalse(comparable7.equals((Object)comparable5));
assertTrue(comparable7.equals((Object)comparable3));
assertNotNull(comparable7);
assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertEquals("ToKey is out of range: ", comparable7);

AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.ceilingEntry("");
assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry0));
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());

PatriciaTrie<Comparable<Integer>> patriciaTrie1 = new PatriciaTrie<Comparable<Integer>>();
assertNotNull(patriciaTrie1);

Integer integer0 = new Integer(9);
assertFalse(integer0.equals((Object)int0));
assertNotNull(integer0);
assertEquals(9, (int)integer0);

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Object) null, integer0);
assertFalse(integer0.equals((Object)int0));
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>((Comparable<Object>) null, abstractMap_SimpleImmutableEntry0, 2);
assertFalse(integer0.equals((Object)int0));
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());

int int1 = abstractPatriciaTrie_TrieEntry4.bitIndex;
assertFalse(int1 == int0);
assertEquals(2, int1);

Comparable<Integer> comparable8 = patriciaTrie1.put("Entry(key=ToKey is out of range:  [2], value=ToKey is out of range: , parent=null, left=ToKey is out of range:  [2], right=null, predecessor=ToKey is out of range:  [2])", 2);
assertNull(comparable8);

BiFunction<Object, Object, Integer> biFunction1 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
doReturn((Object) null).when(biFunction1).apply(any() , any());
patriciaTrie1.replaceAll(biFunction1);
SortedMap<String, Comparable<Integer>> sortedMap0 = patriciaTrie1.tailMap("#L");
assertNotNull(sortedMap0);
assertEquals(1, sortedMap0.size());
assertFalse(sortedMap0.isEmpty());


[MASTER] 21:26:30.719 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test104 -> class java.lang.StackOverflowError: null
[MASTER] 21:26:30.725 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = (-3);
AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("qQk?~", "qQk?~", (-3));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Map.Entry<Integer, String>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByKey();
assertSame(comparator1, comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, (-3));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());

abstractPatriciaTrie_TrieEntry1.toString();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0-50/tests/13
* Done!

* Computation finished
