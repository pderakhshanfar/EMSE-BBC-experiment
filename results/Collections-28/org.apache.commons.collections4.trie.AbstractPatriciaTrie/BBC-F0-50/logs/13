* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 9578
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 2161365989
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 19:01:25.686 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 19:01:25.686 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 19:01:28.732 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 19:02:26.765 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry due to org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.util.AbstractMap<java.lang.Object, java.lang.Integer>.SimpleEntry<java.lang.Object, java.lang.String>, java.lang.Comparable<java.lang.String>>.TrieIterator<java.lang.Object> canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 19:02:27.605 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 19:06:13.476 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.Object, java.util.AbstractMap<java.lang.Object, java.lang.Object>.SimpleImmutableEntry<java.lang.Object, java.lang.Integer>>.TrieEntry<java.lang.Integer, java.lang.Comparable<java.lang.String>> canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 19:06:24.144 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.String, java.lang.Object>.TrieIterator<java.lang.Object> canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 19:09:00.305 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry due to org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.Comparable<java.lang.Integer>, java.lang.Integer>.TrieEntry<java.lang.String, java.lang.Comparable<java.lang.Integer>> canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 19:10:55.590 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.Object, java.lang.String>.TrieEntry<java.lang.Comparable<java.lang.Object>, java.lang.Integer> canUseFunctionalMocks=false, canBeMocked: false
[MASTER] 19:11:06.140 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.apache.commons.collections4.trie.AbstractPatriciaTrie<java.lang.Comparable<java.lang.Integer>, java.lang.String>.TrieEntry<java.lang.Object, java.lang.Integer> canUseFunctionalMocks=false, canBeMocked: false
* Search finished after 602s and 848 generations, 315538 statements, best individual has fitness: 1289.0
* Minimizing test suite
[MASTER] 19:12:34.078 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 64%
* Total number of goals: 822
* Number of covered goals: 522
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 57%
* Total number of goals: 602
* Number of covered goals: 344
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 62%
* Total number of goals: 569
* Number of covered goals: 350
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 66%
* Total number of goals: 186
* Number of covered goals: 122
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 57%
* Total number of goals: 602
* Number of covered goals: 342
* Generated 205 tests with total length 3084
* Resulting test suite's coverage: 53% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 19:13:29.869 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8608166666666667% of time used, but only 34/205 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 16%
* Compiling and checking tests
[MASTER] 19:13:38.103 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_34_1629227617990/org/apache/commons/collections4/trie/AbstractPatriciaTrie_34_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_34_1629227617990/org/apache/commons/collections4/trie/AbstractPatriciaTrie_34_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:38.103 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:38.103 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:38.106 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.String>,java.lang.String>>: 36
[MASTER] 19:13:38.106 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_34_1629227617990/org/apache/commons/collections4/trie/AbstractPatriciaTrie_34_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:38.106 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:38.107 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_34_1629227617990/org/apache/commons/collections4/trie/AbstractPatriciaTrie_34_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:38 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_34_tmp__ESTest extends AbstractPatriciaTrie_34_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("}>@'{XUc", "}>@'{XUc", 0);
30:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
33:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
34:       
35:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
36:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, String>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, String>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
37:       assertNotNull(comparator1);
38:       
39:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree((String) null, 0, 2);
40:       assertNull(abstractPatriciaTrie_TrieEntry1);
41:       
42:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
43:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
44:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
46:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
47:       
48:       int int0 = patriciaTrie0.bitsPerElement();
49:       assertEquals(16, int0);
50:       
51:       String string0 = patriciaTrie0.put("", (String) null);
52:       assertNull(string0);
53:       
54:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, (-1));
55:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
56:       assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
57:       assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
63:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
64:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
66:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
67:       
68:       boolean boolean0 = patriciaTrie0.isBitSet((String) null, 2, 0);
69:       assertFalse(boolean0);
70:       
71:       String string1 = patriciaTrie0.selectKey("5]G .");
72:       assertNotNull(string1);
73:       assertEquals("}>@'{XUc", string1);
74:       
75:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
76:       assertNotNull(patriciaTrie1);
77:       
78:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
79:       assertNotNull(patriciaTrie2);
80:       
81:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.subtree((String) null, 89, 89);
82:       assertNull(abstractPatriciaTrie_TrieEntry4);
83:       
84:       int int1 = patriciaTrie2.bitIndex((String) null, "Trie[");
85:       assertEquals(9, int1);
86:       assertFalse(int1 == int0);
87:       
88:       String string2 = patriciaTrie2.nextKey("");
89:       assertNull(string2);
90:       
91:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.firstEntry();
92:       assertNull(abstractPatriciaTrie_TrieEntry5);
93:       
94:       Comparator<? super String> comparator2 = patriciaTrie2.comparator();
95:       assertNotNull(comparator2);
96:       
97:       Integer integer0 = new Integer((-1082));
98:       assertNotNull(integer0);
99:       assertEquals((-1082), (int)integer0);
100:       assertFalse(integer0.equals((Object)int0));
101:       assertFalse(integer0.equals((Object)int1));
102:       
103:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "Trie[", 1314);
104:       assertNotNull(abstractPatriciaTrie_TrieEntry6);
105:       assertFalse(integer0.equals((Object)int0));
106:       assertFalse(integer0.equals((Object)int1));
107:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
108:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
109:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
110:       
111:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry2);
112:       assertFalse(boolean1);
113:       assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
114:       assertFalse(integer0.equals((Object)int0));
115:       assertFalse(integer0.equals((Object)int1));
116:       assertTrue(boolean1 == boolean0);
117:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
118:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
119:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
121:       assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
123:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
124:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
125:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
126:   }
127: }
RegularFileObject[/tmp/EvoSuite_34_1629227617990/org/apache/commons/collections4/trie/AbstractPatriciaTrie_34_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:38 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_34_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_34_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_34_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_34_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:38.108 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("}>@'{XUc", "}>@'{XUc", 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, String>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, String>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree((String) null, 0, 2);
assertNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

int int0 = patriciaTrie0.bitsPerElement();
assertEquals(16, int0);

String string0 = patriciaTrie0.put("", (String) null);
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

boolean boolean0 = patriciaTrie0.isBitSet((String) null, 2, 0);
assertFalse(boolean0);

String string1 = patriciaTrie0.selectKey("5]G .");
assertNotNull(string1);
assertEquals("}>@'{XUc", string1);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
assertNotNull(patriciaTrie2);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.subtree((String) null, 89, 89);
assertNull(abstractPatriciaTrie_TrieEntry4);

int int1 = patriciaTrie2.bitIndex((String) null, "Trie[");
assertEquals(9, int1);
assertFalse(int1 == int0);

String string2 = patriciaTrie2.nextKey("");
assertNull(string2);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.firstEntry();
assertNull(abstractPatriciaTrie_TrieEntry5);

Comparator<? super String> comparator2 = patriciaTrie2.comparator();
assertNotNull(comparator2);

Integer integer0 = new Integer((-1082));
assertNotNull(integer0);
assertEquals((-1082), (int)integer0);
assertFalse(integer0.equals((Object)int0));
assertFalse(integer0.equals((Object)int1));

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "Trie[", 1314);
assertNotNull(abstractPatriciaTrie_TrieEntry6);
assertFalse(integer0.equals((Object)int0));
assertFalse(integer0.equals((Object)int1));
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());

boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry2);
assertFalse(boolean1);
assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
assertFalse(integer0.equals((Object)int0));
assertFalse(integer0.equals((Object)int1));
assertTrue(boolean1 == boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());


[MASTER] 19:13:38.653 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_45_1629227618596/org/apache/commons/collections4/trie/AbstractPatriciaTrie_45_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_45_1629227618596/org/apache/commons/collections4/trie/AbstractPatriciaTrie_45_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:38.653 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:38.653 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:38.653 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>,java.lang.String>>: 92
[MASTER] 19:13:38.653 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_45_1629227618596/org/apache/commons/collections4/trie/AbstractPatriciaTrie_45_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:38.653 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:38.654 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_45_1629227618596/org/apache/commons/collections4/trie/AbstractPatriciaTrie_45_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:38 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_45_tmp__ESTest extends AbstractPatriciaTrie_45_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
28:       assertNotNull(hashMap0);
29:       assertTrue(hashMap0.isEmpty());
30:       assertEquals(0, hashMap0.size());
31:       
32:       Object object0 = new Object();
33:       assertNotNull(object0);
34:       
35:       Object object1 = hashMap0.put("xcR)>&*zb2#WmHKW9f", object0);
36:       assertNull(object1);
37:       assertEquals(1, hashMap0.size());
38:       assertFalse(hashMap0.isEmpty());
39:       
40:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
41:       assertNotNull(patriciaTrie0);
42:       assertEquals(1, hashMap0.size());
43:       assertFalse(hashMap0.isEmpty());
44:       
45:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("CV}uS%>*VM`0", "CV}uS%>*VM`0", 398);
46:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
50:       
51:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
52:       assertNull(abstractPatriciaTrie_TrieEntry1);
53:       
54:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, abstractPatriciaTrie_TrieEntry0);
55:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
56:       assertEquals(1, hashMap0.size());
57:       assertFalse(hashMap0.isEmpty());
58:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
62:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
64:       
65:       abstractPatriciaTrie_TrieEntry0.key = "CV}uS%>*VM`0";
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
69:       
70:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>((AbstractMap.SimpleEntry<String, Object>) null, (Object) null, 0);
71:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
72:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
73:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
74:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
75:       
76:       Integer integer0 = new Integer(0);
77:       assertNotNull(integer0);
78:       assertEquals(0, (int)integer0);
79:       
80:       Object object2 = abstractPatriciaTrie_TrieEntry3.setKeyValue((AbstractMap.SimpleEntry<String, Object>) null, integer0);
81:       assertNull(object2);
82:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
83:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
84:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
85:       
86:       abstractPatriciaTrie_TrieEntry3.bitIndex = 0;
87:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
88:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
89:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
90:       
91:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
92:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
93:       assertNotNull(comparator1);
94:       
95:       boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isExternalNode();
96:       assertTrue(boolean0);
97:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
98:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
99:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
100:       
101:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
102:       assertNotNull(patriciaTrie1);
103:       
104:       patriciaTrie1.incrementSize();
105:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
106:       assertFalse(boolean1);
107:       assertFalse(boolean1 == boolean0);
108:       assertEquals(1, hashMap0.size());
109:       assertFalse(hashMap0.isEmpty());
110:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
112:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
113:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
114:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
116:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
117:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
118:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
119:       
120:       boolean boolean2 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
121:       assertFalse(boolean2);
122:       assertTrue(boolean2 == boolean1);
123:       assertFalse(boolean2 == boolean0);
124:       assertEquals(1, hashMap0.size());
125:       assertFalse(hashMap0.isEmpty());
126:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
128:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
130:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
132:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
133:       assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
134:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
135:       
136:       Integer integer1 = new Integer(398);
137:       assertNotNull(integer1);
138:       assertEquals(398, (int)integer1);
139:       assertFalse(integer1.equals((Object)integer0));
140:       
141:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer1, (-2285));
142:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
143:       assertFalse(integer1.equals((Object)integer0));
144:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
145:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
146:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
147:       
148:       boolean boolean3 = abstractPatriciaTrie_TrieEntry4.isInternalNode();
149:       assertFalse(boolean3);
150:       assertFalse(integer1.equals((Object)integer0));
151:       assertFalse(boolean3 == boolean0);
152:       assertTrue(boolean3 == boolean1);
153:       assertTrue(boolean3 == boolean2);
154:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
155:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
156:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
157:       
158:       String string0 = patriciaTrie0.previousKey("CV}uS%>*VM`0");
159:       assertNull(string0);
160:       assertEquals(1, hashMap0.size());
161:       assertFalse(hashMap0.isEmpty());
162:       
163:       Integer integer2 = new Integer(0);
164:       assertNotNull(integer2);
165:       assertEquals(0, (int)integer2);
166:       assertTrue(integer2.equals((Object)integer0));
167:       assertFalse(integer2.equals((Object)integer1));
168:       
169:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>(integer2, (AbstractMap.SimpleEntry<Integer, String>) null, 0);
170:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
171:       assertTrue(integer2.equals((Object)integer0));
172:       assertFalse(integer2.equals((Object)integer1));
173:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
174:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
175:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
176:       
177:       boolean boolean4 = abstractPatriciaTrie_TrieEntry5.isInternalNode();
178:       assertFalse(boolean4);
179:       assertTrue(integer2.equals((Object)integer0));
180:       assertFalse(integer2.equals((Object)integer1));
181:       assertTrue(boolean4 == boolean2);
182:       assertFalse(boolean4 == boolean0);
183:       assertTrue(boolean4 == boolean1);
184:       assertTrue(boolean4 == boolean3);
185:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
186:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
187:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
188:   }
189: }
RegularFileObject[/tmp/EvoSuite_45_1629227618596/org/apache/commons/collections4/trie/AbstractPatriciaTrie_45_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:38 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_45_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_45_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_45_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_45_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:38.657 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
assertNotNull(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());

Object object0 = new Object();
assertNotNull(object0);

Object object1 = hashMap0.put("xcR)>&*zb2#WmHKW9f", object0);
assertNull(object1);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
assertNotNull(patriciaTrie0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("CV}uS%>*VM`0", "CV}uS%>*VM`0", 398);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
assertNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, abstractPatriciaTrie_TrieEntry0);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

abstractPatriciaTrie_TrieEntry0.key = "CV}uS%>*VM`0";
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>((AbstractMap.SimpleEntry<String, Object>) null, (Object) null, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

Object object2 = abstractPatriciaTrie_TrieEntry3.setKeyValue((AbstractMap.SimpleEntry<String, Object>) null, integer0);
assertNull(object2);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

abstractPatriciaTrie_TrieEntry3.bitIndex = 0;
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<String, String>>) comparator0);
assertNotNull(comparator1);

boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isExternalNode();
assertTrue(boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
assertNotNull(patriciaTrie1);

patriciaTrie1.incrementSize();
boolean boolean1 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

boolean boolean2 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

Integer integer1 = new Integer(398);
assertNotNull(integer1);
assertEquals(398, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer1, (-2285));
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(integer1.equals((Object)integer0));
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());

boolean boolean3 = abstractPatriciaTrie_TrieEntry4.isInternalNode();
assertFalse(boolean3);
assertFalse(integer1.equals((Object)integer0));
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());

String string0 = patriciaTrie0.previousKey("CV}uS%>*VM`0");
assertNull(string0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());

Integer integer2 = new Integer(0);
assertNotNull(integer2);
assertEquals(0, (int)integer2);
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>(integer2, (AbstractMap.SimpleEntry<Integer, String>) null, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());

boolean boolean4 = abstractPatriciaTrie_TrieEntry5.isInternalNode();
assertFalse(boolean4);
assertTrue(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertTrue(boolean4 == boolean2);
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());


[MASTER] 19:13:38.774 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_48_1629227618748/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_48_1629227618748/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:38.774 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:38.774 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:38.774 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>>>: 51
[MASTER] 19:13:38.774 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_48_1629227618748/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:38.774 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:38.775 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_48_1629227618748/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:38 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.Set;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_48_tmp__ESTest extends AbstractPatriciaTrie_48_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       String string0 = "";
32:       String string1 = "950ry?e`g'*E_QlU";
33:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("950ry?e`g'*E_QlU", "");
34:       assertNotNull(abstractMap_SimpleEntry0);
35:       
36:       Set<Map.Entry<String, AbstractMap.SimpleEntry<Object, Object>>> set0 = (Set<Map.Entry<String, AbstractMap.SimpleEntry<Object, Object>>>)patriciaTrie0.entrySet();
37:       assertNotNull(set0);
38:       assertEquals(0, set0.size());
39:       assertTrue(set0.isEmpty());
40:       
41:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
42:       assertNotNull(abstractMap_SimpleEntry1);
43:       
44:       Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Object, Object>, String>>> comparator0 = Map.Entry.comparingByKey();
45:       assertNotNull(comparator0);
46:       
47:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.put("", abstractMap_SimpleEntry1);
48:       assertNull(abstractMap_SimpleEntry2);
49:       
50:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
51:       Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>> comparator2 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
52:       assertNotNull(comparator2);
53:       
54:       // Undeclared exception!
55:       try { 
56:         patriciaTrie0.previousKey((String) null);
57:         fail("Expecting exception: NullPointerException");
58:       
59:       } catch(NullPointerException e) {
60:          //
61:          // no message in exception (getMessage() returned null)
62:          //
63:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
64:       }
65:   }
66: }
RegularFileObject[/tmp/EvoSuite_48_1629227618748/org/apache/commons/collections4/trie/AbstractPatriciaTrie_48_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:38 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_48_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_48_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_48_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_48_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:38.775 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie0);

String string0 = "";
String string1 = "950ry?e`g'*E_QlU";
AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("950ry?e`g'*E_QlU", "");
assertNotNull(abstractMap_SimpleEntry0);

Set<Map.Entry<String, AbstractMap.SimpleEntry<Object, Object>>> set0 = (Set<Map.Entry<String, AbstractMap.SimpleEntry<Object, Object>>>)patriciaTrie0.entrySet();
assertNotNull(set0);
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleEntry1);

Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<Object, Object>, String>>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.put("", abstractMap_SimpleEntry1);
assertNull(abstractMap_SimpleEntry2);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>> comparator2 = (Comparator<Map.Entry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

patriciaTrie0.previousKey((String) null);

[MASTER] 19:13:39.439 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_58_1629227619414/org/apache/commons/collections4/trie/AbstractPatriciaTrie_58_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_58_1629227619414/org/apache/commons/collections4/trie/AbstractPatriciaTrie_58_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:39.440 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:39.440 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:39.441 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>,java.lang.String>,java.lang.Integer>>: 76
[MASTER] 19:13:39.441 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_58_1629227619414/org/apache/commons/collections4/trie/AbstractPatriciaTrie_58_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:39.441 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:39.442 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_58_1629227619414/org/apache/commons/collections4/trie/AbstractPatriciaTrie_58_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:39 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_58_tmp__ESTest extends AbstractPatriciaTrie_58_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       int int0 = 32768;
31:       Integer integer0 = new Integer(32768);
32:       assertNotNull(integer0);
33:       assertEquals(32768, (int)integer0);
34:       assertTrue(integer0.equals((Object)int0));
35:       
36:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(integer0, integer0);
37:       assertNotNull(abstractMap_SimpleImmutableEntry0);
38:       assertTrue(integer0.equals((Object)int0));
39:       
40:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
41:       assertNotNull(abstractMap_SimpleImmutableEntry1);
42:       assertTrue(integer0.equals((Object)int0));
43:       
44:       Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
45:       assertNotNull(comparator0);
46:       
47:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>(integer0, abstractMap_SimpleImmutableEntry1, 1);
48:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
49:       assertTrue(integer0.equals((Object)int0));
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
52:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
53:       
54:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
55:       assertNotNull(string0);
56:       assertEquals("Entry(key=32768 [1], value=32768=32768, parent=null, left=32768 [1], right=null, predecessor=32768 [1])", string0);
57:       assertTrue(integer0.equals((Object)int0));
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
61:       
62:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
63:       assertNotNull(patriciaTrie1);
64:       
65:       String string1 = patriciaTrie1.selectKey("}\n");
66:       assertNull(string1);
67:       
68:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry0);
69:       assertNotNull(abstractMap_SimpleImmutableEntry2);
70:       assertTrue(integer0.equals((Object)int0));
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
72:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
73:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
74:       
75:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
76:       Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>>) comparator1);
77:       assertNotNull(comparator2);
78:       
79:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry3 = patriciaTrie1.put("we2q}XHt7", abstractMap_SimpleImmutableEntry2);
80:       assertNull(abstractMap_SimpleImmutableEntry3);
81:       assertTrue(integer0.equals((Object)int0));
82:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
84:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
85:       
86:       int int1 = 0;
87:       // Undeclared exception!
88:       try { 
89:         patriciaTrie1.subtree("", 32768, 0);
90:         fail("Expecting exception: StringIndexOutOfBoundsException");
91:       
92:       } catch(StringIndexOutOfBoundsException e) {
93:       }
94:   }
95: }
RegularFileObject[/tmp/EvoSuite_58_1629227619414/org/apache/commons/collections4/trie/AbstractPatriciaTrie_58_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:39 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_58_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_58_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_58_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_58_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:39.443 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
assertNotNull(patriciaTrie0);

int int0 = 32768;
Integer integer0 = new Integer(32768);
assertNotNull(integer0);
assertEquals(32768, (int)integer0);
assertTrue(integer0.equals((Object)int0));

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(integer0, integer0);
assertNotNull(abstractMap_SimpleImmutableEntry0);
assertTrue(integer0.equals((Object)int0));

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry1);
assertTrue(integer0.equals((Object)int0));

Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>(integer0, abstractMap_SimpleImmutableEntry1, 1);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer0.equals((Object)int0));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertNotNull(string0);
assertEquals("Entry(key=32768 [1], value=32768=32768, parent=null, left=32768 [1], right=null, predecessor=32768 [1])", string0);
assertTrue(integer0.equals((Object)int0));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
assertNotNull(patriciaTrie1);

String string1 = patriciaTrie1.selectKey("}\n");
assertNull(string1);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry2);
assertTrue(integer0.equals((Object)int0));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>>) comparator1);
assertNotNull(comparator2);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry3 = patriciaTrie1.put("we2q}XHt7", abstractMap_SimpleImmutableEntry2);
assertNull(abstractMap_SimpleImmutableEntry3);
assertTrue(integer0.equals((Object)int0));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

int int1 = 0;
patriciaTrie1.subtree("", 32768, 0);

[MASTER] 19:13:39.837 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_65_1629227619776/org/apache/commons/collections4/trie/AbstractPatriciaTrie_65_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_65_1629227619776/org/apache/commons/collections4/trie/AbstractPatriciaTrie_65_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:39.837 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:39.837 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:39.837 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>>: 51
[MASTER] 19:13:39.838 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>>>: 55
[MASTER] 19:13:39.838 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.String>>: 62
[MASTER] 19:13:39.845 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_65_1629227619776/org/apache/commons/collections4/trie/AbstractPatriciaTrie_65_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:39.845 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:39.846 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_65_1629227619776/org/apache/commons/collections4/trie/AbstractPatriciaTrie_65_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:39 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import java.util.SortedMap;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_65_tmp__ESTest extends AbstractPatriciaTrie_65_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
29:       assertNotNull(hashMap0);
30:       assertEquals(0, hashMap0.size());
31:       assertTrue(hashMap0.isEmpty());
32:       
33:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
34:       assertNotNull(patriciaTrie0);
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("]={\n");
37:       assertNull(abstractPatriciaTrie_TrieEntry0);
38:       
39:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("]={\n");
40:       assertNull(abstractPatriciaTrie_TrieEntry1);
41:       
42:       patriciaTrie0.decrementSize();
43:       Integer integer0 = new Integer((-929));
44:       assertNotNull(integer0);
45:       assertEquals((-929), (int)integer0);
46:       
47:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("f k1*4?X7Br*g(", integer0);
48:       assertNotNull(abstractMap_SimpleEntry0);
49:       
50:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
51:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
52:       assertNotNull(comparator1);
53:       
54:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
55:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator2);
56:       assertNotNull(comparator3);
57:       
58:       Comparator<Map.Entry<Integer, Integer>> comparator4 = Map.Entry.comparingByKey();
59:       assertNotNull(comparator4);
60:       
61:       Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
62:       Comparator<Map.Entry<Integer, String>> comparator6 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator5);
63:       assertNotNull(comparator6);
64:       
65:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
66:       assertNotNull(patriciaTrie1);
67:       
68:       Object object0 = patriciaTrie1.putIfAbsent("f k1*4?X7Br*g(", "f k1*4?X7Br*g(");
69:       assertNull(object0);
70:       
71:       Object object1 = patriciaTrie1.selectValue("");
72:       assertNotNull(object1);
73:       assertEquals("f k1*4?X7Br*g(", object1);
74:       
75:       Object object2 = new Object();
76:       assertNotNull(object2);
77:       
78:       Object object3 = patriciaTrie1.put("f k1*4?X7Br*g(", comparator4);
79:       assertNotNull(object3);
80:       assertEquals("f k1*4?X7Br*g(", object3);
81:       
82:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
83:       assertNotNull(patriciaTrie2);
84:       
85:       SortedMap<String, AbstractMap.SimpleEntry<Object, Object>> sortedMap0 = patriciaTrie2.prefixMap("m>G.c:");
86:       assertNotNull(sortedMap0);
87:       assertTrue(sortedMap0.isEmpty());
88:       assertEquals(0, sortedMap0.size());
89:       
90:       PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
91:       assertNotNull(patriciaTrie3);
92:       
93:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
94:       assertNotNull(hashMap1);
95:       assertEquals(0, hashMap1.size());
96:       assertTrue(hashMap1.isEmpty());
97:       
98:       PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
99:       assertNotNull(patriciaTrie4);
100:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
101:       
102:       patriciaTrie4.incrementSize();
103:       assertNotSame(patriciaTrie3, patriciaTrie4);
104:       assertNotSame(patriciaTrie4, patriciaTrie3);
105:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
106:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
107:   }
108: }
RegularFileObject[/tmp/EvoSuite_65_1629227619776/org/apache/commons/collections4/trie/AbstractPatriciaTrie_65_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:39 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_65_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_65_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_65_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_65_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:39.855 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertNotNull(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("]={\n");
assertNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("]={\n");
assertNull(abstractPatriciaTrie_TrieEntry1);

patriciaTrie0.decrementSize();
Integer integer0 = new Integer((-929));
assertNotNull(integer0);
assertEquals((-929), (int)integer0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("f k1*4?X7Br*g(", integer0);
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator2);
assertNotNull(comparator3);

Comparator<Map.Entry<Integer, Integer>> comparator4 = Map.Entry.comparingByKey();
assertNotNull(comparator4);

Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, String>> comparator6 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator5);
assertNotNull(comparator6);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Object object0 = patriciaTrie1.putIfAbsent("f k1*4?X7Br*g(", "f k1*4?X7Br*g(");
assertNull(object0);

Object object1 = patriciaTrie1.selectValue("");
assertNotNull(object1);
assertEquals("f k1*4?X7Br*g(", object1);

Object object2 = new Object();
assertNotNull(object2);

Object object3 = patriciaTrie1.put("f k1*4?X7Br*g(", comparator4);
assertNotNull(object3);
assertEquals("f k1*4?X7Br*g(", object3);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie2);

SortedMap<String, AbstractMap.SimpleEntry<Object, Object>> sortedMap0 = patriciaTrie2.prefixMap("m>G.c:");
assertNotNull(sortedMap0);
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());

PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie3);

HashMap<String, String> hashMap1 = new HashMap<String, String>();
assertNotNull(hashMap1);
assertEquals(0, hashMap1.size());
assertTrue(hashMap1.isEmpty());

PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
assertNotNull(patriciaTrie4);
assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));

patriciaTrie4.incrementSize();
assertNotSame(patriciaTrie3, patriciaTrie4);
assertNotSame(patriciaTrie4, patriciaTrie3);
assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));


[MASTER] 19:13:39.958 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_68_1629227619917/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_68_1629227619917/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:39.958 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:39.958 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:39.958 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>>: 55
[MASTER] 19:13:39.959 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>,java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>>>: 59
[MASTER] 19:13:39.959 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.String>>: 72
[MASTER] 19:13:39.959 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_68_1629227619917/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:39.959 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:39.959 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_68_1629227619917/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:39 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import java.util.SortedMap;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_68_tmp__ESTest extends AbstractPatriciaTrie_68_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
30:       assertNotNull(hashMap0);
31:       assertEquals(0, hashMap0.size());
32:       assertTrue(hashMap0.isEmpty());
33:       
34:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
35:       assertNotNull(patriciaTrie0);
36:       
37:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("]={\n");
38:       assertNull(abstractPatriciaTrie_TrieEntry0);
39:       
40:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("]={\n");
41:       assertNull(abstractPatriciaTrie_TrieEntry1);
42:       
43:       patriciaTrie0.decrementSize();
44:       Integer integer0 = new Integer((-929));
45:       assertNotNull(integer0);
46:       assertEquals((-929), (int)integer0);
47:       
48:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("f k1*4?X7Br*g(", integer0);
49:       assertNotNull(abstractMap_SimpleEntry0);
50:       
51:       AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
52:       assertNotNull(abstractMap_SimpleImmutableEntry0);
53:       
54:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
55:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
56:       assertNotNull(comparator1);
57:       
58:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
59:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator2);
60:       assertNotNull(comparator3);
61:       
62:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(abstractMap_SimpleImmutableEntry0, comparator1, 0);
63:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
64:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
65:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
66:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
67:       
68:       Comparator<Map.Entry<Integer, Integer>> comparator4 = Map.Entry.comparingByKey();
69:       assertNotNull(comparator4);
70:       
71:       Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
72:       Comparator<Map.Entry<Integer, String>> comparator6 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator5);
73:       assertNotNull(comparator6);
74:       
75:       String string0 = abstractPatriciaTrie_TrieEntry2.toString();
76:       assertNotNull(string0);
77:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
78:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
79:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
80:       
81:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
82:       assertNotNull(patriciaTrie1);
83:       
84:       Object object0 = patriciaTrie1.putIfAbsent("f k1*4?X7Br*g(", "f k1*4?X7Br*g(");
85:       assertNull(object0);
86:       
87:       Object object1 = patriciaTrie1.selectValue("");
88:       assertNotNull(object1);
89:       assertEquals("f k1*4?X7Br*g(", object1);
90:       assertFalse(object1.equals((Object)string0));
91:       
92:       Object object2 = new Object();
93:       assertNotNull(object2);
94:       
95:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
96:       assertNotNull(patriciaTrie2);
97:       
98:       SortedMap<String, AbstractMap.SimpleEntry<Object, Object>> sortedMap0 = patriciaTrie2.prefixMap("f k1*4?X7Br*g(");
99:       assertNotNull(sortedMap0);
100:       assertTrue(sortedMap0.isEmpty());
101:       assertEquals(0, sortedMap0.size());
102:       
103:       // Undeclared exception!
104:       try { 
105:         AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry2, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
106:         fail("Expecting exception: NullPointerException");
107:       
108:       } catch(NullPointerException e) {
109:          //
110:          // no message in exception (getMessage() returned null)
111:          //
112:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
113:       }
114:   }
115: }
RegularFileObject[/tmp/EvoSuite_68_1629227619917/org/apache/commons/collections4/trie/AbstractPatriciaTrie_68_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:39 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_68_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_68_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_68_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_68_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:39.961 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertNotNull(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("]={\n");
assertNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("]={\n");
assertNull(abstractPatriciaTrie_TrieEntry1);

patriciaTrie0.decrementSize();
Integer integer0 = new Integer((-929));
assertNotNull(integer0);
assertEquals((-929), (int)integer0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("f k1*4?X7Br*g(", integer0);
assertNotNull(abstractMap_SimpleEntry0);

AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator2);
assertNotNull(comparator3);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(abstractMap_SimpleImmutableEntry0, comparator1, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

Comparator<Map.Entry<Integer, Integer>> comparator4 = Map.Entry.comparingByKey();
assertNotNull(comparator4);

Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, String>> comparator6 = (Comparator<Map.Entry<Integer, String>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator5);
assertNotNull(comparator6);

String string0 = abstractPatriciaTrie_TrieEntry2.toString();
assertNotNull(string0);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Object object0 = patriciaTrie1.putIfAbsent("f k1*4?X7Br*g(", "f k1*4?X7Br*g(");
assertNull(object0);

Object object1 = patriciaTrie1.selectValue("");
assertNotNull(object1);
assertEquals("f k1*4?X7Br*g(", object1);
assertFalse(object1.equals((Object)string0));

Object object2 = new Object();
assertNotNull(object2);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie2);

SortedMap<String, AbstractMap.SimpleEntry<Object, Object>> sortedMap0 = patriciaTrie2.prefixMap("f k1*4?X7Br*g(");
assertNotNull(sortedMap0);
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());

AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry2, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);

[MASTER] 19:13:40.598 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_81_1629227620569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_81_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_81_1629227620569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_81_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:40.598 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:40.598 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:40.599 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>>: 97
[MASTER] 19:13:40.599 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_81_1629227620569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_81_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:40.599 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:40.599 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_81_1629227620569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_81_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:40 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_81_tmp__ESTest extends AbstractPatriciaTrie_81_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "The offsets and lengths must be at Character boundaries");
30:       assertNull(string0);
31:       
32:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
33:       assertNotNull(patriciaTrie1);
34:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
37:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
38:       assertNotSame(patriciaTrie0, patriciaTrie1);
39:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       
44:       String string1 = patriciaTrie1.put("", "");
45:       assertNull(string1);
46:       assertNotSame(patriciaTrie0, patriciaTrie1);
47:       assertNotSame(patriciaTrie1, patriciaTrie0);
48:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
49:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
50:       
51:       String string2 = patriciaTrie1.put("", "Trie[");
52:       assertNotNull(string2);
53:       assertEquals("", string2);
54:       assertNotSame(patriciaTrie0, patriciaTrie1);
55:       assertNotSame(patriciaTrie1, patriciaTrie0);
56:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
57:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
58:       
59:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("K,_T]K[GiqcY#jly");
60:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
61:       assertNotSame(patriciaTrie0, patriciaTrie1);
62:       assertNotSame(patriciaTrie1, patriciaTrie0);
63:       assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
64:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
65:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
67:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
70:       
71:       String string3 = patriciaTrie0.toString();
72:       assertNotNull(string3);
73:       assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=The offsets and lengths must be at Character boundaries, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string3);
74:       assertNotSame(patriciaTrie0, patriciaTrie1);
75:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
76:       assertFalse(string3.equals((Object)string2));
77:       
78:       String string4 = patriciaTrie0.put("}\n", (String) null);
79:       assertNull(string4);
80:       assertNotSame(patriciaTrie0, patriciaTrie1);
81:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
82:       
83:       patriciaTrie1.decrementSize();
84:       assertNotSame(patriciaTrie0, patriciaTrie1);
85:       assertNotSame(patriciaTrie1, patriciaTrie0);
86:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
87:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
88:       
89:       String string5 = patriciaTrie1.remove((Object) "The offsets and lengths must be at Character boundaries");
90:       assertNull(string5);
91:       assertNotSame(patriciaTrie0, patriciaTrie1);
92:       assertNotSame(patriciaTrie1, patriciaTrie0);
93:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
94:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
95:       
96:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
97:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
98:       assertNotNull(comparator1);
99:       
100:       Integer integer0 = new Integer(600);
101:       assertNotNull(integer0);
102:       assertEquals(600, (int)integer0);
103:       
104:       Integer integer1 = new Integer(1);
105:       assertNotNull(integer1);
106:       assertEquals(1, (int)integer1);
107:       assertFalse(integer1.equals((Object)integer0));
108:       
109:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
110:       assertNotNull(patriciaTrie2);
111:       
112:       Integer integer2 = patriciaTrie2.put("`j5", integer0);
113:       assertNull(integer2);
114:       assertFalse(integer0.equals((Object)integer1));
115:       
116:       PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
117:       assertNotNull(patriciaTrie3);
118:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
119:       
120:       PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie1);
121:       assertNotNull(patriciaTrie4);
122:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
123:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie1));
124:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
125:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
126:       
127:       String string6 = patriciaTrie1.firstKey();
128:       assertNotNull(string6);
129:       assertEquals("", string6);
130:       assertNotSame(patriciaTrie0, patriciaTrie1);
131:       assertNotSame(patriciaTrie0, patriciaTrie4);
132:       assertNotSame(patriciaTrie1, patriciaTrie0);
133:       assertNotSame(patriciaTrie1, patriciaTrie4);
134:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
135:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
136:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
137:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie4));
138:       assertFalse(string6.equals((Object)string3));
139:       assertTrue(string6.equals((Object)string2));
140:       
141:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie5 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
142:       assertNotNull(patriciaTrie5);
143:       
144:       String string7 = patriciaTrie5.previousKey("zjl5[/,tNknkn");
145:       assertNull(string7);
146:   }
147: }
RegularFileObject[/tmp/EvoSuite_81_1629227620569/org/apache/commons/collections4/trie/AbstractPatriciaTrie_81_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:40 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_81_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_81_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_81_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_81_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:40.601 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "The offsets and lengths must be at Character boundaries");
assertNull(string0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

String string1 = patriciaTrie1.put("", "");
assertNull(string1);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

String string2 = patriciaTrie1.put("", "Trie[");
assertNotNull(string2);
assertEquals("", string2);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("K,_T]K[GiqcY#jly");
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());

String string3 = patriciaTrie0.toString();
assertNotNull(string3);
assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=The offsets and lengths must be at Character boundaries, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string3);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(string3.equals((Object)string2));

String string4 = patriciaTrie0.put("}\n", (String) null);
assertNull(string4);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));

patriciaTrie1.decrementSize();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

String string5 = patriciaTrie1.remove((Object) "The offsets and lengths must be at Character boundaries");
assertNull(string5);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Integer integer0 = new Integer(600);
assertNotNull(integer0);
assertEquals(600, (int)integer0);

Integer integer1 = new Integer(1);
assertNotNull(integer1);
assertEquals(1, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);

Integer integer2 = patriciaTrie2.put("`j5", integer0);
assertNull(integer2);
assertFalse(integer0.equals((Object)integer1));

PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
assertNotNull(patriciaTrie3);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));

PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie1);
assertNotNull(patriciaTrie4);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

String string6 = patriciaTrie1.firstKey();
assertNotNull(string6);
assertEquals("", string6);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie0, patriciaTrie4);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(patriciaTrie1, patriciaTrie4);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie0.equals((Object)patriciaTrie4));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie4));
assertFalse(string6.equals((Object)string3));
assertTrue(string6.equals((Object)string2));

PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie5 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
assertNotNull(patriciaTrie5);

String string7 = patriciaTrie5.previousKey("zjl5[/,tNknkn");
assertNull(string7);


[MASTER] 19:13:41.161 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_93_1629227621125/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_93_1629227621125/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:41.161 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:41.161 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:41.161 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>>: 76
[MASTER] 19:13:41.162 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_93_1629227621125/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:41.162 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:41.162 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_93_1629227621125/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:41 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_93_tmp__ESTest extends AbstractPatriciaTrie_93_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "The offsets and lengths must be at Character boundaries");
30:       assertNull(string0);
31:       
32:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
33:       assertNotNull(patriciaTrie1);
34:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
37:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
38:       assertNotSame(patriciaTrie0, patriciaTrie1);
39:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       
44:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("K,_T]K[GiqcY#jly");
45:       assertNull(abstractPatriciaTrie_TrieEntry1);
46:       assertNotSame(patriciaTrie0, patriciaTrie1);
47:       assertNotSame(patriciaTrie1, patriciaTrie0);
48:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
49:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
50:       
51:       String string1 = patriciaTrie0.toString();
52:       assertNotNull(string1);
53:       assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=The offsets and lengths must be at Character boundaries, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string1);
54:       assertNotSame(patriciaTrie0, patriciaTrie1);
55:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
56:       
57:       String string2 = patriciaTrie0.put("}\n", (String) null);
58:       assertNull(string2);
59:       assertNotSame(patriciaTrie0, patriciaTrie1);
60:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
61:       
62:       patriciaTrie1.decrementSize();
63:       assertNotSame(patriciaTrie0, patriciaTrie1);
64:       assertNotSame(patriciaTrie1, patriciaTrie0);
65:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
66:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
67:       
68:       String string3 = patriciaTrie1.remove((Object) "The offsets and lengths must be at Character boundaries");
69:       assertNull(string3);
70:       assertNotSame(patriciaTrie0, patriciaTrie1);
71:       assertNotSame(patriciaTrie1, patriciaTrie0);
72:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
73:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
74:       
75:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
76:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
77:       assertNotNull(comparator1);
78:       
79:       Integer integer0 = new Integer(600);
80:       assertNotNull(integer0);
81:       assertEquals(600, (int)integer0);
82:       
83:       Integer integer1 = new Integer(1);
84:       assertNotNull(integer1);
85:       assertEquals(1, (int)integer1);
86:       assertFalse(integer1.equals((Object)integer0));
87:       
88:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.getNearestEntryForKey("}\n", 0);
89:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
90:       assertNotSame(patriciaTrie0, patriciaTrie1);
91:       assertNotSame(patriciaTrie1, patriciaTrie0);
92:       assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
93:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
94:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
95:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry0));
96:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
97:       assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
98:       assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
99:       
100:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
101:       assertNotNull(patriciaTrie2);
102:       
103:       Integer integer2 = patriciaTrie2.put("`j5", integer0);
104:       assertNull(integer2);
105:       assertFalse(integer0.equals((Object)integer1));
106:       
107:       PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
108:       assertNotNull(patriciaTrie3);
109:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
110:       
111:       PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie1);
112:       assertNotNull(patriciaTrie4);
113:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
114:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
115:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
116:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
117:       
118:       Integer integer3 = new Integer(600);
119:       assertNotNull(integer3);
120:       assertEquals(600, (int)integer3);
121:       assertFalse(integer3.equals((Object)integer1));
122:       assertTrue(integer3.equals((Object)integer0));
123:       
124:       Integer integer4 = new Integer(600);
125:       assertNotNull(integer4);
126:       assertEquals(600, (int)integer4);
127:       assertTrue(integer4.equals((Object)integer3));
128:       assertTrue(integer4.equals((Object)integer0));
129:       assertFalse(integer4.equals((Object)integer1));
130:       
131:       Integer integer5 = new Integer(1);
132:       assertNotNull(integer5);
133:       assertEquals(1, (int)integer5);
134:       assertTrue(integer5.equals((Object)integer1));
135:       assertFalse(integer5.equals((Object)integer4));
136:       assertFalse(integer5.equals((Object)integer3));
137:       assertFalse(integer5.equals((Object)integer0));
138:       
139:       AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer4, integer5, 600);
140:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
141:       assertTrue(integer4.equals((Object)integer3));
142:       assertTrue(integer4.equals((Object)integer0));
143:       assertFalse(integer4.equals((Object)integer1));
144:       assertFalse(integer4.equals((Object)integer5));
145:       assertTrue(integer5.equals((Object)integer1));
146:       assertFalse(integer5.equals((Object)integer4));
147:       assertFalse(integer5.equals((Object)integer3));
148:       assertFalse(integer5.equals((Object)integer0));
149:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
150:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
151:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
152:       
153:       Integer integer6 = new Integer(600);
154:       assertNotNull(integer6);
155:       assertEquals(600, (int)integer6);
156:       assertTrue(integer6.equals((Object)integer3));
157:       assertFalse(integer6.equals((Object)integer5));
158:       assertTrue(integer6.equals((Object)integer4));
159:       assertTrue(integer6.equals((Object)integer0));
160:       assertFalse(integer6.equals((Object)integer1));
161:       
162:       Integer integer7 = new Integer(1);
163:       assertNotNull(integer7);
164:       assertEquals(1, (int)integer7);
165:       assertTrue(integer7.equals((Object)integer1));
166:       assertFalse(integer7.equals((Object)integer3));
167:       assertFalse(integer7.equals((Object)integer6));
168:       assertFalse(integer7.equals((Object)integer4));
169:       assertFalse(integer7.equals((Object)integer0));
170:       assertTrue(integer7.equals((Object)integer5));
171:       
172:       Integer integer8 = abstractPatriciaTrie_TrieEntry3.setKeyValue(integer6, integer7);
173:       assertNotNull(integer8);
174:       assertEquals(1, (int)integer8);
175:       assertTrue(integer4.equals((Object)integer3));
176:       assertFalse(integer4.equals((Object)integer7));
177:       assertTrue(integer4.equals((Object)integer0));
178:       assertFalse(integer4.equals((Object)integer1));
179:       assertFalse(integer4.equals((Object)integer5));
180:       assertTrue(integer4.equals((Object)integer6));
181:       assertTrue(integer5.equals((Object)integer1));
182:       assertTrue(integer5.equals((Object)integer7));
183:       assertFalse(integer5.equals((Object)integer4));
184:       assertFalse(integer5.equals((Object)integer6));
185:       assertFalse(integer5.equals((Object)integer3));
186:       assertFalse(integer5.equals((Object)integer0));
187:       assertTrue(integer6.equals((Object)integer3));
188:       assertFalse(integer6.equals((Object)integer5));
189:       assertTrue(integer6.equals((Object)integer4));
190:       assertTrue(integer6.equals((Object)integer0));
191:       assertFalse(integer6.equals((Object)integer1));
192:       assertFalse(integer6.equals((Object)integer7));
193:       assertTrue(integer7.equals((Object)integer1));
194:       assertFalse(integer7.equals((Object)integer3));
195:       assertFalse(integer7.equals((Object)integer6));
196:       assertFalse(integer7.equals((Object)integer4));
197:       assertFalse(integer7.equals((Object)integer0));
198:       assertTrue(integer7.equals((Object)integer5));
199:       assertFalse(integer8.equals((Object)integer6));
200:       assertTrue(integer8.equals((Object)integer1));
201:       assertFalse(integer8.equals((Object)integer4));
202:       assertFalse(integer8.equals((Object)integer3));
203:       assertTrue(integer8.equals((Object)integer7));
204:       assertFalse(integer8.equals((Object)integer0));
205:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
206:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
207:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
208:       
209:       boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
210:       assertFalse(boolean0);
211:       assertTrue(integer4.equals((Object)integer3));
212:       assertFalse(integer4.equals((Object)integer7));
213:       assertTrue(integer4.equals((Object)integer0));
214:       assertFalse(integer4.equals((Object)integer1));
215:       assertFalse(integer4.equals((Object)integer8));
216:       assertFalse(integer4.equals((Object)integer5));
217:       assertTrue(integer4.equals((Object)integer6));
218:       assertTrue(integer5.equals((Object)integer1));
219:       assertTrue(integer5.equals((Object)integer7));
220:       assertFalse(integer5.equals((Object)integer4));
221:       assertFalse(integer5.equals((Object)integer6));
222:       assertFalse(integer5.equals((Object)integer3));
223:       assertFalse(integer5.equals((Object)integer0));
224:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
225:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
226:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
227:   }
228: }
RegularFileObject[/tmp/EvoSuite_93_1629227621125/org/apache/commons/collections4/trie/AbstractPatriciaTrie_93_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:41 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_93_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_93_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_93_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_93_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:41.166 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "The offsets and lengths must be at Character boundaries");
assertNull(string0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("K,_T]K[GiqcY#jly");
assertNull(abstractPatriciaTrie_TrieEntry1);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

String string1 = patriciaTrie0.toString();
assertNotNull(string1);
assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=The offsets and lengths must be at Character boundaries, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string1);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));

String string2 = patriciaTrie0.put("}\n", (String) null);
assertNull(string2);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));

patriciaTrie1.decrementSize();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

String string3 = patriciaTrie1.remove((Object) "The offsets and lengths must be at Character boundaries");
assertNull(string3);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Integer integer0 = new Integer(600);
assertNotNull(integer0);
assertEquals(600, (int)integer0);

Integer integer1 = new Integer(1);
assertNotNull(integer1);
assertEquals(1, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.getNearestEntryForKey("}\n", 0);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry0));
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);

Integer integer2 = patriciaTrie2.put("`j5", integer0);
assertNull(integer2);
assertFalse(integer0.equals((Object)integer1));

PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
assertNotNull(patriciaTrie3);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));

PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie1);
assertNotNull(patriciaTrie4);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie4.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

Integer integer3 = new Integer(600);
assertNotNull(integer3);
assertEquals(600, (int)integer3);
assertFalse(integer3.equals((Object)integer1));
assertTrue(integer3.equals((Object)integer0));

Integer integer4 = new Integer(600);
assertNotNull(integer4);
assertEquals(600, (int)integer4);
assertTrue(integer4.equals((Object)integer3));
assertTrue(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer1));

Integer integer5 = new Integer(1);
assertNotNull(integer5);
assertEquals(1, (int)integer5);
assertTrue(integer5.equals((Object)integer1));
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer4, integer5, 600);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertTrue(integer4.equals((Object)integer3));
assertTrue(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer5));
assertTrue(integer5.equals((Object)integer1));
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer0));
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

Integer integer6 = new Integer(600);
assertNotNull(integer6);
assertEquals(600, (int)integer6);
assertTrue(integer6.equals((Object)integer3));
assertFalse(integer6.equals((Object)integer5));
assertTrue(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer0));
assertFalse(integer6.equals((Object)integer1));

Integer integer7 = new Integer(1);
assertNotNull(integer7);
assertEquals(1, (int)integer7);
assertTrue(integer7.equals((Object)integer1));
assertFalse(integer7.equals((Object)integer3));
assertFalse(integer7.equals((Object)integer6));
assertFalse(integer7.equals((Object)integer4));
assertFalse(integer7.equals((Object)integer0));
assertTrue(integer7.equals((Object)integer5));

Integer integer8 = abstractPatriciaTrie_TrieEntry3.setKeyValue(integer6, integer7);
assertNotNull(integer8);
assertEquals(1, (int)integer8);
assertTrue(integer4.equals((Object)integer3));
assertFalse(integer4.equals((Object)integer7));
assertTrue(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer5));
assertTrue(integer4.equals((Object)integer6));
assertTrue(integer5.equals((Object)integer1));
assertTrue(integer5.equals((Object)integer7));
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer6));
assertFalse(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer0));
assertTrue(integer6.equals((Object)integer3));
assertFalse(integer6.equals((Object)integer5));
assertTrue(integer6.equals((Object)integer4));
assertTrue(integer6.equals((Object)integer0));
assertFalse(integer6.equals((Object)integer1));
assertFalse(integer6.equals((Object)integer7));
assertTrue(integer7.equals((Object)integer1));
assertFalse(integer7.equals((Object)integer3));
assertFalse(integer7.equals((Object)integer6));
assertFalse(integer7.equals((Object)integer4));
assertFalse(integer7.equals((Object)integer0));
assertTrue(integer7.equals((Object)integer5));
assertFalse(integer8.equals((Object)integer6));
assertTrue(integer8.equals((Object)integer1));
assertFalse(integer8.equals((Object)integer4));
assertFalse(integer8.equals((Object)integer3));
assertTrue(integer8.equals((Object)integer7));
assertFalse(integer8.equals((Object)integer0));
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
assertFalse(boolean0);
assertTrue(integer4.equals((Object)integer3));
assertFalse(integer4.equals((Object)integer7));
assertTrue(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer8));
assertFalse(integer4.equals((Object)integer5));
assertTrue(integer4.equals((Object)integer6));
assertTrue(integer5.equals((Object)integer1));
assertTrue(integer5.equals((Object)integer7));
assertFalse(integer5.equals((Object)integer4));
assertFalse(integer5.equals((Object)integer6));
assertFalse(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer0));
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());


[MASTER] 19:13:41.627 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_107_1629227621575/org/apache/commons/collections4/trie/AbstractPatriciaTrie_107_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_107_1629227621575/org/apache/commons/collections4/trie/AbstractPatriciaTrie_107_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:41.627 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:41.627 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:41.629 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>>: 124
[MASTER] 19:13:41.630 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_107_1629227621575/org/apache/commons/collections4/trie/AbstractPatriciaTrie_107_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:41.630 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:41.630 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_107_1629227621575/org/apache/commons/collections4/trie/AbstractPatriciaTrie_107_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:41 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_107_tmp__ESTest extends AbstractPatriciaTrie_107_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
30:       assertNull(string0);
31:       
32:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
33:       assertNotNull(patriciaTrie1);
34:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
35:       
36:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
37:       assertNotNull(patriciaTrie2);
38:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
39:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
40:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
41:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
42:       
43:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
44:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
45:       assertNotSame(patriciaTrie0, patriciaTrie1);
46:       assertNotSame(patriciaTrie0, patriciaTrie2);
47:       assertNotSame(patriciaTrie1, patriciaTrie0);
48:       assertNotSame(patriciaTrie1, patriciaTrie2);
49:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
50:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
51:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
52:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
56:       
57:       String string1 = patriciaTrie2.put("Key cannot be null", "The offsets and lengths must be at Character boundaries");
58:       assertNull(string1);
59:       assertNotSame(patriciaTrie0, patriciaTrie1);
60:       assertNotSame(patriciaTrie0, patriciaTrie2);
61:       assertNotSame(patriciaTrie1, patriciaTrie0);
62:       assertNotSame(patriciaTrie1, patriciaTrie2);
63:       assertNotSame(patriciaTrie2, patriciaTrie1);
64:       assertNotSame(patriciaTrie2, patriciaTrie0);
65:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
66:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
67:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
68:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
69:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
70:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
71:       
72:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry((String) null);
73:       assertNull(abstractPatriciaTrie_TrieEntry1);
74:       assertNotSame(patriciaTrie0, patriciaTrie1);
75:       assertNotSame(patriciaTrie0, patriciaTrie2);
76:       assertNotSame(patriciaTrie1, patriciaTrie0);
77:       assertNotSame(patriciaTrie1, patriciaTrie2);
78:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
79:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
80:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
81:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
82:       
83:       String string2 = patriciaTrie0.toString();
84:       assertNotNull(string2);
85:       assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string2);
86:       assertNotSame(patriciaTrie0, patriciaTrie1);
87:       assertNotSame(patriciaTrie0, patriciaTrie2);
88:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
89:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
90:       
91:       String string3 = patriciaTrie2.put("/:", (String) null);
92:       assertNull(string3);
93:       assertNotSame(patriciaTrie0, patriciaTrie1);
94:       assertNotSame(patriciaTrie0, patriciaTrie2);
95:       assertNotSame(patriciaTrie1, patriciaTrie0);
96:       assertNotSame(patriciaTrie1, patriciaTrie2);
97:       assertNotSame(patriciaTrie2, patriciaTrie1);
98:       assertNotSame(patriciaTrie2, patriciaTrie0);
99:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
100:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
101:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
102:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
103:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
104:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
105:       
106:       patriciaTrie0.decrementSize();
107:       assertNotSame(patriciaTrie0, patriciaTrie1);
108:       assertNotSame(patriciaTrie0, patriciaTrie2);
109:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
110:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
111:       
112:       String string4 = patriciaTrie1.remove((Object) "Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n");
113:       assertNull(string4);
114:       assertNotSame(patriciaTrie0, patriciaTrie1);
115:       assertNotSame(patriciaTrie0, patriciaTrie2);
116:       assertNotSame(patriciaTrie1, patriciaTrie0);
117:       assertNotSame(patriciaTrie1, patriciaTrie2);
118:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
119:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
120:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
121:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
122:       
123:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
124:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
125:       assertNotNull(comparator1);
126:       
127:       Integer integer0 = new Integer(600);
128:       assertNotNull(integer0);
129:       assertEquals(600, (int)integer0);
130:       
131:       Integer integer1 = new Integer(1);
132:       assertNotNull(integer1);
133:       assertEquals(1, (int)integer1);
134:       assertFalse(integer1.equals((Object)integer0));
135:       
136:       PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
137:       assertNotNull(patriciaTrie3);
138:       
139:       Integer integer2 = patriciaTrie3.put("=", integer0);
140:       assertNull(integer2);
141:       assertFalse(integer0.equals((Object)integer1));
142:       
143:       PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
144:       assertNotNull(patriciaTrie4);
145:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
146:       
147:       PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>(patriciaTrie2);
148:       assertNotNull(patriciaTrie5);
149:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
150:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
151:       assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
152:       assertFalse(patriciaTrie5.equals((Object)patriciaTrie1));
153:       assertTrue(patriciaTrie5.equals((Object)patriciaTrie2));
154:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
155:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
156:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
157:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
158:       
159:       String string5 = patriciaTrie5.firstKey();
160:       assertNotNull(string5);
161:       assertEquals("/:", string5);
162:       assertNotSame(patriciaTrie0, patriciaTrie1);
163:       assertNotSame(patriciaTrie0, patriciaTrie5);
164:       assertNotSame(patriciaTrie0, patriciaTrie2);
165:       assertNotSame(patriciaTrie5, patriciaTrie2);
166:       assertNotSame(patriciaTrie5, patriciaTrie0);
167:       assertNotSame(patriciaTrie5, patriciaTrie1);
168:       assertNotSame(patriciaTrie1, patriciaTrie5);
169:       assertNotSame(patriciaTrie1, patriciaTrie0);
170:       assertNotSame(patriciaTrie1, patriciaTrie2);
171:       assertNotSame(patriciaTrie2, patriciaTrie5);
172:       assertNotSame(patriciaTrie2, patriciaTrie1);
173:       assertNotSame(patriciaTrie2, patriciaTrie0);
174:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
175:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie5));
176:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
177:       assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
178:       assertFalse(patriciaTrie5.equals((Object)patriciaTrie1));
179:       assertTrue(patriciaTrie5.equals((Object)patriciaTrie2));
180:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie5));
181:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
182:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
183:       assertFalse(string5.equals((Object)string2));
184:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
185:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
186:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie5));
187:       
188:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie6 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
189:       assertNotNull(patriciaTrie6);
190:       
191:       String string6 = patriciaTrie6.previousKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
192:       assertNull(string6);
193:   }
194: }
RegularFileObject[/tmp/EvoSuite_107_1629227621575/org/apache/commons/collections4/trie/AbstractPatriciaTrie_107_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:41 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_107_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_107_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_107_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_107_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:41.634 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
assertNull(string0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
assertNotNull(patriciaTrie2);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie0, patriciaTrie2);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

String string1 = patriciaTrie2.put("Key cannot be null", "The offsets and lengths must be at Character boundaries");
assertNull(string1);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie0, patriciaTrie2);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie1);
assertNotSame(patriciaTrie2, patriciaTrie0);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry((String) null);
assertNull(abstractPatriciaTrie_TrieEntry1);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie0, patriciaTrie2);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));

String string2 = patriciaTrie0.toString();
assertNotNull(string2);
assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string2);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie0, patriciaTrie2);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));

String string3 = patriciaTrie2.put("/:", (String) null);
assertNull(string3);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie0, patriciaTrie2);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie1);
assertNotSame(patriciaTrie2, patriciaTrie0);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));

patriciaTrie0.decrementSize();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie0, patriciaTrie2);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));

String string4 = patriciaTrie1.remove((Object) "Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n");
assertNull(string4);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie0, patriciaTrie2);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Integer integer0 = new Integer(600);
assertNotNull(integer0);
assertEquals(600, (int)integer0);

Integer integer1 = new Integer(1);
assertNotNull(integer1);
assertEquals(1, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie3);

Integer integer2 = patriciaTrie3.put("=", integer0);
assertNull(integer2);
assertFalse(integer0.equals((Object)integer1));

PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
assertNotNull(patriciaTrie4);
assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));

PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>(patriciaTrie2);
assertNotNull(patriciaTrie5);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie5.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie5.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));

String string5 = patriciaTrie5.firstKey();
assertNotNull(string5);
assertEquals("/:", string5);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie0, patriciaTrie5);
assertNotSame(patriciaTrie0, patriciaTrie2);
assertNotSame(patriciaTrie5, patriciaTrie2);
assertNotSame(patriciaTrie5, patriciaTrie0);
assertNotSame(patriciaTrie5, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie5);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie5);
assertNotSame(patriciaTrie2, patriciaTrie1);
assertNotSame(patriciaTrie2, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie0.equals((Object)patriciaTrie5));
assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie5.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie5.equals((Object)patriciaTrie1));
assertTrue(patriciaTrie5.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie5));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertFalse(string5.equals((Object)string2));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
assertTrue(patriciaTrie2.equals((Object)patriciaTrie5));

PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie6 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
assertNotNull(patriciaTrie6);

String string6 = patriciaTrie6.previousKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
assertNull(string6);


[MASTER] 19:13:41.725 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_110_1629227621686/org/apache/commons/collections4/trie/AbstractPatriciaTrie_110_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_110_1629227621686/org/apache/commons/collections4/trie/AbstractPatriciaTrie_110_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:41.725 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:41.725 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:41.726 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>>: 88
[MASTER] 19:13:41.726 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_110_1629227621686/org/apache/commons/collections4/trie/AbstractPatriciaTrie_110_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:41.726 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:41.726 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_110_1629227621686/org/apache/commons/collections4/trie/AbstractPatriciaTrie_110_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:41 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_110_tmp__ESTest extends AbstractPatriciaTrie_110_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "The offsets and lengths must be at Character boundaries");
30:       assertNull(string0);
31:       
32:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
33:       assertNotNull(patriciaTrie1);
34:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
35:       
36:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
37:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
38:       assertNotSame(patriciaTrie0, patriciaTrie1);
39:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
41:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
43:       
44:       String string1 = patriciaTrie1.put("", "`'qY-]t~!|`3l-=DVef");
45:       assertNull(string1);
46:       assertNotSame(patriciaTrie0, patriciaTrie1);
47:       assertNotSame(patriciaTrie1, patriciaTrie0);
48:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
49:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
50:       
51:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("K,_T]K[GiqcY#jly");
52:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
53:       assertNotSame(patriciaTrie0, patriciaTrie1);
54:       assertNotSame(patriciaTrie1, patriciaTrie0);
55:       assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
56:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
57:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
59:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
61:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
62:       
63:       String string2 = patriciaTrie0.toString();
64:       assertNotNull(string2);
65:       assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=The offsets and lengths must be at Character boundaries, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string2);
66:       assertNotSame(patriciaTrie0, patriciaTrie1);
67:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
68:       
69:       String string3 = patriciaTrie0.put("}\n", (String) null);
70:       assertNull(string3);
71:       assertNotSame(patriciaTrie0, patriciaTrie1);
72:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
73:       
74:       patriciaTrie1.decrementSize();
75:       assertNotSame(patriciaTrie0, patriciaTrie1);
76:       assertNotSame(patriciaTrie1, patriciaTrie0);
77:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
78:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
79:       
80:       String string4 = patriciaTrie1.remove((Object) "The offsets and lengths must be at Character boundaries");
81:       assertNull(string4);
82:       assertNotSame(patriciaTrie0, patriciaTrie1);
83:       assertNotSame(patriciaTrie1, patriciaTrie0);
84:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
85:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
86:       
87:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
88:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
89:       assertNotNull(comparator1);
90:       
91:       Integer integer0 = new Integer(600);
92:       assertNotNull(integer0);
93:       assertEquals(600, (int)integer0);
94:       
95:       Integer integer1 = new Integer(1);
96:       assertNotNull(integer1);
97:       assertEquals(1, (int)integer1);
98:       assertFalse(integer1.equals((Object)integer0));
99:       
100:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
101:       assertNotNull(patriciaTrie2);
102:       
103:       Integer integer2 = patriciaTrie2.put("`j5", integer0);
104:       assertNull(integer2);
105:       assertFalse(integer0.equals((Object)integer1));
106:       
107:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.ceilingEntry("`j5");
108:       assertNull(abstractPatriciaTrie_TrieEntry2);
109:       assertNotSame(patriciaTrie0, patriciaTrie1);
110:       assertNotSame(patriciaTrie1, patriciaTrie0);
111:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
112:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
113:       
114:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap", "`j5");
115:       assertNotNull(abstractMap_SimpleEntry0);
116:       
117:       Comparator<Map.Entry<Integer, String>> comparator2 = Map.Entry.comparingByKey();
118:       assertNotNull(comparator2);
119:       
120:       Integer integer3 = new Integer(2092);
121:       assertNotNull(integer3);
122:       assertEquals(2092, (int)integer3);
123:       assertFalse(integer3.equals((Object)integer0));
124:       assertFalse(integer3.equals((Object)integer1));
125:       
126:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Integer>(abstractMap_SimpleEntry0, integer3, 32768);
127:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
128:       assertFalse(integer3.equals((Object)integer0));
129:       assertFalse(integer3.equals((Object)integer1));
130:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
132:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
133:       
134:       boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isExternalNode();
135:       assertTrue(boolean0);
136:       assertFalse(integer3.equals((Object)integer0));
137:       assertFalse(integer3.equals((Object)integer1));
138:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
139:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
140:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
141:   }
142: }
RegularFileObject[/tmp/EvoSuite_110_1629227621686/org/apache/commons/collections4/trie/AbstractPatriciaTrie_110_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:41 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_110_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_110_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_110_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_110_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:41.729 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "The offsets and lengths must be at Character boundaries");
assertNull(string0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

String string1 = patriciaTrie1.put("", "`'qY-]t~!|`3l-=DVef");
assertNull(string1);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("K,_T]K[GiqcY#jly");
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());

String string2 = patriciaTrie0.toString();
assertNotNull(string2);
assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=The offsets and lengths must be at Character boundaries, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string2);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));

String string3 = patriciaTrie0.put("}\n", (String) null);
assertNull(string3);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));

patriciaTrie1.decrementSize();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

String string4 = patriciaTrie1.remove((Object) "The offsets and lengths must be at Character boundaries");
assertNull(string4);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Integer integer0 = new Integer(600);
assertNotNull(integer0);
assertEquals(600, (int)integer0);

Integer integer1 = new Integer(1);
assertNotNull(integer1);
assertEquals(1, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);

Integer integer2 = patriciaTrie2.put("`j5", integer0);
assertNull(integer2);
assertFalse(integer0.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.ceilingEntry("`j5");
assertNull(abstractPatriciaTrie_TrieEntry2);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap", "`j5");
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Map.Entry<Integer, String>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

Integer integer3 = new Integer(2092);
assertNotNull(integer3);
assertEquals(2092, (int)integer3);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Integer>(abstractMap_SimpleEntry0, integer3, 32768);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isExternalNode();
assertTrue(boolean0);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());


[MASTER] 19:13:41.796 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_111_1629227621755/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_111_1629227621755/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:41.796 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:41.799 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:41.800 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>>: 89
[MASTER] 19:13:41.800 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_111_1629227621755/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:41.801 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:41.801 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_111_1629227621755/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:41 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_111_tmp__ESTest extends AbstractPatriciaTrie_111_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "The offsets and lengths must be at Character boundaries");
31:       assertNull(string0);
32:       
33:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
34:       assertNotNull(patriciaTrie1);
35:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
36:       
37:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
38:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
39:       assertNotSame(patriciaTrie0, patriciaTrie1);
40:       assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
41:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       
45:       String string1 = patriciaTrie1.put("", "`'qY-]t~!|`3l-=DVef");
46:       assertNull(string1);
47:       assertNotSame(patriciaTrie0, patriciaTrie1);
48:       assertNotSame(patriciaTrie1, patriciaTrie0);
49:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
50:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
51:       
52:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("K,_T]K[GiqcY#jly");
53:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
54:       assertNotSame(patriciaTrie0, patriciaTrie1);
55:       assertNotSame(patriciaTrie1, patriciaTrie0);
56:       assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
57:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
58:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
60:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
62:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
63:       
64:       String string2 = patriciaTrie0.toString();
65:       assertNotNull(string2);
66:       assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=The offsets and lengths must be at Character boundaries, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string2);
67:       assertNotSame(patriciaTrie0, patriciaTrie1);
68:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
69:       
70:       String string3 = patriciaTrie0.put("}\n", (String) null);
71:       assertNull(string3);
72:       assertNotSame(patriciaTrie0, patriciaTrie1);
73:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
74:       
75:       patriciaTrie1.decrementSize();
76:       assertNotSame(patriciaTrie0, patriciaTrie1);
77:       assertNotSame(patriciaTrie1, patriciaTrie0);
78:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
79:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
80:       
81:       String string4 = patriciaTrie1.remove((Object) "The offsets and lengths must be at Character boundaries");
82:       assertNull(string4);
83:       assertNotSame(patriciaTrie0, patriciaTrie1);
84:       assertNotSame(patriciaTrie1, patriciaTrie0);
85:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
86:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
87:       
88:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
89:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
90:       assertNotNull(comparator1);
91:       
92:       Integer integer0 = new Integer(600);
93:       assertNotNull(integer0);
94:       assertEquals(600, (int)integer0);
95:       
96:       Integer integer1 = new Integer(1);
97:       assertNotNull(integer1);
98:       assertEquals(1, (int)integer1);
99:       assertFalse(integer1.equals((Object)integer0));
100:       
101:       SortedMap<String, String> sortedMap0 = patriciaTrie1.subMap("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet");
102:       assertNotNull(sortedMap0);
103:       assertNotSame(patriciaTrie0, patriciaTrie1);
104:       assertNotSame(patriciaTrie1, patriciaTrie0);
105:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
106:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
107:       assertFalse(sortedMap0.isEmpty());
108:       assertEquals(2, sortedMap0.size());
109:       
110:       String string5 = patriciaTrie0.lastKey();
111:       assertNotNull(string5);
112:       assertEquals("}\n", string5);
113:       assertNotSame(patriciaTrie0, patriciaTrie1);
114:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
115:       assertFalse(string5.equals((Object)string2));
116:   }
117: }
RegularFileObject[/tmp/EvoSuite_111_1629227621755/org/apache/commons/collections4/trie/AbstractPatriciaTrie_111_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:41 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_111_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_111_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_111_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_111_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:41.803 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("`'qY-]t~!|`3l-=DVef", "The offsets and lengths must be at Character boundaries");
assertNull(string0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

String string1 = patriciaTrie1.put("", "`'qY-]t~!|`3l-=DVef");
assertNull(string1);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("K,_T]K[GiqcY#jly");
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());

String string2 = patriciaTrie0.toString();
assertNotNull(string2);
assertEquals("Trie[1]={\n  Entry(key=`'qY-]t~!|`3l-=DVef [9], value=The offsets and lengths must be at Character boundaries, parent=ROOT, left=ROOT, right=`'qY-]t~!|`3l-=DVef [9], predecessor=`'qY-]t~!|`3l-=DVef [9])\n}\n", string2);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));

String string3 = patriciaTrie0.put("}\n", (String) null);
assertNull(string3);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));

patriciaTrie1.decrementSize();
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

String string4 = patriciaTrie1.remove((Object) "The offsets and lengths must be at Character boundaries");
assertNull(string4);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Integer integer0 = new Integer(600);
assertNotNull(integer0);
assertEquals(600, (int)integer0);

Integer integer1 = new Integer(1);
assertNotNull(integer1);
assertEquals(1, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

SortedMap<String, String> sortedMap0 = patriciaTrie1.subMap("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet");
assertNotNull(sortedMap0);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
assertFalse(sortedMap0.isEmpty());
assertEquals(2, sortedMap0.size());

String string5 = patriciaTrie0.lastKey();
assertNotNull(string5);
assertEquals("}\n", string5);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
assertFalse(string5.equals((Object)string2));


[MASTER] 19:13:42.083 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_118_1629227622058/org/apache/commons/collections4/trie/AbstractPatriciaTrie_118_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_118_1629227622058/org/apache/commons/collections4/trie/AbstractPatriciaTrie_118_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:42.084 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:42.084 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:42.084 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>>: 59
[MASTER] 19:13:42.084 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_118_1629227622058/org/apache/commons/collections4/trie/AbstractPatriciaTrie_118_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:42.084 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:42.085 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_118_1629227622058/org/apache/commons/collections4/trie/AbstractPatriciaTrie_118_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:42 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Collection;
14: import java.util.Comparator;
15: import java.util.HashMap;
16: import java.util.Map;
17: import java.util.NoSuchElementException;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_118_tmp__ESTest extends AbstractPatriciaTrie_118_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
33:       assertNotNull(patriciaTrie1);
34:       
35:       Integer integer0 = new Integer((-1623));
36:       assertNotNull(integer0);
37:       assertEquals((-1623), (int)integer0);
38:       
39:       Integer integer1 = patriciaTrie1.put("", integer0);
40:       assertNull(integer1);
41:       
42:       Collection<Integer> collection0 = patriciaTrie1.values();
43:       assertNotNull(collection0);
44:       assertTrue(collection0.contains(integer0));
45:       
46:       Integer integer2 = patriciaTrie1.put("Xo''0Ub;^u9D}EN4E?r", integer0);
47:       assertNull(integer2);
48:       
49:       Integer integer3 = new Integer((-1623));
50:       assertNotNull(integer3);
51:       assertEquals((-1623), (int)integer3);
52:       assertTrue(integer3.equals((Object)integer0));
53:       
54:       Integer integer4 = patriciaTrie1.putIfAbsent("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", integer3);
55:       assertNull(integer4);
56:       assertTrue(integer3.equals((Object)integer0));
57:       
58:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
59:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
60:       assertNotNull(comparator1);
61:       
62:       Integer integer5 = new Integer(11);
63:       assertNotNull(integer5);
64:       assertEquals(11, (int)integer5);
65:       assertFalse(integer5.equals((Object)integer0));
66:       assertFalse(integer5.equals((Object)integer3));
67:       
68:       Integer integer6 = new Integer(793);
69:       assertNotNull(integer6);
70:       assertEquals(793, (int)integer6);
71:       assertFalse(integer6.equals((Object)integer5));
72:       assertFalse(integer6.equals((Object)integer0));
73:       assertFalse(integer6.equals((Object)integer3));
74:       
75:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
76:       assertNotNull(patriciaTrie2);
77:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
78:       
79:       Integer integer7 = new Integer(480);
80:       assertNotNull(integer7);
81:       assertEquals(480, (int)integer7);
82:       assertFalse(integer7.equals((Object)integer0));
83:       assertFalse(integer7.equals((Object)integer5));
84:       assertFalse(integer7.equals((Object)integer6));
85:       assertFalse(integer7.equals((Object)integer3));
86:       
87:       Integer integer8 = patriciaTrie1.put("Cannot determine prefix outside of Character boundaries", integer7);
88:       assertNull(integer8);
89:       assertNotSame(patriciaTrie1, patriciaTrie2);
90:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
91:       assertFalse(integer7.equals((Object)integer0));
92:       assertFalse(integer7.equals((Object)integer5));
93:       assertFalse(integer7.equals((Object)integer6));
94:       assertFalse(integer7.equals((Object)integer3));
95:       
96:       PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie1);
97:       assertNotNull(patriciaTrie3);
98:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
99:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
100:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
101:       
102:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
103:       assertNotNull(hashMap0);
104:       assertEquals(0, hashMap0.size());
105:       assertTrue(hashMap0.isEmpty());
106:       
107:       PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(hashMap0);
108:       assertNotNull(patriciaTrie4);
109:       assertEquals(0, hashMap0.size());
110:       assertTrue(hashMap0.isEmpty());
111:       
112:       // Undeclared exception!
113:       try { 
114:         patriciaTrie4.firstKey();
115:         fail("Expecting exception: NoSuchElementException");
116:       
117:       } catch(NoSuchElementException e) {
118:          //
119:          // no message in exception (getMessage() returned null)
120:          //
121:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
122:       }
123:   }
124: }
RegularFileObject[/tmp/EvoSuite_118_1629227622058/org/apache/commons/collections4/trie/AbstractPatriciaTrie_118_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:42 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_118_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_118_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_118_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_118_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:42.085 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Integer integer0 = new Integer((-1623));
assertNotNull(integer0);
assertEquals((-1623), (int)integer0);

Integer integer1 = patriciaTrie1.put("", integer0);
assertNull(integer1);

Collection<Integer> collection0 = patriciaTrie1.values();
assertNotNull(collection0);
assertTrue(collection0.contains(integer0));

Integer integer2 = patriciaTrie1.put("Xo''0Ub;^u9D}EN4E?r", integer0);
assertNull(integer2);

Integer integer3 = new Integer((-1623));
assertNotNull(integer3);
assertEquals((-1623), (int)integer3);
assertTrue(integer3.equals((Object)integer0));

Integer integer4 = patriciaTrie1.putIfAbsent("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", integer3);
assertNull(integer4);
assertTrue(integer3.equals((Object)integer0));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Integer integer5 = new Integer(11);
assertNotNull(integer5);
assertEquals(11, (int)integer5);
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer3));

Integer integer6 = new Integer(793);
assertNotNull(integer6);
assertEquals(793, (int)integer6);
assertFalse(integer6.equals((Object)integer5));
assertFalse(integer6.equals((Object)integer0));
assertFalse(integer6.equals((Object)integer3));

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);
assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));

Integer integer7 = new Integer(480);
assertNotNull(integer7);
assertEquals(480, (int)integer7);
assertFalse(integer7.equals((Object)integer0));
assertFalse(integer7.equals((Object)integer5));
assertFalse(integer7.equals((Object)integer6));
assertFalse(integer7.equals((Object)integer3));

Integer integer8 = patriciaTrie1.put("Cannot determine prefix outside of Character boundaries", integer7);
assertNull(integer8);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertFalse(integer7.equals((Object)integer0));
assertFalse(integer7.equals((Object)integer5));
assertFalse(integer7.equals((Object)integer6));
assertFalse(integer7.equals((Object)integer3));

PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie1);
assertNotNull(patriciaTrie3);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));

HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertNotNull(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(hashMap0);
assertNotNull(patriciaTrie4);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());

patriciaTrie4.firstKey();

[MASTER] 19:13:42.154 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_121_1629227622131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_121_1629227622131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:42.155 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:42.155 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:42.155 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>,java.lang.String>,java.lang.Integer>>: 87
[MASTER] 19:13:42.155 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_121_1629227622131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:42.155 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:42.156 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_121_1629227622131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:42 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_121_tmp__ESTest extends AbstractPatriciaTrie_121_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
31:       assertNotNull(patriciaTrie1);
32:       
33:       Integer integer0 = new Integer((-1137));
34:       assertNotNull(integer0);
35:       assertEquals((-1137), (int)integer0);
36:       
37:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1137));
38:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
40:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
42:       
43:       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0);
44:       assertNotNull(abstractMap_SimpleImmutableEntry0);
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       
49:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>(integer0, abstractMap_SimpleImmutableEntry0, (-2404));
50:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
52:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
56:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
57:       
58:       Comparator<Map.Entry<Comparable<Object>, AbstractMap.SimpleEntry<Comparable<String>, Integer>>> comparator0 = Map.Entry.comparingByKey();
59:       assertNotNull(comparator0);
60:       
61:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
62:       assertNotNull(string0);
63:       assertEquals("Entry(key=-1137 [-2404], value==-1137, parent=null, left=-1137 [-2404], right=null, predecessor=-1137 [-2404])", string0);
64:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
65:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
70:       
71:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
72:       assertNotNull(patriciaTrie2);
73:       
74:       String string1 = patriciaTrie2.selectKey("dCD]-p>f");
75:       assertNull(string1);
76:       
77:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry1);
78:       assertNotNull(abstractMap_SimpleImmutableEntry1);
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
80:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
84:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
85:       
86:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
87:       Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>>) comparator1);
88:       assertNotNull(comparator2);
89:       
90:       Object object0 = new Object();
91:       assertNotNull(object0);
92:       
93:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, object0);
94:       assertNotNull(abstractMap_SimpleImmutableEntry2);
95:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
96:       
97:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry3 = patriciaTrie2.put("", abstractMap_SimpleImmutableEntry2);
98:       assertNull(abstractMap_SimpleImmutableEntry3);
99:       assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry1);
100:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
101:       
102:       // Undeclared exception!
103:       try { 
104:         patriciaTrie2.subtree("must have come from somewhere!", (-1137), 32);
105:         fail("Expecting exception: StringIndexOutOfBoundsException");
106:       
107:       } catch(StringIndexOutOfBoundsException e) {
108:       }
109:   }
110: }
RegularFileObject[/tmp/EvoSuite_121_1629227622131/org/apache/commons/collections4/trie/AbstractPatriciaTrie_121_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:42 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_121_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_121_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:42.157 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Integer integer0 = new Integer((-1137));
assertNotNull(integer0);
assertEquals((-1137), (int)integer0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1137));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>(integer0, abstractMap_SimpleImmutableEntry0, (-2404));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Comparator<Map.Entry<Comparable<Object>, AbstractMap.SimpleEntry<Comparable<String>, Integer>>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertNotNull(string0);
assertEquals("Entry(key=-1137 [-2404], value==-1137, parent=null, left=-1137 [-2404], right=null, predecessor=-1137 [-2404])", string0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
assertNotNull(patriciaTrie2);

String string1 = patriciaTrie2.selectKey("dCD]-p>f");
assertNull(string1);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractPatriciaTrie_TrieEntry1);
assertNotNull(abstractMap_SimpleImmutableEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>> comparator2 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>>) comparator1);
assertNotNull(comparator2);

Object object0 = new Object();
assertNotNull(object0);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, object0);
assertNotNull(abstractMap_SimpleImmutableEntry2);
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry3 = patriciaTrie2.put("", abstractMap_SimpleImmutableEntry2);
assertNull(abstractMap_SimpleImmutableEntry3);
assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry1);
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));

patriciaTrie2.subtree("must have come from somewhere!", (-1137), 32);

[MASTER] 19:13:42.291 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_126_1629227622264/org/apache/commons/collections4/trie/AbstractPatriciaTrie_126_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_126_1629227622264/org/apache/commons/collections4/trie/AbstractPatriciaTrie_126_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:42.291 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:42.291 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:42.291 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Object>,java.lang.String>,java.lang.Integer>>: 50
[MASTER] 19:13:42.291 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_126_1629227622264/org/apache/commons/collections4/trie/AbstractPatriciaTrie_126_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:42.291 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:42.292 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_126_1629227622264/org/apache/commons/collections4/trie/AbstractPatriciaTrie_126_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:42 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Collection;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_126_tmp__ESTest extends AbstractPatriciaTrie_126_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       String string0 = patriciaTrie0.put(";k", ";k");
31:       assertNull(string0);
32:       
33:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("", ";k");
34:       assertNotNull(abstractMap_SimpleImmutableEntry0);
35:       
36:       AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
37:       assertNotNull(abstractMap_SimpleImmutableEntry1);
38:       
39:       Integer integer0 = new Integer(2);
40:       assertNotNull(integer0);
41:       assertEquals(2, (int)integer0);
42:       
43:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, patriciaTrie0);
44:       assertNotNull(abstractMap_SimpleImmutableEntry2);
45:       
46:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleImmutableEntry2);
47:       assertNotNull(abstractMap_SimpleImmutableEntry3);
48:       
49:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
50:       Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>>) comparator0);
51:       assertNotNull(comparator1);
52:       
53:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
54:       assertNotNull(patriciaTrie1);
55:       
56:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry4 = patriciaTrie1.put("must have come from somewhere!", abstractMap_SimpleImmutableEntry3);
57:       assertNull(abstractMap_SimpleImmutableEntry4);
58:       
59:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree("J[t`!:^Zmn6-[;ZL", 32, 32);
60:       assertNull(abstractPatriciaTrie_TrieEntry0);
61:       
62:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>(patriciaTrie1);
63:       assertNotNull(patriciaTrie2);
64:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
65:       
66:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
67:       assertNotNull(patriciaTrie3);
68:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
69:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
70:       
71:       Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>> collection0 = patriciaTrie3.values();
72:       assertNotNull(collection0);
73:       assertFalse(collection0.contains(abstractMap_SimpleImmutableEntry3));
74:       assertNotSame(patriciaTrie3, patriciaTrie2);
75:       assertNotSame(patriciaTrie3, patriciaTrie1);
76:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
77:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
78:       
79:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
80:       assertNotNull(patriciaTrie4);
81:       
82:       AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry5 = patriciaTrie4.get((Object) null);
83:       assertNull(abstractMap_SimpleImmutableEntry5);
84:       
85:       String string1 = patriciaTrie4.previousKey("b|G^=9Z");
86:       assertNull(string1);
87:       
88:       PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(patriciaTrie4);
89:       assertNotNull(patriciaTrie5);
90:       
91:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie5.floorEntry("must have come from somewhere!");
92:       assertNull(abstractPatriciaTrie_TrieEntry1);
93:   }
94: }
RegularFileObject[/tmp/EvoSuite_126_1629227622264/org/apache/commons/collections4/trie/AbstractPatriciaTrie_126_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:42 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_126_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_126_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_126_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_126_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:42.293 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put(";k", ";k");
assertNull(string0);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("", ";k");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
assertNotNull(abstractMap_SimpleImmutableEntry1);

Integer integer0 = new Integer(2);
assertNotNull(integer0);
assertEquals(2, (int)integer0);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer0, patriciaTrie0);
assertNotNull(abstractMap_SimpleImmutableEntry2);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleImmutableEntry2);
assertNotNull(abstractMap_SimpleImmutableEntry3);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>>) comparator0);
assertNotNull(comparator1);

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
assertNotNull(patriciaTrie1);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry4 = patriciaTrie1.put("must have come from somewhere!", abstractMap_SimpleImmutableEntry3);
assertNull(abstractMap_SimpleImmutableEntry4);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree("J[t`!:^Zmn6-[;ZL", 32, 32);
assertNull(abstractPatriciaTrie_TrieEntry0);

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>(patriciaTrie1);
assertNotNull(patriciaTrie2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
assertNotNull(patriciaTrie3);
assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));

Collection<AbstractMap.SimpleImmutableEntry<Integer, Object>> collection0 = patriciaTrie3.values();
assertNotNull(collection0);
assertFalse(collection0.contains(abstractMap_SimpleImmutableEntry3));
assertNotSame(patriciaTrie3, patriciaTrie2);
assertNotSame(patriciaTrie3, patriciaTrie1);
assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));

PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
assertNotNull(patriciaTrie4);

AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry5 = patriciaTrie4.get((Object) null);
assertNull(abstractMap_SimpleImmutableEntry5);

String string1 = patriciaTrie4.previousKey("b|G^=9Z");
assertNull(string1);

PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(patriciaTrie4);
assertNotNull(patriciaTrie5);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie5.floorEntry("must have come from somewhere!");
assertNull(abstractPatriciaTrie_TrieEntry1);


[MASTER] 19:13:42.430 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_130_1629227622399/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_130_1629227622399/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:42.431 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:42.431 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:42.432 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleEntry,java.lang.String>,java.lang.String>,java.lang.Integer>>: 64
[MASTER] 19:13:42.432 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_130_1629227622399/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:42.432 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:42.433 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_130_1629227622399/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:42 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_130_tmp__ESTest extends AbstractPatriciaTrie_130_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       String string0 = patriciaTrie0.selectKey(">gA (.%_cp-)");
31:       assertNull(string0);
32:       
33:       String string1 = patriciaTrie0.selectKey("");
34:       assertNull(string1);
35:       
36:       String string2 = patriciaTrie0.replace((String) null, (String) null);
37:       assertNull(string2);
38:       
39:       String string3 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
40:       assertNull(string3);
41:       
42:       String string4 = patriciaTrie0.put("`", "");
43:       assertNull(string4);
44:       
45:       String string5 = patriciaTrie0.put("D\"[", "D\"[");
46:       assertNull(string5);
47:       
48:       SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
49:       assertNotNull(sortedMap0);
50:       assertFalse(sortedMap0.isEmpty());
51:       assertEquals(2, sortedMap0.size());
52:       
53:       Integer integer0 = new Integer((-1780));
54:       assertNotNull(integer0);
55:       assertEquals((-1780), (int)integer0);
56:       
57:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1780));
58:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
62:       
63:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
64:       Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, String>, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, String>, String>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
65:       assertNotNull(comparator1);
66:       
67:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1780));
68:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
70:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
72:       
73:       Comparator<Map.Entry<Object, String>> comparator2 = Map.Entry.comparingByValue();
74:       assertNotNull(comparator2);
75:       
76:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
78:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
81:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
83:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
86:       
87:       Integer integer1 = abstractPatriciaTrie_TrieEntry0.setKeyValue((String) null, integer0);
88:       assertNotNull(integer1);
89:       assertEquals((-1780), (int)integer1);
90:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
91:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
92:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
93:       
94:       abstractPatriciaTrie_TrieEntry0.value = integer0;
95:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
96:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
97:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
98:       
99:       Comparator<Map.Entry<Integer, Object>> comparator3 = Map.Entry.comparingByKey();
100:       assertNotNull(comparator3);
101:       
102:       String string6 = abstractPatriciaTrie_TrieEntry0.toString();
103:       assertNotNull(string6);
104:       assertEquals("Entry(key=null [-1780], value=-1780, parent= [-1780], left=null [-1780], right=null, predecessor=null [-1780])", string6);
105:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
106:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
107:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
108:       
109:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", (-1));
110:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
111:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
113:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
114:       
115:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("`", "6ihmVAvA", (-1));
116:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
117:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
118:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
120:       
121:       abstractPatriciaTrie_TrieEntry3.right = abstractPatriciaTrie_TrieEntry2;
122:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
123:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
124:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
125:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
126:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
128:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
129:       assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());
130:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());
131:       
132:       String string7 = abstractPatriciaTrie_TrieEntry3.setValue("NrsvlE'gK");
133:       assertNotNull(string7);
134:       assertEquals("6ihmVAvA", string7);
135:       assertFalse(string7.equals((Object)string6));
136:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
137:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
138:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
139:       
140:       abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry3;
141:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
142:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
143:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
144:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
145:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
146:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
148:       assertTrue(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
149:       assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
150:       
151:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry2.predecessor;
152:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
153:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
154:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
155:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
156:       
157:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry4);
158:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
159:       assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry5);
160:       assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
161:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
162:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
163:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
164:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
165:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
166:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
167:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
168:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
169:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
170:   }
171: }
RegularFileObject[/tmp/EvoSuite_130_1629227622399/org/apache/commons/collections4/trie/AbstractPatriciaTrie_130_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:42 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_130_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_130_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_130_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_130_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:42.435 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.selectKey(">gA (.%_cp-)");
assertNull(string0);

String string1 = patriciaTrie0.selectKey("");
assertNull(string1);

String string2 = patriciaTrie0.replace((String) null, (String) null);
assertNull(string2);

String string3 = patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
assertNull(string3);

String string4 = patriciaTrie0.put("`", "");
assertNull(string4);

String string5 = patriciaTrie0.put("D\"[", "D\"[");
assertNull(string5);

SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
assertNotNull(sortedMap0);
assertFalse(sortedMap0.isEmpty());
assertEquals(2, sortedMap0.size());

Integer integer0 = new Integer((-1780));
assertNotNull(integer0);
assertEquals((-1780), (int)integer0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1780));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, String>, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, String>, String>, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1780));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

Comparator<Map.Entry<Object, String>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());

Integer integer1 = abstractPatriciaTrie_TrieEntry0.setKeyValue((String) null, integer0);
assertNotNull(integer1);
assertEquals((-1780), (int)integer1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

abstractPatriciaTrie_TrieEntry0.value = integer0;
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Map.Entry<Integer, Object>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

String string6 = abstractPatriciaTrie_TrieEntry0.toString();
assertNotNull(string6);
assertEquals("Entry(key=null [-1780], value=-1780, parent= [-1780], left=null [-1780], right=null, predecessor=null [-1780])", string6);
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("`", "6ihmVAvA", (-1));
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

abstractPatriciaTrie_TrieEntry3.right = abstractPatriciaTrie_TrieEntry2;
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());

String string7 = abstractPatriciaTrie_TrieEntry3.setValue("NrsvlE'gK");
assertNotNull(string7);
assertEquals("6ihmVAvA", string7);
assertFalse(string7.equals((Object)string6));
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry3;
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry2.predecessor;
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry4);
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry5);
assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());


[MASTER] 19:13:43.898 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_166_1629227623848/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_166_1629227623848/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:43.899 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:43.899 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:43.899 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>>: 113
[MASTER] 19:13:43.899 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_166_1629227623848/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:43.899 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:43.900 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_166_1629227623848/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:43 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.SortedMap;
16: import java.util.function.BiFunction;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_166_tmp__ESTest extends AbstractPatriciaTrie_166_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
30:       assertNotNull(patriciaTrie0);
31:       
32:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
33:       assertNotNull(patriciaTrie1);
34:       
35:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
36:       assertNotNull(patriciaTrie2);
37:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
38:       
39:       String string0 = patriciaTrie1.put("", "");
40:       assertNull(string0);
41:       assertNotSame(patriciaTrie1, patriciaTrie2);
42:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
43:       
44:       String string1 = patriciaTrie1.put("3tT(X$5[i^t*[O.7yt", "3tT(X$5[i^t*[O.7yt");
45:       assertNull(string1);
46:       assertNotSame(patriciaTrie1, patriciaTrie2);
47:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
48:       
49:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("3tT(X$5[i^t*[O.7yt");
50:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
51:       assertNotSame(patriciaTrie1, patriciaTrie2);
52:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
54:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
56:       
57:       int int0 = patriciaTrie0.bitsPerElement();
58:       assertEquals(16, int0);
59:       
60:       String string2 = patriciaTrie2.put("", "3tT(X$5[i^t*[O.7yt");
61:       assertNull(string2);
62:       assertNotSame(patriciaTrie1, patriciaTrie2);
63:       assertNotSame(patriciaTrie2, patriciaTrie1);
64:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
65:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
66:       
67:       String string3 = patriciaTrie1.lastKey();
68:       assertNotNull(string3);
69:       assertEquals("3tT(X$5[i^t*[O.7yt", string3);
70:       assertNotSame(patriciaTrie1, patriciaTrie2);
71:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
72:       
73:       SortedMap<String, String> sortedMap0 = patriciaTrie1.prefixMap((String) null);
74:       assertNotNull(sortedMap0);
75:       assertNotSame(patriciaTrie1, patriciaTrie2);
76:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
77:       assertEquals(2, sortedMap0.size());
78:       assertFalse(sortedMap0.isEmpty());
79:       
80:       String string4 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
81:       assertNull(string4);
82:       assertNotSame(patriciaTrie1, patriciaTrie2);
83:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
84:       
85:       String string5 = patriciaTrie2.replace("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "");
86:       assertNull(string5);
87:       assertNotSame(patriciaTrie1, patriciaTrie2);
88:       assertNotSame(patriciaTrie2, patriciaTrie1);
89:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
90:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
91:       
92:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
93:       assertNull(abstractPatriciaTrie_TrieEntry1);
94:       assertNotSame(patriciaTrie1, patriciaTrie2);
95:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
96:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
97:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
99:       
100:       Integer integer0 = new Integer(1);
101:       assertNotNull(integer0);
102:       assertEquals(1, (int)integer0);
103:       assertFalse(integer0.equals((Object)int0));
104:       
105:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 16);
106:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
107:       assertFalse(integer0.equals((Object)int0));
108:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
109:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
110:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
111:       
112:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
113:       Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
114:       assertNotNull(comparator1);
115:       
116:       Comparator<Map.Entry<Integer, Object>> comparator2 = Map.Entry.comparingByKey();
117:       assertNotNull(comparator2);
118:       
119:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry2);
120:       assertNull(abstractPatriciaTrie_TrieEntry3);
121:       assertFalse(integer0.equals((Object)int0));
122:       assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
123:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
124:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
125:       
126:       BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
127:       String string6 = patriciaTrie2.merge("6C_E", "6C_E", biFunction0);
128:       assertNotNull(string6);
129:       assertEquals("6C_E", string6);
130:       assertNotSame(patriciaTrie1, patriciaTrie2);
131:       assertNotSame(patriciaTrie2, patriciaTrie1);
132:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
133:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
134:       assertFalse(string6.equals((Object)string3));
135:       
136:       SortedMap<String, String> sortedMap1 = patriciaTrie2.headMap("6C_E");
137:       assertNotNull(sortedMap1);
138:       assertNotSame(patriciaTrie1, patriciaTrie2);
139:       assertNotSame(patriciaTrie2, patriciaTrie1);
140:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
141:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
142:       assertFalse(sortedMap1.equals((Object)sortedMap0));
143:       assertEquals(1, sortedMap1.size());
144:       assertFalse(sortedMap1.isEmpty());
145:       
146:       // Undeclared exception!
147:       try { 
148:         patriciaTrie2.containsKey(patriciaTrie1);
149:         fail("Expecting exception: ClassCastException");
150:       
151:       } catch(ClassCastException e) {
152:          //
153:          // no message in exception (getMessage() returned null)
154:          //
155:       }
156:   }
157: }
RegularFileObject[/tmp/EvoSuite_166_1629227623848/org/apache/commons/collections4/trie/AbstractPatriciaTrie_166_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:43 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_166_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_166_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_166_tmp__ESTest_scaffolding.class.getClassLoader()));
109:     mock(Class.forName("java.util.function.BiFunction", false, AbstractPatriciaTrie_166_tmp__ESTest_scaffolding.class.getClassLoader()));
110:   }
111: 
112:   private static void resetClasses() {
113:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_166_tmp__ESTest_scaffolding.class.getClassLoader()); 
114: 
115:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
118:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
129:       "org.apache.commons.collections4.trie.PatriciaTrie",
130:       "org.apache.commons.collections4.trie.KeyAnalyzer",
131:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
139:     );
140:   }
141: }

[MASTER] 19:13:43.902 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
assertNotNull(patriciaTrie2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));

String string0 = patriciaTrie1.put("", "");
assertNull(string0);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));

String string1 = patriciaTrie1.put("3tT(X$5[i^t*[O.7yt", "3tT(X$5[i^t*[O.7yt");
assertNull(string1);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("3tT(X$5[i^t*[O.7yt");
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

int int0 = patriciaTrie0.bitsPerElement();
assertEquals(16, int0);

String string2 = patriciaTrie2.put("", "3tT(X$5[i^t*[O.7yt");
assertNull(string2);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie1);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));

String string3 = patriciaTrie1.lastKey();
assertNotNull(string3);
assertEquals("3tT(X$5[i^t*[O.7yt", string3);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));

SortedMap<String, String> sortedMap0 = patriciaTrie1.prefixMap((String) null);
assertNotNull(sortedMap0);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertEquals(2, sortedMap0.size());
assertFalse(sortedMap0.isEmpty());

String string4 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
assertNull(string4);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));

String string5 = patriciaTrie2.replace("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "");
assertNull(string5);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie1);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertNull(abstractPatriciaTrie_TrieEntry1);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

Integer integer0 = new Integer(1);
assertNotNull(integer0);
assertEquals(1, (int)integer0);
assertFalse(integer0.equals((Object)int0));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 16);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(integer0.equals((Object)int0));
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Comparator<Map.Entry<Integer, Object>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry2);
assertNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(integer0.equals((Object)int0));
assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());

BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
String string6 = patriciaTrie2.merge("6C_E", "6C_E", biFunction0);
assertNotNull(string6);
assertEquals("6C_E", string6);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie1);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
assertFalse(string6.equals((Object)string3));

SortedMap<String, String> sortedMap1 = patriciaTrie2.headMap("6C_E");
assertNotNull(sortedMap1);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie1);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
assertFalse(sortedMap1.equals((Object)sortedMap0));
assertEquals(1, sortedMap1.size());
assertFalse(sortedMap1.isEmpty());

patriciaTrie2.containsKey(patriciaTrie1);

[MASTER] 19:13:44.299 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_177_1629227624249/org/apache/commons/collections4/trie/AbstractPatriciaTrie_177_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_177_1629227624249/org/apache/commons/collections4/trie/AbstractPatriciaTrie_177_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:44.305 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:44.305 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:44.305 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>>: 53
[MASTER] 19:13:44.305 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_177_1629227624249/org/apache/commons/collections4/trie/AbstractPatriciaTrie_177_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:44.305 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:44.306 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_177_1629227624249/org/apache/commons/collections4/trie/AbstractPatriciaTrie_177_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:44 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import java.util.NoSuchElementException;
17: import java.util.SortedMap;
18: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
19: import org.apache.commons.collections4.trie.PatriciaTrie;
20: import org.evosuite.runtime.EvoRunner;
21: import org.evosuite.runtime.EvoRunnerParameters;
22: import org.evosuite.runtime.ViolatedAssumptionAnswer;
23: import org.junit.runner.RunWith;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
26: public class AbstractPatriciaTrie_177_tmp__ESTest extends AbstractPatriciaTrie_177_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object>((Comparable<Object>) null, (Object) null, 230);
31:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
33:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
35:       
36:       abstractPatriciaTrie_TrieEntry0.value = (Object) "";
37:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
38:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
40:       
41:       Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
42:       assertNotNull(comparator0);
43:       
44:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
45:       assertNotNull(string0);
46:       assertEquals("Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230])", string0);
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
50:       
51:       String string1 = "predecessor=";
52:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
53:       Comparator<Map.Entry<String, Object>> comparator2 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
54:       assertNotNull(comparator2);
55:       
56:       int int0 = 416;
57:       abstractPatriciaTrie_TrieEntry0.key = null;
58:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
59:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
61:       
62:       abstractPatriciaTrie_TrieEntry0.key = null;
63:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
64:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       
67:       AbstractPatriciaTrie.TrieEntry<Comparable<String>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, String>("Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230])", "predecessor=", 416);
68:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
72:       
73:       boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals((Object) null);
74:       assertFalse(boolean0);
75:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
78:       
79:       String string2 = abstractPatriciaTrie_TrieEntry1.toString();
80:       assertNotNull(string2);
81:       assertEquals("Entry(key=Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230]) [416], value=predecessor=, parent=null, left=Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230]) [416], right=null, predecessor=Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230]) [416])", string2);
82:       assertFalse(string2.equals((Object)string0));
83:       assertFalse(string2.equals((Object)string1));
84:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
87:       
88:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
89:       assertNotNull(patriciaTrie0);
90:       
91:       Integer integer0 = null;
92:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0, (Integer) null, 0);
93:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
94:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
95:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
96:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
97:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
99:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
100:       
101:       String string3 = abstractPatriciaTrie_TrieEntry2.toString();
102:       assertNotNull(string3);
103:       assertEquals("Entry(key=Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230]) [0], value=null, parent=null, left=Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230]) [0], right=null, predecessor=Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230]) [0])", string3);
104:       assertFalse(string3.equals((Object)string2));
105:       assertFalse(string3.equals((Object)string1));
106:       assertFalse(string3.equals((Object)string0));
107:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
108:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
109:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
110:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
112:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
113:       
114:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
115:       assertNotNull(patriciaTrie1);
116:       
117:       String string4 = "Trie[";
118:       Object object0 = patriciaTrie1.put("", comparator0);
119:       assertNull(object0);
120:       
121:       SortedMap<String, Object> sortedMap0 = patriciaTrie1.subMap("Trie[", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
122:       assertNotNull(sortedMap0);
123:       assertEquals(0, sortedMap0.size());
124:       assertTrue(sortedMap0.isEmpty());
125:       
126:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", sortedMap0, 0);
127:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
128:       assertEquals(0, sortedMap0.size());
129:       assertTrue(sortedMap0.isEmpty());
130:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
132:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
133:       
134:       String string5 = abstractPatriciaTrie_TrieEntry3.toString();
135:       assertNotNull(string5);
136:       assertEquals("Entry(key=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [0], value={}, parent=null, left=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [0], right=null, predecessor=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [0])", string5);
137:       assertFalse(string5.equals((Object)string2));
138:       assertFalse(string5.equals((Object)string1));
139:       assertFalse(string5.equals((Object)string0));
140:       assertFalse(string5.equals((Object)string4));
141:       assertFalse(string5.equals((Object)string3));
142:       assertEquals(0, sortedMap0.size());
143:       assertTrue(sortedMap0.isEmpty());
144:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
145:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
146:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
147:       
148:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
149:       assertNotNull(patriciaTrie2);
150:       
151:       // Undeclared exception!
152:       try { 
153:         patriciaTrie2.lastKey();
154:         fail("Expecting exception: NoSuchElementException");
155:       
156:       } catch(NoSuchElementException e) {
157:          //
158:          // no message in exception (getMessage() returned null)
159:          //
160:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
161:       }
162:   }
163: }
RegularFileObject[/tmp/EvoSuite_177_1629227624249/org/apache/commons/collections4/trie/AbstractPatriciaTrie_177_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:44 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_177_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_177_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_177_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_177_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:44.309 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object>((Comparable<Object>) null, (Object) null, 230);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

abstractPatriciaTrie_TrieEntry0.value = (Object) "";
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertNotNull(string0);
assertEquals("Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230])", string0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

String string1 = "predecessor=";
Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Object>> comparator2 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

int int0 = 416;
abstractPatriciaTrie_TrieEntry0.key = null;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

abstractPatriciaTrie_TrieEntry0.key = null;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<Comparable<String>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, String>("Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230])", "predecessor=", 416);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals((Object) null);
assertFalse(boolean0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

String string2 = abstractPatriciaTrie_TrieEntry1.toString();
assertNotNull(string2);
assertEquals("Entry(key=Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230]) [416], value=predecessor=, parent=null, left=Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230]) [416], right=null, predecessor=Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230]) [416])", string2);
assertFalse(string2.equals((Object)string0));
assertFalse(string2.equals((Object)string1));
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer0 = null;
AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0, (Integer) null, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

String string3 = abstractPatriciaTrie_TrieEntry2.toString();
assertNotNull(string3);
assertEquals("Entry(key=Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230]) [0], value=null, parent=null, left=Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230]) [0], right=null, predecessor=Entry(key=null [230], value=, parent=null, left=null [230], right=null, predecessor=null [230]) [0])", string3);
assertFalse(string3.equals((Object)string2));
assertFalse(string3.equals((Object)string1));
assertFalse(string3.equals((Object)string0));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

String string4 = "Trie[";
Object object0 = patriciaTrie1.put("", comparator0);
assertNull(object0);

SortedMap<String, Object> sortedMap0 = patriciaTrie1.subMap("Trie[", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
assertNotNull(sortedMap0);
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", sortedMap0, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

String string5 = abstractPatriciaTrie_TrieEntry3.toString();
assertNotNull(string5);
assertEquals("Entry(key=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [0], value={}, parent=null, left=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [0], right=null, predecessor=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [0])", string5);
assertFalse(string5.equals((Object)string2));
assertFalse(string5.equals((Object)string1));
assertFalse(string5.equals((Object)string0));
assertFalse(string5.equals((Object)string4));
assertFalse(string5.equals((Object)string3));
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
assertNotNull(patriciaTrie2);

patriciaTrie2.lastKey();

[MASTER] 19:13:44.379 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_179_1629227624342/org/apache/commons/collections4/trie/AbstractPatriciaTrie_179_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_179_1629227624342/org/apache/commons/collections4/trie/AbstractPatriciaTrie_179_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:44.379 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:44.379 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:44.379 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>>: 31
[MASTER] 19:13:44.379 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_179_1629227624342/org/apache/commons/collections4/trie/AbstractPatriciaTrie_179_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:44.379 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:44.380 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_179_1629227624342/org/apache/commons/collections4/trie/AbstractPatriciaTrie_179_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:44 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_179_tmp__ESTest extends AbstractPatriciaTrie_179_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
28:       assertNotNull(comparator0);
29:       
30:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
31:       Comparator<Map.Entry<String, Object>> comparator2 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
32:       assertNotNull(comparator2);
33:       
34:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
35:       assertNotNull(patriciaTrie0);
36:       
37:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
38:       assertNotNull(patriciaTrie1);
39:       
40:       Object object0 = patriciaTrie1.put("", comparator0);
41:       assertNull(object0);
42:       
43:       SortedMap<String, Object> sortedMap0 = patriciaTrie1.subMap("", "predecessor=");
44:       assertNotNull(sortedMap0);
45:       assertFalse(sortedMap0.isEmpty());
46:       assertEquals(1, sortedMap0.size());
47:       
48:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", sortedMap0, 0);
49:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
50:       assertFalse(sortedMap0.isEmpty());
51:       assertEquals(1, sortedMap0.size());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       
56:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
57:       assertNotNull(string0);
58:       assertFalse(sortedMap0.isEmpty());
59:       assertEquals(1, sortedMap0.size());
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
63:       
64:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
65:       assertNotNull(patriciaTrie2);
66:       
67:       PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
68:       assertNotNull(patriciaTrie3);
69:   }
70: }
RegularFileObject[/tmp/EvoSuite_179_1629227624342/org/apache/commons/collections4/trie/AbstractPatriciaTrie_179_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:44 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_179_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_179_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_179_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_179_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:44.381 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Object>> comparator2 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Object object0 = patriciaTrie1.put("", comparator0);
assertNull(object0);

SortedMap<String, Object> sortedMap0 = patriciaTrie1.subMap("", "predecessor=");
assertNotNull(sortedMap0);
assertFalse(sortedMap0.isEmpty());
assertEquals(1, sortedMap0.size());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", sortedMap0, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(sortedMap0.isEmpty());
assertEquals(1, sortedMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertNotNull(string0);
assertFalse(sortedMap0.isEmpty());
assertEquals(1, sortedMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
assertNotNull(patriciaTrie2);

PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie3);


[MASTER] 19:13:44.407 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_180_1629227624382/org/apache/commons/collections4/trie/AbstractPatriciaTrie_180_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_180_1629227624382/org/apache/commons/collections4/trie/AbstractPatriciaTrie_180_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:44.407 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:44.407 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:44.407 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>>: 31
[MASTER] 19:13:44.407 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_180_1629227624382/org/apache/commons/collections4/trie/AbstractPatriciaTrie_180_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:44.408 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:44.408 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_180_1629227624382/org/apache/commons/collections4/trie/AbstractPatriciaTrie_180_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:44 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_180_tmp__ESTest extends AbstractPatriciaTrie_180_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
28:       assertNotNull(comparator0);
29:       
30:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
31:       Comparator<Map.Entry<String, Object>> comparator2 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
32:       assertNotNull(comparator2);
33:       
34:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
35:       assertNotNull(patriciaTrie0);
36:       
37:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
38:       assertNotNull(patriciaTrie1);
39:       
40:       Integer integer0 = new Integer(0);
41:       assertNotNull(integer0);
42:       assertEquals(0, (int)integer0);
43:       
44:       Object object0 = patriciaTrie1.put("predecessor=", integer0);
45:       assertNull(object0);
46:       
47:       Object object1 = patriciaTrie1.put("", comparator0);
48:       assertNull(object1);
49:       
50:       SortedMap<String, Object> sortedMap0 = patriciaTrie1.subMap("", "predecessor=");
51:       assertNotNull(sortedMap0);
52:       assertEquals(1, sortedMap0.size());
53:       assertFalse(sortedMap0.isEmpty());
54:       
55:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", sortedMap0, 0);
56:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
57:       assertEquals(1, sortedMap0.size());
58:       assertFalse(sortedMap0.isEmpty());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
62:       
63:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
64:       assertNotNull(string0);
65:       assertEquals(1, sortedMap0.size());
66:       assertFalse(sortedMap0.isEmpty());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
70:       
71:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
72:       assertNotNull(patriciaTrie2);
73:       
74:       PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
75:       assertNotNull(patriciaTrie3);
76:   }
77: }
RegularFileObject[/tmp/EvoSuite_180_1629227624382/org/apache/commons/collections4/trie/AbstractPatriciaTrie_180_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:44 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_180_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_180_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_180_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_180_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:44.409 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Object>> comparator2 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

Object object0 = patriciaTrie1.put("predecessor=", integer0);
assertNull(object0);

Object object1 = patriciaTrie1.put("", comparator0);
assertNull(object1);

SortedMap<String, Object> sortedMap0 = patriciaTrie1.subMap("", "predecessor=");
assertNotNull(sortedMap0);
assertEquals(1, sortedMap0.size());
assertFalse(sortedMap0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", sortedMap0, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertEquals(1, sortedMap0.size());
assertFalse(sortedMap0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertNotNull(string0);
assertEquals(1, sortedMap0.size());
assertFalse(sortedMap0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
assertNotNull(patriciaTrie2);

PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie3);


[MASTER] 19:13:44.496 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_183_1629227624461/org/apache/commons/collections4/trie/AbstractPatriciaTrie_183_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_183_1629227624461/org/apache/commons/collections4/trie/AbstractPatriciaTrie_183_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:44.496 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:44.496 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:44.497 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Object>,java.lang.Object>>: 51
[MASTER] 19:13:44.497 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_183_1629227624461/org/apache/commons/collections4/trie/AbstractPatriciaTrie_183_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:44.497 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:44.497 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_183_1629227624461/org/apache/commons/collections4/trie/AbstractPatriciaTrie_183_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:44 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.PatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_183_tmp__ESTest extends AbstractPatriciaTrie_183_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
26:       assertNotNull(patriciaTrie0);
27:       
28:       String string0 = patriciaTrie0.put("predecessor=", "");
29:       assertNull(string0);
30:       
31:       String string1 = patriciaTrie0.put("*LVr7*h Ns", "*LVr7*h Ns");
32:       assertNull(string1);
33:       
34:       String string2 = patriciaTrie0.put("Trie[", (String) null);
35:       assertNull(string2);
36:       
37:       String string3 = patriciaTrie0.toString();
38:       assertNotNull(string3);
39:       assertEquals("Trie[3]={\n  Entry(key=*LVr7*h Ns [10], value=*LVr7*h Ns, parent=predecessor= [9], left=ROOT, right=*LVr7*h Ns [10], predecessor=*LVr7*h Ns [10])\n  Entry(key=Trie[ [10], value=null, parent=predecessor= [9], left=Trie[ [10], right=predecessor= [9], predecessor=Trie[ [10])\n  Entry(key=predecessor= [9], value=, parent=ROOT, left=*LVr7*h Ns [10], right=Trie[ [10], predecessor=Trie[ [10])\n}\n", string3);
40:       
41:       String string4 = patriciaTrie0.put("Trie[3]={\n  Entry(key=*LVr7*h Ns [10], value=*LVr7*h Ns, parent=predecessor= [9], left=ROOT, right=*LVr7*h Ns [10], predecessor=*LVr7*h Ns [10])\n  Entry(key=Trie[ [10], value=null, parent=predecessor= [9], left=Trie[ [10], right=predecessor= [9], predecessor=Trie[ [10])\n  Entry(key=predecessor= [9], value=, parent=ROOT, left=*LVr7*h Ns [10], right=Trie[ [10], predecessor=Trie[ [10])\n}\n", "[c@jDsT>JSn");
42:       assertNull(string4);
43:       
44:       patriciaTrie0.decrementSize();
45:       String string5 = patriciaTrie0.remove((Object) "predecessor=");
46:       assertNotNull(string5);
47:       assertEquals("", string5);
48:       assertFalse(string5.equals((Object)string3));
49:       
50:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
51:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
52:       assertNotNull(comparator1);
53:       
54:       Integer integer0 = new Integer((-2185));
55:       assertNotNull(integer0);
56:       assertEquals((-2185), (int)integer0);
57:       
58:       Integer integer1 = new Integer((-2185));
59:       assertNotNull(integer1);
60:       assertEquals((-2185), (int)integer1);
61:       assertTrue(integer1.equals((Object)integer0));
62:       
63:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
64:       assertNotNull(patriciaTrie1);
65:       
66:       Integer integer2 = new Integer((-1));
67:       assertNotNull(integer2);
68:       assertEquals((-1), (int)integer2);
69:       assertFalse(integer2.equals((Object)integer1));
70:       assertFalse(integer2.equals((Object)integer0));
71:       
72:       Integer integer3 = patriciaTrie1.put("`j5", integer2);
73:       assertNull(integer3);
74:       assertFalse(integer2.equals((Object)integer1));
75:       assertFalse(integer2.equals((Object)integer0));
76:       
77:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
78:       assertNotNull(patriciaTrie2);
79:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
80:       
81:       PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie0);
82:       assertNotNull(patriciaTrie3);
83:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
84:       
85:       String string6 = patriciaTrie0.firstKey();
86:       assertNotNull(string6);
87:       assertEquals("*LVr7*h Ns", string6);
88:       assertNotSame(patriciaTrie0, patriciaTrie3);
89:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
90:       assertFalse(string6.equals((Object)string5));
91:       assertFalse(string6.equals((Object)string3));
92:       
93:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
94:       assertNotNull(patriciaTrie4);
95:       
96:       String string7 = patriciaTrie4.previousKey("*LVr7*h Ns");
97:       assertNull(string7);
98:   }
99: }
RegularFileObject[/tmp/EvoSuite_183_1629227624461/org/apache/commons/collections4/trie/AbstractPatriciaTrie_183_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:44 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_183_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_183_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_183_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_183_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:44.499 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("predecessor=", "");
assertNull(string0);

String string1 = patriciaTrie0.put("*LVr7*h Ns", "*LVr7*h Ns");
assertNull(string1);

String string2 = patriciaTrie0.put("Trie[", (String) null);
assertNull(string2);

String string3 = patriciaTrie0.toString();
assertNotNull(string3);
assertEquals("Trie[3]={\n  Entry(key=*LVr7*h Ns [10], value=*LVr7*h Ns, parent=predecessor= [9], left=ROOT, right=*LVr7*h Ns [10], predecessor=*LVr7*h Ns [10])\n  Entry(key=Trie[ [10], value=null, parent=predecessor= [9], left=Trie[ [10], right=predecessor= [9], predecessor=Trie[ [10])\n  Entry(key=predecessor= [9], value=, parent=ROOT, left=*LVr7*h Ns [10], right=Trie[ [10], predecessor=Trie[ [10])\n}\n", string3);

String string4 = patriciaTrie0.put("Trie[3]={\n  Entry(key=*LVr7*h Ns [10], value=*LVr7*h Ns, parent=predecessor= [9], left=ROOT, right=*LVr7*h Ns [10], predecessor=*LVr7*h Ns [10])\n  Entry(key=Trie[ [10], value=null, parent=predecessor= [9], left=Trie[ [10], right=predecessor= [9], predecessor=Trie[ [10])\n  Entry(key=predecessor= [9], value=, parent=ROOT, left=*LVr7*h Ns [10], right=Trie[ [10], predecessor=Trie[ [10])\n}\n", "[c@jDsT>JSn");
assertNull(string4);

patriciaTrie0.decrementSize();
String string5 = patriciaTrie0.remove((Object) "predecessor=");
assertNotNull(string5);
assertEquals("", string5);
assertFalse(string5.equals((Object)string3));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Integer integer0 = new Integer((-2185));
assertNotNull(integer0);
assertEquals((-2185), (int)integer0);

Integer integer1 = new Integer((-2185));
assertNotNull(integer1);
assertEquals((-2185), (int)integer1);
assertTrue(integer1.equals((Object)integer0));

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie1);

Integer integer2 = new Integer((-1));
assertNotNull(integer2);
assertEquals((-1), (int)integer2);
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));

Integer integer3 = patriciaTrie1.put("`j5", integer2);
assertNull(integer3);
assertFalse(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
assertNotNull(patriciaTrie2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));

PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie0);
assertNotNull(patriciaTrie3);
assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));

String string6 = patriciaTrie0.firstKey();
assertNotNull(string6);
assertEquals("*LVr7*h Ns", string6);
assertNotSame(patriciaTrie0, patriciaTrie3);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
assertFalse(string6.equals((Object)string5));
assertFalse(string6.equals((Object)string3));

PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
assertNotNull(patriciaTrie4);

String string7 = patriciaTrie4.previousKey("*LVr7*h Ns");
assertNull(string7);


[MASTER] 19:13:44.591 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_186_1629227624552/org/apache/commons/collections4/trie/AbstractPatriciaTrie_186_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_186_1629227624552/org/apache/commons/collections4/trie/AbstractPatriciaTrie_186_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:44.591 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:44.591 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:44.592 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Object cannot be converted to java.lang.Integer: 40
[MASTER] 19:13:44.592 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_186_1629227624552/org/apache/commons/collections4/trie/AbstractPatriciaTrie_186_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:44.592 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:44.592 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Some messages have been simplified; recompile with -Xdiags:verbose to get full output: -1
[MASTER] 19:13:44.593 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_186_1629227624552/org/apache/commons/collections4/trie/AbstractPatriciaTrie_186_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:44 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.SortedMap;
12: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
13: import org.apache.commons.collections4.trie.PatriciaTrie;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.ViolatedAssumptionAnswer;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class AbstractPatriciaTrie_186_tmp__ESTest extends AbstractPatriciaTrie_186_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
25:       assertNotNull(patriciaTrie0);
26:       
27:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
28:       assertNotNull(patriciaTrie1);
29:       
30:       Integer integer0 = new Integer(1152);
31:       assertNotNull(integer0);
32:       assertEquals(1152, (int)integer0);
33:       
34:       AbstractPatriciaTrie.TrieEntry<Comparable<String>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, Integer>("llHS6vlz@{1ubC8t~6", integer0, 0);
35:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
36:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
39:       
40:       Object object0 = abstractPatriciaTrie_TrieEntry0.setValue((Object) null);
41:       assertNotNull(object0);
42:       assertEquals(1152, object0);
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       
47:       Object object1 = patriciaTrie1.put("llHS6vlz@{1ubC8t~6", object0);
48:       assertNull(object1);
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
52:       
53:       SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap("llHS6vlz@{1ubC8t~6");
54:       assertNotNull(sortedMap0);
55:       assertFalse(sortedMap0.isEmpty());
56:       assertEquals(1, sortedMap0.size());
57:       
58:       boolean boolean0 = patriciaTrie1.isBitSet("llHS6vlz@{1ubC8t~6", 85, (-463));
59:       assertFalse(boolean0);
60:       
61:       Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
62:       doReturn((String) null).when(comparable0).toString();
63:       AbstractPatriciaTrie.TrieEntry<Object, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Comparable<Object>>(sortedMap0, comparable0, 85);
64:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
65:       assertFalse(sortedMap0.isEmpty());
66:       assertEquals(1, sortedMap0.size());
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
70:       
71:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
72:       assertNotNull(string0);
73:       assertEquals("Entry(key={llHS6vlz@{1ubC8t~6=1152} [85], value=null, parent=null, left={llHS6vlz@{1ubC8t~6=1152} [85], right=null, predecessor={llHS6vlz@{1ubC8t~6=1152} [85])", string0);
74:       assertFalse(sortedMap0.isEmpty());
75:       assertEquals(1, sortedMap0.size());
76:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
77:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
79:   }
80: }
RegularFileObject[/tmp/EvoSuite_186_1629227624552/org/apache/commons/collections4/trie/AbstractPatriciaTrie_186_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:44 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_186_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_186_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.lang.Comparable", false, AbstractPatriciaTrie_186_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_186_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:44.594 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Integer integer0 = new Integer(1152);
assertNotNull(integer0);
assertEquals(1152, (int)integer0);

AbstractPatriciaTrie.TrieEntry<Comparable<String>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, Integer>("llHS6vlz@{1ubC8t~6", integer0, 0);
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Object object0 = abstractPatriciaTrie_TrieEntry0.setValue((Object) null);
assertNotNull(object0);
assertEquals(1152, object0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Object object1 = patriciaTrie1.put("llHS6vlz@{1ubC8t~6", object0);
assertNull(object1);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap("llHS6vlz@{1ubC8t~6");
assertNotNull(sortedMap0);
assertFalse(sortedMap0.isEmpty());
assertEquals(1, sortedMap0.size());

boolean boolean0 = patriciaTrie1.isBitSet("llHS6vlz@{1ubC8t~6", 85, (-463));
assertFalse(boolean0);

Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(comparable0).toString();
AbstractPatriciaTrie.TrieEntry<Object, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Comparable<Object>>(sortedMap0, comparable0, 85);
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(sortedMap0.isEmpty());
assertEquals(1, sortedMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertNotNull(string0);
assertEquals("Entry(key={llHS6vlz@{1ubC8t~6=1152} [85], value=null, parent=null, left={llHS6vlz@{1ubC8t~6=1152} [85], right=null, predecessor={llHS6vlz@{1ubC8t~6=1152} [85])", string0);
assertFalse(sortedMap0.isEmpty());
assertEquals(1, sortedMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());


[MASTER] 19:13:44.731 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_190_1629227624698/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_190_1629227624698/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest_scaffolding.java]]
[MASTER] 19:13:44.742 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:44.742 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 19:13:44.742 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>>: 68
[MASTER] 19:13:44.743 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_190_1629227624698/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 19:13:44.743 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 19:13:44.743 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_190_1629227624698/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 19:13:44 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_190_tmp__ESTest extends AbstractPatriciaTrie_190_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       Integer integer0 = new Integer((-5348));
31:       assertNotNull(integer0);
32:       assertEquals((-5348), (int)integer0);
33:       
34:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-5348));
35:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
36:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
39:       
40:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
41:       assertNotNull(string0);
42:       assertEquals("Entry(key= [-5348], value=-5348, parent=null, left= [-5348], right=null, predecessor= [-5348])", string0);
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
46:       
47:       abstractPatriciaTrie_TrieEntry0.bitIndex = (-5348);
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
51:       
52:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
53:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
56:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
57:       
58:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
59:       assertNull(abstractPatriciaTrie_TrieEntry2);
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
63:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
64:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
65:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
66:       
67:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
68:       Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
69:       assertNotNull(comparator1);
70:       
71:       Comparator<Map.Entry<Integer, Object>> comparator2 = Map.Entry.comparingByKey();
72:       assertNotNull(comparator2);
73:       
74:       patriciaTrie0.decrementSize();
75:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.subtree("", 913, 743);
76:       assertNull(abstractPatriciaTrie_TrieEntry3);
77:       
78:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
79:       assertNull(abstractPatriciaTrie_TrieEntry4);
80:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
83:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
86:       
87:       SortedMap<String, Integer> sortedMap0 = patriciaTrie0.headMap("K>hH)%DbX}5,K aO*");
88:       assertNotNull(sortedMap0);
89:       
90:       int int0 = patriciaTrie0.size();
91:       assertEquals((-1), int0);
92:       
93:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
94:       assertNull(abstractPatriciaTrie_TrieEntry5);
95:       
96:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
97:       assertNotNull(patriciaTrie1);
98:       
99:       String string1 = patriciaTrie1.put("Entry(key= [-5348], value=-5348, parent=null, left= [-5348], right=null, predecessor= [-5348])", "");
100:       assertNull(string1);
101:       
102:       boolean boolean0 = patriciaTrie1.replace("Vi!B~n<", "", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
103:       assertFalse(boolean0);
104:       
105:       SortedMap<String, String> sortedMap1 = patriciaTrie1.prefixMap("");
106:       assertNotNull(sortedMap1);
107:       assertFalse(sortedMap1.isEmpty());
108:       assertEquals(1, sortedMap1.size());
109:       
110:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = patriciaTrie0.higherEntry("8febu");
111:       assertNull(abstractPatriciaTrie_TrieEntry6);
112:       
113:       // Undeclared exception!
114:       try { 
115:         patriciaTrie1.subtree("", 1, 1);
116:         fail("Expecting exception: StringIndexOutOfBoundsException");
117:       
118:       } catch(StringIndexOutOfBoundsException e) {
119:       }
120:   }
121: }
RegularFileObject[/tmp/EvoSuite_190_1629227624698/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 19:13:44 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_190_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_190_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_190_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_190_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
138:     );
139:   }
140: }

[MASTER] 19:13:44.746 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer((-5348));
assertNotNull(integer0);
assertEquals((-5348), (int)integer0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-5348));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertNotNull(string0);
assertEquals("Entry(key= [-5348], value=-5348, parent=null, left= [-5348], right=null, predecessor= [-5348])", string0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

abstractPatriciaTrie_TrieEntry0.bitIndex = (-5348);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
assertNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

Comparator<Map.Entry<Integer, Object>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

patriciaTrie0.decrementSize();
AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.subtree("", 913, 743);
assertNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
assertNull(abstractPatriciaTrie_TrieEntry4);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

SortedMap<String, Integer> sortedMap0 = patriciaTrie0.headMap("K>hH)%DbX}5,K aO*");
assertNotNull(sortedMap0);

int int0 = patriciaTrie0.size();
assertEquals((-1), int0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
assertNull(abstractPatriciaTrie_TrieEntry5);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);

String string1 = patriciaTrie1.put("Entry(key= [-5348], value=-5348, parent=null, left= [-5348], right=null, predecessor= [-5348])", "");
assertNull(string1);

boolean boolean0 = patriciaTrie1.replace("Vi!B~n<", "", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
assertFalse(boolean0);

SortedMap<String, String> sortedMap1 = patriciaTrie1.prefixMap("");
assertNotNull(sortedMap1);
assertFalse(sortedMap1.isEmpty());
assertEquals(1, sortedMap1.size());

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = patriciaTrie0.higherEntry("8febu");
assertNull(abstractPatriciaTrie_TrieEntry6);

patriciaTrie1.subtree("", 1, 1);

[MASTER] 19:13:45.526 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:45.612 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:45.716 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:45.804 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:45.955 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:46.116 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:46.236 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:46.319 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:46.435 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:46.506 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:46.582 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:46.654 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:46.727 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:46.794 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:46.909 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:46.980 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:47.060 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:47.230 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:47.283 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:47.382 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:47.437 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:47.506 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:47.562 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:47.625 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:47.686 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:47.754 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:47.822 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:47.907 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:47.973 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.046 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.159 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.219 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.320 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.402 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.462 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.532 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.600 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.657 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.714 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.769 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.851 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.907 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:48.989 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:49.058 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:49.111 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:49.178 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:49.233 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:49.356 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:49.424 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:49.488 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:49.596 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:49.702 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:49.827 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:50.066 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:50.129 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:50.284 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:50.352 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:50.440 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:50.518 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:50.645 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:50.717 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:50.783 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:50.883 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:50.950 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:51.058 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:51.156 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:51.222 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:51.368 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:51.484 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:51.601 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:51.691 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:51.834 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:51.996 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:52.112 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:52.229 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:52.297 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:52.399 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:52.490 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:52.561 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:52.682 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:52.769 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:52.865 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:52.926 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:53.012 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:53.088 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:53.186 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:53.298 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:53.394 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:53.476 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:53.562 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:53.641 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:53.713 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:53.771 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:53.891 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:54.095 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:54.202 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:54.294 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:54.357 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:54.443 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:54.524 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:54.596 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:54.720 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:54.817 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:54.897 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:54.996 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:55.128 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:55.273 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:55.344 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:55.489 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:55.614 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:55.701 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:55.805 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:55.887 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:55.958 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:56.066 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:56.145 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:56.216 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:57.148 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:57.248 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:57.334 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:57.477 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:57.619 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:57.692 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:57.870 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:57.940 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:58.046 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:58.140 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:58.243 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:58.303 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:58.405 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:58.489 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:58.605 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:58.715 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:58.822 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:58.905 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:59.021 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:59.094 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:59.203 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:59.264 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:59.358 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:59.441 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:59.533 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:59.629 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:59.785 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:13:59.913 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:00.059 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:00.184 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:00.363 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:00.481 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:00.545 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:00.617 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:00.702 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:00.802 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:00.896 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:00.997 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:01.173 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:01.393 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:01.511 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:01.617 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:01.695 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:01.763 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:01.840 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:01.905 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:01.972 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:02.039 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:02.116 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:02.204 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:02.265 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:02.348 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:02.443 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:02.567 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:02.640 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:02.689 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:02.780 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:02.856 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:02.942 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:03.018 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:03.098 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:03.185 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:03.320 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:03.403 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:03.501 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:03.600 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:09.999 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 19:14:10.114 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test053 -> class java.lang.StackOverflowError: null
[MASTER] 19:14:10.121 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = (-3);
AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("qQk?~", "qQk?~", (-3));
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Map.Entry<Integer, String>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByKey();
assertNotNull(comparator1);
assertSame(comparator1, comparator0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, (-3));
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());

abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());

abstractPatriciaTrie_TrieEntry1.toString();

[MASTER] 19:14:13.742 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0-50/tests/13
* Done!

* Computation finished
