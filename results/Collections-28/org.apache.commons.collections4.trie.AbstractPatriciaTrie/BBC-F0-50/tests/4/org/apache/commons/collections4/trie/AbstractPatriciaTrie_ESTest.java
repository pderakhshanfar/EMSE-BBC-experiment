/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:09:33 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiFunction;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap("The offsets and lengths must be at Character boundaries", "The offsets and lengths must be at Character boundaries");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("aA", "-g?6CI}'<NpB$fL+V", 2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "&aJM%M", (-241));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=aA [2], value=-g?6CI}'<NpB$fL+V, parent= [-241], left=aA [2], right=null, predecessor=aA [2])", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("Wb\"M", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, Comparable<String>>(abstractMap_SimpleImmutableEntry0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (-679));
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=Wb\"M=org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator [-679], value=org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator, parent=null, left=Wb\"M=org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator [-679], right=null, predecessor=Wb\"M=org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator [-679])", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer((-4132));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("e0U&7U$Ls|d3[<", (-4132), 896);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator", 0);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("org.apache.commons.collections4.trie.PatriciaTrie", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      patriciaTrie0.put("", object0);
      patriciaTrie0.put("&", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("\n");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator", integer0);
      patriciaTrie0.put("RootEntry(", patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("org.apache.commons.collections4.trie.PatriciaTrie", 0, 0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      int int0 = patriciaTrie0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Object object0 = new Object();
      patriciaTrie0.put("", object0);
      int int0 = patriciaTrie0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("]={\n", "RootEntry(", 1);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 2301);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("rt{/WAdbZ", "Trie[3]={\n  Entry(key=\n [12], value=\n, parent=Cry2m( [9], left=ROOT, right=\n [12], predecessor=\n [12])\n  Entry(key=Cry2m( [9], value=null, parent=ROOT, left=\n [12], right=org.apache.commons.collections4.trie.PatriciaTrie [10], predecessor=org.apache.commons.collections4.trie.PatriciaTrie [10])\n  Entry(key=org.apache.commons.collections4.trie.PatriciaTrie [10], value=org.apache.commons.collections4.trie.PatriciaTrie, parent=Cry2m( [9], left=Cry2m( [9], right=org.apache.commons.collections4.trie.PatriciaTrie [10], predecessor=org.apache.commons.collections4.trie.PatriciaTrie [10])\n}\n", 177);
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(80);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator", integer0);
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("WZbEe]+v71KFmH", (Integer) null, (-1046));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("x)}ghu3>`Z7~@-", "x)}ghu3>`Z7~@-");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator", (Integer) null, 0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator", (Object) null);
      Integer integer0 = new Integer(304);
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer(1);
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 256);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 256);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry("'");
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      Integer integer0 = new Integer((-2));
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>>("", abstractMap_SimpleImmutableEntry0, 0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-2));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lastEntry();
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("6e<'w%c=dW&u,m1aTME", "6e<'w%c=dW&u,m1aTME");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.KeyAnalyzer", (Object) null, 1189);
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("flD fxR&{/^#-", "flD fxR&{/^#-");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("flD fxR&{/^#-", 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("flD fxR&{/^#-", 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("1>", "1>");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("1>", 32);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("Q}Z2(_zEP");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("^*q,4x4?L 9I", ";b;]^q6|}TPiR6hj");
      hashMap0.put("Key cannot be null", "Key cannot be null");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("Key cannot be null");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("x)}ghu3>`Z7~@-").when(biFunction0).apply(any() , any());
      patriciaTrie0.compute("OmN", biFunction0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("OmN");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      Object object0 = patriciaTrie0.get("org.apache.commons.collections4.trie.PatriciaTrie");
      assertEquals("org.apache.commons.collections4.trie.PatriciaTrie", object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("The offsets and lengths must be at Character boundaries", "Trie[", 0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("YnBO{'{aBR06f=cOT", patriciaTrie0, (-3680));
      Integer integer0 = new Integer((-3680));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("YnBO{'{aBR06f=cOT", integer0, (-3680));
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry1.left);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Integer integer0 = new Integer(32768);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-5968));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1520);
      patriciaTrie0.put("dx", integer0);
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put(":N6C9uzIwqOi", "3Zx8<");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry(", ");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertEquals("3Zx8<", string0);
      
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry(":N6C9uzIwqOi");
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "%I93#?-");
      patriciaTrie0.put("iQ~Va#:K9&", "O'=o2#}+2[&b9");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "%I93#?-");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(1343);
      patriciaTrie0.put("RootEntry(", integer0);
      boolean boolean0 = patriciaTrie0.containsKey("RootEntry(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      patriciaTrie0.put("", object0);
      patriciaTrie0.put("&", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 5027);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(32);
      patriciaTrie0.put("Hi<", integer0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("flD fxR&{/^#-", (-2), (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>(" + ", "predecessor=", (-996));
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "V{vn#kQqRjen0[", 0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.remove((Object) abstractPatriciaTrie_TrieEntry0.predecessor);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer((-1454));
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, (-125));
      // Undeclared exception!
      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.higherEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("XYaZ,<[KP,s", "\"h5S#IY");
      // Undeclared exception!
      try { 
        patriciaTrie0.getNearestEntryForKey("", 961);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.getEntry(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.get(patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.followRight((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      // Undeclared exception!
      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.containsKey(patriciaTrie1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.ceilingEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", (Integer) null, (-3047));
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 64);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PatriciaTrie<Comparable<Object>> patriciaTrie0 = new PatriciaTrie<Comparable<Object>>();
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>) null, (-696));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer(2864);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, AbstractMap.SimpleEntry<Object, Object>>(abstractMap_SimpleImmutableEntry1, (AbstractMap.SimpleEntry<Object, Object>) null, 2);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("B", "", 272);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "[?wL0 ", (-1594));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "[?wL0 ", (-1594));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Comparator<Map.Entry<AbstractMap.SimpleEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>>, Integer>> comparator0 = Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, comparator0, (-1594));
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("ROOT", "ROOT", 1806);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("RootEntry(", patriciaTrie0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator").when(biFunction0).apply(any() , any());
      patriciaTrie0.replaceAll(biFunction0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("x)}ghu3>`Z7~@-", "(U.R1('");
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("x)}ghu3>`Z7~@-");
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("]", "]");
      patriciaTrie0.put("EyI,)%Ms7XBFw6/C:>", "mCjDmpQS");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("a");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.subMap("vMSeh]6_d}:W6h,", "C@Qg4ky!kDMQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("0");
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = new Integer((-6080));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "must have come from somewhere!", (-1));
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("RootEntry(key=-6080 [-1], value=must have come from somewhere!, parent=null, left=ROOT, right=null, predecessor=ROOT)", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer((-1594));
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 0);
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=-1594 [0], value=-1594, parent=null, left=-1594 [0], right=null, )", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer((-3007));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "", 1);
      abstractPatriciaTrie_TrieEntry0.left = null;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=-3007 [1], value=, parent=null, left=null, right=null, predecessor=-3007 [1])", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("fromKey > toKey", integer0, (-1));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2272);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      patriciaTrie0.put("KC'i\"*", integer0);
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[1]={\n  Entry(key=KC'i\"* [10], value=0, parent=ROOT, left=KC'i\"* [10], right=ROOT, predecessor=KC'i\"* [10])\n  RootEntry(key=fromKey > toKey [-1], value=0, parent=ROOT, left=ROOT, right=ROOT, predecessor=KC'i\"* [10])\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", integer0, 0);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, integer0, (-1688));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(744);
      patriciaTrie0.put("k", integer0);
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("Q}Z2(_zEP");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("h{)S", "IIDj(=klA?n>l]aq33");
      patriciaTrie0.put("IIDj(=klA?n>l]aq33", "Ch/_hf");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("Ch/_hf");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Object object0 = new Object();
      patriciaTrie0.put("", object0);
      String string0 = patriciaTrie0.previousKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      Integer integer0 = new Integer((-198));
      patriciaTrie0.put("left=", integer0);
      String string0 = patriciaTrie0.lastKey();
      assertEquals("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer((-2487));
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("left=", 10, 1);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer(1);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("", 1318, 1318);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("", "7Z|+a)C5");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("]={\n", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put(",j)RDy[zs", ",j)RDy[zs");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 176, 176);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("x)}ghu3>`Z7~@-", (Object) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("i^y~NR$d'uQ>", 16, 16);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("]={\n", 0, 0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("\n", "\n");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("\n");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator", "ToKey is out of range: ");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("fromKey > toKey");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(2780);
      patriciaTrie0.put("value=", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("value=");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("GH", "GH");
      patriciaTrie0.put("", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap((String) null);
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(32);
      patriciaTrie0.put("Hi<", integer0);
      patriciaTrie0.put("flD fxR&{/^#-", "flD fxR&{/^#-");
      String string0 = patriciaTrie0.previousKey("flD fxR&{/^#-");
      assertEquals("Hi<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = patriciaTrie0.previousKey(" fR)zw-c?-'");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(32);
      patriciaTrie0.put("d4R},", integer0);
      patriciaTrie0.put("lxNbegV)|&", "d4R},");
      String string0 = patriciaTrie0.nextKey("d4R},");
      assertNotNull(string0);
      assertEquals("lxNbegV)|&", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(744);
      patriciaTrie0.put("k", integer0);
      String string0 = patriciaTrie0.nextKey("k");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = patriciaTrie0.nextKey("k");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("ylYJKHY`?V", "");
      String string0 = patriciaTrie0.firstKey();
      assertEquals("ylYJKHY`?V", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("org.apac.common.collections4.trie.PatriciaTrie", 0, 0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("SNMG)_3K,x^B`(~U", (String) null, 1000);
      patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("NIUGZ8'", "NIUGZ8'");
      hashMap0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      hashMap0.put("\n", "\n");
      hashMap0.put("Cry2m(", (String) null);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[4]={\n  Entry(key=\n [12], value=\n, parent=Cry2m( [9], left=ROOT, right=\n [12], predecessor=\n [12])\n  Entry(key=Cry2m( [9], value=null, parent=ROOT, left=\n [12], right=org.apache.commons.collections4.trie.PatriciaTrie [10], predecessor=NIUGZ8' [12])\n  Entry(key=NIUGZ8' [12], value=NIUGZ8', parent=org.apache.commons.collections4.trie.PatriciaTrie [10], left=Cry2m( [9], right=NIUGZ8' [12], predecessor=NIUGZ8' [12])\n  Entry(key=org.apache.commons.collections4.trie.PatriciaTrie [10], value=org.apache.commons.collections4.trie.PatriciaTrie, parent=Cry2m( [9], left=NIUGZ8' [12], right=org.apache.commons.collections4.trie.PatriciaTrie [10], predecessor=org.apache.commons.collections4.trie.PatriciaTrie [10])\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("ROOT", (Integer) null, 1806);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-1));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = new Integer(32);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 1189);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("x)}ghu3>`Z7~@-", "x)}ghu3>`Z7~@-");
      patriciaTrie0.put("", "k@_Q{-)");
      patriciaTrie0.putIfAbsent("Tp@S", "");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(any() , anyString());
      String string0 = patriciaTrie0.compute("x)}ghu3>`Z7~@-", biFunction0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("x)}ghu3>`Z7~@-", "x)}ghu3>`Z7~@-");
      patriciaTrie0.put("8:)84D4,`qSzqNl6B[", "8:)84D4,`qSzqNl6B[");
      patriciaTrie0.putIfAbsent("Tp@S", "");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(any() , anyString());
      String string0 = patriciaTrie0.compute("x)}ghu3>`Z7~@-", biFunction0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("x)}ghu3>`Z7~@-", "x)}ghu3>`Z7~@-");
      patriciaTrie0.putIfAbsent("Tp@S", "");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", (String) null);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(any() , anyString());
      String string0 = patriciaTrie0.compute("x)}ghu3>`Z7~@-", biFunction0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Failed to put: ", "");
      patriciaTrie0.putIfAbsent("[D~9WIW`FzR", "");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      String string0 = patriciaTrie0.compute("Failed to put: ", biFunction0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("$-", (String) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Object object0 = patriciaTrie1.remove((Object) "u$6:(pl*yhCoVDzx");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.remove((Object) "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", (String) null);
      patriciaTrie0.put("I<uE&pcoF.wAVf4g^", "");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      String string0 = patriciaTrie0.compute("", biFunction0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      String string0 = patriciaTrie0.remove((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Collection<String> collection0 = patriciaTrie0.values();
      Collection<String> collection1 = patriciaTrie0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("x)}ghu3>`Z7~@-", "(U.R1('");
      boolean boolean0 = patriciaTrie0.containsKey("]={\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.replace("", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("0hi", "0hi");
      hashMap0.put("\n", "\n");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      String string0 = patriciaTrie0.selectKey("\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Object object0 = patriciaTrie0.selectValue("]={\n");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "/xWC9#]w");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      Object object0 = patriciaTrie0.selectValue("C?V=/R?H%Nu*N{y&/");
      assertEquals("/xWC9#]w", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.selectKey("org.apache.commons.collections4.trie.KeyAnalyzer");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("Cry2m(");
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("x)}ghu3>`Z7~@-", "x)}ghu3>`Z7~@-");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("x)}ghu3>`Z7~@-").when(biFunction0).apply(any() , any());
      patriciaTrie0.compute("OmN", biFunction0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("aIZf:3{;;ZpXk");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Object object0 = patriciaTrie0.replace((String) null, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.get("ROOT");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("h{)S", "IIDj(=klA?n>l]aq33");
      patriciaTrie0.put("IIDj(=klA?n>l]aq33", "Ch/_hDf");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("Ch/_hDf");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("x)}ghu3>`Z7~@-", "x)}ghu3>`Z7~@-");
      patriciaTrie0.put("}\n", "}\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("S1");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Failed to put: ", "");
      String string0 = patriciaTrie0.put("Failed to put: ", "QXS_2Tsnuy!z|Kd2");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      Integer integer0 = new Integer((-4132));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, (Integer) null);
      patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("", (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null);
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("0hi", "0hi");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      String string0 = patriciaTrie0.selectKey("\n");
      assertEquals("0hi", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.clear();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      SortedMap<String, AbstractMap.SimpleEntry<Object, Object>> sortedMap0 = patriciaTrie0.subMap("Z", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.tailMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      OrderedMapIterator<String, Object> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(orderedMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("ROOT");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      patriciaTrie0.keySet();
      Set<String> set0 = patriciaTrie0.keySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
  }
}
