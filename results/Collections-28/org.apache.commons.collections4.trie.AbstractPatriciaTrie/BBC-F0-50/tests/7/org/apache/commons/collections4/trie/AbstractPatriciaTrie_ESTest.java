/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:26:13 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(integer0, "org.apache.commons.collections4.trie.KeyAnalyzer");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("keyAnalyzer", abstractMap_SimpleEntry0, 3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 304);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      String string0 = patriciaTrie0.lastKey();
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<String> patriciaTrie1 = null;
      try {
        patriciaTrie1 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", "&%");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put("&%", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string2 = patriciaTrie0.put("%", "%");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("%");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.subtree((String) null, (-2073), (-2073));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet";
      patriciaTrie0.decrementSize();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet", "", (-3483));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(patriciaTrie0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet", (-1841));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<String, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>>) comparator0);
      assertNotNull(comparator1);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string1 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("Entry(key=org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet [-3483], value=, parent=null, left= [-1841], right=null, predecessor=org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet [-3483])", string1);
      assertNotNull(string1);
      
      Comparator<Map.Entry<String, String>> comparator3 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator2);
      assertNotNull(comparator3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("ML0x3yK6BD", (String) null, (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("]4\n", "]4\n");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("]4\n", 0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.nextKey(" Rc$v,AJ&K");
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie1.subMap("0ZVg2sMXp)aHxfJ", (String) null);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      
      String string1 = "";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      String string2 = patriciaTrie2.put("VGl6", "VGl6");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(string2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie3);
      
      String string3 = patriciaTrie2.put("", (String) null);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(string3);
      
      String string4 = "";
      patriciaTrie1.modCount = (-2135);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      boolean boolean0 = patriciaTrie1.compareKeys((String) null, "");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(boolean0);
      
      String string5 = patriciaTrie3.nextKey("");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        patriciaTrie3.containsKey(patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("+P", "+P");
      assertNull(string0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = patriciaTrie0.merge("", "", biFunction0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.getEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie0.selectValue("denew#fD\"uV$C),");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("^s", (String) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string1);
      
      String string2 = patriciaTrie1.nextKey("^s");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("denew#fD\"uV$C),", "", (-1363));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie1.incrementSize();
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      
      int int0 = patriciaTrie1.bitIndex(".~|n<d~1iO!", "dgR[");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(9, int0);
      
      abstractPatriciaTrie_TrieEntry0.value = "%M";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "jfI", (-1363));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      
      String string3 = patriciaTrie0.replace("5V;6*tD~n\"kC~7B!W\"", (String) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string3);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 803);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = patriciaTrie0.put("", abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(object0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("Key is out of range: ");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(boolean0);
      
      boolean boolean1 = patriciaTrie0.replace("q", (Object) "Key is out of range: ", (Object) "");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(boolean1);
      
      abstractPatriciaTrie_TrieEntry0.right = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      
      abstractPatriciaTrie_TrieEntry1.bitIndex = 803;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("Entry(key= [803], value=, parent=null, left= [803], right=null, predecessor= [803])", string0);
      assertNotNull(string0);
      
      abstractPatriciaTrie_TrieEntry0.key = "Key is out of range: ";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      String string0 = null;
      Object object0 = patriciaTrie1.put(" is not an external Entry!", "");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey("", 1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry0, 1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Object object1 = patriciaTrie0.put("", (Object) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(object1);
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie1.subMap("", ")2x35+ab!");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(sortedMap1.equals((Object)sortedMap0));
      assertEquals(0, sortedMap1.size());
      assertTrue(sortedMap1.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(sortedMap1, sortedMap0);
      assertNotNull(sortedMap1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.higherEntry("");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      String string1 = patriciaTrie2.firstKey();
      patriciaTrie2.clear();
      int int0 = 26;
      patriciaTrie2.modCount = int0;
      patriciaTrie2.mapIterator();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      String string2 = " + ";
      String string3 = "nikfCQ1|4F1!)H;t+@";
      patriciaTrie3.put(string3, string1);
      patriciaTrie3.put(string2, string0);
      patriciaTrie3.firstEntry();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put(";>/&cbYcMcz6c/w0{u", integer0);
      assertNull(integer1);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.headMap("TYcZKzYQ");
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      SortedMap<String, Integer> sortedMap1 = patriciaTrie0.prefixMap("TYcZKzYQ");
      assertFalse(sortedMap1.equals((Object)sortedMap0));
      assertEquals(0, sortedMap1.size());
      assertTrue(sortedMap1.isEmpty());
      assertNotNull(sortedMap1);
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(orderedMapIterator0.hasNext());
      assertNotNull(orderedMapIterator0);
      
      Integer integer2 = new Integer(1);
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = patriciaTrie0.put("(59agLsp7k9", integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertNull(integer3);
      
      Integer integer4 = patriciaTrie0.put("\n", (Integer) null);
      assertNull(integer4);
      
      Integer integer5 = patriciaTrie0.put("c,RQ:'h;LEPQ1gU'", (Integer) null);
      assertNull(integer5);
      
      Integer integer6 = new Integer((-636));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertEquals((-636), (int)integer6);
      assertNotNull(integer6);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer6, "(59agLsp7k9");
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, String>(abstractMap_SimpleEntry0, ";>/&cbYcMcz6c/w0{u", 322);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = abstractPatriciaTrie_TrieEntry0.getValue();
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals(";>/&cbYcMcz6c/w0{u", object0);
      assertNotNull(object0);
      
      Integer integer7 = patriciaTrie0.remove((Object) ";>/&cbYcMcz6c/w0{u");
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer2));
      assertEquals(1, (int)integer7);
      assertNotNull(integer7);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(1467, 1467);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 1467);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry0, 1467);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      int int0 = patriciaTrie1.bitsPerElement();
      assertEquals(16, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1467);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      assertNotNull(comparator1);
      
      abstractPatriciaTrie_TrieEntry2.bitIndex = 1467;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      
      AbstractPatriciaTrie.TrieEntry<Comparable<String>, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, Object>("", patriciaTrie0, 16);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<String, Comparable<Object>>> comparator3 = Map.Entry.comparingByValue();
      assertNotNull(comparator3);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      String string0 = patriciaTrie1.compute("'3W.<!(mz#sXlV+4FY", biFunction0);
      assertNull(string0);
      
      Integer integer0 = new Integer(16);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put((String) null, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      Integer integer2 = hashMap0.put((String) null, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(16, (int)integer2);
      assertNotNull(integer2);
      
      patriciaTrie1.modCount = (-1);
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("fromKey > toKey");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Comparable<Integer>>> comparator5 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Comparable<Integer>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>>) comparator4);
      assertNotNull(comparator5);
      
      Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Comparable<Integer>>> comparator6 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Comparable<Integer>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Integer>>) comparator2);
      assertFalse(comparator6.equals((Object)comparator5));
      assertNotSame(comparator6, comparator5);
      assertNotNull(comparator6);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry5.isInternalNode();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(boolean0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>((Integer) null, comparable0, 3);
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      
      Comparator<Map.Entry<Integer, Comparable<Object>>> comparator7 = Map.Entry.comparingByValue();
      assertNotNull(comparator7);
      
      String string1 = abstractPatriciaTrie_TrieEntry6.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("p%", "p%");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put("<_e", "<_e");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string2 = patriciaTrie0.selectKey("p%");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals("p%", string2);
      assertNotNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("p%");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string3 = patriciaTrie0.put("gWoA?N", "Gl#t-n_4Q%");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string3);
      
      String string4 = patriciaTrie0.toString();
      assertFalse(string4.equals((Object)string2));
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals("Trie[3]={\n  Entry(key=<_e [10], value=<_e, parent=p% [9], left=ROOT, right=<_e [10], predecessor=<_e [10])\n  Entry(key=gWoA?N [11], value=Gl#t-n_4Q%, parent=p% [9], left=gWoA?N [11], right=p% [9], predecessor=gWoA?N [11])\n  Entry(key=p% [9], value=p%, parent=ROOT, left=<_e [10], right=gWoA?N [11], predecessor=gWoA?N [11])\n}\n", string4);
      assertNotNull(string4);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      String string0 = "\\DvGY";
      String string1 = patriciaTrie1.put("DvGY", "DvGY");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("DvGY");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string2 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "DvGY");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string2);
      
      String string3 = "";
      String string4 = patriciaTrie1.put("DvGY", (String) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("DvGY", string4);
      assertNotNull(string4);
      
      String string5 = null;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      String string6 = patriciaTrie1.put("DvGY", (String) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string6);
      
      String string7 = "T<cUyc!F!LRI&W1-w";
      String string8 = null;
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("invalid lookup: ", "invalid lookup: ");
      assertNull(object0);
      
      Integer integer0 = new Integer(2256);
      assertEquals(2256, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = patriciaTrie0.put("", integer0);
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("%pdF|_.]{}", "%pdF|_.]{}");
      assertNull(object2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("%pdF|_.]{}");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.higherEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("The o;fs-ts and lengths must be at Cvaracter boundaries", "The o;fs-ts and lengths must be at Cvaracter boundaries");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string1 = patriciaTrie0.selectValue("The o;fs-ts and lengths must be at Cvaracter boundaries");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("The o;fs-ts and lengths must be at Cvaracter boundaries", string1);
      assertNotNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("/I", (Object) null, (-167));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.followRight((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("{c9-", "{c9-");
      assertNull(object0);
      
      patriciaTrie0.decrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("{c9-");
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lastEntry();
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      Collection<String> collection0 = patriciaTrie1.values();
      assertFalse(collection0.contains("{c9-"));
      assertNotNull(collection0);
      
      String string0 = patriciaTrie1.put("{c9-", "{c9-");
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie2);
      
      Object object1 = patriciaTrie2.removeEntry(abstractPatriciaTrie_TrieEntry2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertEquals("{c9-", object1);
      assertNotNull(object1);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie3);
      
      String string1 = patriciaTrie3.put("", "Entry(");
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree((String) null, (-1682), (-805));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      Map.Entry<String, String> map_Entry0 = patriciaTrie2.select("Cfo%!$_*FtNV@t_");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(map_Entry0);
      
      String string0 = patriciaTrie2.put("", "");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 3264);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "org.apache.commons.collections4.trie.AbstractBitwiseTrie", 1152);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      
      Map.Entry<String, String> map_Entry1 = patriciaTrie1.select("");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(map_Entry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("predecessor=", "predecessor=", (-3227));
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry3;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry3.left = abstractPatriciaTrie_TrieEntry0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.left.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry3.left;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      
      String string1 = abstractPatriciaTrie_TrieEntry0.setKeyValue("", "{ApT7dQ;>'SGa(eJ");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie2.put("L7kUu<5+p", "");
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(string2);
      
      Comparator<Map.Entry<Object, Object>> comparator1 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      assertNotNull(comparator1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.followLeft(abstractPatriciaTrie_TrieEntry4);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry5);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("", "");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", (Object) null, (-2));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("LS$# ", abstractPatriciaTrie_TrieEntry0, (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Object object1 = patriciaTrie0.put("j", "j");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.floorEntry("[.<>`Z.kuGM,bQ");
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("^v<q}", "8N\"dtg}sp$rDS<C");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("^v<q}");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("%pdF|_.]{}", "%pdF|_.]{}");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("%pdF|_.]{}", "{c9-");
      assertEquals("%pdF|_.]{}", object1);
      assertNotNull(object1);
      
      patriciaTrie0.decrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lastEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      Collection<String> collection0 = patriciaTrie1.values();
      assertFalse(collection0.contains("%pdF|_.]{}"));
      assertNotNull(collection0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry("%pdF|_.]{}");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      Collection<String> collection1 = patriciaTrie1.values();
      assertSame(collection1, collection0);
      assertFalse(collection1.contains("%pdF|_.]{}"));
      assertNotNull(collection1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.lowerEntry("%pdF|_.]{}");
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie1.tailMap("");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", "org.apache.commons.collections4.trie.KeyAnalyzer");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("S}r+`*QyIt``#WJY)Z", "");
      assertNull(object1);
      
      Integer integer0 = new Integer((-5130));
      assertEquals((-5130), (int)integer0);
      assertNotNull(integer0);
      
      Object object2 = patriciaTrie0.put("", integer0);
      assertNull(object2);
      
      Object object3 = patriciaTrie0.put("[.<>`Z.kRGM,bQ", integer0);
      assertNull(object3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("J");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put("\n", "\n");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      String string2 = patriciaTrie1.put("", (String) null);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry((String) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string3 = patriciaTrie1.nextKey("");
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("\n", string3);
      assertNotNull(string3);
      
      String string4 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", (String) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string4);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = patriciaTrie0.put("", integer0);
      assertNull(object0);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Comparable<Object>>(integer0, comparable0, (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer1 = abstractPatriciaTrie_TrieEntry1.key;
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      Object object1 = patriciaTrie0.put("9E", integer1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNull(object1);
      
      String string0 = patriciaTrie0.nextKey("");
      assertEquals("9E", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("org.apacheQcommons.collections4.trie.AbstractPatriciaTrie$1", object0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = patriciaTrie1.put(" -> ", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.getNearestEntryForKey("", 1349);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("Zv<qy", "Zv<qy");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("x\"Z", "fG@", 848);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      String string1 = patriciaTrie0.put("Zv<qy", "Zv<qy");
      assertEquals("Zv<qy", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie0.put("Zv<qy", "Zv<qy");
      assertTrue(string2.equals((Object)string1));
      assertEquals("Zv<qy", string2);
      assertNotNull(string2);
      
      String string3 = patriciaTrie0.toString();
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Trie[1]={\n  Entry(key=x\"Z [848], value=fG@, parent=Zv<qy [9], left=x\"Z [848], right=ROOT, predecessor=x\"Z [848])\n  Entry(key=Zv<qy [9], value=Zv<qy, parent=ROOT, left=x\"Z [848], right=Zv<qy [9], predecessor=Zv<qy [9])\n}\n", string3);
      assertNotNull(string3);
      
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("#", "#");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("f>>B;|rG*F9^*lx0", (-583), 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = patriciaTrie0.merge("", "", biFunction0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.getEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertNull(string0);
      
      String string1 = patriciaTrie1.put("U{\"s<DU z=TF!>p{(", (String) null);
      assertNull(string1);
      
      String string2 = patriciaTrie1.put("U{\"s<DU z=TF!>p{(", "U{\"s<DU z=TF!>p{(");
      assertNull(string2);
      
      String string3 = patriciaTrie1.previousKey("U{\"s<DU z=TF!>p{(");
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      String string0 = patriciaTrie2.put("#K`", "#K`");
      assertNull(string0);
      
      String string1 = patriciaTrie2.get("#K`");
      assertEquals("#K`", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie2.put("U{\"s<DU z=TF!>p{(", "U{\"s<DU z=TF!>p{(");
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.subtree("U{\"s<DU z=TF!>p{(", 0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer((-5130));
      assertEquals((-5130), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = patriciaTrie0.put("", integer0);
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("[.<>`Z.kRGM,bQ", (Object) null);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("J");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("%pdF|_.]{}", "sQsFm(~45N3", 944);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.ceilingEntry("sQsFm(~45N3");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      Object object0 = patriciaTrie0.put("%pdF|_.]{}", "%pdF|_.]{}");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("%pdF|_.]{}", "%pdF|_.]{}");
      assertEquals("%pdF|_.]{}", object1);
      assertNotNull(object1);
      
      Object object2 = patriciaTrie0.put("![z1/Ma!JF0YDI", "![z1/Ma!JF0YDI");
      assertNull(object2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.firstEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.lastEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      String string0 = patriciaTrie0.previousKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("keyAnalyzer", "keyAnalyzer");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree((String) null, 2832, 176);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>((Integer) null, (Integer) null, 1554);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(1554);
      assertEquals(1554, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1554);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1554, (int)integer1);
      assertNotNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer1, 1554);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("The offsets and lengths must be at Character boundaries", "The offsets and lengths must be at Character boundaries");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("r dS-zApTP:n", "The offsets and lengths must be at Character boundaries", 3596);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      String string1 = patriciaTrie0.put("The offsets and lengths must be at Character boundaries", (String) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("The offsets and lengths must be at Character boundaries", string1);
      assertNotNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.lowerEntry("The offsets and lengths must be at Character boundaries");
      assertNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("L", "!AxW3fft8WB^2Ub+RCQ");
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(hashMap0, hashMap1);
      assertNull(string0);
      
      String string1 = patriciaTrie1.toString();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(hashMap0, hashMap1);
      assertEquals("Trie[1]={\n  Entry(key=L [9], value=!AxW3fft8WB^2Ub+RCQ, parent=ROOT, left=ROOT, right=L [9], predecessor=L [9])\n}\n", string1);
      assertNotNull(string1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("L", (Integer) null, 1633);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer((-25));
      assertEquals((-25), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Trie[1]={\n  Entry(key=L [9], value=!AxW3fft8WB^2Ub+RCQ, parent=ROOT, left=ROOT, right=L [9], predecessor=L [9])\n}\n", integer0, 1633);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put("L", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, (-2047));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = patriciaTrie1.put("", abstractMap_SimpleEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractMap_SimpleEntry1);
      
      String string0 = "jir.=.2,4";
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<String, String>("P53!*", "jir.=.2,4");
      assertNotNull(abstractMap_SimpleEntry2);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Comparator<Map.Entry<Integer, Comparable<Object>>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Comparator<Map.Entry<Object, Comparable<Object>>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry3 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertNotNull(abstractMap_SimpleEntry3);
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<Object, Comparable<Object>>>> comparator3 = Map.Entry.comparingByKey();
      assertNotNull(comparator3);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry4 = patriciaTrie1.put("v47)y", (AbstractMap.SimpleEntry<Object, String>) null);
      assertNull(abstractMap_SimpleEntry4);
      
      Comparator<Map.Entry<Object, Integer>> comparator4 = (Comparator<Map.Entry<Object, Integer>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator2);
      assertNotNull(comparator4);
      
      int int0 = (-1);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("jir.=.2,4", abstractMap_SimpleEntry3, (-1));
      assertFalse(abstractMap_SimpleEntry3.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Comparator<Object> comparator5 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Comparable<String>, AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<String, String>, Object>>> comparator6 = (Comparator<Map.Entry<Comparable<String>, AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<String, String>, Object>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<String, String>, Object>>) comparator5);
      assertNotNull(comparator6);
      
      Comparator<Object> comparator7 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Comparable<Integer>, Comparable<Object>>> comparator8 = (Comparator<Map.Entry<Comparable<Integer>, Comparable<Object>>>)Map.Entry.comparingByKey((Comparator<? super Comparable<Integer>>) comparator7);
      assertNotNull(comparator8);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>) null, abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("I\u0000Lo.T'y", "HFU");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put("The offsets and lengths must be at Character boundaries", "HFU");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string2 = patriciaTrie1.selectValue("zBDs_&hUe`@%u");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals("HFU", string2);
      assertNotNull(string2);
      
      boolean boolean0 = patriciaTrie1.compareKeys("", (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.ceilingEntry("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("d)~RemdSQ>p", "d)~RemdSQ>p");
      assertNull(object0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("g}9HQl~fC%ItDC", "K}2>&1VW?");
      assertNull(string0);
      
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(anyString() , anyString());
      String string1 = patriciaTrie1.compute("G12Ds<@s", biFunction0);
      assertNull(string1);
      
      Object object1 = patriciaTrie0.put("", "");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String>((AbstractMap.SimpleImmutableEntry<String, String>) null, "k", (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("Entry(", "Entry(");
      assertNull(object0);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("");
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      Object object1 = patriciaTrie0.put("", "");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertTrue(set0.contains(""));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = patriciaTrie0.put("!6r~.", (Object) null);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = patriciaTrie0.put("1}'3~qqvuT", (Object) null);
      assertNull(object2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("]={\n", "U{\"s<DU z=TF!>p{(");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = patriciaTrie1.previousKey("]={\n");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree("Cannot determine prefix outside of Character boundaries", 0, 0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie2);
      
      String string0 = patriciaTrie2.put("Cannot determine prefix outside of Character boundaries", "9Ce#8'bfv");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      String string1 = patriciaTrie2.putIfAbsent("]", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      String string2 = patriciaTrie2.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string2);
      
      String string3 = patriciaTrie2.put(".cs&9[kgW8", "org.apache.commons.collections4.trie.PatriciaTrie");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string3);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie3);
      
      String string4 = patriciaTrie2.put("3=R(", (String) null);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.subtree((String) null, 18, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("The offsets and lengths must be at Character boundaries", "The offsets and lengths must be at Character boundaries");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(16, int0);
      
      String string1 = patriciaTrie0.put("XV-zVtBt&wY", "The offsets and lengths must be at Character boundaries");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string2 = patriciaTrie0.selectValue("The offsets and lengths must be at Character boundaries");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("The offsets and lengths must be at Character boundaries", string2);
      assertNotNull(string2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      String string0 = patriciaTrie2.put("M#vHaL.o}$z", "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      Map.Entry<String, Object> map_Entry0 = patriciaTrie1.select("M#vHaL.o}$z");
      assertNull(map_Entry0);
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>("M#vHaL.o}$z", "dZV*kcH~qZcy1}");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>((String) null, abstractMap_SimpleEntry0, 907);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(boolean0);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-3244);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("The offsets and lengths must be at Character boundaries", "The offsets and lengths must be at Character boundaries");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = patriciaTrie0.put("`'u[", (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.subtree("The offsets and lengths must be at Character boundaries", 256, 16);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("L", "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string1 = patriciaTrie0.put("Q rY3M!/RC", " [");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("L", " [");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", string2);
      assertNotNull(string2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      String string3 = patriciaTrie1.put("", "");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string3);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.floorEntry("");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap((String) null);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie3);
      
      Integer integer0 = new Integer((-297));
      assertEquals((-297), (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>((String) null, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<Integer, AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleEntry<String, Integer>, Object>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      boolean boolean0 = patriciaTrie3.containsKey((Object) null);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(boolean0);
      
      Set<String> set0 = patriciaTrie3.keySet();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(set0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.higherEntry((String) null);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie3);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap((String) null);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertNotNull(patriciaTrie4);
      
      Set<String> set0 = patriciaTrie4.keySet();
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        patriciaTrie3.get(patriciaTrie4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("The offsets and lengths must be at Character boundaries", "The offsets and lengths must be at Character boundaries");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      String string1 = patriciaTrie0.compute("parent=", biFunction0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry((String) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("L", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put("<_e", "<_e");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string2 = patriciaTrie0.put("sZ+T3uX{RyQr", "'b2QcL");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string2);
      
      String string3 = patriciaTrie0.selectValue("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals("<_e", string3);
      assertNotNull(string3);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 3138);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("Entry(key= [3138], value=, parent=null, left= [3138], right=null, predecessor= [3138])", string0);
      assertNotNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-1122));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.contains(""));
      assertFalse(set0.contains(string0));
      assertNotNull(set0);
      
      int int0 = patriciaTrie0.size();
      assertEquals(0, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", "Entry(key= [3138], value=, parent=null, left= [3138], right=null, predecessor= [3138])", (-815));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("L", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put("<_e", "<_e");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string2 = patriciaTrie0.toString();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals("Trie[2]={\n  Entry(key=<_e [10], value=<_e, parent=L [9], left=ROOT, right=<_e [10], predecessor=<_e [10])\n  Entry(key=L [9], value=, parent=ROOT, left=<_e [10], right=L [9], predecessor=L [9])\n}\n", string2);
      assertNotNull(string2);
      
      String string3 = patriciaTrie0.put("sZ+T3uX{RyQr", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("", (-1352), 256);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("", "D=nA@5t)");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put("<_e", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      String string2 = patriciaTrie1.selectValue("<_e");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals("", string2);
      assertNotNull(string2);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      assertNotNull(patriciaTrie4);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>>((String) null, (AbstractMap.SimpleEntry<String, Object>) null, 11);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie4.nextEntry(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Collection<Integer> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie1.decrementSize();
      String string0 = "";
      // Undeclared exception!
      try { 
        patriciaTrie1.ceilingEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie2);
      
      String string0 = patriciaTrie2.put("M#vHaL.o}$z", "");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      String string1 = patriciaTrie2.put("]={\n", "U{\"s<DU (z|=TF!>p{(");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.subtree("  ", 0, 0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      Integer integer1 = new Integer(16);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(16, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = patriciaTrie2.put("", integer1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(integer2);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.headMap("");
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotNull(sortedMap0);
      
      SortedMap<String, Integer> sortedMap1 = patriciaTrie2.prefixMap("TYcZKzYQ");
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(sortedMap1.equals((Object)sortedMap0));
      assertEquals(0, sortedMap1.size());
      assertTrue(sortedMap1.isEmpty());
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(sortedMap1);
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotNull(orderedMapIterator0);
      
      Integer integer3 = new Integer(16);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(16, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = patriciaTrie2.put("The offsets and lengths must be at Character boundaries", integer1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)integer3));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(integer4);
      
      Integer integer5 = new Integer(1);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(1, (int)integer5);
      assertNotNull(integer5);
      
      Integer integer6 = patriciaTrie1.put("", integer5);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNull(integer6);
      
      Integer integer7 = new Integer(322);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertEquals(322, (int)integer7);
      assertNotNull(integer7);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer7, "");
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, String>(abstractMap_SimpleEntry0, "<De0@%LywX", (-647));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>("", abstractMap_SimpleEntry1, 322);
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Object object0 = abstractPatriciaTrie_TrieEntry1.getValue();
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(object0);
      
      Integer integer8 = patriciaTrie1.remove((Object) "");
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertEquals(1, (int)integer8);
      assertNotNull(integer8);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.tailMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      Comparator<? super String> comparator0 = patriciaTrie1.comparator();
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry((String) null);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(3178);
      assertEquals(3178, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, (Object) null);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>((String) null, "");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, String>>(abstractMap_SimpleEntry0, abstractMap_SimpleImmutableEntry0, 3178);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, String>>(abstractMap_SimpleEntry0, abstractMap_SimpleImmutableEntry0, 9);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<String, String>>(abstractMap_SimpleEntry0, abstractMap_SimpleImmutableEntry0, 3178);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry3;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry1.key;
      assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Comparable<Object>>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      Object object0 = patriciaTrie0.put("M.cZ&C}WYoXI{iCti", abstractMap_SimpleEntry1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      assertSame(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0);
      assertNull(object0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.getEntry(comparator0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("L", "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = hashMap0.put("", "");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string2 = patriciaTrie0.put("", "dR>Y");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = patriciaTrie0.put("[WN;uY{kK1", "");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string3);
      
      String string4 = patriciaTrie0.selectValue("");
      assertFalse(string4.equals((Object)string2));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("dR>Y", string4);
      assertNotNull(string4);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      Set<String> set0 = patriciaTrie2.keySet();
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(set0.contains(""));
      assertFalse(set0.contains("[WN;uY{kK1"));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.selectValue((String) null);
      assertNull(string0);
      
      boolean boolean0 = patriciaTrie0.isBitSet((String) null, 3, 936);
      assertFalse(boolean0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap((String) null, "");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("QWbC", "parent=", 785);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals("");
      assertTrue(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      String string1 = patriciaTrie0.put("parent=", "j");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.getNearestEntryForKey("i", 880);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.getNearestEntryForKey("", (-1615));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertFalse(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("h'dB/8S{t/iF-oxjSNj", "90]%f}", (-2556));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("Entry(key=h'dB/8S{t/iF-oxjSNj [-2556], value=90]%f}, parent=null, left=h'dB/8S{t/iF-oxjSNj [-2556], right=null, predecessor=h'dB/8S{t/iF-oxjSNj [-2556])", string0);
      assertNotNull(string0);
      
      String string1 = abstractPatriciaTrie_TrieEntry0.setValue("");
      assertFalse(string1.equals((Object)string0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("90]%f}", string1);
      assertNotNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("__atpV?ztb0Btyhm+Te", "H2p*s|9DQ", 51);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("yrxfQ", "", 51);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.right;
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      abstractPatriciaTrie_TrieEntry1.predecessor = null;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      String string2 = abstractPatriciaTrie_TrieEntry1.toString();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertEquals("Entry(key=__atpV?ztb0Btyhm+Te [51], value=H2p*s|9DQ, parent=null, left=__atpV?ztb0Btyhm+Te [51], right=null, )", string2);
      assertNotNull(string2);
      
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      
      String string3 = abstractPatriciaTrie_TrieEntry0.setValue(">8M[Sp^jKH=eD\"za");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("Entry(key=h'dB/8S{t/iF-oxjSNj [-2556], value=>8M[Sp^jKH=eD\"za, parent=null, left=h'dB/8S{t/iF-oxjSNj [-2556], right=null, predecessor=__atpV?ztb0Btyhm+Te [51])", string4);
      assertNotNull(string4);
      
      Integer integer0 = new Integer((-2556));
      assertEquals((-2556), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "90]%f}", (-1624));
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      String string5 = abstractPatriciaTrie_TrieEntry4.toString();
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertEquals("Entry(key=-2556 [-1624], value=90]%f}, parent=null, left=-2556 [-1624], right=null, predecessor=-2556 [-1624])", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("L", "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = hashMap0.put("<_e", "<_e");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string2 = patriciaTrie0.remove((Object) "<_e");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("<_e", string2);
      assertNotNull(string2);
      
      String string3 = patriciaTrie0.selectValue("");
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", string3);
      assertNotNull(string3);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.bitIndex("V", "V");
      assertEquals((-2), int0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      int int1 = patriciaTrie1.bitsPerElement();
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(int1 == int0);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(16, int1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("V", object0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(object1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      boolean boolean0 = patriciaTrie2.containsKey("V");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertFalse(collection0.contains(object0));
      assertNotNull(collection0);
      
      Object object1 = patriciaTrie0.put("V", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("V", "V", (-2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = patriciaTrie0.isBitSet("V", 1217, 2);
      assertFalse(boolean0);
      
      Object object2 = patriciaTrie0.put("V", "V");
      assertSame(object2, object0);
      assertNotNull(object2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("V", patriciaTrie0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.getNearestEntryForKey("V", 96);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Collection<AbstractMap.SimpleImmutableEntry<Object, String>> collection1 = patriciaTrie1.values();
      assertNotNull(collection1);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals(abstractPatriciaTrie_TrieEntry1);
      assertTrue(boolean1 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertFalse(boolean1);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, Object>((AbstractMap.SimpleEntry<Integer, Object>) null, abstractPatriciaTrie_TrieEntry1, 1217);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      String string0 = abstractPatriciaTrie_TrieEntry4.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertEquals("Entry(key=null [1217], value=Entry(key=V [2], value=Trie[1]={\n  Entry(key=V [9], value=V, parent=ROOT, left=ROOT, right=V [9], predecessor=V [9])\n}\n, parent=null, left=V [2], right=null, predecessor=V [2]), parent=null, left=null [1217], right=null, predecessor=null [1217])", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-3934));
      assertEquals((-3934), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap((String) null);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie3);
      
      Integer integer1 = new Integer(537);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(537, (int)integer1);
      assertNotNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", integer1, (-3934));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry0, (-438));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap((String) null);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie3);
      
      Integer integer0 = new Integer((-297));
      assertEquals((-297), (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>((String) null, integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Object>(abstractMap_SimpleEntry1, (Object) null, (-297));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = abstractPatriciaTrie_TrieEntry0.getValue();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNull(object0);
      
      Object object1 = patriciaTrie3.put("o+\")$k-=3KaEe", (Object) null);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(object1);
      
      Set<String> set0 = patriciaTrie3.keySet();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(set0.contains("o+\")$k-=3KaEe"));
      assertNotNull(set0);
      
      Set<String> set1 = patriciaTrie3.keySet();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertSame(set1, set0);
      assertTrue(set1.contains("o+\")$k-=3KaEe"));
      assertNotNull(set1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.remove((Object) "");
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("", object0);
      assertNull(object2);
      
      boolean boolean0 = patriciaTrie0.containsKey("\"S`Umg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("left=", "left=");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = hashMap0.put("", "");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      String string2 = patriciaTrie1.selectValue("<_e");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", string2);
      assertNotNull(string2);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = patriciaTrie0.put("[.<>`Z.kRGM,bQ", (Object) null);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("[.<>`Z.kRGM,bQ");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("L", "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = hashMap0.put("<_e", "<_e");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      String string2 = patriciaTrie0.lastKey();
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertEquals("L", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(3036);
      assertEquals(3036, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = patriciaTrie0.put(",NBNlN[o&Q~3Oom", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.decrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.ceilingEntry(";Jm=.mDE@&+");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.lastEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer((-3206));
      assertEquals((-3206), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = patriciaTrie1.put("rWg5p6IAQV_Fg?", integer0);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object1 = patriciaTrie1.put(" r1CrjcvXCE~E", " r1CrjcvXCE~E");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("<<}q");
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(object0, object0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("null");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("invalid lookup: ", "invalid lookup: ", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry2.key = "invalid lookup: ";
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.clear();
      Object object1 = patriciaTrie1.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Object>("invalid lookup: ", (Object) null, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      Object object2 = abstractPatriciaTrie_TrieEntry5.setValue(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertNull(object2);
      
      abstractPatriciaTrie_TrieEntry5.key = "";
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = abstractPatriciaTrie_TrieEntry5.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry7 = patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry6);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry7);
      assertSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry6);
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry8 = patriciaTrie1.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      assertFalse(abstractPatriciaTrie_TrieEntry8.equals((Object)abstractPatriciaTrie_TrieEntry7));
      assertFalse(abstractPatriciaTrie_TrieEntry8.equals((Object)abstractPatriciaTrie_TrieEntry6));
      assertFalse(abstractPatriciaTrie_TrieEntry8.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry8.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry8.isInternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry8, abstractPatriciaTrie_TrieEntry7);
      assertNotSame(abstractPatriciaTrie_TrieEntry8, abstractPatriciaTrie_TrieEntry6);
      assertNotNull(abstractPatriciaTrie_TrieEntry8);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.forEach(biConsumer0);
      Integer integer0 = new Integer(595);
      assertEquals(595, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("4:_@S2H`T]^*_0;6$y", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer(13);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(13, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = patriciaTrie0.put("4:_@S2H`T]^*_0;6$y", integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(595, (int)integer3);
      assertNotNull(integer3);
      
      patriciaTrie0.incrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(object0, "wy xk)O#ny]kj");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>>("4:_@S2H`T]^*_0;6$y", abstractMap_SimpleImmutableEntry0, (-3711));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isEmpty();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("  ", "  ");
      assertNull(object0);
      
      patriciaTrie0.decrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("  ");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lastEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("  ");
      assertNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.toString();
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("Trie[0]={\n}\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("L", "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = hashMap0.put("<_e", "<_e");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string2 = patriciaTrie0.selectValue("");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("<_e", string2);
      assertNotNull(string2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("<_e", (String) null, 350);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string3 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(string3.equals((Object)string2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertEquals("Entry(key=<_e [350], value=null, parent=null, left=<_e [350], right=null, predecessor=<_e [350])", string3);
      assertNotNull(string3);
      
      String string4 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertEquals("Entry(key=<_e [350], value=null, parent=null, left=<_e [350], right=null, predecessor=<_e [350])", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(object0, object0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("null");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("invalid lookup: ", "invalid lookup: ", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry2.key = "invalid lookup: ";
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.clear();
      Object object1 = patriciaTrie1.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Object>("invalid lookup: ", (Object) null, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.higherEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry6);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("", "H>'Z");
      assertNull(object0);
      
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[1]={\n  RootEntry(key= [-1], value=H>'Z, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n", string0);
      assertNotNull(string0);
      
      int int0 = patriciaTrie0.bitsPerElement();
      assertEquals(16, int0);
      
      OrderedMapIterator<String, Object> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.subMap("", "Trie[1]={\n  RootEntry(key= [-1], value=H>'Z, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n");
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select("Trie[1]={\n  RootEntry(key= [-1], value=H>'Z, parent=null, left=ROOT, right=null, predecessor=ROOT)\n}\n");
      assertNotNull(map_Entry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry((String) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      assertNotNull(patriciaTrie1);
      
      String string1 = "";
      Map.Entry<String, Integer> map_Entry1 = null;
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>((Map.Entry<? extends String, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = null;
      String string1 = "{c9-";
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("%pdF|_.]{}", "%pdF|_.]{}");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("%pdF|_.]{}", "{c9-");
      assertEquals("%pdF|_.]{}", object1);
      assertNotNull(object1);
      
      patriciaTrie0.decrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lastEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("%pdF|_.]{}", "}\n");
      assertNull(string0);
      
      Collection<String> collection0 = patriciaTrie1.values();
      assertTrue(collection0.contains("}\n"));
      assertFalse(collection0.contains("%pdF|_.]{}"));
      assertNotNull(collection0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry("%pdF|_.]{}");
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.higherEntry("T]l:u|ulgi");
      assertNull(abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1807);
      assertEquals(1807, (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer1 = new Integer(1807);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1807, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = patriciaTrie1.put("Trie[", integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNull(integer2);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.headMap("TYcZKzYQ");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      SortedMap<String, Integer> sortedMap1 = patriciaTrie1.prefixMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap");
      assertTrue(sortedMap1.equals((Object)sortedMap0));
      assertTrue(sortedMap1.isEmpty());
      assertEquals(0, sortedMap1.size());
      assertNotNull(sortedMap1);
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      Integer integer3 = new Integer(1807);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(1807, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", integer0);
      assertTrue(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer1));
      assertNull(integer4);
      
      Integer integer5 = new Integer(322);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals(322, (int)integer5);
      assertNotNull(integer5);
      
      Integer integer6 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals(1807, (int)integer6);
      assertNotNull(integer6);
      
      Integer integer7 = new Integer(4728);
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer5));
      assertEquals(4728, (int)integer7);
      assertNotNull(integer7);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, String>(abstractMap_SimpleEntry0, "l<*R9at65&D", 1807);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer8 = new Integer((-814));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertEquals((-814), (int)integer8);
      assertNotNull(integer8);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("u'y", integer8, (-814));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Object object0 = abstractPatriciaTrie_TrieEntry1.getValue();
      assertFalse(object0.equals((Object)integer3));
      assertFalse(object0.equals((Object)integer5));
      assertFalse(object0.equals((Object)integer1));
      assertFalse(object0.equals((Object)integer7));
      assertFalse(object0.equals((Object)integer0));
      assertFalse(object0.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertEquals((-814), object0);
      assertNotNull(object0);
      
      Integer integer9 = patriciaTrie1.remove((Object) "C4");
      assertNull(integer9);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = patriciaTrie0.selectValue("");
      assertNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", (Object) null, (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertEquals("RootEntry(key= [-1], value=null, parent=null, left=ROOT, right=null, predecessor=ROOT)", string0);
      assertNotNull(string0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("%rwT,uG=p)", "/2BI{", 129);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      int int0 = patriciaTrie1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("L", "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string1 = patriciaTrie0.put("Q rY3M!/RC", " [");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("L", ":57SXP~MTG51?q");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", string2);
      assertNotNull(string2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      String string3 = patriciaTrie1.put("", "");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree("!eh=~gD7IdbR", 10, 13);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = patriciaTrie0.selectValue("");
      assertNull(abstractMap_SimpleEntry0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", 43);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, 1216);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(anyString() , anyInt());
      Integer integer0 = patriciaTrie0.compute("ptC", biFunction0);
      assertNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("=");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("=", "=", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("=", (Object) null, (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Comparator<Map.Entry<String, String>> comparator1 = Map.Entry.comparingByValue();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = patriciaTrie0.put("<.", integer1);
      assertNull(integer2);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.equals("=");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(boolean0);
      
      String string0 = abstractPatriciaTrie_TrieEntry1.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertEquals("Entry(key== [0], value==, parent=ROOT, left== [0], right=null, predecessor== [0])", string0);
      assertNotNull(string0);
      
      boolean boolean1 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer3 = new Integer(173);
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(173, (int)integer3);
      assertNotNull(integer3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("\n", "\n", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry2.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.right.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      boolean boolean2 = abstractPatriciaTrie_TrieEntry3.isInternalNode();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(boolean2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.higherEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertFalse(collection0.contains(object0));
      assertNotNull(collection0);
      
      Object object1 = patriciaTrie0.put("V", object0);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("V", "V", (-2));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = patriciaTrie0.isBitSet("V", 1217, 2);
      assertFalse(boolean0);
      
      Object object2 = patriciaTrie0.put("V", "V");
      assertSame(object2, object0);
      assertNotNull(object2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.getNearestEntryForKey("V", 96);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Collection<AbstractMap.SimpleImmutableEntry<Object, String>> collection1 = patriciaTrie1.values();
      assertNotNull(collection1);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry0.equals(abstractPatriciaTrie_TrieEntry1);
      assertFalse(boolean1 == boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(boolean1);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, Object>((AbstractMap.SimpleEntry<Integer, Object>) null, abstractPatriciaTrie_TrieEntry1, 1217);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      String string0 = abstractPatriciaTrie_TrieEntry4.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertEquals("Entry(key=null [1217], value=Entry(key=V [-2], value=V, parent=null, left=V [-2], right=null, predecessor=V [-2]), parent=null, left=null [1217], right=null, predecessor=null [1217])", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("ROOT", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(object0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      Object object1 = patriciaTrie0.put("", hashMap0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(object1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie2);
      
      String string0 = patriciaTrie2.put("", "ROOT");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      String string1 = patriciaTrie2.put(" [", "OoclH!6q");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie3);
      
      String string2 = patriciaTrie3.put("ROOT", "");
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        patriciaTrie3.subtree("I)32g9*686O7r#BrPe", 110, (-2454));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(object0, object0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("null");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("invalid lookup: ", "invalid lookup: ", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry2.key = "invalid lookup: ";
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.previousKey("");
      assertNull(string0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotNull(patriciaTrie3);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        patriciaTrie3.remove((Object) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-3934));
      assertEquals((-3934), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap((String) null);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie3);
      
      Object object0 = patriciaTrie3.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", patriciaTrie0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(object0);
      
      Set<String> set0 = patriciaTrie3.keySet();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertTrue(set0.contains("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer"));
      assertNotNull(set0);
      
      Object object1 = patriciaTrie3.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", (Object) null);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.lowerEntry("keyAnalyzer");
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie3.clear();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("(ur;Hi\"", (Object) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("(ur;Hi\"", "(ur;Hi\"", 11);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, integer0, (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("", "e,Ys?");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = patriciaTrie1.put("8q?zsM,j\"Vn_", "kD.!yEf");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.subtree("wdB;LGiVH%34KJwA", 11, 0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry5);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(3036);
      assertEquals(3036, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = patriciaTrie0.put(",NBNlN[o&Q~3Oom", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry1);
      
      Integer integer1 = new Integer(2501);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2501, (int)integer1);
      assertNotNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "Ae8M4d%~J6cqT@;*r", 2501);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Integer integer2 = new Integer(16);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(16, (int)integer2);
      assertNotNull(integer2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", ",NBNlN[o&Q~3Oom", 2501);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      String string0 = patriciaTrie2.put("Td*u/6hk:Uy(sVj#9(A", "Ae8M4d%~J6cqT@;*r");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.subtree("e'^V<", 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.put("", "");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string0);
      
      int int0 = patriciaTrie0.bitIndex("", (String) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertEquals((-1), int0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie2.forEach(biConsumer0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      
      int int1 = patriciaTrie0.lengthInBits("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(int1 == int0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertEquals(896, int1);
      
      String string1 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "hd");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertNotNull(patriciaTrie3);
      
      String string2 = patriciaTrie3.put("  ", (String) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertNull(string2);
      
      patriciaTrie2.decrementSize();
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      
      String string3 = patriciaTrie0.put("rC9U%(C-&Q", (String) null);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNull(string3);
      
      String string4 = patriciaTrie3.put("", "hd");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = patriciaTrie2.put("  ", "");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNull(string5);
      
      String string6 = patriciaTrie0.put("hd", "  ");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNull(string6);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("ROOT", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(object0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      Object object1 = patriciaTrie0.put("", hashMap0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(object1);
      
      String string0 = hashMap0.put("", "ROOT");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      String string1 = patriciaTrie2.put("", "ROOT");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("ROOT", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie2.put(" [", "OoclH!6q");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie3);
      
      String string3 = patriciaTrie3.put("ROOT", "");
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        patriciaTrie3.subtree("I)32g9*686O7r#BrPe", 110, (-2454));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("ROOT", hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(object0);
      
      String string0 = hashMap0.put("predecessor=", "predecessor=");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(1678);
      assertEquals(1678, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = patriciaTrie0.putIfAbsent("}\n", integer0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(object1);
      
      Integer integer1 = new Integer(1678);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1678, (int)integer1);
      assertNotNull(integer1);
      
      Object object2 = patriciaTrie1.put("predecessor=", integer1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(object2);
      
      Object object3 = patriciaTrie1.put("}\n", "}\n");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(object3);
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("93S%F>#vr\"pA(eQ6\"z");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", patriciaTrie0, 16);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.key;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", object0, 16);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.lowerEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", 1770);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie2);
      
      patriciaTrie0.clear();
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie0, patriciaTrie2);
      
      Object object1 = patriciaTrie0.put("", "");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNull(object1);
      
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, integer0, 2257);
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry7 = abstractPatriciaTrie_TrieEntry6.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry8 = patriciaTrie2.followLeft(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry8.equals((Object)abstractPatriciaTrie_TrieEntry7));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(abstractPatriciaTrie_TrieEntry8.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry8.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry8.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry8, abstractPatriciaTrie_TrieEntry7);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotNull(abstractPatriciaTrie_TrieEntry8);
      
      String string1 = patriciaTrie1.put("", "");
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("FRRhH|je", 1770, (-2162));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(2501);
      assertEquals(2501, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "Ae8M4d%~J6cqT@;*r", 2501);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie0.selectKey("Ae8M4d%~J6cqT@;*r");
      assertNull(string0);
      
      int int0 = patriciaTrie0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-399));
      assertEquals((-399), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put("w-[cb%]L>e(ftH}6_Of", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyInt());
      Integer integer2 = patriciaTrie0.computeIfPresent("w-[cb%]L>e(ftH}6_Of", biFunction0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer2);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap((String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(set0.contains("w-[cb%]L>e(ftH}6_Of"));
      assertNotNull(set0);
      
      Object object0 = patriciaTrie1.put("keyAnalyzer", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry((String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie1.clear();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("The offsets and lengths must be at Character boundaries", "The offsets and lengths must be at Character boundaries");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string1 = patriciaTrie0.getOrDefault("The offsets and lengths must be at Character boundaries", (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("The offsets and lengths must be at Character boundaries", string1);
      assertNotNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string2 = patriciaTrie0.selectValue("The offsets and lengths must be at Character boundaries");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("The offsets and lengths must be at Character boundaries", string2);
      assertNotNull(string2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.subtree("Ahh+:07_nN^%Gf[xS", (-249), 0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(object0, object0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("null");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("invalid lookup: ", "invalid lookup: ", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry2.key = "invalid lookup: ";
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.clear();
      Object object1 = patriciaTrie1.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Object>("invalid lookup: ", (Object) null, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      abstractPatriciaTrie_TrieEntry5.key = "";
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = abstractPatriciaTrie_TrieEntry5.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry7 = patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry6);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry7);
      assertSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry6);
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry8 = patriciaTrie2.floorEntry("invalid lookup: ");
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry8);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(biFunction0).apply(anyString() , anyInt());
      Integer integer0 = patriciaTrie0.compute("ptC", biFunction0);
      assertNull(integer0);
      
      OrderedMapIterator<String, Integer> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      assertNotNull(orderedMapIterator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.PatriciaTrie", (Object) null, (-2052));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        patriciaTrie1.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("<w_DWy{", "<w_DWy{");
      assertNull(object0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      Object object1 = patriciaTrie0.put("", "<w_DWy{");
      assertNull(object1);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      String string0 = patriciaTrie2.compute("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", biFunction0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(string0);
      
      String string1 = "<H,35O}67F";
      String string2 = null;
      Object object2 = patriciaTrie0.get((Object) null);
      assertNull(object2);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "<H,35O}67F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("DAgsVSH", patriciaTrie0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      String string0 = patriciaTrie0.previousKey("");
      assertNull(string0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      Integer integer0 = new Integer((-40));
      assertEquals((-40), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1504);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1504, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = patriciaTrie1.put("", integer1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(integer1.equals((Object)integer0));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNull(integer2);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.subMap("+-&NH|LZ[LV[K(p0H{", "+-&NH|LZ[LV[K(p0H{");
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, "F+s)d`4eY9(s", 1504);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Integer integer3 = new Integer((-40));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-40), (int)integer3);
      assertNotNull(integer3);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer3, "DAgsVSH", (-40));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = patriciaTrie0.selectValue("");
      assertNull(abstractMap_SimpleEntry0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("%pdF|_.]{}", "%pdF|_.]{}");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("%pdF|_.]{}", "{c9-");
      assertEquals("%pdF|_.]{}", object1);
      assertNotNull(object1);
      
      patriciaTrie0.decrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lastEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      Collection<String> collection0 = patriciaTrie1.values();
      assertFalse(collection0.contains("{c9-"));
      assertNotNull(collection0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry("%pdF|_.]{}");
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.lowerEntry("%pdF|_.]{}");
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie1.tailMap("");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("L", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string1 = patriciaTrie0.put("Q rY3M!/RC", " [");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("L", ":57SXP~MTG51?q");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", string2);
      assertNotNull(string2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      String string3 = patriciaTrie1.put("", "");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree("`8n@", 18, 13);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie1);
      
      patriciaTrie0.clear();
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      
      Object object0 = patriciaTrie1.put("#S~N)W.*X_z-28C", "DAgsVSH");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(object0);
      
      Integer integer0 = new Integer(983);
      assertEquals(983, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "#S~N)W.*X_z-28C", 983);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object1 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals(983, object1);
      assertNotNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", object1, 983);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer1 = new Integer(983);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)object1));
      assertEquals(983, (int)integer1);
      assertNotNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("", integer1, 43);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)object1));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object2 = abstractPatriciaTrie_TrieEntry2.getKey();
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)object1));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertEquals("", object2);
      assertNotNull(object2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>(" B/o=05w>xG", "", 983);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry1.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(object1.equals((Object)integer1));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry5);
      assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      String string0 = patriciaTrie2.put("", "org.apache.commons.collections4.trie.PatriciaTrie");
      assertNull(string0);
      
      String string1 = patriciaTrie2.put("org.apache.commons.collections4.trie.PatriciaTrie", "Cannot determine prefix outside of Character boundaries");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = patriciaTrie2.subtree((String) null, 983, 983);
      assertNull(abstractPatriciaTrie_TrieEntry6);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(object0, object0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("null");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("invalid lookup: ", "invalid lookup: ", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry2.key = "invalid lookup: ";
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.clear();
      Object object1 = patriciaTrie1.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Object>("invalid lookup: ", (Object) null, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      abstractPatriciaTrie_TrieEntry5.key = "";
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = abstractPatriciaTrie_TrieEntry5.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry7 = patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry6);
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertSame(abstractPatriciaTrie_TrieEntry6, abstractPatriciaTrie_TrieEntry7);
      assertSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry6);
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      
      String string0 = patriciaTrie0.put("", "FRRhH|je");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(object0, object0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("null");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("invalid lookup: ", "invalid lookup: ", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry2.key = "invalid lookup: ";
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.clear();
      Object object1 = patriciaTrie1.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Object>("invalid lookup: ", (Object) null, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      abstractPatriciaTrie_TrieEntry5.key = "";
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<String, Object>(" [", abstractPatriciaTrie_TrieEntry2, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      
      abstractPatriciaTrie_TrieEntry5.parent = abstractPatriciaTrie_TrieEntry6;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.parent.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry7 = abstractPatriciaTrie_TrieEntry5.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry8 = patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry7);
      assertTrue(abstractPatriciaTrie_TrieEntry8.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry8.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry8.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry8, abstractPatriciaTrie_TrieEntry7);
      assertSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry8);
      assertNotNull(abstractPatriciaTrie_TrieEntry8);
      
      String string0 = patriciaTrie0.put("", "FRRhH|je");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put(" [", "I)32g9*686O7r#BrPe");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry9 = patriciaTrie0.subtree((String) null, 0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry9.equals((Object)abstractPatriciaTrie_TrieEntry3));
      assertFalse(abstractPatriciaTrie_TrieEntry9.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry9.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry9.isInternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry9, abstractPatriciaTrie_TrieEntry3);
      assertNotNull(abstractPatriciaTrie_TrieEntry9);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "Key is out of range: ";
      Collection<Integer> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", integer0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("DAgsVSH", patriciaTrie0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      String string0 = patriciaTrie0.previousKey("");
      assertNull(string0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotNull(patriciaTrie2);
      
      Integer integer0 = patriciaTrie2.put("ftO&\"yXw8$R}f]AM;", (Integer) null);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(integer0);
      
      Integer integer1 = patriciaTrie1.put("DAgsVSH", (Integer) null);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNull(integer1);
      
      Integer integer2 = patriciaTrie2.remove((Object) null);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(3036);
      assertEquals(3036, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = patriciaTrie0.put(",NBNlN[o&Q~3Oom", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry1);
      
      Integer integer1 = new Integer(2501);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2501, (int)integer1);
      assertNotNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "Ae8M4d%~J6cqT@;*r", 2501);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Integer integer2 = new Integer(16);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(16, (int)integer2);
      assertNotNull(integer2);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer2, "", 3036);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Integer, String>(abstractPatriciaTrie_TrieEntry0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractMap_SimpleEntry2);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry3 = patriciaTrie0.put("Ae8M4d%~J6cqT@;*r", abstractMap_SimpleEntry2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.equals((Object)abstractPatriciaTrie_TrieEntry1));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry3);
      
      String string0 = patriciaTrie0.selectKey("Ae8M4d%~J6cqT@;*r");
      assertEquals("Ae8M4d%~J6cqT@;*r", string0);
      assertNotNull(string0);
      
      int int0 = patriciaTrie0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie1.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-3934));
      assertEquals((-3934), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey((String) null, (-826));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer1 = new Integer((-3934));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-3934), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = hashMap0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      
      Integer integer3 = hashMap0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", integer0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals((-3934), (int)integer3);
      assertNotNull(integer3);
      
      int int0 = patriciaTrie0.lengthInBits("p");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(16, int0);
      
      Integer integer4 = hashMap0.put((String) null, (Integer) null);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer4);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("p", 1607, 0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Map.Entry<String, Integer> map_Entry0 = patriciaTrie0.select((String) null);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-3934));
      assertEquals((-3934), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap((String) null);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie2.prefixMap((String) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, sortedMap1.size());
      assertTrue(sortedMap1.isEmpty());
      assertNotNull(sortedMap1);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("%pdF|_.]{}", "%pdF|_.]{}");
      assertNull(object0);
      
      patriciaTrie0.decrementSize();
      String string0 = patriciaTrie0.nextKey("%pdF|_.]{}");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      String string0 = patriciaTrie1.put("gPVdo{PdaHJ", "");
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string0);
      
      hashMap0.putAll(hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie2);
      
      String string1 = patriciaTrie2.firstKey();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertEquals("gPVdo{PdaHJ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(".3S:MGlxRKh", (Object) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>>(" > ", abstractMap_SimpleImmutableEntry0, (-827));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>>((String) null, abstractMap_SimpleImmutableEntry0, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      Comparator<Map.Entry<Object, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>>("", abstractMap_SimpleImmutableEntry0, (-827));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry1.parent = null;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry2.key = "Yy6*ef`MO@e@j{l If";
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      
      Comparator<Map.Entry<Integer, Object>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = abstractPatriciaTrie_TrieEntry1.setKeyValue("383", abstractMap_SimpleImmutableEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      String string0 = abstractPatriciaTrie_TrieEntry2.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertNotNull(string0);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertFalse(boolean0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string1 = patriciaTrie0.nextKey("Entry(key=Yy6*ef`MO@e@j{l If [-827], value=.3S:MGlxRKh=null, parent=null, left=Yy6*ef`MO@e@j{l If [-827], right=null, predecessor=Yy6*ef`MO@e@j{l If [-827])");
      assertNull(string1);
      
      patriciaTrie0.decrementSize();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("ROOT", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(object0);
      
      String string0 = hashMap0.put("predecessor=", "predecessor=");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(1678);
      assertEquals(1678, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = patriciaTrie0.putIfAbsent("}\n", integer0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(object1);
      
      Integer integer1 = new Integer(1678);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1678, (int)integer1);
      assertNotNull(integer1);
      
      Object object2 = patriciaTrie1.put("predecessor=", integer1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(object2);
      
      Object object3 = patriciaTrie1.put("}\n", "}\n");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(object3);
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = patriciaTrie0.firstKey();
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertEquals("ROOT", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie1.nextKey("");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("", patriciaTrie0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>>("mMI0D_#[t", abstractMap_SimpleEntry0, 32768);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.followRight(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-3934));
      assertEquals((-3934), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap((String) null);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotNull(patriciaTrie3);
      
      Set<String> set0 = patriciaTrie3.keySet();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotNull(set0);
      
      Object object0 = patriciaTrie3.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", (Object) null);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.lowerEntry("keyAnalyzer");
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie3.clear();
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("]={\n", "]={\n");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = hashMap0.put("The offsets and lengths must be at Character boundaries", "The offsets and lengths must be at Character boundaries");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap1);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(hashMap1, hashMap0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("The offsets and lengths must be at Character boundaries", 10, 10);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotSame(hashMap1, hashMap0);
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(355);
      assertEquals(355, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, (String) null);
      assertNotNull(abstractMap_SimpleEntry0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie1);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry1);
      
      Integer integer1 = new Integer(355);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(355, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(3036);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(3036, (int)integer2);
      assertNotNull(integer2);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer2, ",NBNlN[o&Q~3Oom", 1174);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer3 = new Integer(2501);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(2501, (int)integer3);
      assertNotNull(integer3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", abstractPatriciaTrie_TrieEntry0, 3036);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      
      String string0 = patriciaTrie2.toString();
      assertEquals("Trie[1]={\n  Entry(key=org.apache.commons.collections4.trie.PatriciaTrie [9], value=355=null, parent=ROOT, left=ROOT, right=org.apache.commons.collections4.trie.PatriciaTrie [9], predecessor=org.apache.commons.collections4.trie.PatriciaTrie [9])\n}\n", string0);
      assertNotNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.followLeft(abstractPatriciaTrie_TrieEntry2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie3.subtree("RG[d}}l^agnv", 482, (-1297));
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie2.followRight(abstractPatriciaTrie_TrieEntry2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie4);
      
      Comparator<? super String> comparator0 = patriciaTrie4.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 768);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", integer0, 768);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.parent;
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, abstractPatriciaTrie_TrieEntry2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("L", "L");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("<_e", "-<IN\u0005l");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap1);
      String string0 = patriciaTrie1.put("<_e", "The offsets and lengths must be at Character boundaries");
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("]", (String) null, 16);
      String string1 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=] [16], value=null, parent=null, left=] [16], right=null, predecessor=] [16])", string1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1);
      patriciaTrie0.put(";>/&cbYcMcz6c/w0{u", integer0);
      patriciaTrie0.headMap("TYcZKzYQ");
      patriciaTrie0.prefixMap("TYcZKzYQ");
      patriciaTrie0.mapIterator();
      Integer integer1 = new Integer(1);
      patriciaTrie0.put("(59agLsp7k9", integer1);
      patriciaTrie0.put("c,RQ:'h;LEPQ1gU'", (Integer) null);
      Integer integer2 = new Integer((-647));
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer2, "(59agLsp7k9");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, String>(abstractMap_SimpleEntry0, ";>/&cbYcMcz6c/w0{u", 322);
      abstractPatriciaTrie_TrieEntry0.getValue();
      Integer integer3 = patriciaTrie0.remove((Object) ";>/&cbYcMcz6c/w0{u");
      assertTrue(integer3.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator");
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>>("~L@vo))UPj", abstractMap_SimpleEntry1, 2112);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.higherEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.put("", "");
      patriciaTrie0.bitIndex("", (String) null);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie2.forEach(biConsumer0);
      patriciaTrie0.lengthInBits("org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "hd");
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie3.put("  ", (String) null);
      patriciaTrie2.decrementSize();
      patriciaTrie0.put("rC9U%(C-&Q", (String) null);
      patriciaTrie3.put("1w\"jlELy{-*oO<u2A}#", "hd");
      patriciaTrie2.put("  ", "");
      patriciaTrie0.put("hd", "  ");
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, object0, (-966));
      abstractPatriciaTrie_TrieEntry0.toString();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Integer integer1 = new Integer((-966));
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer1, 0);
      Integer integer2 = (Integer)abstractPatriciaTrie_TrieEntry1.value;
      abstractPatriciaTrie_TrieEntry0.value = (Object) integer2;
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Object object1 = patriciaTrie1.put("Entry(key=0 [-966], value=java.lang.Object@3918c580, parent=null, left=0 [-966], right=null, predecessor=0 [-966])", (Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.select("");
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.forEach(biConsumer0);
      Object object0 = patriciaTrie0.put("ZN04|K", "ZN04|K");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Cm$Vu", "tB?%A`&#O", 747);
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.bitsPerElement();
      Object object0 = new Object();
      patriciaTrie0.put("", object0);
      boolean boolean0 = patriciaTrie0.containsKey("\"S`Umg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.bitsPerElement();
      boolean boolean0 = patriciaTrie0.containsKey("\"S`Umg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      Integer integer0 = new Integer(3036);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, ",NBNlN[o&Q~3Oom");
      patriciaTrie0.put(",NBNlN[o&Q~3Oom", abstractMap_SimpleEntry0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("L", "");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("]={\n", "", 32768);
      Map.Entry.comparingByValue();
      Integer integer0 = new Integer(893);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer1 = new Integer((-1));
      patriciaTrie0.put("]={\n", integer1);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Key is out of range: ", integer1, 112);
      abstractPatriciaTrie_TrieEntry1.equals(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("hvY5^Uo8", (Object) null, 16);
      abstractPatriciaTrie_TrieEntry2.toString();
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      Integer integer2 = new Integer(1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("Entry(", "]={\n", 0);
      abstractPatriciaTrie_TrieEntry3.isInternalNode();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      int int0 = patriciaTrie1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      Integer integer0 = new Integer(3036);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "");
      patriciaTrie0.put(",NBNlN[o&Q~3Oom", abstractMap_SimpleEntry0);
      Integer integer1 = new Integer(2501);
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "Ae8M4d%~J6cqT@;*r", 2501);
      Map.Entry.comparingByValue();
      Integer integer2 = new Integer(16);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", ",NBNlN[o&Q~3Oom", 2501);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.toString();
      patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry2);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.put("Td*u/6hk:Uy(sVj#9(A", "Ae8M4d%~J6cqT@;*r");
      // Undeclared exception!
      try { 
        patriciaTrie2.subtree("e'^V<", 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>("", "");
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      Map.Entry.comparingByKey();
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>("", abstractMap_SimpleEntry0, 0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0, abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(abstractPatriciaTrie_TrieEntry0, abstractMap_SimpleEntry1, 16);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      BiFunction<String, Integer, Integer> biFunction0 = (BiFunction<String, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , anyInt());
      patriciaTrie0.compute("ptC", biFunction0);
      patriciaTrie0.mapIterator();
      patriciaTrie0.higherEntry("=");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("=", "=", 0);
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("=", (Object) null, (-1));
      Map.Entry.comparingByValue();
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.equals("=");
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      int int0 = 173;
      Integer integer0 = new Integer(173);
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "/2BI{", 160);
      abstractPatriciaTrie_TrieEntry2.isExternalNode();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("\n", "\n", 0);
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry3.isInternalNode();
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator";
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractPatriciaTrie_TrieEntry2, "Entry(key== [0], value==, parent=ROOT, left== [0], right=null, predecessor== [0])");
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", abstractMap_SimpleEntry0, 173);
      abstractPatriciaTrie_TrieEntry4.isEmpty();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.size();
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = null;
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>((Integer) null, patriciaTrie0);
      int int0 = (-4438);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, Object>>((Integer) null, abstractMap_SimpleEntry0, (-4438));
      Object object0 = abstractPatriciaTrie_TrieEntry0.getValue();
      // Undeclared exception!
      try { 
        patriciaTrie0.containsKey(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1);
      patriciaTrie0.put(";>/&cbYcMcz6c/w0{u", integer0);
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.headMap("TYcZKzYQ");
      assertEquals(1, sortedMap0.size());
      
      patriciaTrie0.prefixMap("TYcZKzYQ");
      patriciaTrie0.mapIterator();
      Integer integer1 = new Integer(322);
      patriciaTrie0.put("", integer1);
      SortedMap<String, Integer> sortedMap1 = patriciaTrie0.subMap("", "'U0SU");
      assertFalse(sortedMap1.equals((Object)sortedMap0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, patriciaTrie0, 322);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, integer0, 1);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("%pdF|_.]{}", "%pdF|_.]{}");
      patriciaTrie0.decrementSize();
      patriciaTrie0.firstEntry();
      String string0 = patriciaTrie0.nextKey("+DvI. UXhPBEAj2C<<+");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("L", "");
      hashMap0.put("<_e", "<_e");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "L", (-2));
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key= [-2], value=L, parent=null, left= [-2], right=null, predecessor= [-2])", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("%pdF|_.]{}", "%pdF|_.]{}");
      String string0 = null;
      patriciaTrie0.put("%pdF|_.]{}", "{c9-");
      patriciaTrie0.decrementSize();
      patriciaTrie0.firstEntry();
      patriciaTrie0.ceilingEntry((String) null);
      patriciaTrie0.lastEntry();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.values();
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Integer integer0 = new Integer(322);
      Integer integer1 = new Integer((-726));
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, "", (-726));
      Map.Entry.comparingByValue();
      Integer integer2 = new Integer(16);
      Integer integer3 = new Integer((-726));
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer3, "", 16);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.put("", abstractMap_SimpleEntry0);
      String string0 = patriciaTrie0.selectKey("");
      assertNotNull(string0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>(patriciaTrie0);
      int int0 = patriciaTrie2.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.previousKey("[c;cNp");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.size();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>((String) null, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      // Undeclared exception!
      try { 
        patriciaTrie2.subMap("[c;cNp", "0B!93Hq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.get((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.getNearestEntryForKey("cp2)-ZknT", 0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie2.put("Cannot delete root Entry!", "cp2)-ZknT");
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      patriciaTrie2.lowerEntry("");
      patriciaTrie2.isBitSet("=", (-3), 1415);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie2.computeIfPresent("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet", biFunction0);
      patriciaTrie3.entrySet();
      String string0 = null;
      int int0 = (-129);
      // Undeclared exception!
      try { 
        patriciaTrie2.put((String) null, "AO%PK|H7nk=K>!`N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-399));
      hashMap0.put("", integer0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.prefixMap((String) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie1.keySet();
      patriciaTrie1.put("keyAnalyzer", integer0);
      patriciaTrie1.lowerEntry((String) null);
      patriciaTrie1.clear();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Map.Entry<String, String> map_Entry0 = patriciaTrie0.select("2|^Hk ,S|y");
      assertNull(map_Entry0);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("aL+Ft=!lK");
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer((-2));
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer1, 2);
      Integer integer2 = new Integer(2);
      Integer integer3 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer2, integer3, (-564));
      Integer integer4 = abstractPatriciaTrie_TrieEntry1.setKeyValue(integer3, integer2);
      abstractPatriciaTrie_TrieEntry1.setKeyValue(integer4, integer4);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
      Object object0 = new Object();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>(")", object0, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = null;
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Object object0 = new Object();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(object0, object0, 0);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("null");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("invalid lookup: ", "invalid lookup: ", 0);
      abstractPatriciaTrie_TrieEntry2.key = "invalid lookup: ";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry3);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.clear();
      patriciaTrie1.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("invalid lookup: ", (Object) null, 0);
      abstractPatriciaTrie_TrieEntry4.key = "";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry5);
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry7 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator");
      assertNull(abstractPatriciaTrie_TrieEntry7);
      
      patriciaTrie1.lowerEntry("");
      SortedMap<String, String> sortedMap0 = patriciaTrie0.tailMap(" -> ");
      assertEquals(0, sortedMap0.size());
  }
}
