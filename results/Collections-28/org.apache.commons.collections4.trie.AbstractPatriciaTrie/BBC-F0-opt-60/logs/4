* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-60
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 13019
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 2026020719
* Starting evolution
bbc usage percentage is: 60%
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 11:04:58.193 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 11:04:58.193 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 11:05:01.435 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 11:05:03.982 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 602s and 1082 generations, 367032 statements, best individual has fitness: 1394.0
* Minimizing test suite
[MASTER] 11:16:09.346 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 59%
* Total number of goals: 822
* Number of covered goals: 485
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 53%
* Total number of goals: 602
* Number of covered goals: 319
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 32
* Number of covered goals: 32
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 57%
* Total number of goals: 569
* Number of covered goals: 324
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 65%
* Total number of goals: 186
* Number of covered goals: 121
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 53%
* Total number of goals: 602
* Number of covered goals: 317
* Generated 180 tests with total length 2718
* Resulting test suite's coverage: 51% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 11:16:57.806 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7292166666666666% of time used, but only 46/180 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 19%
* Compiling and checking tests
[MASTER] 11:17:05.936 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_53_1634037425842/org/apache/commons/collections4/trie/AbstractPatriciaTrie_53_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_53_1634037425842/org/apache/commons/collections4/trie/AbstractPatriciaTrie_53_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:05.936 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:05.936 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:05.940 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 63
[MASTER] 11:17:05.940 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_53_1634037425842/org/apache/commons/collections4/trie/AbstractPatriciaTrie_53_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:05.940 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:05.941 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_53_1634037425842/org/apache/commons/collections4/trie/AbstractPatriciaTrie_53_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:05 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import org.apache.commons.collections4.OrderedMapIterator;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_53_tmp__ESTest extends AbstractPatriciaTrie_53_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       Integer integer0 = new Integer(1880);
29:       assertNotNull(integer0);
30:       assertEquals(1880, (int)integer0);
31:       
32:       AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("", integer0);
33:       assertNotNull(abstractMap_SimpleEntry0);
34:       
35:       Integer integer1 = new Integer(1880);
36:       assertNotNull(integer1);
37:       assertEquals(1880, (int)integer1);
38:       assertTrue(integer1.equals((Object)integer0));
39:       
40:       Integer integer2 = abstractMap_SimpleEntry0.setValue(integer0);
41:       assertNotNull(integer2);
42:       assertEquals(1880, (int)integer2);
43:       assertTrue(integer0.equals((Object)integer1));
44:       assertTrue(integer2.equals((Object)integer1));
45:       
46:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer1, 1188);
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
51:       assertTrue(integer0.equals((Object)integer1));
52:       assertTrue(integer1.equals((Object)integer0));
53:       assertTrue(integer1.equals((Object)integer2));
54:       
55:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer0, 1880);
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
58:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
59:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
60:       assertTrue(integer0.equals((Object)integer1));
61:       
62:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
63:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
64:       assertNotNull(comparator1);
65:       
66:       Integer integer3 = new Integer(622);
67:       assertNotNull(integer3);
68:       assertEquals(622, (int)integer3);
69:       assertFalse(integer3.equals((Object)integer1));
70:       assertFalse(integer3.equals((Object)integer0));
71:       assertFalse(integer3.equals((Object)integer2));
72:       
73:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
75:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
78:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
79:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
83:       
84:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer3, 1880);
85:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
86:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
88:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
89:       assertFalse(integer0.equals((Object)integer3));
90:       assertTrue(integer0.equals((Object)integer1));
91:       assertFalse(integer3.equals((Object)integer1));
92:       assertFalse(integer3.equals((Object)integer0));
93:       assertFalse(integer3.equals((Object)integer2));
94:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
95:       
96:       Object object0 = new Object();
97:       assertNotNull(object0);
98:       
99:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(object0);
100:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
101:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
103:       assertFalse(boolean0);
104:       assertFalse(integer0.equals((Object)integer3));
105:       assertTrue(integer0.equals((Object)integer1));
106:       assertTrue(integer1.equals((Object)integer0));
107:       assertFalse(integer1.equals((Object)integer3));
108:       assertTrue(integer1.equals((Object)integer2));
109:       
110:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Integer, Integer>>> comparator2 = Map.Entry.comparingByKey();
111:       assertNotNull(comparator2);
112:       
113:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
114:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
115:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
116:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
118:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
121:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
122:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
123:       
124:       Comparator<Map.Entry<Object, String>> comparator3 = Map.Entry.comparingByValue();
125:       assertNotNull(comparator3);
126:       
127:       boolean boolean1 = abstractPatriciaTrie_TrieEntry1.equals(abstractPatriciaTrie_TrieEntry0);
128:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
129:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
130:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
132:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
133:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
134:       assertTrue(boolean1);
135:       assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
136:       assertFalse(boolean1 == boolean0);
137:       assertFalse(integer0.equals((Object)integer3));
138:       assertTrue(integer0.equals((Object)integer1));
139:       assertTrue(integer1.equals((Object)integer0));
140:       assertFalse(integer1.equals((Object)integer3));
141:       assertTrue(integer1.equals((Object)integer2));
142:       assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry2));
143:       
144:       abstractPatriciaTrie_TrieEntry2.bitIndex = 0;
145:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
146:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
148:       
149:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
150:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
151:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
152:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
153:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
154:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
155:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
156:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
157:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
158:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
159:       
160:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
161:       assertTrue(hashMap0.isEmpty());
162:       assertEquals(0, hashMap0.size());
163:       assertNotNull(hashMap0);
164:       
165:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
166:       assertTrue(hashMap0.isEmpty());
167:       assertEquals(0, hashMap0.size());
168:       assertNotNull(patriciaTrie0);
169:       
170:       String string0 = patriciaTrie0.put("", "");
171:       assertTrue(hashMap0.isEmpty());
172:       assertEquals(0, hashMap0.size());
173:       assertNull(string0);
174:       
175:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("");
176:       assertTrue(hashMap0.isEmpty());
177:       assertEquals(0, hashMap0.size());
178:       assertNull(abstractPatriciaTrie_TrieEntry3);
179:       
180:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.lowerEntry("");
181:       assertTrue(hashMap0.isEmpty());
182:       assertEquals(0, hashMap0.size());
183:       assertNull(abstractPatriciaTrie_TrieEntry4);
184:       
185:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
186:       assertNotNull(patriciaTrie1);
187:       
188:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.ceilingEntry("");
189:       assertNull(abstractPatriciaTrie_TrieEntry5);
190:       
191:       OrderedMapIterator<String, AbstractMap.SimpleEntry<Object, Object>> orderedMapIterator0 = patriciaTrie1.mapIterator();
192:       assertFalse(orderedMapIterator0.hasPrevious());
193:       assertFalse(orderedMapIterator0.hasNext());
194:       assertNotNull(orderedMapIterator0);
195:       
196:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(patriciaTrie1);
197:       assertNotNull(patriciaTrie2);
198:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
199:       
200:       String string1 = patriciaTrie2.nextKey("qpkL#`/");
201:       assertNull(string1);
202:       assertNotSame(patriciaTrie1, patriciaTrie2);
203:       assertNotSame(patriciaTrie2, patriciaTrie1);
204:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
205:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
206:   }
207: }
RegularFileObject[/tmp/EvoSuite_53_1634037425842/org/apache/commons/collections4/trie/AbstractPatriciaTrie_53_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:05 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_53_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_53_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_53_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_53_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
139:     );
140:   }
141: }

[MASTER] 11:17:05.947 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(1880);
assertNotNull(integer0);
assertEquals(1880, (int)integer0);

AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("", integer0);
assertNotNull(abstractMap_SimpleEntry0);

Integer integer1 = new Integer(1880);
assertNotNull(integer1);
assertEquals(1880, (int)integer1);
assertTrue(integer1.equals((Object)integer0));

Integer integer2 = abstractMap_SimpleEntry0.setValue(integer0);
assertNotNull(integer2);
assertEquals(1880, (int)integer2);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer1, 1188);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)integer2));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer0, 1880);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer0.equals((Object)integer1));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Integer integer3 = new Integer(622);
assertNotNull(integer3);
assertEquals(622, (int)integer3);
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer3, 1880);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));

Object object0 = new Object();
assertNotNull(object0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(object0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(boolean0);
assertFalse(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer3));
assertTrue(integer1.equals((Object)integer2));

Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Integer, Integer>>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());

Comparator<Map.Entry<Object, String>> comparator3 = Map.Entry.comparingByValue();
assertNotNull(comparator3);

boolean boolean1 = abstractPatriciaTrie_TrieEntry1.equals(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(boolean1);
assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
assertFalse(boolean1 == boolean0);
assertFalse(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer3));
assertTrue(integer1.equals((Object)integer2));
assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry2));

abstractPatriciaTrie_TrieEntry2.bitIndex = 0;
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());

HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("", "");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.lowerEntry("");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(abstractPatriciaTrie_TrieEntry4);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.ceilingEntry("");
assertNull(abstractPatriciaTrie_TrieEntry5);

OrderedMapIterator<String, AbstractMap.SimpleEntry<Object, Object>> orderedMapIterator0 = patriciaTrie1.mapIterator();
assertFalse(orderedMapIterator0.hasPrevious());
assertFalse(orderedMapIterator0.hasNext());
assertNotNull(orderedMapIterator0);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(patriciaTrie1);
assertNotNull(patriciaTrie2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));

String string1 = patriciaTrie2.nextKey("qpkL#`/");
assertNull(string1);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));


[MASTER] 11:17:06.145 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_57_1634037426084/org/apache/commons/collections4/trie/AbstractPatriciaTrie_57_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_57_1634037426084/org/apache/commons/collections4/trie/AbstractPatriciaTrie_57_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:06.145 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:06.145 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:06.145 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 62
[MASTER] 11:17:06.145 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_57_1634037426084/org/apache/commons/collections4/trie/AbstractPatriciaTrie_57_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:06.145 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:06.146 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_57_1634037426084/org/apache/commons/collections4/trie/AbstractPatriciaTrie_57_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:06 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_57_tmp__ESTest extends AbstractPatriciaTrie_57_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Integer integer0 = new Integer(1880);
28:       assertNotNull(integer0);
29:       assertEquals(1880, (int)integer0);
30:       
31:       AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("", integer0);
32:       assertNotNull(abstractMap_SimpleEntry0);
33:       
34:       Integer integer1 = new Integer(1880);
35:       assertNotNull(integer1);
36:       assertEquals(1880, (int)integer1);
37:       assertTrue(integer1.equals((Object)integer0));
38:       
39:       Integer integer2 = abstractMap_SimpleEntry0.setValue(integer0);
40:       assertNotNull(integer2);
41:       assertEquals(1880, (int)integer2);
42:       assertTrue(integer0.equals((Object)integer1));
43:       assertTrue(integer2.equals((Object)integer1));
44:       
45:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer1, 1188);
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
49:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
50:       assertTrue(integer0.equals((Object)integer1));
51:       assertTrue(integer1.equals((Object)integer2));
52:       assertTrue(integer1.equals((Object)integer0));
53:       
54:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer0, 1880);
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
57:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
58:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
59:       assertTrue(integer0.equals((Object)integer1));
60:       
61:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
62:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
63:       assertNotNull(comparator1);
64:       
65:       Integer integer3 = new Integer(622);
66:       assertNotNull(integer3);
67:       assertEquals(622, (int)integer3);
68:       assertFalse(integer3.equals((Object)integer0));
69:       assertFalse(integer3.equals((Object)integer2));
70:       assertFalse(integer3.equals((Object)integer1));
71:       
72:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
75:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
78:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
82:       
83:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer3, 1880);
84:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
85:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
87:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
88:       assertFalse(integer0.equals((Object)integer3));
89:       assertTrue(integer0.equals((Object)integer1));
90:       assertFalse(integer3.equals((Object)integer0));
91:       assertFalse(integer3.equals((Object)integer2));
92:       assertFalse(integer3.equals((Object)integer1));
93:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
94:       
95:       Object object0 = new Object();
96:       assertNotNull(object0);
97:       
98:       HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
99:       assertTrue(hashMap0.isEmpty());
100:       assertEquals(0, hashMap0.size());
101:       assertNotNull(hashMap0);
102:       
103:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
104:       assertTrue(hashMap0.isEmpty());
105:       assertEquals(0, hashMap0.size());
106:       assertNotNull(patriciaTrie0);
107:       
108:       Object object1 = patriciaTrie0.put("", "");
109:       assertTrue(hashMap0.isEmpty());
110:       assertEquals(0, hashMap0.size());
111:       assertNull(object1);
112:       
113:       Integer integer4 = new Integer((-1368));
114:       assertNotNull(integer4);
115:       assertEquals((-1368), (int)integer4);
116:       assertFalse(integer4.equals((Object)integer1));
117:       assertFalse(integer4.equals((Object)integer3));
118:       assertFalse(integer4.equals((Object)integer2));
119:       assertFalse(integer4.equals((Object)integer0));
120:       
121:       Integer integer5 = new Integer(1749);
122:       assertNotNull(integer5);
123:       assertEquals(1749, (int)integer5);
124:       assertFalse(integer5.equals((Object)integer1));
125:       assertFalse(integer5.equals((Object)integer2));
126:       assertFalse(integer5.equals((Object)integer0));
127:       assertFalse(integer5.equals((Object)integer3));
128:       assertFalse(integer5.equals((Object)integer4));
129:       
130:       Object object2 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", integer5);
131:       assertTrue(hashMap0.isEmpty());
132:       assertEquals(0, hashMap0.size());
133:       assertNull(object2);
134:       assertFalse(integer5.equals((Object)integer1));
135:       assertFalse(integer5.equals((Object)integer2));
136:       assertFalse(integer5.equals((Object)integer0));
137:       assertFalse(integer5.equals((Object)integer3));
138:       assertFalse(integer5.equals((Object)integer4));
139:       
140:       String string0 = patriciaTrie0.nextKey("org.apache.commons.collections4.trie.PatriciaTrie");
141:       assertTrue(hashMap0.isEmpty());
142:       assertEquals(0, hashMap0.size());
143:       assertNull(string0);
144:       
145:       PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
146:       assertNotNull(patriciaTrie1);
147:       
148:       int int0 = patriciaTrie1.lengthInBits("org.apache.commons.collections4.trie.PatriciaTrie");
149:       assertEquals(784, int0);
150:       
151:       AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = patriciaTrie1.remove((Object) null);
152:       assertNull(abstractMap_SimpleEntry1);
153:       
154:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry2, "Trie[", 556);
155:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
156:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
157:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
158:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
159:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
160:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
161:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
162:       assertFalse(integer0.equals((Object)integer5));
163:       assertFalse(integer0.equals((Object)integer4));
164:       assertFalse(integer0.equals((Object)integer3));
165:       assertFalse(integer0.equals((Object)int0));
166:       assertTrue(integer0.equals((Object)integer1));
167:       assertFalse(integer3.equals((Object)integer0));
168:       assertFalse(integer3.equals((Object)integer5));
169:       assertFalse(integer3.equals((Object)integer2));
170:       assertFalse(integer3.equals((Object)integer1));
171:       assertFalse(integer3.equals((Object)int0));
172:       assertFalse(integer3.equals((Object)integer4));
173:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
174:       
175:       Object object3 = hashMap0.put("org.apache.commons.collections4.trie.PatriciaTrie", patriciaTrie1);
176:       assertFalse(hashMap0.isEmpty());
177:       assertEquals(1, hashMap0.size());
178:       assertNull(object3);
179:       
180:       String string1 = abstractPatriciaTrie_TrieEntry3.toString();
181:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
182:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
183:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
184:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
185:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
186:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
187:       assertNotNull(string1);
188:       assertEquals("Entry(key=Entry(key==1880 [1880], value=622, parent=null, left==1880 [1880], right=null, predecessor==1880 [1880]) [556], value=Trie[, parent=null, left=Entry(key==1880 [1880], value=622, parent=null, left==1880 [1880], right=null, predecessor==1880 [1880]) [556], right=null, predecessor=Entry(key==1880 [1880], value=622, parent=null, left==1880 [1880], right=null, predecessor==1880 [1880]) [556])", string1);
189:       assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
190:       assertFalse(integer0.equals((Object)integer5));
191:       assertFalse(integer0.equals((Object)integer4));
192:       assertFalse(integer0.equals((Object)integer3));
193:       assertFalse(integer0.equals((Object)int0));
194:       assertTrue(integer0.equals((Object)integer1));
195:       assertFalse(integer3.equals((Object)integer0));
196:       assertFalse(integer3.equals((Object)integer5));
197:       assertFalse(integer3.equals((Object)integer2));
198:       assertFalse(integer3.equals((Object)integer1));
199:       assertFalse(integer3.equals((Object)int0));
200:       assertFalse(integer3.equals((Object)integer4));
201:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
202:       
203:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0.left, (String) null, 556);
204:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
205:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
206:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
207:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
208:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
209:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
210:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
211:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
212:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
213:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
214:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
215:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
216:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
217:       assertFalse(integer0.equals((Object)integer5));
218:       assertFalse(integer0.equals((Object)integer4));
219:       assertFalse(integer0.equals((Object)integer3));
220:       assertFalse(integer0.equals((Object)int0));
221:       assertTrue(integer0.equals((Object)integer1));
222:       assertFalse(integer1.equals((Object)integer4));
223:       assertFalse(integer1.equals((Object)int0));
224:       assertFalse(integer1.equals((Object)integer3));
225:       assertTrue(integer1.equals((Object)integer2));
226:       assertTrue(integer1.equals((Object)integer0));
227:       assertFalse(integer1.equals((Object)integer5));
228:       assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry2));
229:       
230:       String string2 = abstractPatriciaTrie_TrieEntry3.toString();
231:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
232:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
233:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
234:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
235:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
236:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
237:       assertNotNull(string2);
238:       assertEquals("Entry(key=Entry(key==1880 [1880], value=622, parent=null, left==1880 [1880], right=null, predecessor==1880 [1880]) [556], value=Trie[, parent=null, left=Entry(key==1880 [1880], value=622, parent=null, left==1880 [1880], right=null, predecessor==1880 [1880]) [556], right=null, predecessor=Entry(key==1880 [1880], value=622, parent=null, left==1880 [1880], right=null, predecessor==1880 [1880]) [556])", string2);
239:       assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
240:       assertFalse(integer0.equals((Object)integer5));
241:       assertFalse(integer0.equals((Object)integer4));
242:       assertFalse(integer0.equals((Object)integer3));
243:       assertFalse(integer0.equals((Object)int0));
244:       assertTrue(integer0.equals((Object)integer1));
245:       assertFalse(integer3.equals((Object)integer0));
246:       assertFalse(integer3.equals((Object)integer5));
247:       assertFalse(integer3.equals((Object)integer2));
248:       assertFalse(integer3.equals((Object)integer1));
249:       assertFalse(integer3.equals((Object)int0));
250:       assertFalse(integer3.equals((Object)integer4));
251:       assertTrue(string2.equals((Object)string1));
252:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
253:   }
254: }
RegularFileObject[/tmp/EvoSuite_57_1634037426084/org/apache/commons/collections4/trie/AbstractPatriciaTrie_57_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:06 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_57_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_57_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_57_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_57_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
139:     );
140:   }
141: }

[MASTER] 11:17:06.154 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(1880);
assertNotNull(integer0);
assertEquals(1880, (int)integer0);

AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("", integer0);
assertNotNull(abstractMap_SimpleEntry0);

Integer integer1 = new Integer(1880);
assertNotNull(integer1);
assertEquals(1880, (int)integer1);
assertTrue(integer1.equals((Object)integer0));

Integer integer2 = abstractMap_SimpleEntry0.setValue(integer0);
assertNotNull(integer2);
assertEquals(1880, (int)integer2);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer1, 1188);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer1.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer0, 1880);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer0.equals((Object)integer1));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Integer integer3 = new Integer(622);
assertNotNull(integer3);
assertEquals(622, (int)integer3);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer3, 1880);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));

Object object0 = new Object();
assertNotNull(object0);

HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

Object object1 = patriciaTrie0.put("", "");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(object1);

Integer integer4 = new Integer((-1368));
assertNotNull(integer4);
assertEquals((-1368), (int)integer4);
assertFalse(integer4.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer3));
assertFalse(integer4.equals((Object)integer2));
assertFalse(integer4.equals((Object)integer0));

Integer integer5 = new Integer(1749);
assertNotNull(integer5);
assertEquals(1749, (int)integer5);
assertFalse(integer5.equals((Object)integer1));
assertFalse(integer5.equals((Object)integer2));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer4));

Object object2 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", integer5);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(object2);
assertFalse(integer5.equals((Object)integer1));
assertFalse(integer5.equals((Object)integer2));
assertFalse(integer5.equals((Object)integer0));
assertFalse(integer5.equals((Object)integer3));
assertFalse(integer5.equals((Object)integer4));

String string0 = patriciaTrie0.nextKey("org.apache.commons.collections4.trie.PatriciaTrie");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(string0);

PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
assertNotNull(patriciaTrie1);

int int0 = patriciaTrie1.lengthInBits("org.apache.commons.collections4.trie.PatriciaTrie");
assertEquals(784, int0);

AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = patriciaTrie1.remove((Object) null);
assertNull(abstractMap_SimpleEntry1);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry2, "Trie[", 556);
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(integer0.equals((Object)integer5));
assertFalse(integer0.equals((Object)integer4));
assertFalse(integer0.equals((Object)integer3));
assertFalse(integer0.equals((Object)int0));
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer5));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)int0));
assertFalse(integer3.equals((Object)integer4));
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));

Object object3 = hashMap0.put("org.apache.commons.collections4.trie.PatriciaTrie", patriciaTrie1);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(object3);

String string1 = abstractPatriciaTrie_TrieEntry3.toString();
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(string1);
assertEquals("Entry(key=Entry(key==1880 [1880], value=622, parent=null, left==1880 [1880], right=null, predecessor==1880 [1880]) [556], value=Trie[, parent=null, left=Entry(key==1880 [1880], value=622, parent=null, left==1880 [1880], right=null, predecessor==1880 [1880]) [556], right=null, predecessor=Entry(key==1880 [1880], value=622, parent=null, left==1880 [1880], right=null, predecessor==1880 [1880]) [556])", string1);
assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
assertFalse(integer0.equals((Object)integer5));
assertFalse(integer0.equals((Object)integer4));
assertFalse(integer0.equals((Object)integer3));
assertFalse(integer0.equals((Object)int0));
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer5));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)int0));
assertFalse(integer3.equals((Object)integer4));
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0.left, (String) null, 556);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(integer0.equals((Object)integer5));
assertFalse(integer0.equals((Object)integer4));
assertFalse(integer0.equals((Object)integer3));
assertFalse(integer0.equals((Object)int0));
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer1.equals((Object)integer4));
assertFalse(integer1.equals((Object)int0));
assertFalse(integer1.equals((Object)integer3));
assertTrue(integer1.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer5));
assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry2));

String string2 = abstractPatriciaTrie_TrieEntry3.toString();
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(string2);
assertEquals("Entry(key=Entry(key==1880 [1880], value=622, parent=null, left==1880 [1880], right=null, predecessor==1880 [1880]) [556], value=Trie[, parent=null, left=Entry(key==1880 [1880], value=622, parent=null, left==1880 [1880], right=null, predecessor==1880 [1880]) [556], right=null, predecessor=Entry(key==1880 [1880], value=622, parent=null, left==1880 [1880], right=null, predecessor==1880 [1880]) [556])", string2);
assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
assertFalse(integer0.equals((Object)integer5));
assertFalse(integer0.equals((Object)integer4));
assertFalse(integer0.equals((Object)integer3));
assertFalse(integer0.equals((Object)int0));
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer5));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)int0));
assertFalse(integer3.equals((Object)integer4));
assertTrue(string2.equals((Object)string1));
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));


[MASTER] 11:17:06.757 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_65_1634037426704/org/apache/commons/collections4/trie/AbstractPatriciaTrie_65_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_65_1634037426704/org/apache/commons/collections4/trie/AbstractPatriciaTrie_65_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:06.757 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:06.757 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:06.757 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 56
[MASTER] 11:17:06.757 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_65_1634037426704/org/apache/commons/collections4/trie/AbstractPatriciaTrie_65_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:06.757 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:06.758 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_65_1634037426704/org/apache/commons/collections4/trie/AbstractPatriciaTrie_65_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:06 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import org.apache.commons.collections4.OrderedMapIterator;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_65_tmp__ESTest extends AbstractPatriciaTrie_65_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       Integer integer0 = new Integer(1880);
29:       assertNotNull(integer0);
30:       assertEquals(1880, (int)integer0);
31:       
32:       AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("", integer0);
33:       assertNotNull(abstractMap_SimpleEntry0);
34:       
35:       Integer integer1 = new Integer(1880);
36:       assertNotNull(integer1);
37:       assertEquals(1880, (int)integer1);
38:       assertTrue(integer1.equals((Object)integer0));
39:       
40:       Integer integer2 = abstractMap_SimpleEntry0.setValue(integer0);
41:       assertNotNull(integer2);
42:       assertEquals(1880, (int)integer2);
43:       assertTrue(integer0.equals((Object)integer1));
44:       assertTrue(integer2.equals((Object)integer1));
45:       
46:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer1, 1188);
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
50:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
51:       assertTrue(integer0.equals((Object)integer1));
52:       assertTrue(integer1.equals((Object)integer0));
53:       assertTrue(integer1.equals((Object)integer2));
54:       
55:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
56:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
57:       assertNotNull(comparator1);
58:       
59:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
60:       Comparator<Map.Entry<Object, String>> comparator3 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator2);
61:       assertNotNull(comparator3);
62:       
63:       Integer integer3 = new Integer(622);
64:       assertNotNull(integer3);
65:       assertEquals(622, (int)integer3);
66:       assertFalse(integer3.equals((Object)integer1));
67:       assertFalse(integer3.equals((Object)integer2));
68:       assertFalse(integer3.equals((Object)integer0));
69:       
70:       Integer integer4 = new Integer(0);
71:       assertNotNull(integer4);
72:       assertEquals(0, (int)integer4);
73:       assertFalse(integer4.equals((Object)integer1));
74:       assertFalse(integer4.equals((Object)integer3));
75:       assertFalse(integer4.equals((Object)integer0));
76:       assertFalse(integer4.equals((Object)integer2));
77:       
78:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer4, 622);
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
82:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
83:       assertFalse(integer0.equals((Object)integer3));
84:       assertFalse(integer0.equals((Object)integer4));
85:       assertTrue(integer0.equals((Object)integer1));
86:       assertFalse(integer4.equals((Object)integer1));
87:       assertFalse(integer4.equals((Object)integer3));
88:       assertFalse(integer4.equals((Object)integer0));
89:       assertFalse(integer4.equals((Object)integer2));
90:       
91:       Object object0 = new Object();
92:       assertNotNull(object0);
93:       
94:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("keyAnalyzer");
95:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
96:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
98:       assertFalse(boolean0);
99:       assertFalse(integer0.equals((Object)integer3));
100:       assertFalse(integer0.equals((Object)integer4));
101:       assertTrue(integer0.equals((Object)integer1));
102:       assertTrue(integer1.equals((Object)integer0));
103:       assertFalse(integer1.equals((Object)integer4));
104:       assertFalse(integer1.equals((Object)integer3));
105:       assertTrue(integer1.equals((Object)integer2));
106:       
107:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Integer, Integer>>> comparator4 = Map.Entry.comparingByKey();
108:       assertNotNull(comparator4);
109:       
110:       Comparator<Map.Entry<Object, String>> comparator5 = Map.Entry.comparingByValue();
111:       assertNotNull(comparator5);
112:       assertFalse(comparator5.equals((Object)comparator3));
113:       
114:       boolean boolean1 = abstractPatriciaTrie_TrieEntry1.equals(comparator4);
115:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
116:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
117:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
118:       assertFalse(boolean1);
119:       assertTrue(boolean1 == boolean0);
120:       assertFalse(integer0.equals((Object)integer3));
121:       assertFalse(integer0.equals((Object)integer4));
122:       assertTrue(integer0.equals((Object)integer1));
123:       assertFalse(integer4.equals((Object)integer1));
124:       assertFalse(integer4.equals((Object)integer3));
125:       assertFalse(integer4.equals((Object)integer0));
126:       assertFalse(integer4.equals((Object)integer2));
127:       
128:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
129:       assertTrue(hashMap0.isEmpty());
130:       assertEquals(0, hashMap0.size());
131:       assertNotNull(hashMap0);
132:       
133:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
134:       assertTrue(hashMap0.isEmpty());
135:       assertEquals(0, hashMap0.size());
136:       assertNotNull(patriciaTrie0);
137:       
138:       String string0 = patriciaTrie0.put("", "Cannot determine prefix outside of Character boundaries");
139:       assertTrue(hashMap0.isEmpty());
140:       assertEquals(0, hashMap0.size());
141:       assertNull(string0);
142:       
143:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
144:       assertNotNull(patriciaTrie1);
145:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
146:       
147:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.higherEntry("keyAnalyzer");
148:       assertNull(abstractPatriciaTrie_TrieEntry2);
149:       assertNotSame(patriciaTrie1, patriciaTrie0);
150:       assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
151:       
152:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.lowerEntry("P$Fls");
153:       assertTrue(hashMap0.isEmpty());
154:       assertEquals(0, hashMap0.size());
155:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
156:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
157:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
158:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
159:       assertNotSame(patriciaTrie0, patriciaTrie1);
160:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
161:       
162:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
163:       assertNotNull(patriciaTrie2);
164:       
165:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
166:       assertNotNull(patriciaTrie3);
167:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
168:       
169:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie3.ceilingEntry((String) null);
170:       assertNull(abstractPatriciaTrie_TrieEntry4);
171:       assertNotSame(patriciaTrie3, patriciaTrie2);
172:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
173:       
174:       OrderedMapIterator<String, AbstractMap.SimpleEntry<Object, Object>> orderedMapIterator0 = patriciaTrie3.mapIterator();
175:       assertFalse(orderedMapIterator0.hasPrevious());
176:       assertFalse(orderedMapIterator0.hasNext());
177:       assertNotNull(orderedMapIterator0);
178:       assertNotSame(patriciaTrie3, patriciaTrie2);
179:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
180:       
181:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(patriciaTrie2);
182:       assertNotNull(patriciaTrie4);
183:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
184:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
185:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
186:       
187:       String string1 = patriciaTrie3.nextKey("");
188:       assertNull(string1);
189:       assertNotSame(patriciaTrie3, patriciaTrie2);
190:       assertNotSame(patriciaTrie3, patriciaTrie4);
191:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
192:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
193:   }
194: }
RegularFileObject[/tmp/EvoSuite_65_1634037426704/org/apache/commons/collections4/trie/AbstractPatriciaTrie_65_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:06 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_65_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_65_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_65_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_65_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
139:     );
140:   }
141: }

[MASTER] 11:17:06.764 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(1880);
assertNotNull(integer0);
assertEquals(1880, (int)integer0);

AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("", integer0);
assertNotNull(abstractMap_SimpleEntry0);

Integer integer1 = new Integer(1880);
assertNotNull(integer1);
assertEquals(1880, (int)integer1);
assertTrue(integer1.equals((Object)integer0));

Integer integer2 = abstractMap_SimpleEntry0.setValue(integer0);
assertNotNull(integer2);
assertEquals(1880, (int)integer2);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer1, 1188);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)integer2));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator3 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator2);
assertNotNull(comparator3);

Integer integer3 = new Integer(622);
assertNotNull(integer3);
assertEquals(622, (int)integer3);
assertFalse(integer3.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer0));

Integer integer4 = new Integer(0);
assertNotNull(integer4);
assertEquals(0, (int)integer4);
assertFalse(integer4.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer3));
assertFalse(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer2));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer4, 622);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(integer0.equals((Object)integer3));
assertFalse(integer0.equals((Object)integer4));
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer3));
assertFalse(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer2));

Object object0 = new Object();
assertNotNull(object0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("keyAnalyzer");
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(boolean0);
assertFalse(integer0.equals((Object)integer3));
assertFalse(integer0.equals((Object)integer4));
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer4));
assertFalse(integer1.equals((Object)integer3));
assertTrue(integer1.equals((Object)integer2));

Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Integer, Integer>>> comparator4 = Map.Entry.comparingByKey();
assertNotNull(comparator4);

Comparator<Map.Entry<Object, String>> comparator5 = Map.Entry.comparingByValue();
assertNotNull(comparator5);
assertFalse(comparator5.equals((Object)comparator3));

boolean boolean1 = abstractPatriciaTrie_TrieEntry1.equals(comparator4);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);
assertFalse(integer0.equals((Object)integer3));
assertFalse(integer0.equals((Object)integer4));
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer1));
assertFalse(integer4.equals((Object)integer3));
assertFalse(integer4.equals((Object)integer0));
assertFalse(integer4.equals((Object)integer2));

HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("", "Cannot determine prefix outside of Character boundaries");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(string0);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie1);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.higherEntry("keyAnalyzer");
assertNull(abstractPatriciaTrie_TrieEntry2);
assertNotSame(patriciaTrie1, patriciaTrie0);
assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.lowerEntry("P$Fls");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertNotSame(patriciaTrie0, patriciaTrie1);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie2);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie3);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie3.ceilingEntry((String) null);
assertNull(abstractPatriciaTrie_TrieEntry4);
assertNotSame(patriciaTrie3, patriciaTrie2);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));

OrderedMapIterator<String, AbstractMap.SimpleEntry<Object, Object>> orderedMapIterator0 = patriciaTrie3.mapIterator();
assertFalse(orderedMapIterator0.hasPrevious());
assertFalse(orderedMapIterator0.hasNext());
assertNotNull(orderedMapIterator0);
assertNotSame(patriciaTrie3, patriciaTrie2);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(patriciaTrie2);
assertNotNull(patriciaTrie4);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));

String string1 = patriciaTrie3.nextKey("");
assertNull(string1);
assertNotSame(patriciaTrie3, patriciaTrie2);
assertNotSame(patriciaTrie3, patriciaTrie4);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));


[MASTER] 11:17:06.845 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_67_1634037426800/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_67_1634037426800/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:06.845 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:06.845 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:06.851 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 56
[MASTER] 11:17:06.851 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_67_1634037426800/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:06.851 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:06.852 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_67_1634037426800/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:06 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_67_tmp__ESTest extends AbstractPatriciaTrie_67_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
28:       assertNotNull(patriciaTrie0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 0);
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
33:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
34:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
35:       
36:       Integer integer0 = new Integer((-1));
37:       assertNotNull(integer0);
38:       assertEquals((-1), (int)integer0);
39:       
40:       AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0, integer0);
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
44:       assertNotNull(abstractMap_SimpleEntry0);
45:       
46:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer0, 0);
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
48:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
53:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
54:       
55:       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
56:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
57:       assertNotNull(comparator1);
58:       
59:       Integer integer1 = new Integer(0);
60:       assertNotNull(integer1);
61:       assertEquals(0, (int)integer1);
62:       assertFalse(integer1.equals((Object)integer0));
63:       
64:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, (Integer) null, (-1));
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
69:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
71:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
72:       assertFalse(integer0.equals((Object)integer1));
73:       
74:       Object object0 = new Object();
75:       assertNotNull(object0);
76:       
77:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer0, (-2773));
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
79:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
82:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
84:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
85:       assertFalse(integer0.equals((Object)integer1));
86:       assertTrue(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
87:       
88:       Object object1 = new Object();
89:       assertNotNull(object1);
90:       assertFalse(object1.equals((Object)object0));
91:       
92:       boolean boolean0 = abstractPatriciaTrie_TrieEntry3.equals(object1);
93:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
94:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
95:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
97:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
98:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
99:       assertFalse(boolean0);
100:       assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
101:       assertNotSame(object1, object0);
102:       assertFalse(integer0.equals((Object)integer1));
103:       assertTrue(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
104:       assertFalse(object1.equals((Object)object0));
105:       
106:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Integer, Integer>>> comparator2 = Map.Entry.comparingByKey();
107:       assertNotNull(comparator2);
108:       
109:       Comparator<Map.Entry<Object, String>> comparator3 = Map.Entry.comparingByValue();
110:       assertNotNull(comparator3);
111:       
112:       boolean boolean1 = abstractPatriciaTrie_TrieEntry3.isExternalNode();
113:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
114:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
115:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
116:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
117:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
119:       assertTrue(boolean1);
120:       assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
121:       assertFalse(integer0.equals((Object)integer1));
122:       assertTrue(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
123:       assertFalse(boolean1 == boolean0);
124:       
125:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
126:       assertNotNull(patriciaTrie1);
127:       
128:       Integer integer2 = new Integer(0);
129:       assertNotNull(integer2);
130:       assertEquals(0, (int)integer2);
131:       assertTrue(integer2.equals((Object)integer1));
132:       assertFalse(integer2.equals((Object)integer0));
133:       
134:       Object object2 = patriciaTrie1.put("3BzCBA Vh|dLrlo,", integer2);
135:       assertNull(object2);
136:       assertTrue(integer2.equals((Object)integer1));
137:       assertFalse(integer2.equals((Object)integer0));
138:       
139:       PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
140:       assertNotNull(patriciaTrie2);
141:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
142:       
143:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.firstEntry();
144:       assertNull(abstractPatriciaTrie_TrieEntry4);
145:       assertNotSame(patriciaTrie2, patriciaTrie1);
146:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
147:       
148:       PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
149:       assertNotNull(patriciaTrie3);
150:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
151:       
152:       patriciaTrie3.decrementSize();
153:       assertNotSame(patriciaTrie3, patriciaTrie0);
154:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
155:       
156:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.floorEntry("3BzCBA Vh|dLrlo,");
157:       assertNull(abstractPatriciaTrie_TrieEntry5);
158:       assertNotSame(patriciaTrie0, patriciaTrie3);
159:       assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
160:       
161:       // Undeclared exception!
162:       try { 
163:         patriciaTrie3.firstKey();
164:         fail("Expecting exception: NullPointerException");
165:       
166:       } catch(NullPointerException e) {
167:          //
168:          // no message in exception (getMessage() returned null)
169:          //
170:       }
171:   }
172: }
RegularFileObject[/tmp/EvoSuite_67_1634037426800/org/apache/commons/collections4/trie/AbstractPatriciaTrie_67_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:06 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_67_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_67_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_67_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_67_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
139:     );
140:   }
141: }

[MASTER] 11:17:06.856 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer0 = new Integer((-1));
assertNotNull(integer0);
assertEquals((-1), (int)integer0);

AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(abstractPatriciaTrie_TrieEntry0, integer0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractMap_SimpleEntry0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer0, 0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Integer integer1 = new Integer(0);
assertNotNull(integer1);
assertEquals(0, (int)integer1);
assertFalse(integer1.equals((Object)integer0));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, (Integer) null, (-1));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(integer0.equals((Object)integer1));

Object object0 = new Object();
assertNotNull(object0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer0, (-2773));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);
assertFalse(integer0.equals((Object)integer1));
assertTrue(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));

Object object1 = new Object();
assertNotNull(object1);
assertFalse(object1.equals((Object)object0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry3.equals(object1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(boolean0);
assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
assertNotSame(object1, object0);
assertFalse(integer0.equals((Object)integer1));
assertTrue(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
assertFalse(object1.equals((Object)object0));

Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Integer, Integer>>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

Comparator<Map.Entry<Object, String>> comparator3 = Map.Entry.comparingByValue();
assertNotNull(comparator3);

boolean boolean1 = abstractPatriciaTrie_TrieEntry3.isExternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(boolean1);
assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
assertFalse(integer0.equals((Object)integer1));
assertTrue(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
assertFalse(boolean1 == boolean0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Integer integer2 = new Integer(0);
assertNotNull(integer2);
assertEquals(0, (int)integer2);
assertTrue(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));

Object object2 = patriciaTrie1.put("3BzCBA Vh|dLrlo,", integer2);
assertNull(object2);
assertTrue(integer2.equals((Object)integer1));
assertFalse(integer2.equals((Object)integer0));

PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie2);
assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.firstEntry();
assertNull(abstractPatriciaTrie_TrieEntry4);
assertNotSame(patriciaTrie2, patriciaTrie1);
assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));

PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie3);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));

patriciaTrie3.decrementSize();
assertNotSame(patriciaTrie3, patriciaTrie0);
assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.floorEntry("3BzCBA Vh|dLrlo,");
assertNull(abstractPatriciaTrie_TrieEntry5);
assertNotSame(patriciaTrie0, patriciaTrie3);
assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));

patriciaTrie3.firstKey();

[MASTER] 11:17:07.176 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_72_1634037427104/org/apache/commons/collections4/trie/AbstractPatriciaTrie_72_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_72_1634037427104/org/apache/commons/collections4/trie/AbstractPatriciaTrie_72_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:07.176 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:07.176 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:07.176 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 64
[MASTER] 11:17:07.176 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_72_1634037427104/org/apache/commons/collections4/trie/AbstractPatriciaTrie_72_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:07.176 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:07.177 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_72_1634037427104/org/apache/commons/collections4/trie/AbstractPatriciaTrie_72_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:07 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import org.apache.commons.collections4.OrderedMapIterator;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_72_tmp__ESTest extends AbstractPatriciaTrie_72_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       Integer integer0 = new Integer(1880);
30:       assertNotNull(integer0);
31:       assertEquals(1880, (int)integer0);
32:       
33:       AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("", integer0);
34:       assertNotNull(abstractMap_SimpleEntry0);
35:       
36:       Integer integer1 = new Integer(1880);
37:       assertNotNull(integer1);
38:       assertEquals(1880, (int)integer1);
39:       assertTrue(integer1.equals((Object)integer0));
40:       
41:       Integer integer2 = abstractMap_SimpleEntry0.setValue(integer0);
42:       assertNotNull(integer2);
43:       assertEquals(1880, (int)integer2);
44:       assertTrue(integer0.equals((Object)integer1));
45:       assertTrue(integer2.equals((Object)integer1));
46:       
47:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer1, 1188);
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
51:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
52:       assertTrue(integer0.equals((Object)integer1));
53:       assertTrue(integer1.equals((Object)integer0));
54:       assertTrue(integer1.equals((Object)integer2));
55:       
56:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer0, 1880);
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
59:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
60:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
61:       assertTrue(integer0.equals((Object)integer1));
62:       
63:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
64:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
65:       assertNotNull(comparator1);
66:       
67:       Integer integer3 = new Integer(622);
68:       assertNotNull(integer3);
69:       assertEquals(622, (int)integer3);
70:       assertFalse(integer3.equals((Object)integer2));
71:       assertFalse(integer3.equals((Object)integer0));
72:       assertFalse(integer3.equals((Object)integer1));
73:       
74:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
76:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
78:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
84:       
85:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer3, 1880);
86:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
88:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
89:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
90:       assertFalse(integer0.equals((Object)integer3));
91:       assertTrue(integer0.equals((Object)integer1));
92:       assertFalse(integer3.equals((Object)integer2));
93:       assertFalse(integer3.equals((Object)integer0));
94:       assertFalse(integer3.equals((Object)integer1));
95:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
96:       
97:       Object object0 = new Object();
98:       assertNotNull(object0);
99:       
100:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(object0);
101:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
102:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
104:       assertFalse(boolean0);
105:       assertFalse(integer0.equals((Object)integer3));
106:       assertTrue(integer0.equals((Object)integer1));
107:       assertTrue(integer1.equals((Object)integer0));
108:       assertFalse(integer1.equals((Object)integer3));
109:       assertTrue(integer1.equals((Object)integer2));
110:       
111:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Integer, Integer>>> comparator2 = Map.Entry.comparingByKey();
112:       assertNotNull(comparator2);
113:       
114:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
115:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
116:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
118:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
120:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
123:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
124:       
125:       Comparator<Map.Entry<Object, String>> comparator3 = Map.Entry.comparingByValue();
126:       assertNotNull(comparator3);
127:       
128:       boolean boolean1 = abstractPatriciaTrie_TrieEntry1.equals(abstractPatriciaTrie_TrieEntry0);
129:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
130:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
132:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
133:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
134:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
135:       assertTrue(boolean1);
136:       assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
137:       assertFalse(boolean1 == boolean0);
138:       assertFalse(integer0.equals((Object)integer3));
139:       assertTrue(integer0.equals((Object)integer1));
140:       assertTrue(integer1.equals((Object)integer0));
141:       assertFalse(integer1.equals((Object)integer3));
142:       assertTrue(integer1.equals((Object)integer2));
143:       assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry2));
144:       
145:       abstractPatriciaTrie_TrieEntry2.bitIndex = 0;
146:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
148:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
149:       
150:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
151:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
152:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
153:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
154:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
155:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
156:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
157:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
158:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
159:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
160:       
161:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
162:       assertTrue(hashMap0.isEmpty());
163:       assertEquals(0, hashMap0.size());
164:       assertNotNull(hashMap0);
165:       
166:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
167:       assertTrue(hashMap0.isEmpty());
168:       assertEquals(0, hashMap0.size());
169:       assertNotNull(patriciaTrie0);
170:       
171:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("");
172:       assertTrue(hashMap0.isEmpty());
173:       assertEquals(0, hashMap0.size());
174:       assertNull(abstractPatriciaTrie_TrieEntry3);
175:       
176:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.lowerEntry("");
177:       assertTrue(hashMap0.isEmpty());
178:       assertEquals(0, hashMap0.size());
179:       assertNull(abstractPatriciaTrie_TrieEntry4);
180:       
181:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
182:       assertNotNull(patriciaTrie1);
183:       
184:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.ceilingEntry("");
185:       assertNull(abstractPatriciaTrie_TrieEntry5);
186:       
187:       OrderedMapIterator<String, AbstractMap.SimpleEntry<Object, Object>> orderedMapIterator0 = patriciaTrie1.mapIterator();
188:       assertFalse(orderedMapIterator0.hasPrevious());
189:       assertFalse(orderedMapIterator0.hasNext());
190:       assertNotNull(orderedMapIterator0);
191:       
192:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(patriciaTrie1);
193:       assertNotNull(patriciaTrie2);
194:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
195:       
196:       String string0 = patriciaTrie2.nextKey("qpkL#`/");
197:       assertNull(string0);
198:       assertNotSame(patriciaTrie1, patriciaTrie2);
199:       assertNotSame(patriciaTrie2, patriciaTrie1);
200:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
201:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
202:       
203:       // Undeclared exception!
204:       try { 
205:         patriciaTrie0.followRight((AbstractPatriciaTrie.TrieEntry<String, String>) null);
206:         fail("Expecting exception: NullPointerException");
207:       
208:       } catch(NullPointerException e) {
209:          //
210:          // no message in exception (getMessage() returned null)
211:          //
212:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
213:       }
214:   }
215: }
RegularFileObject[/tmp/EvoSuite_72_1634037427104/org/apache/commons/collections4/trie/AbstractPatriciaTrie_72_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:07 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_72_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_72_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_72_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_72_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
139:     );
140:   }
141: }

[MASTER] 11:17:07.180 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(1880);
assertNotNull(integer0);
assertEquals(1880, (int)integer0);

AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("", integer0);
assertNotNull(abstractMap_SimpleEntry0);

Integer integer1 = new Integer(1880);
assertNotNull(integer1);
assertEquals(1880, (int)integer1);
assertTrue(integer1.equals((Object)integer0));

Integer integer2 = abstractMap_SimpleEntry0.setValue(integer0);
assertNotNull(integer2);
assertEquals(1880, (int)integer2);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer1, 1188);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)integer2));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer0, 1880);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer0.equals((Object)integer1));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Integer integer3 = new Integer(622);
assertNotNull(integer3);
assertEquals(622, (int)integer3);
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer3, 1880);
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertFalse(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer1));
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));

Object object0 = new Object();
assertNotNull(object0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(object0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(boolean0);
assertFalse(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer3));
assertTrue(integer1.equals((Object)integer2));

Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Integer, Integer>>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());

Comparator<Map.Entry<Object, String>> comparator3 = Map.Entry.comparingByValue();
assertNotNull(comparator3);

boolean boolean1 = abstractPatriciaTrie_TrieEntry1.equals(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(boolean1);
assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
assertFalse(boolean1 == boolean0);
assertFalse(integer0.equals((Object)integer3));
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)integer3));
assertTrue(integer1.equals((Object)integer2));
assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry2));

abstractPatriciaTrie_TrieEntry2.bitIndex = 0;
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.lowerEntry("");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(abstractPatriciaTrie_TrieEntry4);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.ceilingEntry("");
assertNull(abstractPatriciaTrie_TrieEntry5);

OrderedMapIterator<String, AbstractMap.SimpleEntry<Object, Object>> orderedMapIterator0 = patriciaTrie1.mapIterator();
assertFalse(orderedMapIterator0.hasPrevious());
assertFalse(orderedMapIterator0.hasNext());
assertNotNull(orderedMapIterator0);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(patriciaTrie1);
assertNotNull(patriciaTrie2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));

String string0 = patriciaTrie2.nextKey("qpkL#`/");
assertNull(string0);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));

patriciaTrie0.followRight((AbstractPatriciaTrie.TrieEntry<String, String>) null);

[MASTER] 11:17:07.257 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_74_1634037427213/org/apache/commons/collections4/trie/AbstractPatriciaTrie_74_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_74_1634037427213/org/apache/commons/collections4/trie/AbstractPatriciaTrie_74_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:07.257 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:07.257 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:07.257 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.String>>: 63
[MASTER] 11:17:07.257 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_74_1634037427213/org/apache/commons/collections4/trie/AbstractPatriciaTrie_74_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:07.257 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:07.258 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_74_1634037427213/org/apache/commons/collections4/trie/AbstractPatriciaTrie_74_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:07 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import org.apache.commons.collections4.OrderedMapIterator;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_74_tmp__ESTest extends AbstractPatriciaTrie_74_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       Integer integer0 = new Integer(1880);
29:       assertNotNull(integer0);
30:       assertEquals(1880, (int)integer0);
31:       
32:       AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("", integer0);
33:       assertNotNull(abstractMap_SimpleEntry0);
34:       
35:       Integer integer1 = new Integer(1880);
36:       assertNotNull(integer1);
37:       assertEquals(1880, (int)integer1);
38:       assertTrue(integer1.equals((Object)integer0));
39:       
40:       Integer integer2 = abstractMap_SimpleEntry0.setValue(integer0);
41:       assertNotNull(integer2);
42:       assertEquals(1880, (int)integer2);
43:       assertTrue(integer0.equals((Object)integer1));
44:       assertTrue(integer2.equals((Object)integer1));
45:       
46:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer1, 1188);
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
50:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
51:       assertTrue(integer0.equals((Object)integer1));
52:       assertTrue(integer1.equals((Object)integer0));
53:       assertTrue(integer1.equals((Object)integer2));
54:       
55:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer0, 1880);
56:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
57:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
59:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
60:       assertTrue(integer0.equals((Object)integer1));
61:       
62:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
63:       Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
64:       assertNotNull(comparator1);
65:       
66:       Integer integer3 = new Integer(622);
67:       assertNotNull(integer3);
68:       assertEquals(622, (int)integer3);
69:       assertFalse(integer3.equals((Object)integer0));
70:       assertFalse(integer3.equals((Object)integer2));
71:       assertFalse(integer3.equals((Object)integer1));
72:       
73:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
76:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
78:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
81:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
83:       
84:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer3, 1880);
85:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
86:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
87:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
88:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
89:       assertTrue(integer0.equals((Object)integer1));
90:       assertFalse(integer0.equals((Object)integer3));
91:       assertFalse(integer3.equals((Object)integer0));
92:       assertFalse(integer3.equals((Object)integer2));
93:       assertFalse(integer3.equals((Object)integer1));
94:       assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
95:       
96:       Object object0 = new Object();
97:       assertNotNull(object0);
98:       
99:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(object0);
100:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
101:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
102:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
103:       assertFalse(boolean0);
104:       assertTrue(integer0.equals((Object)integer1));
105:       assertFalse(integer0.equals((Object)integer3));
106:       assertTrue(integer1.equals((Object)integer0));
107:       assertTrue(integer1.equals((Object)integer2));
108:       assertFalse(integer1.equals((Object)integer3));
109:       
110:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Integer, Integer>>> comparator2 = Map.Entry.comparingByKey();
111:       assertNotNull(comparator2);
112:       
113:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
114:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
116:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
117:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
118:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
120:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
123:       
124:       Comparator<Map.Entry<Object, String>> comparator3 = Map.Entry.comparingByValue();
125:       assertNotNull(comparator3);
126:       
127:       boolean boolean1 = abstractPatriciaTrie_TrieEntry1.equals(abstractPatriciaTrie_TrieEntry0);
128:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
129:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
130:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
132:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
133:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
134:       assertTrue(boolean1);
135:       assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
136:       assertFalse(boolean1 == boolean0);
137:       assertTrue(integer0.equals((Object)integer1));
138:       assertFalse(integer0.equals((Object)integer3));
139:       assertTrue(integer1.equals((Object)integer0));
140:       assertTrue(integer1.equals((Object)integer2));
141:       assertFalse(integer1.equals((Object)integer3));
142:       assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry2));
143:       
144:       abstractPatriciaTrie_TrieEntry2.bitIndex = 0;
145:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
146:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
148:       
149:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
150:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
151:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
152:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
153:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
154:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
155:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
156:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
157:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
158:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
159:       
160:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
161:       assertTrue(hashMap0.isEmpty());
162:       assertEquals(0, hashMap0.size());
163:       assertNotNull(hashMap0);
164:       
165:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
166:       assertTrue(hashMap0.isEmpty());
167:       assertEquals(0, hashMap0.size());
168:       assertNotNull(patriciaTrie0);
169:       
170:       String string0 = patriciaTrie0.put("", "");
171:       assertTrue(hashMap0.isEmpty());
172:       assertEquals(0, hashMap0.size());
173:       assertNull(string0);
174:       
175:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("");
176:       assertTrue(hashMap0.isEmpty());
177:       assertEquals(0, hashMap0.size());
178:       assertNull(abstractPatriciaTrie_TrieEntry3);
179:       
180:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, 0);
181:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
182:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
183:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
184:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
185:       
186:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
187:       assertNotNull(patriciaTrie1);
188:       
189:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.ceilingEntry("");
190:       assertNull(abstractPatriciaTrie_TrieEntry5);
191:       
192:       OrderedMapIterator<String, AbstractMap.SimpleEntry<Object, Object>> orderedMapIterator0 = patriciaTrie1.mapIterator();
193:       assertFalse(orderedMapIterator0.hasPrevious());
194:       assertFalse(orderedMapIterator0.hasNext());
195:       assertNotNull(orderedMapIterator0);
196:       
197:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(patriciaTrie1);
198:       assertNotNull(patriciaTrie2);
199:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
200:       
201:       String string1 = patriciaTrie2.nextKey("qpkL#`/");
202:       assertNull(string1);
203:       assertNotSame(patriciaTrie1, patriciaTrie2);
204:       assertNotSame(patriciaTrie2, patriciaTrie1);
205:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
206:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
207:       
208:       String string2 = patriciaTrie0.selectValue("]={\n");
209:       assertTrue(hashMap0.isEmpty());
210:       assertEquals(0, hashMap0.size());
211:       assertNotNull(string2);
212:       assertEquals("", string2);
213:   }
214: }
RegularFileObject[/tmp/EvoSuite_74_1634037427213/org/apache/commons/collections4/trie/AbstractPatriciaTrie_74_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:07 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_74_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_74_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_74_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_74_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
139:     );
140:   }
141: }

[MASTER] 11:17:07.262 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer(1880);
assertNotNull(integer0);
assertEquals(1880, (int)integer0);

AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("", integer0);
assertNotNull(abstractMap_SimpleEntry0);

Integer integer1 = new Integer(1880);
assertNotNull(integer1);
assertEquals(1880, (int)integer1);
assertTrue(integer1.equals((Object)integer0));

Integer integer2 = abstractMap_SimpleEntry0.setValue(integer0);
assertNotNull(integer2);
assertEquals(1880, (int)integer2);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer2.equals((Object)integer1));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer1, 1188);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)integer2));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer0, 1880);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertTrue(integer0.equals((Object)integer1));

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, String>> comparator1 = (Comparator<Map.Entry<String, String>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Integer integer3 = new Integer(622);
assertNotNull(integer3);
assertEquals(622, (int)integer3);
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(abstractMap_SimpleEntry0, integer3, 1880);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer3));
assertFalse(integer3.equals((Object)integer0));
assertFalse(integer3.equals((Object)integer2));
assertFalse(integer3.equals((Object)integer1));
assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));

Object object0 = new Object();
assertNotNull(object0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals(object0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(boolean0);
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer3));
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer3));

Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Integer, Integer>>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isEmpty());

Comparator<Map.Entry<Object, String>> comparator3 = Map.Entry.comparingByValue();
assertNotNull(comparator3);

boolean boolean1 = abstractPatriciaTrie_TrieEntry1.equals(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(boolean1);
assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
assertFalse(boolean1 == boolean0);
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer0.equals((Object)integer3));
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)integer2));
assertFalse(integer1.equals((Object)integer3));
assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry2));

abstractPatriciaTrie_TrieEntry2.bitIndex = 0;
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());

HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("", "");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, 0);
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry5 = patriciaTrie1.ceilingEntry("");
assertNull(abstractPatriciaTrie_TrieEntry5);

OrderedMapIterator<String, AbstractMap.SimpleEntry<Object, Object>> orderedMapIterator0 = patriciaTrie1.mapIterator();
assertFalse(orderedMapIterator0.hasPrevious());
assertFalse(orderedMapIterator0.hasNext());
assertNotNull(orderedMapIterator0);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(patriciaTrie1);
assertNotNull(patriciaTrie2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));

String string1 = patriciaTrie2.nextKey("qpkL#`/");
assertNull(string1);
assertNotSame(patriciaTrie1, patriciaTrie2);
assertNotSame(patriciaTrie2, patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));

String string2 = patriciaTrie0.selectValue("]={\n");
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(string2);
assertEquals("", string2);


[MASTER] 11:17:08.425 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_105_1634037428375/org/apache/commons/collections4/trie/AbstractPatriciaTrie_105_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_105_1634037428375/org/apache/commons/collections4/trie/AbstractPatriciaTrie_105_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:08.425 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:08.425 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:08.425 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>>: 62
[MASTER] 11:17:08.425 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_105_1634037428375/org/apache/commons/collections4/trie/AbstractPatriciaTrie_105_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:08.425 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:08.426 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_105_1634037428375/org/apache/commons/collections4/trie/AbstractPatriciaTrie_105_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:08 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.OrderedMapIterator;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_105_tmp__ESTest extends AbstractPatriciaTrie_105_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       String string0 = patriciaTrie0.put("hO", "hO");
32:       assertNull(string0);
33:       
34:       boolean boolean0 = patriciaTrie0.isBitSet("hO", (-1468), (-1468));
35:       assertFalse(boolean0);
36:       
37:       String string1 = patriciaTrie0.firstKey();
38:       assertNotNull(string1);
39:       assertEquals("hO", string1);
40:       
41:       SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("8tR3Hytepwl", (String) null);
42:       assertEquals(1, sortedMap0.size());
43:       assertFalse(sortedMap0.isEmpty());
44:       assertNotNull(sortedMap0);
45:       
46:       String string2 = patriciaTrie0.put("TcLYmi2EN\u0000V2o", "^$RiZ{w9&ACMW[");
47:       assertNull(string2);
48:       
49:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("^$RiZ{w9&ACMW[");
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
51:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
53:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
54:       
55:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
57:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
59:       assertNotNull(abstractMap_SimpleEntry0);
60:       
61:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
62:       Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
63:       assertNotNull(comparator1);
64:       
65:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0, (-1468));
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
71:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
72:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
73:       
74:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry("^$RiZ{w9&ACMW[");
75:       assertNull(abstractPatriciaTrie_TrieEntry2);
76:       
77:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
78:       assertNotNull(patriciaTrie1);
79:       
80:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry("");
81:       assertNull(abstractPatriciaTrie_TrieEntry3);
82:       
83:       OrderedMapIterator<String, AbstractMap.SimpleEntry<Object, Object>> orderedMapIterator0 = patriciaTrie1.mapIterator();
84:       assertFalse(orderedMapIterator0.hasNext());
85:       assertFalse(orderedMapIterator0.hasPrevious());
86:       assertNotNull(orderedMapIterator0);
87:       
88:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(patriciaTrie1);
89:       assertNotNull(patriciaTrie2);
90:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
91:       
92:       PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
93:       assertNotNull(patriciaTrie3);
94:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
95:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
96:       
97:       String string3 = patriciaTrie3.nextKey("TcLYmi2EN\u0000V2o");
98:       assertNull(string3);
99:       assertNotSame(patriciaTrie3, patriciaTrie2);
100:       assertNotSame(patriciaTrie3, patriciaTrie1);
101:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
102:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
103:       
104:       PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
105:       assertNotNull(patriciaTrie4);
106:       
107:       AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>("VUUxm#qc#_J-w", comparator1);
108:       assertNotNull(abstractMap_SimpleEntry1);
109:       
110:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>>(";,Jl", abstractMap_SimpleEntry1, 0);
111:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
112:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
113:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
114:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
115:       
116:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.predecessor;
117:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
118:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
119:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
120:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
121:       
122:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry6 = patriciaTrie4.previousEntry(abstractPatriciaTrie_TrieEntry5);
123:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
124:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
125:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
126:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
128:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
129:       assertNull(abstractPatriciaTrie_TrieEntry6);
130:   }
131: }
RegularFileObject[/tmp/EvoSuite_105_1634037428375/org/apache/commons/collections4/trie/AbstractPatriciaTrie_105_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:08 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_105_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_105_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_105_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_105_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
139:     );
140:   }
141: }

[MASTER] 11:17:08.428 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string0 = patriciaTrie0.put("hO", "hO");
assertNull(string0);

boolean boolean0 = patriciaTrie0.isBitSet("hO", (-1468), (-1468));
assertFalse(boolean0);

String string1 = patriciaTrie0.firstKey();
assertNotNull(string1);
assertEquals("hO", string1);

SortedMap<String, String> sortedMap0 = patriciaTrie0.subMap("8tR3Hytepwl", (String) null);
assertEquals(1, sortedMap0.size());
assertFalse(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

String string2 = patriciaTrie0.put("TcLYmi2EN\u0000V2o", "^$RiZ{w9&ACMW[");
assertNull(string2);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("^$RiZ{w9&ACMW[");
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator1 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0, (-1468));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry("^$RiZ{w9&ACMW[");
assertNull(abstractPatriciaTrie_TrieEntry2);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.ceilingEntry("");
assertNull(abstractPatriciaTrie_TrieEntry3);

OrderedMapIterator<String, AbstractMap.SimpleEntry<Object, Object>> orderedMapIterator0 = patriciaTrie1.mapIterator();
assertFalse(orderedMapIterator0.hasNext());
assertFalse(orderedMapIterator0.hasPrevious());
assertNotNull(orderedMapIterator0);

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>(patriciaTrie1);
assertNotNull(patriciaTrie2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));

PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
assertNotNull(patriciaTrie3);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));

String string3 = patriciaTrie3.nextKey("TcLYmi2EN\u0000V2o");
assertNull(string3);
assertNotSame(patriciaTrie3, patriciaTrie2);
assertNotSame(patriciaTrie3, patriciaTrie1);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));

PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
assertNotNull(patriciaTrie4);

AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>("VUUxm#qc#_J-w", comparator1);
assertNotNull(abstractMap_SimpleEntry1);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>>(";,Jl", abstractMap_SimpleEntry1, 0);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.predecessor;
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry6 = patriciaTrie4.previousEntry(abstractPatriciaTrie_TrieEntry5);
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertNull(abstractPatriciaTrie_TrieEntry6);


[MASTER] 11:17:08.470 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_106_1634037428429/org/apache/commons/collections4/trie/AbstractPatriciaTrie_106_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_106_1634037428429/org/apache/commons/collections4/trie/AbstractPatriciaTrie_106_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:08.470 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:08.470 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:08.471 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.lang.String>>,java.lang.Object>>: 46
[MASTER] 11:17:08.471 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_106_1634037428429/org/apache/commons/collections4/trie/AbstractPatriciaTrie_106_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:08.471 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:08.471 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_106_1634037428429/org/apache/commons/collections4/trie/AbstractPatriciaTrie_106_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:08 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_106_tmp__ESTest extends AbstractPatriciaTrie_106_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       Integer integer0 = new Integer((-2510));
30:       assertNotNull(integer0);
31:       assertEquals((-2510), (int)integer0);
32:       
33:       Integer integer1 = patriciaTrie0.put("{hVk^tT+(?nK]", integer0);
34:       assertNull(integer1);
35:       
36:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
37:       assertNotNull(patriciaTrie1);
38:       
39:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("{hVk^tT+(?nK]", integer0, (-2510));
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
44:       
45:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
46:       Comparator<Map.Entry<Comparable<AbstractMap.SimpleEntry<Integer, String>>, Object>> comparator1 = (Comparator<Map.Entry<Comparable<AbstractMap.SimpleEntry<Integer, String>>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
47:       assertNotNull(comparator1);
48:       
49:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
54:       
55:       Object object0 = patriciaTrie1.put("{hVk^tT+(?nK]", abstractPatriciaTrie_TrieEntry1);
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
58:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
59:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
60:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
61:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
62:       assertNotNull(object0);
63:       assertEquals((-2510), object0);
64:       
65:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry1);
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
71:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
73:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
74:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
75:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
76:       assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
77:       assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
78:       
79:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
80:       assertNotNull(patriciaTrie2);
81:       
82:       PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
83:       assertNotNull(patriciaTrie3);
84:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
85:       
86:       PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
87:       assertNotNull(patriciaTrie4);
88:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
89:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
90:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
91:       assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
92:       
93:       patriciaTrie2.clear();
94:       assertNotSame(patriciaTrie2, patriciaTrie3);
95:       assertNotSame(patriciaTrie2, patriciaTrie4);
96:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
97:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));
98:       
99:       String string0 = patriciaTrie4.put("{hVk^tT+(?nK]", "{hVk^tT+(?nK]");
100:       assertNull(string0);
101:       assertNotSame(patriciaTrie2, patriciaTrie3);
102:       assertNotSame(patriciaTrie2, patriciaTrie4);
103:       assertNotSame(patriciaTrie3, patriciaTrie4);
104:       assertNotSame(patriciaTrie3, patriciaTrie2);
105:       assertNotSame(patriciaTrie4, patriciaTrie3);
106:       assertNotSame(patriciaTrie4, patriciaTrie2);
107:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
108:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
109:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
110:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
111:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
112:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
113:       
114:       String string1 = patriciaTrie4.previousKey("{hVk^tT+(?nK]");
115:       assertNull(string1);
116:       assertNotSame(patriciaTrie2, patriciaTrie3);
117:       assertNotSame(patriciaTrie2, patriciaTrie4);
118:       assertNotSame(patriciaTrie3, patriciaTrie4);
119:       assertNotSame(patriciaTrie3, patriciaTrie2);
120:       assertNotSame(patriciaTrie4, patriciaTrie3);
121:       assertNotSame(patriciaTrie4, patriciaTrie2);
122:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
123:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
124:       assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
125:       assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
126:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
127:       assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
128:       
129:       int int0 = patriciaTrie1.size();
130:       assertEquals(1, int0);
131:       
132:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.getEntry((Object) null);
133:       assertNull(abstractPatriciaTrie_TrieEntry3);
134:       
135:       Integer integer2 = new Integer((-2220));
136:       assertNotNull(integer2);
137:       assertEquals((-2220), (int)integer2);
138:       assertFalse(integer2.equals((Object)integer0));
139:       assertFalse(integer2.equals((Object)int0));
140:       assertFalse(integer2.equals((Object)object0));
141:       
142:       AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>((String) null, (String) null);
143:       assertNotNull(abstractMap_SimpleEntry0);
144:       
145:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, String>>> comparator2 = Map.Entry.comparingByKey();
146:       assertNotNull(comparator2);
147:       
148:       String string2 = abstractMap_SimpleEntry0.setValue("(5Q");
149:       assertNull(string2);
150:       
151:       AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, String>>(integer2, abstractMap_SimpleEntry0, (-2510));
152:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
153:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
154:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
155:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
156:       assertFalse(integer2.equals((Object)integer0));
157:       assertFalse(integer2.equals((Object)int0));
158:       assertFalse(integer2.equals((Object)object0));
159:       
160:       boolean boolean0 = abstractPatriciaTrie_TrieEntry4.isInternalNode();
161:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
162:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
163:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
164:       assertFalse(boolean0);
165:       assertFalse(integer2.equals((Object)integer0));
166:       assertFalse(integer2.equals((Object)int0));
167:       assertFalse(integer2.equals((Object)object0));
168:       
169:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("{hVk^tT+(?nK]", integer2, (-2220));
170:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
171:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
172:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
173:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
174:       assertFalse(integer2.equals((Object)integer0));
175:       assertFalse(integer2.equals((Object)int0));
176:       assertFalse(integer2.equals((Object)object0));
177:       
178:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = abstractPatriciaTrie_TrieEntry5.right;
179:       assertNull(abstractPatriciaTrie_TrieEntry6);
180:       
181:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry7 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, abstractPatriciaTrie_TrieEntry5);
182:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
183:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
184:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
185:       assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
186:       assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
187:       assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
188:       assertNotNull(abstractPatriciaTrie_TrieEntry7);
189:       assertFalse(integer2.equals((Object)integer0));
190:       assertFalse(integer2.equals((Object)int0));
191:       assertFalse(integer2.equals((Object)object0));
192:       
193:       int int1 = patriciaTrie2.size();
194:       assertEquals(0, int1);
195:       assertNotSame(patriciaTrie2, patriciaTrie3);
196:       assertNotSame(patriciaTrie2, patriciaTrie4);
197:       assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
198:       assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
199:       assertFalse(int1 == int0);
200:   }
201: }
RegularFileObject[/tmp/EvoSuite_106_1634037428429/org/apache/commons/collections4/trie/AbstractPatriciaTrie_106_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:08 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_106_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_106_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_106_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_106_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
139:     );
140:   }
141: }

[MASTER] 11:17:08.474 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer((-2510));
assertNotNull(integer0);
assertEquals((-2510), (int)integer0);

Integer integer1 = patriciaTrie0.put("{hVk^tT+(?nK]", integer0);
assertNull(integer1);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("{hVk^tT+(?nK]", integer0, (-2510));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Comparable<AbstractMap.SimpleEntry<Integer, String>>, Object>> comparator1 = (Comparator<Map.Entry<Comparable<AbstractMap.SimpleEntry<Integer, String>>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Object object0 = patriciaTrie1.put("{hVk^tT+(?nK]", abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(object0);
assertEquals((-2510), object0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.followLeft(abstractPatriciaTrie_TrieEntry1);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);
assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie2);

PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
assertNotNull(patriciaTrie3);
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));

PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
assertNotNull(patriciaTrie4);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));

patriciaTrie2.clear();
assertNotSame(patriciaTrie2, patriciaTrie3);
assertNotSame(patriciaTrie2, patriciaTrie4);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertTrue(patriciaTrie2.equals((Object)patriciaTrie4));

String string0 = patriciaTrie4.put("{hVk^tT+(?nK]", "{hVk^tT+(?nK]");
assertNull(string0);
assertNotSame(patriciaTrie2, patriciaTrie3);
assertNotSame(patriciaTrie2, patriciaTrie4);
assertNotSame(patriciaTrie3, patriciaTrie4);
assertNotSame(patriciaTrie3, patriciaTrie2);
assertNotSame(patriciaTrie4, patriciaTrie3);
assertNotSame(patriciaTrie4, patriciaTrie2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));

String string1 = patriciaTrie4.previousKey("{hVk^tT+(?nK]");
assertNull(string1);
assertNotSame(patriciaTrie2, patriciaTrie3);
assertNotSame(patriciaTrie2, patriciaTrie4);
assertNotSame(patriciaTrie3, patriciaTrie4);
assertNotSame(patriciaTrie3, patriciaTrie2);
assertNotSame(patriciaTrie4, patriciaTrie3);
assertNotSame(patriciaTrie4, patriciaTrie2);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
assertFalse(patriciaTrie3.equals((Object)patriciaTrie4));
assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));

int int0 = patriciaTrie1.size();
assertEquals(1, int0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.getEntry((Object) null);
assertNull(abstractPatriciaTrie_TrieEntry3);

Integer integer2 = new Integer((-2220));
assertNotNull(integer2);
assertEquals((-2220), (int)integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)object0));

AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>((String) null, (String) null);
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Map.Entry<String, AbstractMap.SimpleEntry<String, String>>> comparator2 = Map.Entry.comparingByKey();
assertNotNull(comparator2);

String string2 = abstractMap_SimpleEntry0.setValue("(5Q");
assertNull(string2);

AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, String>>(integer2, abstractMap_SimpleEntry0, (-2510));
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)object0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry4.isInternalNode();
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(boolean0);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)object0));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("{hVk^tT+(?nK]", integer2, (-2220));
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)object0));

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = abstractPatriciaTrie_TrieEntry5.right;
assertNull(abstractPatriciaTrie_TrieEntry6);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry7 = patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, abstractPatriciaTrie_TrieEntry5);
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry7);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertFalse(integer2.equals((Object)object0));

int int1 = patriciaTrie2.size();
assertEquals(0, int1);
assertNotSame(patriciaTrie2, patriciaTrie3);
assertNotSame(patriciaTrie2, patriciaTrie4);
assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
assertFalse(patriciaTrie2.equals((Object)patriciaTrie4));
assertFalse(int1 == int0);


[MASTER] 11:17:09.379 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_132_1634037429327/org/apache/commons/collections4/trie/AbstractPatriciaTrie_132_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_132_1634037429327/org/apache/commons/collections4/trie/AbstractPatriciaTrie_132_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:09.379 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:09.379 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:09.380 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>,java.lang.String>>: 35
[MASTER] 11:17:09.380 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.Object>,java.lang.String>>: 63
[MASTER] 11:17:09.380 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.lang.Integer>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Comparable<java.lang.Integer>,java.lang.String>>: 68
[MASTER] 11:17:09.380 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_132_1634037429327/org/apache/commons/collections4/trie/AbstractPatriciaTrie_132_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:09.380 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:09.381 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_132_1634037429327/org/apache/commons/collections4/trie/AbstractPatriciaTrie_132_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:09 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_132_tmp__ESTest extends AbstractPatriciaTrie_132_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>((String) null, (Comparable<String>) null, 160);
29:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
31:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
32:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
33:       
34:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
35:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
36:       assertNotNull(comparator1);
37:       
38:       abstractPatriciaTrie_TrieEntry0.bitIndex = 160;
39:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
41:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
42:       
43:       Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry0.setKeyValue((String) null, (Comparable<String>) null);
44:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
47:       assertNull(comparable0);
48:       
49:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
50:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
52:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
53:       assertNotNull(string0);
54:       assertEquals("Entry(key=null [160], value=null, parent=null, left=null [160], right=null, predecessor=null [160])", string0);
55:       
56:       abstractPatriciaTrie_TrieEntry0.predecessor = null;
57:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
59:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       
61:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
62:       Comparator<String> comparator3 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
63:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, String>> comparator4 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator3);
64:       assertNotNull(comparator4);
65:       assertNotSame(comparator4, comparator1);
66:       assertFalse(comparator4.equals((Object)comparator1));
67:       
68:       Comparator<Map.Entry<Comparable<Integer>, String>> comparator5 = (Comparator<Map.Entry<Comparable<Integer>, String>>)Map.Entry.comparingByKey((Comparator<? super Comparable<Integer>>) comparator2);
69:       assertNotNull(comparator5);
70:       
71:       abstractPatriciaTrie_TrieEntry0.value = null;
72:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
74:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
75:       
76:       Comparator<Map.Entry<Integer, String>> comparator6 = Map.Entry.comparingByValue();
77:       assertNotNull(comparator6);
78:       
79:       String string1 = abstractPatriciaTrie_TrieEntry0.toString();
80:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
83:       assertNotNull(string1);
84:       assertEquals("Entry(key=null [160], value=null, parent=null, left=null [160], right=null, )", string1);
85:       assertFalse(string1.equals((Object)string0));
86:       
87:       PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
88:       assertNotNull(patriciaTrie0);
89:       
90:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("", 160, 160);
91:       assertNull(abstractPatriciaTrie_TrieEntry1);
92:       
93:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
94:       assertTrue(hashMap0.isEmpty());
95:       assertEquals(0, hashMap0.size());
96:       assertNotNull(hashMap0);
97:       
98:       Integer integer0 = new Integer(160);
99:       assertNotNull(integer0);
100:       assertEquals(160, (int)integer0);
101:       
102:       Integer integer1 = hashMap0.put("b$_g{T", integer0);
103:       assertFalse(hashMap0.isEmpty());
104:       assertEquals(1, hashMap0.size());
105:       assertNull(integer1);
106:       
107:       PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
108:       assertFalse(hashMap0.isEmpty());
109:       assertEquals(1, hashMap0.size());
110:       assertNotNull(patriciaTrie1);
111:       
112:       PatriciaTrie<Comparable<Integer>> patriciaTrie2 = new PatriciaTrie<Comparable<Integer>>(patriciaTrie1);
113:       assertFalse(hashMap0.isEmpty());
114:       assertEquals(1, hashMap0.size());
115:       assertNotNull(patriciaTrie2);
116:       
117:       // Undeclared exception!
118:       try { 
119:         patriciaTrie1.subtree("EZ", 160, 4618);
120:         fail("Expecting exception: StringIndexOutOfBoundsException");
121:       
122:       } catch(StringIndexOutOfBoundsException e) {
123:       }
124:   }
125: }
RegularFileObject[/tmp/EvoSuite_132_1634037429327/org/apache/commons/collections4/trie/AbstractPatriciaTrie_132_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:09 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_132_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_132_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_132_tmp__ESTest_scaffolding.class.getClassLoader()));
109:   }
110: 
111:   private static void resetClasses() {
112:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_132_tmp__ESTest_scaffolding.class.getClassLoader()); 
113: 
114:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
115:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
116:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
117:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
118:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
128:       "org.apache.commons.collections4.trie.PatriciaTrie",
129:       "org.apache.commons.collections4.trie.KeyAnalyzer",
130:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
139:     );
140:   }
141: }

[MASTER] 11:17:09.382 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>((String) null, (Comparable<String>) null, 160);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry0.bitIndex = 160;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry0.setKeyValue((String) null, (Comparable<String>) null);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNull(comparable0);

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(string0);
assertEquals("Entry(key=null [160], value=null, parent=null, left=null [160], right=null, predecessor=null [160])", string0);

abstractPatriciaTrie_TrieEntry0.predecessor = null;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<String> comparator3 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, String>> comparator4 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, Object>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator3);
assertNotNull(comparator4);
assertNotSame(comparator4, comparator1);
assertFalse(comparator4.equals((Object)comparator1));

Comparator<Map.Entry<Comparable<Integer>, String>> comparator5 = (Comparator<Map.Entry<Comparable<Integer>, String>>)Map.Entry.comparingByKey((Comparator<? super Comparable<Integer>>) comparator2);
assertNotNull(comparator5);

abstractPatriciaTrie_TrieEntry0.value = null;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());

Comparator<Map.Entry<Integer, String>> comparator6 = Map.Entry.comparingByValue();
assertNotNull(comparator6);

String string1 = abstractPatriciaTrie_TrieEntry0.toString();
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(string1);
assertEquals("Entry(key=null [160], value=null, parent=null, left=null [160], right=null, )", string1);
assertFalse(string1.equals((Object)string0));

PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("", 160, 160);
assertNull(abstractPatriciaTrie_TrieEntry1);

HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

Integer integer0 = new Integer(160);
assertNotNull(integer0);
assertEquals(160, (int)integer0);

Integer integer1 = hashMap0.put("b$_g{T", integer0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(integer1);

PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(patriciaTrie1);

PatriciaTrie<Comparable<Integer>> patriciaTrie2 = new PatriciaTrie<Comparable<Integer>>(patriciaTrie1);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(patriciaTrie2);

patriciaTrie1.subtree("EZ", 160, 4618);

[MASTER] 11:17:13.397 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_161_1634037433369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_161_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_161_1634037433369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_161_tmp__ESTest_scaffolding.java]]
[MASTER] 11:17:13.397 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:13.397 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 11:17:13.398 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>>: 38
[MASTER] 11:17:13.398 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_161_1634037433369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_161_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 11:17:13.398 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 11:17:13.399 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_161_1634037433369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_161_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Oct 12 11:17:13 GMT 2021
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import java.util.Map;
13: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.evosuite.runtime.ViolatedAssumptionAnswer;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class AbstractPatriciaTrie_161_tmp__ESTest extends AbstractPatriciaTrie_161_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
25:       doReturn((String) null).when(comparable0).toString();
26:       AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<Object>>(comparable0, comparable0, (-1));
27:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
29:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
30:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
31:       
32:       Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
33:       assertNotNull(comparator0);
34:       
35:       Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
36:       doReturn((String) null).when(comparable1).toString();
37:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
38:       Comparator<Map.Entry<String, Integer>> comparator2 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
39:       assertNotNull(comparator2);
40:       
41:       Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
42:       AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<Object>>(comparable2, comparable2, (-1));
43:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
45:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
46:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
47:       
48:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
50:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
51:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
54:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
57:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
58:       
59:       abstractPatriciaTrie_TrieEntry0.value = comparable1;
60:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
62:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
63:       
64:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
65:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
67:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       assertNotNull(string0);
69:   }
70: }
RegularFileObject[/tmp/EvoSuite_161_1634037433369/org/apache/commons/collections4/trie/AbstractPatriciaTrie_161_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Oct 12 11:17:13 GMT 2021
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_161_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_161_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "org.apache.commons.collections4.MapIterator",
72:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
73:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
74:       "org.apache.commons.collections4.trie.PatriciaTrie",
75:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
76:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
77:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
78:       "org.apache.commons.collections4.Get",
79:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
80:       "org.apache.commons.collections4.Trie",
81:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
82:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
84:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator",
85:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
88:       "org.apache.commons.collections4.IterableSortedMap",
89:       "org.apache.commons.collections4.OrderedMap",
90:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
93:       "org.apache.commons.collections4.OrderedMapIterator",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
96:       "org.apache.commons.collections4.Put",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
98:       "org.apache.commons.collections4.trie.KeyAnalyzer",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
100:       "org.apache.commons.collections4.IterableMap",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
103:       "org.apache.commons.collections4.OrderedIterator",
104:       "org.apache.commons.collections4.IterableGet"
105:     );
106:   } 
107:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
108:     mock(Class.forName("java.lang.Comparable", false, AbstractPatriciaTrie_161_tmp__ESTest_scaffolding.class.getClassLoader()));
109:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_161_tmp__ESTest_scaffolding.class.getClassLoader()));
110:   }
111: 
112:   private static void resetClasses() {
113:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_161_tmp__ESTest_scaffolding.class.getClassLoader()); 
114: 
115:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
116:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
117:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
118:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
119:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
120:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
121:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
122:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
124:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
129:       "org.apache.commons.collections4.trie.PatriciaTrie",
130:       "org.apache.commons.collections4.trie.KeyAnalyzer",
131:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator"
140:     );
141:   }
142: }

[MASTER] 11:17:13.400 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(comparable0).toString();
AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<Object>>(comparable0, comparable0, (-1));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Map.Entry<Comparable<Object>, Object>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(comparable1).toString();
Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator2 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator1);
assertNotNull(comparator2);

Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<Object>>(comparable2, comparable2, (-1));
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());

abstractPatriciaTrie_TrieEntry0.value = comparable1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(string0);


[MASTER] 11:17:14.257 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:14.411 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:14.663 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:14.768 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:14.874 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:14.983 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:15.119 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:15.254 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:15.353 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:15.433 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:15.534 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:15.599 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:15.660 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:15.737 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:15.827 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:15.918 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:16.028 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:16.105 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:16.174 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:16.240 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:16.301 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:16.384 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:16.444 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:16.519 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:16.612 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:16.695 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:16.764 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:16.848 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:16.999 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:17.064 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:17.156 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:17.233 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:17.293 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:17.347 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:17.439 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:17.525 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:17.602 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:17.686 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:17.762 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:17.845 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:17.912 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:18.000 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:18.071 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:18.154 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:18.361 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:18.440 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:18.531 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:18.595 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:18.689 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:18.770 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:18.854 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:18.942 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:19.018 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:19.099 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:19.229 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:19.302 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:19.372 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:19.435 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:19.541 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:19.626 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:19.692 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:19.767 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:19.833 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:19.900 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:19.991 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:20.067 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:20.155 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:20.229 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:20.306 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:20.374 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:20.465 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:20.560 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:20.641 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:20.701 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:20.767 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:20.859 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:20.947 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:21.005 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:21.076 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:21.859 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:21.968 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.032 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.114 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.177 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.262 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.339 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.403 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.485 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.556 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.618 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.721 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.782 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.856 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.916 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:22.975 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:23.065 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:23.168 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:23.240 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:23.347 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:23.444 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:23.609 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:23.722 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:23.803 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:23.878 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:23.952 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.016 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.082 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.144 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.211 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.284 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.348 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.416 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.491 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.553 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.616 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.686 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.738 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.805 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:24.953 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.021 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.126 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.202 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.264 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.341 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.398 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.489 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.554 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.680 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.766 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.855 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.908 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:25.967 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.024 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.082 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.150 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.233 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.305 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:26.384 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.479 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.612 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.693 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.761 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.825 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.888 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:29.944 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.015 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.090 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.178 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:30.237 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.316 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.353 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 11:17:33.357 [logback-1] WARN  JUnitAnalyzer - Failing test:
 String string0 = ">((jS9A:oTs4";
AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(">((jS9A:oTs4", ">((jS9A:oTs4", (-774));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(">((jS9A:oTs4", abstractPatriciaTrie_TrieEntry0, (-774));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry1.value = (Object) ">((jS9A:oTs4";
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

Integer integer0 = new Integer((-774));
assertNotNull(integer0);
assertEquals((-774), (int)integer0);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());

abstractPatriciaTrie_TrieEntry1.key = (Object) abstractPatriciaTrie_TrieEntry0.parent;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());

Object object0 = abstractPatriciaTrie_TrieEntry0.setValue(integer0);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(object0);
assertEquals(">((jS9A:oTs4", object0);
assertTrue(object0.equals((Object)string0));

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());

Comparator<Map.Entry<Comparable<Object>, Integer>> comparator0 = Map.Entry.comparingByKey();
assertNotNull(comparator0);

abstractPatriciaTrie_TrieEntry0.toString();

[MASTER] 11:17:33.436 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.503 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.585 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.667 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.726 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.817 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:33.928 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.024 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.098 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.181 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.248 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.305 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.395 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.446 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.543 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.608 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.685 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.750 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.829 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:34.900 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:39.856 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 11:17:44.724 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/BBC-F0-opt-60/tests/4
* Done!

* Computation finished
