/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:17:24 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiConsumer;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.subMap("5e#/N'G5E_ R#", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable0).toString();
      Integer integer0 = new Integer((-2183));
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object>(comparable0, integer0, (-595));
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object>((Comparable<Object>) null, abstractPatriciaTrie_TrieEntry0, (-2183));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("0n.9eX$L+y]y3", (Integer) null);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, (-993), (-993));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(9);
      patriciaTrie0.put("", integer0);
      patriciaTrie0.put("X4i%|cE)n.$%W", integer0);
      patriciaTrie0.floorEntry("i^O:\"d");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(4209);
      Integer integer1 = hashMap0.put("", integer0);
      hashMap0.put("eO]{C6", integer1);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.ceilingEntry("`vwJ'xi;RpNJ_");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "JNJq");
      patriciaTrie0.ceilingEntry("  ");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.incrementSize();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("invalid lookup: ", (Integer) null);
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.put("invalid lookup: ", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.subtree("=", 0, 0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.size();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("keyAnalyzer", (Integer) null);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.size();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(1072);
      hashMap0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.selectValue("\n");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "");
      patriciaTrie0.remove((Object) "");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(2372);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>(" + ", integer0, 112);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-2528));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("KN@/S!<N", "KN@/S!<N");
      patriciaTrie0.put("", (String) null);
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 702);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", (-1));
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0.right, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0.right);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("k6r>", "");
      patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1015));
      patriciaTrie0.put("", integer0);
      patriciaTrie0.lowerEntry(" > ");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = new Integer(2);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 2);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2);
      patriciaTrie0.lowerEntry("Entry(key=null [2], value=2, parent=null, left=null [2], right=null, predecessor=null [2])");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(2606);
      patriciaTrie0.put("-TUAp,0I>]<Ub", integer0);
      patriciaTrie0.lastEntry();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("\n", "GZ`#", 1072);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Integer integer0 = new Integer(1004);
      patriciaTrie1.put("!d)aIN[kTrV'", integer0);
      patriciaTrie1.getNearestEntryForKey((String) null, 1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("", (Integer) null);
      patriciaTrie0.getNearestEntryForKey(".=ha&X-mn.@N:`D&", (-3));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.getEntry("ToKey is out of range: ");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(768);
      patriciaTrie0.putIfAbsent("Trie[", integer0);
      patriciaTrie0.getEntry("Trie[");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.get((Object) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("}\n", (Object) null, 0);
      patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("Key is out of range: ", "Trie[", (-3512));
      patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Fz064C- ", integer0, 235);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 235);
      patriciaTrie0.floorEntry("Rg N]WC&srV`");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.firstEntry();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("H.zV\t;", "Entry(key=k6r> [2573], value=k6r>, parent=null, left=k6r> [2573], right=null, predecessor=k6r> [2573])");
      patriciaTrie0.containsKey("H.zV\t;");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1);
      Integer integer1 = patriciaTrie0.put("H5$6C`ie^sf/hQ&F", integer0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("`=w'}DY^;z\"C^`~C:", integer1);
      patriciaTrie1.ceilingEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.tailMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        patriciaTrie0.remove(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Comparable<Integer>> patriciaTrie1 = new PatriciaTrie<Comparable<Integer>>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("30AI8.aVo:lo5", patriciaTrie1, 2208);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry0;
      // Undeclared exception!
      try { 
        patriciaTrie2.nextEntry(abstractPatriciaTrie_TrieEntry0.predecessor);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.higherEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("0KG\"(2=bX6Z", "0KG\"(2=bX6Z");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.getNearestEntryForKey("", 2246);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        patriciaTrie0.getEntry(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie1.get(patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.followRight((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      Integer integer0 = new Integer((-537));
      // Undeclared exception!
      try { 
        patriciaTrie0.containsKey(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.ceilingEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer integer0 = new Integer((-1015));
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("predecessor=", integer0, (-1134));
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-37));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<String, Integer>>((Object) null, (AbstractMap.SimpleEntry<String, Integer>) null, (-1378));
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", "", 0);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("k6r>", "");
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("*VYmFrEwF#V9Q", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      patriciaTrie0.put("1t;F8SZL3", "Entry(key=k6r> [2573], value=k6r>, parent=null, left=k6r> [2573], right=null, predecessor=k6r> [2573])");
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.firstEntry();
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, (String) null, 1753);
      abstractPatriciaTrie_TrieEntry0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", "");
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>(abstractMap_SimpleEntry1, "", (-1330));
      abstractPatriciaTrie_TrieEntry0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", 16);
      patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie0.entrySet();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.select("FromKey is out of range: ");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.subMap("", "");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      patriciaTrie0.headMap("~'{}*");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("", comparable0, (-1));
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = new Integer((-1015));
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "hj4\"=)_zt^, R#o", 16);
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "hj4\"=)_zt^, R#o", (-1015));
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("k6r>", "k6r>", 2573);
      abstractPatriciaTrie_TrieEntry0.left = null;
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer(1343);
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", 1343);
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry0.left;
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-661));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1));
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-1));
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("@PpH", "@PpH", 1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("@PpH", "Key is out of range: ", 0);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-3811));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-3811));
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer((-4732));
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("", integer0);
      patriciaTrie0.put("invalid lookup: ", integer0);
      patriciaTrie0.lowerEntry("]E1{");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1321);
      Integer integer1 = patriciaTrie0.put("nvzQ;x*", integer0);
      patriciaTrie0.put("X4i%|cE)n.$%W", integer1);
      patriciaTrie0.lowerEntry("B@10UtLD3g(DdGlu");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("h{", "Rhb0w'8", 303);
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-93));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("FromKey is out of range: ", integer0, (-93));
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have come from somewhere!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer((-1015));
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer1 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", integer0);
      patriciaTrie0.put("JNJq", integer1);
      patriciaTrie0.lastEntry();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("0", (Integer) null);
      patriciaTrie0.put("invalid lookup: ", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.subtree("right=", 0, 0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("invalid lookup: ", integer0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", 240, 0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      patriciaTrie0.put("", (AbstractMap.SimpleImmutableEntry<String, Integer>) null);
      patriciaTrie0.subtree("", 16, 2226);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      Integer integer0 = new Integer(1106);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>((String) null, integer0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry1);
      patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("\n", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      Integer integer0 = new Integer(336);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>((String) null, integer0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>(abstractMap_SimpleEntry1);
      patriciaTrie0.put("xMG=%[*DuCeYr7]U]&", abstractMap_SimpleImmutableEntry0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 336, 336);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", (Integer) null);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.subtree("invalid lookup: ", 0, 16);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      patriciaTrie0.put("Q", (AbstractMap.SimpleImmutableEntry<String, Integer>) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("tPj<", 9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      patriciaTrie0.subtree("invalid lookup: ", 0, 16);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", (Integer) null);
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.PatriciaTrie");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(16);
      patriciaTrie0.put("", integer0);
      patriciaTrie0.floorEntry("");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.floorEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("JNJq", (Integer) null);
      patriciaTrie0.lowerEntry("JNJq");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.lowerEntry("");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.put("keyAnalyzer", patriciaTrie0);
      patriciaTrie1.ceilingEntry("keyAnalyzer");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("", "");
      patriciaTrie0.ceilingEntry("");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.ceilingEntry("");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("parent=", (Integer) null);
      patriciaTrie0.higherEntry("parent=");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put(",", "th!kCyrj:_$S.cv~C");
      patriciaTrie0.put("", "q0!k9o");
      patriciaTrie0.higherEntry("");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "q0!k9o");
      patriciaTrie0.higherEntry("");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      patriciaTrie0.put("KN@/S!<N", "KN@/S!<N");
      patriciaTrie0.put("", (String) null);
      patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      patriciaTrie0.prefixMap("05l81\"(2=wb?p8X6Z");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(9);
      patriciaTrie0.put("", integer0);
      patriciaTrie0.put("X4i%|cE)n.$%W", integer0);
      patriciaTrie0.previousKey("X4i%|cE)n.$%W");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1015));
      patriciaTrie0.put("JNJq", integer0);
      patriciaTrie0.previousKey("JNJq");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie0.put("0X}o>qq", "");
      patriciaTrie0.nextKey("");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie0.nextKey("");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.nextKey("");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "t8tem");
      patriciaTrie0.lastKey();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put("parent=", (Integer) null);
      patriciaTrie0.firstKey();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("]@QV", "]@QV");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("Pa+rw?@t.");
      patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1015));
      patriciaTrie0.put("JNJq", integer0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", (Integer) null);
      BiConsumer<String, Integer> biConsumer0 = (BiConsumer<String, Integer>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.forEach(biConsumer0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      patriciaTrie0.put("dl'K\"Xwcv872nRHFV", "uA[=Y0SpS[,:8C[");
      patriciaTrie0.put("q0!k9o", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("K|vw.[6|zZW");
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 702);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry0.right;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = new Integer(2);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 2);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("Entry(key=null [2], value=2, parent=null, left=null [2], right=null, predecessor=null [2])");
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator", "05l81\"(2=wb?p8X6Z");
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie0.put("", "");
      patriciaTrie0.put("m+\"sy", "&VC3sE+ST^j<[%");
      Comparable<String> comparable0 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("05l81\"(2=wb?p8X6Z", comparable0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(416);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("*BD`]%rD>u_12ya", integer0, 416);
      abstractPatriciaTrie_TrieEntry0.left = null;
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("&VC3sE+ST^j<[%", "05l81\"(2=wb?p8X6Z");
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      patriciaTrie0.put("05l81\"(2=wb?p8X6Z", "&VC3sE+ST^j<[%");
      patriciaTrie0.put("7,2[J=]Y}#j~5", (Comparable<String>) null);
      Comparable<String> comparable0 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("05l81\"(2=wb?p8X6Z", comparable0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("", "05l81\"(2=wb?p8X6Z");
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      patriciaTrie0.put("&VC3sE+ST^j<[%", "05l81\"(2=wb?p8X6Z");
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey((String) null, 1401);
      Object object0 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("The offsets and lengths must be at Character boundaries", "");
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("+8hYJUO,maB q-", "+8hYJUO,maB q-", (-1303));
      Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry0.value;
      patriciaTrie0.remove((Object) comparable0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator");
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("+8hYJUO,maB q-", "+8hYJUO,maB q-", (-1303));
      Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry0.value;
      String string0 = patriciaTrie0.remove((Object) comparable0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(64);
      patriciaTrie0.put("Y>{", integer0);
      Integer integer1 = patriciaTrie0.remove((Object) "Y>{");
      assertEquals(64, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Collection<Integer> collection0 = patriciaTrie0.values();
      Collection<Integer> collection1 = patriciaTrie0.values();
      assertSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      patriciaTrie0.keySet();
      Set<String> set0 = patriciaTrie0.keySet();
      assertEquals(0, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", (String) null);
      String string0 = patriciaTrie0.getOrDefault("", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      boolean boolean0 = patriciaTrie0.containsKey("(Lh@(! :&bbXK=.\".d\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("0KlG\"(2=wb8X6Z", "0KlG\"(2=wb8X6Z");
      patriciaTrie0.put("M-e)!.sY,^", "M-e)!.sY,^");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Map.Entry<String, Object> map_Entry0 = patriciaTrie1.select("0KlG\"(2=wb8X6Z");
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = patriciaTrie0.selectValue("\"G[hVE,tNW@SLKW?V]F");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1015));
      patriciaTrie0.put("JNJq", integer0);
      Integer integer1 = patriciaTrie0.selectValue("JNJq");
      assertEquals((-1015), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("ToKey is out of range: ", patriciaTrie0);
      String string0 = patriciaTrie1.selectKey("ToKey is out of range: ");
      assertEquals("ToKey is out of range: ", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.selectKey((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      String string0 = patriciaTrie0.getOrDefault("]", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = patriciaTrie0.previousKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.getOrDefault((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = patriciaTrie0.remove((Object) null);
      patriciaTrie0.put("m,", integer0);
      Integer integer1 = patriciaTrie0.put("?<?Wc_QcG&4", (Integer) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("dl'K\"Xwcv872nRHFV", "uA[=Y0SpS[,:8C[");
      patriciaTrie0.put("qT!ko", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("K|vw.[6|zZW");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.put("0KlG\"(2=wb8X6Z", "0KlG\"(2=wb8X6Z");
      Comparable<String> comparable0 = patriciaTrie0.put("0KlG\"(2=wb8X6Z", "0KlG\"(2=wb8X6Z");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Object object0 = patriciaTrie1.get(comparable0);
      assertEquals("0KlG\"(2=wb8X6Z", object0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = patriciaTrie0.put("", (Integer) null);
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "+8hYJUO,maB q-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1015));
      Collection<Integer> collection0 = patriciaTrie0.values();
      patriciaTrie0.put("JNJq", integer0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Object>(comparable0, (Object) null, (-2975));
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable1).toString();
      abstractPatriciaTrie_TrieEntry0.setKeyValue(comparable1, collection0);
      assertTrue(collection0.contains((-1015)));
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=null [-2975], value=[-1015], parent=null, left=null [-2975], right=null, predecessor=null [-2975])", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.clear();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      SortedMap<String, AbstractMap.SimpleEntry<Integer, String>> sortedMap0 = patriciaTrie0.prefixMap("");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subMap("Key cannot be null", "FhxXv;mOVKPV|S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      Comparator<? super String> comparator0 = patriciaTrie0.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(orderedMapIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }
}
