* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 8985
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 3684347837
* Starting evolution
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 03:45:03.073 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 03:45:03.073 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 03:46:15.796 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 03:46:28.855 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 795: org.apache.commons.collections4.trie.AbstractPatriciaTrie.lowerEntry(Ljava/lang/Object;)Lorg/apache/commons/collections4/trie/AbstractPatriciaTrie$TrieEntry;:1035 - ReplaceArithmeticOperator - -> /
[MASTER] 03:46:32.679 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 305s and 77 generations, 36297 statements, best individual has fitness: 1456.0
* Minimizing test suite
[MASTER] 03:51:13.359 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 57%
* Total number of goals: 822
* Number of covered goals: 467
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 50%
* Total number of goals: 602
* Number of covered goals: 298
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 24
* Number of covered goals: 24
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 58%
* Total number of goals: 569
* Number of covered goals: 330
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 55%
* Total number of goals: 186
* Number of covered goals: 102
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 49%
* Total number of goals: 602
* Number of covered goals: 295
* Generated 230 tests with total length 2266
* Resulting test suite's coverage: 50% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:52:11.549 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6740833333333334% of time used, but only 26/230 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 03:52:36.446 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_70_1605585156305/org/apache/commons/collections4/trie/AbstractPatriciaTrie_70_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_70_1605585156305/org/apache/commons/collections4/trie/AbstractPatriciaTrie_70_tmp__ESTest_scaffolding.java]]
[MASTER] 03:52:36.455 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:52:36.456 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:52:36.461 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Integer>>>: 32
[MASTER] 03:52:36.472 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_70_1605585156305/org/apache/commons/collections4/trie/AbstractPatriciaTrie_70_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:52:36.472 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:52:36.474 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_70_1605585156305/org/apache/commons/collections4/trie/AbstractPatriciaTrie_70_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:52:36 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_70_tmp__ESTest extends AbstractPatriciaTrie_70_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", ":^F5!t", (-3737));
26:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
27:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
28:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
29:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
30:       
31:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
32:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
33:       assertNotNull(comparator1);
34:       
35:       boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
36:       assertTrue(boolean0);
37:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
39:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
40:       
41:       Integer integer0 = new Integer((-3737));
42:       assertEquals((-3737), (int)integer0);
43:       assertNotNull(integer0);
44:       
45:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(comparator1, integer0, 0);
46:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
48:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
49:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
50:       
51:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
52:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
55:       assertNotNull(string0);
56:   }
57: }
RegularFileObject[/tmp/EvoSuite_70_1605585156305/org/apache/commons/collections4/trie/AbstractPatriciaTrie_70_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:52:36 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_70_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_70_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_70_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_70_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:52:36.481 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", ":^F5!t", (-3737));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertTrue(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Integer integer0 = new Integer((-3737));
assertEquals((-3737), (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(comparator1, integer0, 0);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(string0);


[MASTER] 03:52:39.253 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_85_1605585159066/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_85_1605585159066/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest_scaffolding.java]]
[MASTER] 03:52:39.253 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:52:39.253 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:52:39.254 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Integer,java.lang.Object>,java.lang.Comparable<java.lang.Object>>>: 67
[MASTER] 03:52:39.254 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>>: 87
[MASTER] 03:52:39.254 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_85_1605585159066/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:52:39.255 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:52:39.255 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_85_1605585159066/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:52:39 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_85_tmp__ESTest extends AbstractPatriciaTrie_85_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
29:       assertTrue(hashMap0.isEmpty());
30:       assertEquals(0, hashMap0.size());
31:       assertNotNull(hashMap0);
32:       
33:       Integer integer0 = new Integer(1);
34:       assertEquals(1, (int)integer0);
35:       assertNotNull(integer0);
36:       
37:       Integer integer1 = hashMap0.replace("", integer0);
38:       assertTrue(hashMap0.isEmpty());
39:       assertEquals(0, hashMap0.size());
40:       assertNull(integer1);
41:       
42:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
43:       assertTrue(hashMap0.isEmpty());
44:       assertEquals(0, hashMap0.size());
45:       assertNotNull(patriciaTrie0);
46:       
47:       PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
48:       assertNotNull(patriciaTrie1);
49:       
50:       Integer integer2 = new Integer(1);
51:       assertEquals(1, (int)integer2);
52:       assertTrue(integer2.equals((Object)integer0));
53:       assertNotNull(integer2);
54:       
55:       Integer integer3 = new Integer(1);
56:       assertEquals(1, (int)integer3);
57:       assertTrue(integer3.equals((Object)integer0));
58:       assertTrue(integer3.equals((Object)integer2));
59:       assertNotNull(integer3);
60:       
61:       AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer3, patriciaTrie1);
62:       assertTrue(integer3.equals((Object)integer0));
63:       assertTrue(integer3.equals((Object)integer2));
64:       assertNotNull(abstractMap_SimpleEntry0);
65:       
66:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
67:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Comparable<Object>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Comparable<Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Integer, Object>>) comparator0);
68:       assertNotNull(comparator1);
69:       
70:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
71:       assertTrue(integer3.equals((Object)integer0));
72:       assertTrue(integer3.equals((Object)integer2));
73:       assertNotNull(abstractMap_SimpleImmutableEntry0);
74:       
75:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie1.put(" -> ", abstractMap_SimpleImmutableEntry0);
76:       assertTrue(integer3.equals((Object)integer0));
77:       assertTrue(integer3.equals((Object)integer2));
78:       assertNull(abstractMap_SimpleImmutableEntry1);
79:       
80:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer2, "");
81:       assertTrue(integer2.equals((Object)integer3));
82:       assertTrue(integer2.equals((Object)integer0));
83:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
84:       assertNotNull(abstractMap_SimpleImmutableEntry2);
85:       
86:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
87:       Comparator<Map.Entry<Integer, Object>> comparator3 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator2);
88:       assertNotNull(comparator3);
89:       
90:       AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry3 = patriciaTrie1.put("=", abstractMap_SimpleImmutableEntry2);
91:       assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
92:       assertTrue(integer2.equals((Object)integer3));
93:       assertTrue(integer2.equals((Object)integer0));
94:       assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
95:       assertNull(abstractMap_SimpleImmutableEntry3);
96:       
97:       String string0 = patriciaTrie1.lastKey();
98:       assertEquals("=", string0);
99:       assertNotNull(string0);
100:       
101:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
102:       assertTrue(hashMap0.isEmpty());
103:       assertEquals(0, hashMap0.size());
104:       assertNull(abstractPatriciaTrie_TrieEntry0);
105:       
106:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
107:       assertTrue(hashMap1.isEmpty());
108:       assertEquals(0, hashMap1.size());
109:       assertNotNull(hashMap1);
110:       
111:       PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap1);
112:       assertTrue(hashMap1.isEmpty());
113:       assertEquals(0, hashMap1.size());
114:       assertNotNull(patriciaTrie2);
115:       
116:       String string1 = ">\\uA9jgu<VR";
117:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>(string1, (String) null, (-3109));
118:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
119:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
121:       assertFalse(string1.equals((Object)string0));
122:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
123:       
124:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
125:       assertNull(abstractPatriciaTrie_TrieEntry2);
126:       
127:       // Undeclared exception!
128:       try { 
129:         patriciaTrie2.addEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null, 1);
130:         fail("Expecting exception: NullPointerException");
131:       
132:       } catch(NullPointerException e) {
133:          //
134:          // no message in exception (getMessage() returned null)
135:          //
136:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
137:       }
138:   }
139: }
RegularFileObject[/tmp/EvoSuite_85_1605585159066/org/apache/commons/collections4/trie/AbstractPatriciaTrie_85_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:52:39 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_85_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_85_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_85_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_85_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:52:39.258 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(hashMap0);

Integer integer0 = new Integer(1);
assertEquals(1, (int)integer0);
assertNotNull(integer0);

Integer integer1 = hashMap0.replace("", integer0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(integer1);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNotNull(patriciaTrie0);

PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
assertNotNull(patriciaTrie1);

Integer integer2 = new Integer(1);
assertEquals(1, (int)integer2);
assertTrue(integer2.equals((Object)integer0));
assertNotNull(integer2);

Integer integer3 = new Integer(1);
assertEquals(1, (int)integer3);
assertTrue(integer3.equals((Object)integer0));
assertTrue(integer3.equals((Object)integer2));
assertNotNull(integer3);

AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer3, patriciaTrie1);
assertTrue(integer3.equals((Object)integer0));
assertTrue(integer3.equals((Object)integer2));
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Comparable<Object>>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Integer, Object>, Comparable<Object>>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Integer, Object>>) comparator0);
assertNotNull(comparator1);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
assertTrue(integer3.equals((Object)integer0));
assertTrue(integer3.equals((Object)integer2));
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie1.put(" -> ", abstractMap_SimpleImmutableEntry0);
assertTrue(integer3.equals((Object)integer0));
assertTrue(integer3.equals((Object)integer2));
assertNull(abstractMap_SimpleImmutableEntry1);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer2, "");
assertTrue(integer2.equals((Object)integer3));
assertTrue(integer2.equals((Object)integer0));
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNotNull(abstractMap_SimpleImmutableEntry2);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Object>> comparator3 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator2);
assertNotNull(comparator3);

AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry3 = patriciaTrie1.put("=", abstractMap_SimpleImmutableEntry2);
assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
assertTrue(integer2.equals((Object)integer3));
assertTrue(integer2.equals((Object)integer0));
assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
assertNull(abstractMap_SimpleImmutableEntry3);

String string0 = patriciaTrie1.lastKey();
assertEquals("=", string0);
assertNotNull(string0);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
assertTrue(hashMap0.isEmpty());
assertEquals(0, hashMap0.size());
assertNull(abstractPatriciaTrie_TrieEntry0);

HashMap<String, String> hashMap1 = new HashMap<String, String>();
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertNotNull(hashMap1);

PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap1);
assertTrue(hashMap1.isEmpty());
assertEquals(0, hashMap1.size());
assertNotNull(patriciaTrie2);

String string1 = ">\\uA9jgu<VR";
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>(string1, (String) null, (-3109));
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(string1.equals((Object)string0));
assertNotNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
assertNull(abstractPatriciaTrie_TrieEntry2);

patriciaTrie2.addEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null, 1);

[MASTER] 03:52:49.304 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_169_1605585169145/org/apache/commons/collections4/trie/AbstractPatriciaTrie_169_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_169_1605585169145/org/apache/commons/collections4/trie/AbstractPatriciaTrie_169_tmp__ESTest_scaffolding.java]]
[MASTER] 03:52:49.304 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:52:49.304 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:52:49.305 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Integer>>>: 28
[MASTER] 03:52:49.305 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_169_1605585169145/org/apache/commons/collections4/trie/AbstractPatriciaTrie_169_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:52:49.305 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:52:49.306 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_169_1605585169145/org/apache/commons/collections4/trie/AbstractPatriciaTrie_169_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:52:49 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.SortedMap;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_169_tmp__ESTest extends AbstractPatriciaTrie_169_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
28:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
29:       assertNotNull(comparator1);
30:       
31:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
32:       assertNotNull(patriciaTrie0);
33:       
34:       SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("}\n");
35:       assertEquals(0, sortedMap0.size());
36:       assertTrue(sortedMap0.isEmpty());
37:       assertNotNull(sortedMap0);
38:       
39:       AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, patriciaTrie0, 910);
40:       assertEquals(0, sortedMap0.size());
41:       assertTrue(sortedMap0.isEmpty());
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
45:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
46:       
47:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
48:       assertEquals("Entry(key={} [910], value=Trie[0]={\n}\n, parent=null, left={} [910], right=null, predecessor={} [910])", string0);
49:       assertEquals(0, sortedMap0.size());
50:       assertTrue(sortedMap0.isEmpty());
51:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
54:       assertNotNull(string0);
55:   }
56: }
RegularFileObject[/tmp/EvoSuite_169_1605585169145/org/apache/commons/collections4/trie/AbstractPatriciaTrie_169_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:52:49 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_169_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_169_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_169_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_169_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:52:49.306 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("}\n");
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertNotNull(sortedMap0);

AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(sortedMap0, patriciaTrie0, 910);
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertEquals("Entry(key={} [910], value=Trie[0]={\n}\n, parent=null, left={} [910], right=null, predecessor={} [910])", string0);
assertEquals(0, sortedMap0.size());
assertTrue(sortedMap0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(string0);


[MASTER] 03:52:51.460 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_190_1605585171333/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_190_1605585171333/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest_scaffolding.java]]
[MASTER] 03:52:51.463 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:52:51.463 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:52:51.464 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Integer>>>: 28
[MASTER] 03:52:51.465 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.Integer>>>: 38
[MASTER] 03:52:51.465 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_190_1605585171333/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:52:51.466 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:52:51.467 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_190_1605585171333/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:52:51 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_190_tmp__ESTest extends AbstractPatriciaTrie_190_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
28:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
29:       assertNotNull(comparator1);
30:       
31:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("8#/N1!p@)U|=-", "8#/N1!p@)U|=-", (-1396));
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
33:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
35:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
36:       
37:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
38:       Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>> comparator3 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
39:       assertNotSame(comparator3, comparator1);
40:       assertFalse(comparator3.equals((Object)comparator1));
41:       assertNotNull(comparator3);
42:       
43:       boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
44:       assertTrue(boolean0);
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
48:       
49:       Integer integer0 = new Integer(1);
50:       assertEquals(1, (int)integer0);
51:       assertNotNull(integer0);
52:       
53:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", (Integer) null, (-2267));
54:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
55:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
56:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
57:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
58:       
59:       AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", (Integer) null, (-1396));
60:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
62:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
63:       assertTrue(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
64:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
65:       
66:       abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
67:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
69:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
72:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
74:       assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
76:       
77:       String string0 = abstractPatriciaTrie_TrieEntry1.toString();
78:       assertEquals("Entry(key=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [-2267], value=null, parent=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [-1396], left=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [-2267], right=null, predecessor=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [-2267])", string0);
79:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
82:       assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
83:       assertTrue(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry2));
84:       assertNotNull(string0);
85:       
86:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
87:       assertNotNull(patriciaTrie0);
88:       
89:       Integer integer1 = new Integer(872);
90:       assertEquals(872, (int)integer1);
91:       assertFalse(integer1.equals((Object)integer0));
92:       assertNotNull(integer1);
93:       
94:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("9m", integer1, (-1396));
95:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
97:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
98:       assertFalse(integer1.equals((Object)integer0));
99:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
100:       
101:       AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.parent;
102:       assertNull(abstractPatriciaTrie_TrieEntry4);
103:       
104:       // Undeclared exception!
105:       try { 
106:         patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
107:         fail("Expecting exception: NullPointerException");
108:       
109:       } catch(NullPointerException e) {
110:          //
111:          // no message in exception (getMessage() returned null)
112:          //
113:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
114:       }
115:   }
116: }
RegularFileObject[/tmp/EvoSuite_190_1605585171333/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:52:51 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_190_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_190_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_190_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_190_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:52:51.470 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>> comparator1 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("8#/N1!p@)U|=-", "8#/N1!p@)U|=-", (-1396));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>> comparator3 = (Comparator<Map.Entry<String, AbstractMap.SimpleEntry<Object, Integer>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
assertNotSame(comparator3, comparator1);
assertFalse(comparator3.equals((Object)comparator1));
assertNotNull(comparator3);

boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
assertTrue(boolean0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

Integer integer0 = new Integer(1);
assertEquals(1, (int)integer0);
assertNotNull(integer0);

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", (Integer) null, (-2267));
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", (Integer) null, (-1396));
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
assertNotNull(abstractPatriciaTrie_TrieEntry2);

abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());

String string0 = abstractPatriciaTrie_TrieEntry1.toString();
assertEquals("Entry(key=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [-2267], value=null, parent=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [-1396], left=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [-2267], right=null, predecessor=org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer [-2267])", string0);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
assertTrue(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry2));
assertNotNull(string0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer1 = new Integer(872);
assertEquals(872, (int)integer1);
assertFalse(integer1.equals((Object)integer0));
assertNotNull(integer1);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("9m", integer1, (-1396));
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(integer1.equals((Object)integer0));
assertNotNull(abstractPatriciaTrie_TrieEntry3);

AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.parent;
assertNull(abstractPatriciaTrie_TrieEntry4);

patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);

[MASTER] 03:53:18.727 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/default/tests/7
* Done!

* Computation finished
