* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Starting Client-0
* Connecting to master process on port 21571
* Analyzing classpath: 
  - subjects/buggy-versions/Collections-28/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.collections4.trie.AbstractPatriciaTrie
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3013
* Using seed 529799334
* Starting evolution
* Initial Number of Goals in DynaMOSA = 988 / 3013
[MASTER] 03:52:33.327 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 03:52:33.327 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 03:53:09.642 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 03:55:31.479 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 304s and 80 generations, 41108 statements, best individual has fitness: 1458.0
* Minimizing test suite
[MASTER] 03:58:39.649 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 58%
* Total number of goals: 822
* Number of covered goals: 474
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 50%
* Total number of goals: 602
* Number of covered goals: 300
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 56%
* Total number of goals: 569
* Number of covered goals: 320
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 186
* Number of covered goals: 101
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 41%
* Total number of goals: 116
* Number of covered goals: 47
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 40%
* Total number of goals: 116
* Number of covered goals: 46
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 50%
* Total number of goals: 602
* Number of covered goals: 298
* Generated 237 tests with total length 2317
* Resulting test suite's coverage: 49% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:59:33.916 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6918% of time used, but only 19/237 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 7%
* Compiling and checking tests
[MASTER] 03:59:48.813 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_23_1605585588666/org/apache/commons/collections4/trie/AbstractPatriciaTrie_23_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_23_1605585588666/org/apache/commons/collections4/trie/AbstractPatriciaTrie_23_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:48.820 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:48.820 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:48.826 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.lang.Object cannot be converted to java.lang.Integer: 55
[MASTER] 03:59:48.840 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Some messages have been simplified; recompile with -Xdiags:verbose to get full output: -1
[MASTER] 03:59:48.841 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_23_1605585588666/org/apache/commons/collections4/trie/AbstractPatriciaTrie_23_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:48 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.AbstractMap;
12: import java.util.Map;
13: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
14: import org.apache.commons.collections4.trie.PatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class AbstractPatriciaTrie_23_tmp__ESTest extends AbstractPatriciaTrie_23_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Integer integer0 = new Integer((-809));
25:       assertNotNull(integer0);
26:       assertEquals((-809), (int)integer0);
27:       
28:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "parent=", 2246);
29:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
32:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
33:       
34:       Integer integer1 = new Integer((-809));
35:       assertNotNull(integer1);
36:       assertTrue(integer1.equals((Object)integer0));
37:       assertEquals((-809), (int)integer1);
38:       
39:       Integer integer2 = new Integer((-1912));
40:       assertNotNull(integer2);
41:       assertFalse(integer2.equals((Object)integer0));
42:       assertFalse(integer2.equals((Object)integer1));
43:       assertEquals((-1912), (int)integer2);
44:       
45:       AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer2, 2246);
46:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
48:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
49:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
50:       assertFalse(integer1.equals((Object)integer2));
51:       assertTrue(integer1.equals((Object)integer0));
52:       assertFalse(integer2.equals((Object)integer0));
53:       assertFalse(integer2.equals((Object)integer1));
54:       
55:       Object object0 = abstractPatriciaTrie_TrieEntry1.setValue((Object) null);
56:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
57:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
58:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
59:       assertNotNull(object0);
60:       assertFalse(integer1.equals((Object)integer2));
61:       assertTrue(integer1.equals((Object)integer0));
62:       assertFalse(integer2.equals((Object)integer0));
63:       assertFalse(integer2.equals((Object)integer1));
64:       assertFalse(object0.equals((Object)integer1));
65:       assertFalse(object0.equals((Object)integer0));
66:       assertEquals((-1912), object0);
67:       
68:       String string0 = abstractPatriciaTrie_TrieEntry0.setKeyValue(object0, "parent=");
69:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
72:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
74:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
75:       assertNotNull(string0);
76:       assertFalse(integer0.equals((Object)object0));
77:       assertFalse(integer0.equals((Object)integer2));
78:       assertTrue(integer0.equals((Object)integer1));
79:       assertFalse(integer1.equals((Object)integer2));
80:       assertTrue(integer1.equals((Object)integer0));
81:       assertFalse(integer1.equals((Object)object0));
82:       assertFalse(integer2.equals((Object)integer0));
83:       assertFalse(integer2.equals((Object)integer1));
84:       assertFalse(object0.equals((Object)integer1));
85:       assertFalse(object0.equals((Object)integer0));
86:       assertEquals("parent=", string0);
87:       
88:       String string1 = abstractPatriciaTrie_TrieEntry0.toString();
89:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
90:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
92:       assertNotNull(string1);
93:       assertFalse(integer0.equals((Object)object0));
94:       assertFalse(integer0.equals((Object)integer2));
95:       assertTrue(integer0.equals((Object)integer1));
96:       assertFalse(string1.equals((Object)string0));
97:       assertEquals("Entry(key=-1912 [2246], value=parent=, parent=null, left=-1912 [2246], right=null, predecessor=-1912 [2246])", string1);
98:       
99:       AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = null;
100:       try {
101:         abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>((Map.Entry<? extends String, ? extends Integer>) null);
102:         fail("Expecting exception: NullPointerException");
103:       
104:       } catch(NullPointerException e) {
105:          //
106:          // no message in exception (getMessage() returned null)
107:          //
108:          verifyException("java.util.AbstractMap$SimpleEntry", e);
109:       }
110:   }
111: }
RegularFileObject[/tmp/EvoSuite_23_1605585588666/org/apache/commons/collections4/trie/AbstractPatriciaTrie_23_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:48 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class AbstractPatriciaTrie_23_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_23_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.apache.commons.collections4.MapIterator",
82:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
83:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
84:       "org.apache.commons.collections4.trie.PatriciaTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
86:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
88:       "org.apache.commons.collections4.Get",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
90:       "org.apache.commons.collections4.Trie",
91:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
92:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
93:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
94:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
96:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
98:       "org.apache.commons.collections4.IterableSortedMap",
99:       "org.apache.commons.collections4.OrderedMap",
100:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
101:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
103:       "org.apache.commons.collections4.OrderedMapIterator",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
105:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
106:       "org.apache.commons.collections4.Put",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
108:       "org.apache.commons.collections4.trie.KeyAnalyzer",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
110:       "org.apache.commons.collections4.IterableMap",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
112:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
113:       "org.apache.commons.collections4.OrderedIterator",
114:       "org.apache.commons.collections4.IterableGet"
115:     );
116:   } 
117: 
118:   private static void resetClasses() {
119:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_23_tmp__ESTest_scaffolding.class.getClassLoader()); 
120: 
121:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
122:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
123:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
124:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
125:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
126:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
127:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
135:       "org.apache.commons.collections4.trie.PatriciaTrie",
136:       "org.apache.commons.collections4.trie.KeyAnalyzer",
137:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
141:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
142:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
145:     );
146:   }
147: }

[MASTER] 03:59:48.845 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer((-809));
assertNotNull(integer0);
assertEquals((-809), (int)integer0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "parent=", 2246);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Integer integer1 = new Integer((-809));
assertNotNull(integer1);
assertTrue(integer1.equals((Object)integer0));
assertEquals((-809), (int)integer1);

Integer integer2 = new Integer((-1912));
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertEquals((-1912), (int)integer2);

AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer2, 2246);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);
assertFalse(integer1.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));

Object object0 = abstractPatriciaTrie_TrieEntry1.setValue((Object) null);
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(object0);
assertFalse(integer1.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(object0.equals((Object)integer1));
assertFalse(object0.equals((Object)integer0));
assertEquals((-1912), object0);

String string0 = abstractPatriciaTrie_TrieEntry0.setKeyValue(object0, "parent=");
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(string0);
assertFalse(integer0.equals((Object)object0));
assertFalse(integer0.equals((Object)integer2));
assertTrue(integer0.equals((Object)integer1));
assertFalse(integer1.equals((Object)integer2));
assertTrue(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)object0));
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)integer1));
assertFalse(object0.equals((Object)integer1));
assertFalse(object0.equals((Object)integer0));
assertEquals("parent=", string0);

String string1 = abstractPatriciaTrie_TrieEntry0.toString();
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(string1);
assertFalse(integer0.equals((Object)object0));
assertFalse(integer0.equals((Object)integer2));
assertTrue(integer0.equals((Object)integer1));
assertFalse(string1.equals((Object)string0));
assertEquals("Entry(key=-1912 [2246], value=parent=, parent=null, left=-1912 [2246], right=null, predecessor=-1912 [2246])", string1);

AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>((Map.Entry<? extends String, ? extends Integer>) null);

[MASTER] 03:59:53.074 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_50_1605585592780/org/apache/commons/collections4/trie/AbstractPatriciaTrie_50_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_50_1605585592780/org/apache/commons/collections4/trie/AbstractPatriciaTrie_50_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:53.074 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:53.074 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:53.075 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>,java.lang.Object>>: 41
[MASTER] 03:59:53.075 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 60
[MASTER] 03:59:53.076 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.String,java.lang.String>,java.lang.Object>>: 65
[MASTER] 03:59:53.076 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Integer,java.lang.Integer>>: 105
[MASTER] 03:59:53.076 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_50_1605585592780/org/apache/commons/collections4/trie/AbstractPatriciaTrie_50_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:53.077 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:53.077 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_50_1605585592780/org/apache/commons/collections4/trie/AbstractPatriciaTrie_50_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:52 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.Set;
15: import java.util.SortedMap;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_50_tmp__ESTest extends AbstractPatriciaTrie_50_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
29:       assertNotNull(patriciaTrie0);
30:       
31:       patriciaTrie0.modCount = 0;
32:       SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("6KMCo;>oX|{J5z{}L.");
33:       assertTrue(sortedMap0.isEmpty());
34:       assertEquals(0, sortedMap0.size());
35:       assertNotNull(sortedMap0);
36:       
37:       AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("6KMCo;>oX|{J5z{}L.", "Afj~CI@Lvd>");
38:       assertNotNull(abstractMap_SimpleEntry0);
39:       
40:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
41:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
42:       assertNotNull(comparator1);
43:       
44:       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
45:       assertNotNull(abstractMap_SimpleEntry1);
46:       
47:       Comparator<Map.Entry<Integer, Integer>> comparator2 = Map.Entry.comparingByValue();
48:       assertNotNull(comparator2);
49:       
50:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0, 32768);
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
52:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
54:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
55:       
56:       Comparator<Map.Entry<String, Object>> comparator3 = Map.Entry.comparingByKey();
57:       assertNotNull(comparator3);
58:       
59:       Comparator<Integer> comparator4 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
60:       Comparator<Map.Entry<Integer, Integer>> comparator5 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator4);
61:       assertNotNull(comparator5);
62:       assertFalse(comparator5.equals((Object)comparator2));
63:       
64:       Comparator<Object> comparator6 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
65:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>> comparator7 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator6);
66:       assertNotNull(comparator7);
67:       assertFalse(comparator7.equals((Object)comparator1));
68:       assertNotSame(comparator7, comparator1);
69:       
70:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry1, comparator3, (-57));
71:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
72:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
74:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
75:       
76:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
77:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
78:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
84:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
86:       
87:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry1, abstractMap_SimpleEntry1, 32768);
88:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
89:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
90:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
91:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
92:       
93:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
94:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
95:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
98:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
100:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
101:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
103:       
104:       Comparator<Object> comparator8 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
105:       Comparator<Map.Entry<Integer, Integer>> comparator9 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator8);
106:       assertNotNull(comparator9);
107:       assertFalse(comparator9.equals((Object)comparator2));
108:       assertFalse(comparator9.equals((Object)comparator5));
109:       assertNotSame(comparator9, comparator5);
110:       
111:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
112:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
113:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
114:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
115:       assertNotNull(string0);
116:       assertEquals("Entry(key=6KMCo;>oX|{J5z{}L.=Afj~CI@Lvd> [32768], value=6KMCo;>oX|{J5z{}L.=Afj~CI@Lvd>, parent=null, left=6KMCo;>oX|{J5z{}L.=Afj~CI@Lvd> [32768], right=null, predecessor=6KMCo;>oX|{J5z{}L.=Afj~CI@Lvd> [32768])", string0);
117:       
118:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "Afj~CI@Lvd>", 2);
119:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
120:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
121:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
122:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
123:       
124:       String string1 = abstractPatriciaTrie_TrieEntry3.toString();
125:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
126:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
127:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
128:       assertNotNull(string1);
129:       assertFalse(string1.equals((Object)string0));
130:       assertEquals("Entry(key=Trie[0]={\n}\n [2], value=Afj~CI@Lvd>, parent=null, left=Trie[0]={\n}\n [2], right=null, predecessor=Trie[0]={\n}\n [2])", string1);
131:       
132:       abstractPatriciaTrie_TrieEntry3.key = (Object) "Entry(key=Trie[0]={\n}\n [2], value=Afj~CI@Lvd>, parent=null, left=Trie[0]={\n}\n [2], right=null, predecessor=Trie[0]={\n}\n [2])";
133:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
134:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
135:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
136:       
137:       Set<String> set0 = patriciaTrie0.keySet();
138:       assertEquals(0, set0.size());
139:       assertTrue(set0.isEmpty());
140:       assertNotNull(set0);
141:       assertFalse(set0.contains("Afj~CI@Lvd>"));
142:       
143:       String string2 = patriciaTrie0.previousKey("Entry(key=Trie[0]={\n}\n [2], value=Afj~CI@Lvd>, parent=null, left=Trie[0]={\n}\n [2], right=null, predecessor=Trie[0]={\n}\n [2])");
144:       assertNull(string2);
145:   }
146: }
RegularFileObject[/tmp/EvoSuite_50_1605585592780/org/apache/commons/collections4/trie/AbstractPatriciaTrie_50_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:52 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_50_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_50_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_50_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_50_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:59:53.088 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie0);

patriciaTrie0.modCount = 0;
SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("6KMCo;>oX|{J5z{}L.");
assertTrue(sortedMap0.isEmpty());
assertEquals(0, sortedMap0.size());
assertNotNull(sortedMap0);

AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("6KMCo;>oX|{J5z{}L.", "Afj~CI@Lvd>");
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
assertNotNull(abstractMap_SimpleEntry1);

Comparator<Map.Entry<Integer, Integer>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry1, abstractMap_SimpleEntry0, 32768);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Map.Entry<String, Object>> comparator3 = Map.Entry.comparingByKey();
assertNotNull(comparator3);

Comparator<Integer> comparator4 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator5 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator4);
assertNotNull(comparator5);
assertFalse(comparator5.equals((Object)comparator2));

Comparator<Object> comparator6 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>> comparator7 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<String, String>, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator6);
assertNotNull(comparator7);
assertFalse(comparator7.equals((Object)comparator1));
assertNotSame(comparator7, comparator1);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry1, comparator3, (-57));
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry1, abstractMap_SimpleEntry1, 32768);
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());

Comparator<Object> comparator8 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Integer, Integer>> comparator9 = (Comparator<Map.Entry<Integer, Integer>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator8);
assertNotNull(comparator9);
assertFalse(comparator9.equals((Object)comparator2));
assertFalse(comparator9.equals((Object)comparator5));
assertNotSame(comparator9, comparator5);

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(string0);
assertEquals("Entry(key=6KMCo;>oX|{J5z{}L.=Afj~CI@Lvd> [32768], value=6KMCo;>oX|{J5z{}L.=Afj~CI@Lvd>, parent=null, left=6KMCo;>oX|{J5z{}L.=Afj~CI@Lvd> [32768], right=null, predecessor=6KMCo;>oX|{J5z{}L.=Afj~CI@Lvd> [32768])", string0);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "Afj~CI@Lvd>", 2);
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

String string1 = abstractPatriciaTrie_TrieEntry3.toString();
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertNotNull(string1);
assertFalse(string1.equals((Object)string0));
assertEquals("Entry(key=Trie[0]={\n}\n [2], value=Afj~CI@Lvd>, parent=null, left=Trie[0]={\n}\n [2], right=null, predecessor=Trie[0]={\n}\n [2])", string1);

abstractPatriciaTrie_TrieEntry3.key = (Object) "Entry(key=Trie[0]={\n}\n [2], value=Afj~CI@Lvd>, parent=null, left=Trie[0]={\n}\n [2], right=null, predecessor=Trie[0]={\n}\n [2])";
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());

Set<String> set0 = patriciaTrie0.keySet();
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertNotNull(set0);
assertFalse(set0.contains("Afj~CI@Lvd>"));

String string2 = patriciaTrie0.previousKey("Entry(key=Trie[0]={\n}\n [2], value=Afj~CI@Lvd>, parent=null, left=Trie[0]={\n}\n [2], right=null, predecessor=Trie[0]={\n}\n [2])");
assertNull(string2);


[MASTER] 03:59:54.366 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_62_1605585594145/org/apache/commons/collections4/trie/AbstractPatriciaTrie_62_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_62_1605585594145/org/apache/commons/collections4/trie/AbstractPatriciaTrie_62_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:54.367 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:54.367 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:54.368 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>,java.lang.String>>: 65
[MASTER] 03:59:54.368 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_62_1605585594145/org/apache/commons/collections4/trie/AbstractPatriciaTrie_62_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:54.368 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:54.369 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_62_1605585594145/org/apache/commons/collections4/trie/AbstractPatriciaTrie_62_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:54 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import java.util.Set;
15: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
16: import org.apache.commons.collections4.trie.PatriciaTrie;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.ViolatedAssumptionAnswer;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class AbstractPatriciaTrie_62_tmp__ESTest extends AbstractPatriciaTrie_62_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("hidZf0/;ceUmtvq&", "hidZf0/;ceUmtvq&", (-227));
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
29:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
31:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
32:       
33:       Object object0 = abstractPatriciaTrie_TrieEntry0.setValue("hidZf0/;ceUmtvq&");
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
35:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
36:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
37:       assertNotNull(object0);
38:       assertEquals("hidZf0/;ceUmtvq&", object0);
39:       
40:       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
41:       Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
42:       assertNotNull(comparator1);
43:       
44:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
45:       abstractPatriciaTrie_TrieEntry0.key = "hidZf0/;ceUmtvq&";
46:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       
50:       abstractPatriciaTrie_TrieEntry0.value = (Object) "hidZf0/;ceUmtvq&";
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
54:       
55:       abstractPatriciaTrie_TrieEntry0.bitIndex = 785;
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
57:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
59:       
60:       abstractPatriciaTrie_TrieEntry0.left = null;
61:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
64:       
65:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleEntry<Object, String>>, String>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleEntry<Object, String>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator2);
66:       assertNotNull(comparator3);
67:       
68:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
69:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
71:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
72:       assertFalse(boolean0);
73:       
74:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
75:       assertNotNull(patriciaTrie0);
76:       
77:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
78:       assertNotNull(patriciaTrie1);
79:       
80:       Integer integer0 = new Integer(0);
81:       assertNotNull(integer0);
82:       assertEquals(0, (int)integer0);
83:       
84:       Integer integer1 = patriciaTrie0.put("1&!/PZ@lm0WrE|W#Nl", integer0);
85:       assertNull(integer1);
86:       
87:       patriciaTrie1.incrementSize();
88:       int int0 = patriciaTrie0.bitsPerElement();
89:       assertEquals(16, int0);
90:       
91:       Integer integer2 = new Integer(785);
92:       assertNotNull(integer2);
93:       assertFalse(integer2.equals((Object)integer0));
94:       assertFalse(integer2.equals((Object)int0));
95:       assertEquals(785, (int)integer2);
96:       
97:       Set<String> set0 = patriciaTrie0.keySet();
98:       assertFalse(set0.isEmpty());
99:       assertEquals(1, set0.size());
100:       assertNotNull(set0);
101:       assertFalse(set0.contains("hidZf0/;ceUmtvq&"));
102:       assertTrue(set0.contains("1&!/PZ@lm0WrE|W#Nl"));
103:       
104:       Integer integer3 = patriciaTrie0.put("", integer2);
105:       assertNull(integer3);
106:       assertFalse(integer2.equals((Object)integer0));
107:       assertFalse(integer2.equals((Object)int0));
108:       
109:       String string0 = patriciaTrie1.selectKey("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
110:       assertNull(string0);
111:       
112:       Comparator<? super String> comparator4 = patriciaTrie1.comparator();
113:       assertNotNull(comparator4);
114:       
115:       patriciaTrie1.decrementSize();
116:   }
117: }
RegularFileObject[/tmp/EvoSuite_62_1605585594145/org/apache/commons/collections4/trie/AbstractPatriciaTrie_62_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:54 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_62_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_62_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_62_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_62_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:59:54.376 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("hidZf0/;ceUmtvq&", "hidZf0/;ceUmtvq&", (-227));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Object object0 = abstractPatriciaTrie_TrieEntry0.setValue("hidZf0/;ceUmtvq&");
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(object0);
assertEquals("hidZf0/;ceUmtvq&", object0);

Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry0.key = "hidZf0/;ceUmtvq&";
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

abstractPatriciaTrie_TrieEntry0.value = (Object) "hidZf0/;ceUmtvq&";
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

abstractPatriciaTrie_TrieEntry0.bitIndex = 785;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

abstractPatriciaTrie_TrieEntry0.left = null;
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleEntry<Object, String>>, String>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleEntry<Object, String>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator2);
assertNotNull(comparator3);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(boolean0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertNotNull(patriciaTrie1);

Integer integer0 = new Integer(0);
assertNotNull(integer0);
assertEquals(0, (int)integer0);

Integer integer1 = patriciaTrie0.put("1&!/PZ@lm0WrE|W#Nl", integer0);
assertNull(integer1);

patriciaTrie1.incrementSize();
int int0 = patriciaTrie0.bitsPerElement();
assertEquals(16, int0);

Integer integer2 = new Integer(785);
assertNotNull(integer2);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));
assertEquals(785, (int)integer2);

Set<String> set0 = patriciaTrie0.keySet();
assertFalse(set0.isEmpty());
assertEquals(1, set0.size());
assertNotNull(set0);
assertFalse(set0.contains("hidZf0/;ceUmtvq&"));
assertTrue(set0.contains("1&!/PZ@lm0WrE|W#Nl"));

Integer integer3 = patriciaTrie0.put("", integer2);
assertNull(integer3);
assertFalse(integer2.equals((Object)integer0));
assertFalse(integer2.equals((Object)int0));

String string0 = patriciaTrie1.selectKey("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
assertNull(string0);

Comparator<? super String> comparator4 = patriciaTrie1.comparator();
assertNotNull(comparator4);

patriciaTrie1.decrementSize();

[MASTER] 03:59:54.495 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_63_1605585594378/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_63_1605585594378/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:54.495 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:54.495 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:54.496 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>>,java.lang.String>>: 69
[MASTER] 03:59:54.496 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_63_1605585594378/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:54.496 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:54.497 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_63_1605585594378/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:54 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.Map;
15: import java.util.function.BiFunction;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_63_tmp__ESTest extends AbstractPatriciaTrie_63_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       String string0 = "hidZf0/;ceUmtvq&";
29:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("hidZf0/;ceUmtvq&", "hidZf0/;ceUmtvq&", (-227));
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
31:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
33:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
34:       
35:       Object object0 = abstractPatriciaTrie_TrieEntry0.setValue("hidZf0/;ceUmtvq&");
36:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
37:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
38:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
39:       assertNotNull(object0);
40:       assertTrue(object0.equals((Object)string0));
41:       assertEquals("hidZf0/;ceUmtvq&", object0);
42:       
43:       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
44:       Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
45:       assertNotNull(comparator1);
46:       
47:       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
48:       abstractPatriciaTrie_TrieEntry0.key = "hidZf0/;ceUmtvq&";
49:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
50:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
52:       
53:       abstractPatriciaTrie_TrieEntry0.value = (Object) "hidZf0/;ceUmtvq&";
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
57:       
58:       abstractPatriciaTrie_TrieEntry0.bitIndex = 785;
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
62:       
63:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = null;
64:       abstractPatriciaTrie_TrieEntry0.left = null;
65:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
66:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       
69:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleEntry<Object, String>>, String>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleEntry<Object, String>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator2);
70:       assertNotNull(comparator3);
71:       
72:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
73:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
76:       assertFalse(boolean0);
77:       
78:       PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
79:       assertNotNull(patriciaTrie0);
80:       
81:       Integer integer0 = new Integer(785);
82:       assertNotNull(integer0);
83:       assertEquals(785, (int)integer0);
84:       
85:       // Undeclared exception!
86:       try { 
87:         patriciaTrie0.remove((Object) integer0);
88:         fail("Expecting exception: ClassCastException");
89:       
90:       } catch(ClassCastException e) {
91:          //
92:          // no message in exception (getMessage() returned null)
93:          //
94:       }
95:   }
96: }
RegularFileObject[/tmp/EvoSuite_63_1605585594378/org/apache/commons/collections4/trie/AbstractPatriciaTrie_63_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:54 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_63_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_63_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:59:54.499 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "hidZf0/;ceUmtvq&";
AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("hidZf0/;ceUmtvq&", "hidZf0/;ceUmtvq&", (-227));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Object object0 = abstractPatriciaTrie_TrieEntry0.setValue("hidZf0/;ceUmtvq&");
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(object0);
assertTrue(object0.equals((Object)string0));
assertEquals("hidZf0/;ceUmtvq&", object0);

Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
abstractPatriciaTrie_TrieEntry0.key = "hidZf0/;ceUmtvq&";
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

abstractPatriciaTrie_TrieEntry0.value = (Object) "hidZf0/;ceUmtvq&";
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

abstractPatriciaTrie_TrieEntry0.bitIndex = 785;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = null;
abstractPatriciaTrie_TrieEntry0.left = null;
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleEntry<Object, String>>, String>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Integer, AbstractMap.SimpleEntry<Object, String>>, String>>)Map.Entry.comparingByValue((Comparator<? super String>) comparator2);
assertNotNull(comparator3);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(boolean0);

PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie0);

Integer integer0 = new Integer(785);
assertNotNull(integer0);
assertEquals(785, (int)integer0);

patriciaTrie0.remove((Object) integer0);

[MASTER] 03:59:56.001 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_76_1605585595892/org/apache/commons/collections4/trie/AbstractPatriciaTrie_76_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_76_1605585595892/org/apache/commons/collections4/trie/AbstractPatriciaTrie_76_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:56.001 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:56.001 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:56.004 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>>: 197
[MASTER] 03:59:56.004 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_76_1605585595892/org/apache/commons/collections4/trie/AbstractPatriciaTrie_76_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:56.004 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:56.017 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_76_1605585595892/org/apache/commons/collections4/trie/AbstractPatriciaTrie_76_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:55 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class AbstractPatriciaTrie_76_tmp__ESTest extends AbstractPatriciaTrie_76_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("9(?99e0Mc5+W>hY(5", "", 29);
26:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
27:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
29:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
30:       
31:       String string0 = abstractPatriciaTrie_TrieEntry0.setKeyValue(" is not an internal Entry!", "9(?99e0Mc5+W>hY(5");
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
33:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
35:       assertNotNull(string0);
36:       assertEquals("", string0);
37:       
38:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("p/Lc!u'", "", 29);
39:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
40:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
41:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
42:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
43:       
44:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
45:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
50:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
51:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
54:       
55:       abstractPatriciaTrie_TrieEntry0.value = "";
56:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
57:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
59:       
60:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>(" is not an internal Entry!", "P7i", (-1008));
61:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
62:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
63:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
64:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
65:       
66:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
67:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
68:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
69:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
70:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
71:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
72:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
73:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
75:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
76:       
77:       abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry2;
78:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
79:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
81:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
82:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
83:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
84:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
86:       assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
87:       
88:       abstractPatriciaTrie_TrieEntry0.bitIndex = (-659);
89:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
90:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
91:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
92:       
93:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
94:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
95:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
96:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
97:       assertTrue(boolean0);
98:       
99:       AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("P7i", "p/Lc!u'");
100:       assertNotNull(abstractMap_SimpleImmutableEntry0);
101:       
102:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String>(abstractMap_SimpleImmutableEntry0, "{Uz-wi2!M<", (-1008));
103:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
104:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
105:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
106:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
107:       
108:       AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractPatriciaTrie_TrieEntry0.predecessor);
109:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
110:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
111:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
112:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
113:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
114:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
115:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
116:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
117:       assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
118:       assertNotNull(abstractMap_SimpleImmutableEntry1);
119:       assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
120:       
121:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String>(abstractMap_SimpleImmutableEntry1, "p/Lc!u'", (-297));
122:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
123:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
124:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
125:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
126:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
127:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
128:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
130:       assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
131:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
132:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
133:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
134:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
135:       assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
136:       
137:       abstractPatriciaTrie_TrieEntry3.right = abstractPatriciaTrie_TrieEntry4;
138:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
139:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
140:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
141:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
142:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
143:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
144:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
145:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
146:       assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
148:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
149:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
150:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
151:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
152:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
153:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
154:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());
155:       assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());
156:       
157:       Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
158:       assertNotNull(comparator0);
159:       
160:       abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0.left;
161:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
162:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
163:       assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
164:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
165:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
166:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
167:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
168:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
169:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
170:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
171:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
172:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
173:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
174:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
175:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
176:       
177:       boolean boolean1 = abstractPatriciaTrie_TrieEntry3.isEmpty();
178:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
179:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
180:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
181:       assertFalse(boolean1 == boolean0);
182:       assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
183:       assertFalse(boolean1);
184:       assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
185:       
186:       Object object0 = new Object();
187:       assertNotNull(object0);
188:       
189:       Integer integer0 = new Integer((-659));
190:       assertNotNull(integer0);
191:       assertEquals((-659), (int)integer0);
192:       
193:       AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(object0, integer0);
194:       assertNotNull(abstractMap_SimpleEntry0);
195:       
196:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
197:       Comparator<Map.Entry<Object, String>> comparator2 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
198:       assertNotNull(comparator2);
199:       
200:       AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>>("", abstractMap_SimpleEntry0, 4251);
201:       assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
202:       assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
203:       assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
204:       assertNotNull(abstractPatriciaTrie_TrieEntry5);
205:   }
206: }
RegularFileObject[/tmp/EvoSuite_76_1605585595892/org/apache/commons/collections4/trie/AbstractPatriciaTrie_76_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:55 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_76_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_76_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_76_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_76_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:59:56.022 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("9(?99e0Mc5+W>hY(5", "", 29);
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

String string0 = abstractPatriciaTrie_TrieEntry0.setKeyValue(" is not an internal Entry!", "9(?99e0Mc5+W>hY(5");
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertNotNull(string0);
assertEquals("", string0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("p/Lc!u'", "", 29);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());

abstractPatriciaTrie_TrieEntry0.value = "";
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>(" is not an internal Entry!", "P7i", (-1008));
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());

abstractPatriciaTrie_TrieEntry0.bitIndex = (-659);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(boolean0);

AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("P7i", "p/Lc!u'");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String>(abstractMap_SimpleImmutableEntry0, "{Uz-wi2!M<", (-1008));
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractPatriciaTrie_TrieEntry0.predecessor);
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
assertNotNull(abstractMap_SimpleImmutableEntry1);
assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String>(abstractMap_SimpleImmutableEntry1, "p/Lc!u'", (-297));
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));

abstractPatriciaTrie_TrieEntry3.right = abstractPatriciaTrie_TrieEntry4;
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());

Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0.left;
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

boolean boolean1 = abstractPatriciaTrie_TrieEntry3.isEmpty();
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(boolean1 == boolean0);
assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
assertFalse(boolean1);
assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);

Object object0 = new Object();
assertNotNull(object0);

Integer integer0 = new Integer((-659));
assertNotNull(integer0);
assertEquals((-659), (int)integer0);

AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(object0, integer0);
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator2 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>>("", abstractMap_SimpleEntry0, 4251);
assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry5);


[MASTER] 03:59:56.194 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_77_1605585596034/org/apache/commons/collections4/trie/AbstractPatriciaTrie_77_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_77_1605585596034/org/apache/commons/collections4/trie/AbstractPatriciaTrie_77_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:56.211 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:56.223 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:56.224 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.lang.Object,java.lang.String>,java.lang.Integer>>: 57
[MASTER] 03:59:56.224 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_77_1605585596034/org/apache/commons/collections4/trie/AbstractPatriciaTrie_77_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:56.224 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:56.225 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_77_1605585596034/org/apache/commons/collections4/trie/AbstractPatriciaTrie_77_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:56 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import java.util.function.BiFunction;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_77_tmp__ESTest extends AbstractPatriciaTrie_77_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
30:       assertEquals(0, hashMap0.size());
31:       assertTrue(hashMap0.isEmpty());
32:       assertNotNull(hashMap0);
33:       
34:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
35:       assertEquals(0, hashMap0.size());
36:       assertTrue(hashMap0.isEmpty());
37:       assertNotNull(patriciaTrie0);
38:       
39:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
40:       assertEquals(0, hashMap0.size());
41:       assertTrue(hashMap0.isEmpty());
42:       assertNotNull(patriciaTrie1);
43:       assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
44:       
45:       String string0 = "qToR>yW";
46:       Integer integer0 = new Integer(1534);
47:       assertNotNull(integer0);
48:       assertEquals(1534, (int)integer0);
49:       
50:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("qToR>yW", integer0, 0);
51:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
52:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
54:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
55:       
56:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
57:       Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator0);
58:       assertNotNull(comparator1);
59:       
60:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
61:       assertNull(abstractPatriciaTrie_TrieEntry1);
62:       
63:       // Undeclared exception!
64:       try { 
65:         patriciaTrie1.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
66:         fail("Expecting exception: NullPointerException");
67:       
68:       } catch(NullPointerException e) {
69:          //
70:          // no message in exception (getMessage() returned null)
71:          //
72:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
73:       }
74:   }
75: }
RegularFileObject[/tmp/EvoSuite_77_1605585596034/org/apache/commons/collections4/trie/AbstractPatriciaTrie_77_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:56 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_77_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_77_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_77_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_77_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 03:59:56.226 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(patriciaTrie0);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(patriciaTrie1);
assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));

String string0 = "qToR>yW";
Integer integer0 = new Integer(1534);
assertNotNull(integer0);
assertEquals(1534, (int)integer0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("qToR>yW", integer0, 0);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, Integer>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, String>, Integer>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, String>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
assertNull(abstractPatriciaTrie_TrieEntry1);

patriciaTrie1.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);

[MASTER] 03:59:59.023 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_103_1605585598869/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_103_1605585598869/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest_scaffolding.java]]
[MASTER] 03:59:59.023 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:59.023 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 03:59:59.024 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Integer>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Integer>>: 94
[MASTER] 03:59:59.039 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_103_1605585598869/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:59:59.040 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:59:59.041 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_103_1605585598869/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 03:59:58 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.AbstractMap;
13: import java.util.Comparator;
14: import java.util.HashMap;
15: import java.util.Map;
16: import java.util.function.BiFunction;
17: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
18: import org.apache.commons.collections4.trie.PatriciaTrie;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.ViolatedAssumptionAnswer;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class AbstractPatriciaTrie_103_tmp__ESTest extends AbstractPatriciaTrie_103_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
30:       assertEquals(0, hashMap0.size());
31:       assertTrue(hashMap0.isEmpty());
32:       assertNotNull(hashMap0);
33:       
34:       String string0 = hashMap0.put("CA;Khh!", "CA;Khh!");
35:       assertFalse(hashMap0.isEmpty());
36:       assertEquals(1, hashMap0.size());
37:       assertNull(string0);
38:       
39:       String string1 = hashMap0.put("CA;Khh!", ".o)z[*-d8a/!-g");
40:       assertFalse(hashMap0.isEmpty());
41:       assertEquals(1, hashMap0.size());
42:       assertNotNull(string1);
43:       assertEquals("CA;Khh!", string1);
44:       
45:       String string2 = hashMap0.put("CA;Khh!", (String) null);
46:       assertFalse(hashMap0.isEmpty());
47:       assertEquals(1, hashMap0.size());
48:       assertNotNull(string2);
49:       assertFalse(string2.equals((Object)string1));
50:       assertEquals(".o)z[*-d8a/!-g", string2);
51:       
52:       PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
53:       assertFalse(hashMap0.isEmpty());
54:       assertEquals(1, hashMap0.size());
55:       assertNotNull(patriciaTrie0);
56:       
57:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("CA;Khh!", 1);
58:       assertFalse(hashMap0.isEmpty());
59:       assertEquals(1, hashMap0.size());
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
61:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
63:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
64:       
65:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("CA;Khh!", "CA;Khh!", 1);
66:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
67:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
68:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
69:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
70:       
71:       patriciaTrie0.decrementSize();
72:       assertFalse(hashMap0.isEmpty());
73:       assertEquals(1, hashMap0.size());
74:       
75:       abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
76:       assertFalse(hashMap0.isEmpty());
77:       assertEquals(1, hashMap0.size());
78:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
79:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
84:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
85:       assertFalse(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
86:       assertTrue(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());
87:       
88:       String string3 = hashMap0.put("CA;Khh!", (String) null);
89:       assertFalse(hashMap0.isEmpty());
90:       assertEquals(1, hashMap0.size());
91:       assertNull(string3);
92:       
93:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
94:       Comparator<Map.Entry<String, Integer>> comparator1 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
95:       assertNotNull(comparator1);
96:       
97:       AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
98:       assertFalse(hashMap0.isEmpty());
99:       assertEquals(1, hashMap0.size());
100:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
101:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
102:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
103:       assertNull(abstractPatriciaTrie_TrieEntry2);
104:       
105:       patriciaTrie0.decrementSize();
106:       assertFalse(hashMap0.isEmpty());
107:       assertEquals(1, hashMap0.size());
108:       
109:       Integer integer0 = new Integer(1);
110:       assertNotNull(integer0);
111:       assertEquals(1, (int)integer0);
112:       
113:       abstractPatriciaTrie_TrieEntry1.bitIndex = 1;
114:       assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
115:       assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
116:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
117:       
118:       AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", 0);
119:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
121:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
122:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
123:       
124:       Comparator<Map.Entry<AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>, Integer>> comparator2 = Map.Entry.comparingByValue();
125:       assertNotNull(comparator2);
126:       
127:       BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
128:       Object object0 = patriciaTrie0.merge(".o)z[*-d8a/!-g", "", biFunction0);
129:       assertFalse(hashMap0.isEmpty());
130:       assertEquals(1, hashMap0.size());
131:       assertNotNull(object0);
132:       assertFalse(object0.equals((Object)string1));
133:       assertFalse(object0.equals((Object)string2));
134:       assertEquals("", object0);
135:       
136:       abstractPatriciaTrie_TrieEntry3.bitIndex = 0;
137:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
138:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
139:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
140:       
141:       String string4 = abstractPatriciaTrie_TrieEntry3.setKeyValue(integer0, (String) null);
142:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
143:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
144:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
145:       assertNotNull(string4);
146:       assertFalse(string4.equals((Object)string1));
147:       assertFalse(string4.equals((Object)string2));
148:       assertTrue(string4.equals((Object)object0));
149:       assertEquals("", string4);
150:       
151:       Integer integer1 = new Integer((-1282));
152:       assertNotNull(integer1);
153:       assertFalse(integer1.equals((Object)integer0));
154:       assertEquals((-1282), (int)integer1);
155:       
156:       Object object1 = patriciaTrie0.putIfAbsent("\"k}|[:=:U|q0##r.l", integer1);
157:       assertFalse(hashMap0.isEmpty());
158:       assertEquals(1, hashMap0.size());
159:       assertNull(object1);
160:       assertFalse(integer1.equals((Object)integer0));
161:       
162:       boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isEmpty();
163:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
164:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
165:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
166:       assertFalse(integer0.equals((Object)integer1));
167:       assertFalse(boolean0);
168:       
169:       boolean boolean1 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, abstractPatriciaTrie_TrieEntry0);
170:       assertFalse(hashMap0.isEmpty());
171:       assertEquals(1, hashMap0.size());
172:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
173:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
174:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
175:       assertTrue(boolean1 == boolean0);
176:       assertFalse(boolean1);
177:       
178:       // Undeclared exception!
179:       try { 
180:         patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
181:         fail("Expecting exception: NullPointerException");
182:       
183:       } catch(NullPointerException e) {
184:          //
185:          // no message in exception (getMessage() returned null)
186:          //
187:          verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
188:       }
189:   }
190: }
RegularFileObject[/tmp/EvoSuite_103_1605585598869/org/apache/commons/collections4/trie/AbstractPatriciaTrie_103_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 03:59:58 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_103_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_103_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_103_tmp__ESTest_scaffolding.class.getClassLoader()));
121:     mock(Class.forName("java.util.function.BiFunction", false, AbstractPatriciaTrie_103_tmp__ESTest_scaffolding.class.getClassLoader()));
122:   }
123: 
124:   private static void resetClasses() {
125:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_103_tmp__ESTest_scaffolding.class.getClassLoader()); 
126: 
127:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
128:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
129:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
130:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
140:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
141:       "org.apache.commons.collections4.trie.PatriciaTrie",
142:       "org.apache.commons.collections4.trie.KeyAnalyzer",
143:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
150:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
151:     );
152:   }
153: }

[MASTER] 03:59:59.044 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

String string0 = hashMap0.put("CA;Khh!", "CA;Khh!");
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(string0);

String string1 = hashMap0.put("CA;Khh!", ".o)z[*-d8a/!-g");
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(string1);
assertEquals("CA;Khh!", string1);

String string2 = hashMap0.put("CA;Khh!", (String) null);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(string2);
assertFalse(string2.equals((Object)string1));
assertEquals(".o)z[*-d8a/!-g", string2);

PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("CA;Khh!", 1);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("CA;Khh!", "CA;Khh!", 1);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

patriciaTrie0.decrementSize();
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());

abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.left.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.left.isInternalNode());

String string3 = hashMap0.put("CA;Khh!", (String) null);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(string3);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Integer>> comparator1 = (Comparator<Map.Entry<String, Integer>>)Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNull(abstractPatriciaTrie_TrieEntry2);

patriciaTrie0.decrementSize();
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());

Integer integer0 = new Integer(1);
assertNotNull(integer0);
assertEquals(1, (int)integer0);

abstractPatriciaTrie_TrieEntry1.bitIndex = 1;
assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "", 0);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

Comparator<Map.Entry<AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>, Integer>> comparator2 = Map.Entry.comparingByValue();
assertNotNull(comparator2);

BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
Object object0 = patriciaTrie0.merge(".o)z[*-d8a/!-g", "", biFunction0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNotNull(object0);
assertFalse(object0.equals((Object)string1));
assertFalse(object0.equals((Object)string2));
assertEquals("", object0);

abstractPatriciaTrie_TrieEntry3.bitIndex = 0;
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());

String string4 = abstractPatriciaTrie_TrieEntry3.setKeyValue(integer0, (String) null);
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(string4);
assertFalse(string4.equals((Object)string1));
assertFalse(string4.equals((Object)string2));
assertTrue(string4.equals((Object)object0));
assertEquals("", string4);

Integer integer1 = new Integer((-1282));
assertNotNull(integer1);
assertFalse(integer1.equals((Object)integer0));
assertEquals((-1282), (int)integer1);

Object object1 = patriciaTrie0.putIfAbsent("\"k}|[:=:U|q0##r.l", integer1);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertNull(object1);
assertFalse(integer1.equals((Object)integer0));

boolean boolean0 = abstractPatriciaTrie_TrieEntry3.isEmpty();
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(integer0.equals((Object)integer1));
assertFalse(boolean0);

boolean boolean1 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, abstractPatriciaTrie_TrieEntry0);
assertFalse(hashMap0.isEmpty());
assertEquals(1, hashMap0.size());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);

[MASTER] 04:00:02.806 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_139_1605585602634/org/apache/commons/collections4/trie/AbstractPatriciaTrie_139_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_139_1605585602634/org/apache/commons/collections4/trie/AbstractPatriciaTrie_139_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:02.806 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:02.806 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:02.820 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.lang.String>>: 174
[MASTER] 04:00:02.820 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_139_1605585602634/org/apache/commons/collections4/trie/AbstractPatriciaTrie_139_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:00:02.820 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:00:02.821 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_139_1605585602634/org/apache/commons/collections4/trie/AbstractPatriciaTrie_139_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:02 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_139_tmp__ESTest extends AbstractPatriciaTrie_139_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("9(?99e0Mc5+W>hY(5", "", 29);
27:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
28:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
29:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
30:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
31:       
32:       String string0 = abstractPatriciaTrie_TrieEntry0.setKeyValue(" is not an internal Entry!", "9(?99e0Mc5+W>hY(5");
33:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
34:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
35:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
36:       assertNotNull(string0);
37:       assertEquals("", string0);
38:       
39:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("p/Lc!u'", "", 29);
40:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
41:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
42:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
43:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
44:       
45:       abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
50:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
51:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
55:       
56:       abstractPatriciaTrie_TrieEntry0.value = "";
57:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
58:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
59:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
60:       
61:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>(" is not an internal Entry!", "P7i", (-1008));
62:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
64:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
65:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
66:       
67:       abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
68:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
69:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
70:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
71:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
72:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
73:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
74:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
75:       assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
76:       assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
77:       
78:       abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry2;
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
80:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
81:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
82:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
83:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
84:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
85:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
86:       assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
87:       assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
88:       
89:       abstractPatriciaTrie_TrieEntry0.bitIndex = (-659);
90:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
91:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
93:       
94:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
95:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
96:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
97:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
98:       assertTrue(boolean0);
99:       
100:       AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("P7i", "p/Lc!u'");
101:       assertNotNull(abstractMap_SimpleImmutableEntry0);
102:       
103:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String>(abstractMap_SimpleImmutableEntry0, "{Uz-wi2!M<", (-1008));
104:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
105:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
106:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
107:       assertNotNull(abstractPatriciaTrie_TrieEntry3);
108:       
109:       AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractPatriciaTrie_TrieEntry0.predecessor);
110:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
111:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
112:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
113:       assertNotNull(abstractMap_SimpleImmutableEntry1);
114:       assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
115:       
116:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String>(abstractMap_SimpleImmutableEntry1, "p/Lc!u'", (-283));
117:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
118:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
119:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
120:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
121:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
122:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
123:       assertNotNull(abstractPatriciaTrie_TrieEntry4);
124:       assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
125:       
126:       abstractPatriciaTrie_TrieEntry3.right = abstractPatriciaTrie_TrieEntry4;
127:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
128:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
129:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
130:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
131:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
132:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
133:       assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
134:       assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
135:       assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
136:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
137:       assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());
138:       assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());
139:       
140:       Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
141:       assertNotNull(comparator0);
142:       
143:       abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0.left;
144:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
145:       assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
146:       assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
147:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
148:       assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
149:       assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
150:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
151:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
152:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
153:       
154:       boolean boolean1 = abstractPatriciaTrie_TrieEntry3.isEmpty();
155:       assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
156:       assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
157:       assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
158:       assertFalse(boolean1 == boolean0);
159:       assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
160:       assertFalse(boolean1);
161:       assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
162:       
163:       Object object0 = new Object();
164:       assertNotNull(object0);
165:       
166:       Integer integer0 = new Integer((-659));
167:       assertNotNull(integer0);
168:       assertEquals((-659), (int)integer0);
169:       
170:       AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(object0, integer0);
171:       assertNotNull(abstractMap_SimpleEntry0);
172:       
173:       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
174:       Comparator<Map.Entry<Object, String>> comparator2 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
175:       assertNotNull(comparator2);
176:       
177:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
178:       assertNotNull(patriciaTrie0);
179:       
180:       String string1 = patriciaTrie0.getOrDefault((Object) null, "P7i");
181:       assertNotNull(string1);
182:       assertFalse(string1.equals((Object)string0));
183:       assertEquals("P7i", string1);
184:       
185:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.floorEntry("");
186:       assertNull(abstractPatriciaTrie_TrieEntry5);
187:   }
188: }
RegularFileObject[/tmp/EvoSuite_139_1605585602634/org/apache/commons/collections4/trie/AbstractPatriciaTrie_139_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:02 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_139_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_139_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_139_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_139_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:00:02.824 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("9(?99e0Mc5+W>hY(5", "", 29);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

String string0 = abstractPatriciaTrie_TrieEntry0.setKeyValue(" is not an internal Entry!", "9(?99e0Mc5+W>hY(5");
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(string0);
assertEquals("", string0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("p/Lc!u'", "", 29);
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());

abstractPatriciaTrie_TrieEntry0.value = "";
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>(" is not an internal Entry!", "P7i", (-1008));
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());

abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry2;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());

abstractPatriciaTrie_TrieEntry0.bitIndex = (-659);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(boolean0);

AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("P7i", "p/Lc!u'");
assertNotNull(abstractMap_SimpleImmutableEntry0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String>(abstractMap_SimpleImmutableEntry0, "{Uz-wi2!M<", (-1008));
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry3);

AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractPatriciaTrie_TrieEntry0.predecessor);
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractMap_SimpleImmutableEntry1);
assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, String>, String>(abstractMap_SimpleImmutableEntry1, "p/Lc!u'", (-283));
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry4);
assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));

abstractPatriciaTrie_TrieEntry3.right = abstractPatriciaTrie_TrieEntry4;
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.right.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.right.isExternalNode());

Comparator<Map.Entry<Integer, Integer>> comparator0 = Map.Entry.comparingByValue();
assertNotNull(comparator0);

abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0.left;
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());

boolean boolean1 = abstractPatriciaTrie_TrieEntry3.isEmpty();
assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
assertFalse(boolean1 == boolean0);
assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
assertFalse(boolean1);
assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);

Object object0 = new Object();
assertNotNull(object0);

Integer integer0 = new Integer((-659));
assertNotNull(integer0);
assertEquals((-659), (int)integer0);

AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(object0, integer0);
assertNotNull(abstractMap_SimpleEntry0);

Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, String>> comparator2 = (Comparator<Map.Entry<Object, String>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
assertNotNull(comparator2);

PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

String string1 = patriciaTrie0.getOrDefault((Object) null, "P7i");
assertNotNull(string1);
assertFalse(string1.equals((Object)string0));
assertEquals("P7i", string1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.floorEntry("");
assertNull(abstractPatriciaTrie_TrieEntry5);


[MASTER] 04:00:08.183 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_190_1605585608085/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_190_1605585608085/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:08.184 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:08.195 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:08.196 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Integer>,java.lang.Object>,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleEntry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.String,java.lang.Integer>,java.lang.Object>,java.lang.String>>: 36
[MASTER] 04:00:08.196 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_190_1605585608085/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:00:08.197 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:00:08.198 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_190_1605585608085/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:08 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_190_tmp__ESTest extends AbstractPatriciaTrie_190_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
27:       assertNotNull(patriciaTrie0);
28:       
29:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("d{wyG*TH", "FHHp'FXI^\"l4R'$f", 144);
30:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
31:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
32:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
33:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
34:       
35:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
36:       Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>>) comparator0);
37:       assertNotNull(comparator1);
38:       
39:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.PatriciaTrie", "", 144);
40:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
41:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
43:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
44:       
45:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
47:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
50:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
51:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
52:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
54:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
55:       
56:       String string0 = patriciaTrie0.put("", "FHHp'FXI^\"l4R'$f");
57:       assertNull(string0);
58:       
59:       AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2);
60:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
61:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
64:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
65:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
66:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
67:       
68:       PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
69:       assertNotNull(patriciaTrie1);
70:       
71:       Integer integer0 = new Integer((-1860));
72:       assertNotNull(integer0);
73:       assertEquals((-1860), (int)integer0);
74:       
75:       Object object0 = patriciaTrie1.put("d{wyG*TH", integer0);
76:       assertNull(object0);
77:   }
78: }
RegularFileObject[/tmp/EvoSuite_190_1605585608085/org/apache/commons/collections4/trie/AbstractPatriciaTrie_190_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:08 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_190_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_190_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_190_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_190_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:00:08.208 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("d{wyG*TH", "FHHp'FXI^\"l4R'$f", 144);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>, String>> comparator1 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>, String>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.PatriciaTrie", "", 144);
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());

String string0 = patriciaTrie0.put("", "FHHp'FXI^\"l4R'$f");
assertNull(string0);

AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2);
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie1);

Integer integer0 = new Integer((-1860));
assertNotNull(integer0);
assertEquals((-1860), (int)integer0);

Object object0 = patriciaTrie1.put("d{wyG*TH", integer0);
assertNull(object0);


[MASTER] 04:00:09.197 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_200_1605585609094/org/apache/commons/collections4/trie/AbstractPatriciaTrie_200_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_200_1605585609094/org/apache/commons/collections4/trie/AbstractPatriciaTrie_200_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:09.217 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:09.217 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:09.218 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Comparable<java.lang.String>>>: 37
[MASTER] 04:00:09.225 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_200_1605585609094/org/apache/commons/collections4/trie/AbstractPatriciaTrie_200_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:00:09.226 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:00:09.226 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_200_1605585609094/org/apache/commons/collections4/trie/AbstractPatriciaTrie_200_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:09 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.Map;
14: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
15: import org.apache.commons.collections4.trie.PatriciaTrie;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.ViolatedAssumptionAnswer;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class AbstractPatriciaTrie_200_tmp__ESTest extends AbstractPatriciaTrie_200_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Integer integer0 = new Integer((-266));
27:       assertNotNull(integer0);
28:       assertEquals((-266), (int)integer0);
29:       
30:       AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Integer>((AbstractMap.SimpleEntry<String, String>) null, integer0, (-846));
31:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
32:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
33:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
34:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
35:       
36:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
37:       Comparator<Map.Entry<String, Comparable<String>>> comparator1 = (Comparator<Map.Entry<String, Comparable<String>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
38:       assertNotNull(comparator1);
39:       
40:       abstractPatriciaTrie_TrieEntry0.predecessor = null;
41:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
42:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
43:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
44:       
45:       String string0 = abstractPatriciaTrie_TrieEntry0.toString();
46:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
47:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
48:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
49:       assertNotNull(string0);
50:       assertEquals("Entry(key=null [-846], value=-266, parent=null, left=null [-846], right=null, )", string0);
51:       
52:       String string1 = abstractPatriciaTrie_TrieEntry0.toString();
53:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
54:       assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
55:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
56:       assertNotNull(string1);
57:       assertTrue(string1.equals((Object)string0));
58:       assertEquals("Entry(key=null [-846], value=-266, parent=null, left=null [-846], right=null, )", string1);
59:       
60:       PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
61:       assertNotNull(patriciaTrie0);
62:       
63:       AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("Entry(key=null [-846], value=-266, parent=null, left=null [-846], right=null, )");
64:       assertNull(abstractPatriciaTrie_TrieEntry1);
65:   }
66: }
RegularFileObject[/tmp/EvoSuite_200_1605585609094/org/apache/commons/collections4/trie/AbstractPatriciaTrie_200_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:09 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_200_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_200_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_200_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_200_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:00:09.228 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Integer integer0 = new Integer((-266));
assertNotNull(integer0);
assertEquals((-266), (int)integer0);

AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Integer>((AbstractMap.SimpleEntry<String, String>) null, integer0, (-846));
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, Comparable<String>>> comparator1 = (Comparator<Map.Entry<String, Comparable<String>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
assertNotNull(comparator1);

abstractPatriciaTrie_TrieEntry0.predecessor = null;
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());

String string0 = abstractPatriciaTrie_TrieEntry0.toString();
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(string0);
assertEquals("Entry(key=null [-846], value=-266, parent=null, left=null [-846], right=null, )", string0);

String string1 = abstractPatriciaTrie_TrieEntry0.toString();
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertNotNull(string1);
assertTrue(string1.equals((Object)string0));
assertEquals("Entry(key=null [-846], value=-266, parent=null, left=null [-846], right=null, )", string1);

PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
assertNotNull(patriciaTrie0);

AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("Entry(key=null [-846], value=-266, parent=null, left=null [-846], right=null, )");
assertNull(abstractPatriciaTrie_TrieEntry1);


[MASTER] 04:00:12.058 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_229_1605585611903/org/apache/commons/collections4/trie/AbstractPatriciaTrie_229_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_229_1605585611903/org/apache/commons/collections4/trie/AbstractPatriciaTrie_229_tmp__ESTest_scaffolding.java]]
[MASTER] 04:00:12.058 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Collections-28/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:12.058 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Collections-28/target/classes
[MASTER] 04:00:12.076 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.String,java.lang.Object>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.lang.String,java.util.AbstractMap.SimpleImmutableEntry<java.lang.Integer,java.lang.Comparable<java.lang.Object>>>>: 48
[MASTER] 04:00:12.077 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: java.util.Comparator<java.util.Map.Entry<java.lang.Object,java.util.AbstractMap.SimpleEntry<java.lang.Comparable<java.lang.Integer>,java.lang.String>>> cannot be converted to java.util.Comparator<java.util.Map.Entry<java.util.AbstractMap.SimpleImmutableEntry<java.lang.Object,java.lang.String>,java.util.AbstractMap.SimpleEntry<java.lang.Comparable<java.lang.Integer>,java.lang.String>>>: 68
[MASTER] 04:00:12.077 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_229_1605585611903/org/apache/commons/collections4/trie/AbstractPatriciaTrie_229_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 04:00:12.077 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 04:00:12.077 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_229_1605585611903/org/apache/commons/collections4/trie/AbstractPatriciaTrie_229_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Nov 17 04:00:11 GMT 2020
4:  */
5: 
6: package org.apache.commons.collections4.trie;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.AbstractMap;
12: import java.util.Comparator;
13: import java.util.HashMap;
14: import java.util.Map;
15: import java.util.Set;
16: import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
17: import org.apache.commons.collections4.trie.PatriciaTrie;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.ViolatedAssumptionAnswer;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class AbstractPatriciaTrie_229_tmp__ESTest extends AbstractPatriciaTrie_229_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("", "  ", (-3));
29:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
30:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
31:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
32:       assertNotNull(abstractPatriciaTrie_TrieEntry0);
33:       
34:       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
35:       Comparator<Map.Entry<Object, Object>> comparator1 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
36:       assertNotNull(comparator1);
37:       
38:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "R<H{Wh))`Of|]V/+k", (-1080));
39:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
40:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
41:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
42:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
43:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
44:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
45:       assertNotNull(abstractPatriciaTrie_TrieEntry1);
46:       
47:       Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
48:       Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Integer, Comparable<Object>>>> comparator3 = (Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Integer, Comparable<Object>>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
49:       assertNotNull(comparator3);
50:       
51:       AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>("R<H{Wh))`Of|]V/+k", "  ", 1232);
52:       assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
53:       assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
54:       assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
55:       assertNotNull(abstractPatriciaTrie_TrieEntry2);
56:       
57:       String string0 = (String)abstractPatriciaTrie_TrieEntry2.key;
58:       assertNotNull(string0);
59:       assertEquals("R<H{Wh))`Of|]V/+k", string0);
60:       
61:       boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("R<H{Wh))`Of|]V/+k");
62:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
63:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
64:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
65:       assertFalse(boolean0);
66:       
67:       Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
68:       Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleEntry<Comparable<Integer>, String>>> comparator5 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleEntry<Comparable<Integer>, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Comparable<Integer>, String>>) comparator4);
69:       assertNotNull(comparator5);
70:       
71:       abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
72:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
73:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
74:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
75:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
76:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
77:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
78:       assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
79:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
80:       assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
81:       
82:       Integer integer0 = new Integer((-3));
83:       assertNotNull(integer0);
84:       assertEquals((-3), (int)integer0);
85:       
86:       String string1 = abstractPatriciaTrie_TrieEntry1.setKeyValue(integer0, "n]pDNVod.5swhX");
87:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
88:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
89:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
90:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
91:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
92:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
93:       assertNotNull(string1);
94:       assertTrue(string1.equals((Object)string0));
95:       assertEquals("R<H{Wh))`Of|]V/+k", string1);
96:       
97:       abstractPatriciaTrie_TrieEntry1.value = "!B,RPHUnJy";
98:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
99:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
100:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
101:       assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
102:       assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
103:       assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
104:       
105:       String string2 = abstractPatriciaTrie_TrieEntry0.toString();
106:       assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
107:       assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
108:       assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
109:       assertNotNull(string2);
110:       assertFalse(string2.equals((Object)string1));
111:       assertFalse(string2.equals((Object)string0));
112:       assertEquals("Entry(key= [-3], value=  , parent=-3 [-1080], left= [-3], right=null, predecessor= [-3])", string2);
113:       
114:       PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
115:       assertNotNull(patriciaTrie0);
116:       
117:       HashMap<String, String> hashMap0 = new HashMap<String, String>();
118:       assertEquals(0, hashMap0.size());
119:       assertTrue(hashMap0.isEmpty());
120:       assertNotNull(hashMap0);
121:       
122:       String string3 = hashMap0.put("|W*", "< x{n!$89eEe");
123:       assertEquals(1, hashMap0.size());
124:       assertFalse(hashMap0.isEmpty());
125:       assertNull(string3);
126:       
127:       PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
128:       assertEquals(1, hashMap0.size());
129:       assertFalse(hashMap0.isEmpty());
130:       assertNotNull(patriciaTrie1);
131:       
132:       String string4 = patriciaTrie1.previousKey("Entry(key= [-3], value=  , parent=-3 [-1080], left= [-3], right=null, predecessor= [-3])");
133:       assertEquals(1, hashMap0.size());
134:       assertFalse(hashMap0.isEmpty());
135:       assertNull(string4);
136:       
137:       PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
138:       assertNotNull(patriciaTrie2);
139:       
140:       Comparator<? super String> comparator6 = patriciaTrie2.comparator();
141:       assertNotNull(comparator6);
142:       
143:       PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
144:       assertNotNull(patriciaTrie3);
145:       
146:       Set<String> set0 = patriciaTrie3.keySet();
147:       assertTrue(set0.isEmpty());
148:       assertEquals(0, set0.size());
149:       assertNotNull(set0);
150:       assertFalse(set0.contains(""));
151:   }
152: }
RegularFileObject[/tmp/EvoSuite_229_1605585611903/org/apache/commons/collections4/trie/AbstractPatriciaTrie_229_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Nov 17 04:00:11 GMT 2020
5:  */
6: 
7: package org.apache.commons.collections4.trie;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class AbstractPatriciaTrie_229_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.collections4.trie.AbstractPatriciaTrie"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AbstractPatriciaTrie_229_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.collections4.MapIterator",
84:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
85:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
86:       "org.apache.commons.collections4.trie.PatriciaTrie",
87:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
88:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
89:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
90:       "org.apache.commons.collections4.Get",
91:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
92:       "org.apache.commons.collections4.Trie",
93:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
94:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
95:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
96:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
97:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator",
98:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
99:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
100:       "org.apache.commons.collections4.IterableSortedMap",
101:       "org.apache.commons.collections4.OrderedMap",
102:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
103:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
104:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
105:       "org.apache.commons.collections4.OrderedMapIterator",
106:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
107:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1",
108:       "org.apache.commons.collections4.Put",
109:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
110:       "org.apache.commons.collections4.trie.KeyAnalyzer",
111:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
112:       "org.apache.commons.collections4.IterableMap",
113:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
114:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
115:       "org.apache.commons.collections4.OrderedIterator",
116:       "org.apache.commons.collections4.IterableGet"
117:     );
118:   } 
119:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
120:     mock(Class.forName("java.util.Comparator", false, AbstractPatriciaTrie_229_tmp__ESTest_scaffolding.class.getClassLoader()));
121:   }
122: 
123:   private static void resetClasses() {
124:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AbstractPatriciaTrie_229_tmp__ESTest_scaffolding.class.getClassLoader()); 
125: 
126:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
127:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie",
128:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie",
129:       "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry",
130:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry",
131:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference",
132:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet",
133:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet",
134:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values",
135:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator",
136:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator",
137:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap",
138:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap",
139:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap",
140:       "org.apache.commons.collections4.trie.PatriciaTrie",
141:       "org.apache.commons.collections4.trie.KeyAnalyzer",
142:       "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer",
143:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator",
144:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet",
145:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator",
146:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator",
147:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator",
148:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet",
149:       "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator"
150:     );
151:   }
152: }

[MASTER] 04:00:12.080 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("", "  ", (-3));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry0);

Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<Object, Object>> comparator1 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
assertNotNull(comparator1);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractPatriciaTrie_TrieEntry0, "R<H{Wh))`Of|]V/+k", (-1080));
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(abstractPatriciaTrie_TrieEntry1);

Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Integer, Comparable<Object>>>> comparator3 = (Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Integer, Comparable<Object>>>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator2);
assertNotNull(comparator3);

AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>("R<H{Wh))`Of|]V/+k", "  ", 1232);
assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
assertNotNull(abstractPatriciaTrie_TrieEntry2);

String string0 = (String)abstractPatriciaTrie_TrieEntry2.key;
assertNotNull(string0);
assertEquals("R<H{Wh))`Of|]V/+k", string0);

boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("R<H{Wh))`Of|]V/+k");
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(boolean0);

Comparator<Object> comparator4 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleEntry<Comparable<Integer>, String>>> comparator5 = (Comparator<Map.Entry<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleEntry<Comparable<Integer>, String>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<Comparable<Integer>, String>>) comparator4);
assertNotNull(comparator5);

abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());

Integer integer0 = new Integer((-3));
assertNotNull(integer0);
assertEquals((-3), (int)integer0);

String string1 = abstractPatriciaTrie_TrieEntry1.setKeyValue(integer0, "n]pDNVod.5swhX");
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
assertNotNull(string1);
assertTrue(string1.equals((Object)string0));
assertEquals("R<H{Wh))`Of|]V/+k", string1);

abstractPatriciaTrie_TrieEntry1.value = "!B,RPHUnJy";
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());

String string2 = abstractPatriciaTrie_TrieEntry0.toString();
assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
assertNotNull(string2);
assertFalse(string2.equals((Object)string1));
assertFalse(string2.equals((Object)string0));
assertEquals("Entry(key= [-3], value=  , parent=-3 [-1080], left= [-3], right=null, predecessor= [-3])", string2);

PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
assertNotNull(patriciaTrie0);

HashMap<String, String> hashMap0 = new HashMap<String, String>();
assertEquals(0, hashMap0.size());
assertTrue(hashMap0.isEmpty());
assertNotNull(hashMap0);

String string3 = hashMap0.put("|W*", "< x{n!$89eEe");
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNull(string3);

PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNotNull(patriciaTrie1);

String string4 = patriciaTrie1.previousKey("Entry(key= [-3], value=  , parent=-3 [-1080], left= [-3], right=null, predecessor= [-3])");
assertEquals(1, hashMap0.size());
assertFalse(hashMap0.isEmpty());
assertNull(string4);

PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
assertNotNull(patriciaTrie2);

Comparator<? super String> comparator6 = patriciaTrie2.comparator();
assertNotNull(comparator6);

PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
assertNotNull(patriciaTrie3);

Set<String> set0 = patriciaTrie3.keySet();
assertTrue(set0.isEmpty());
assertEquals(0, set0.size());
assertNotNull(set0);
assertFalse(set0.contains(""));


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'AbstractPatriciaTrie_ESTest' to results/Collections-28/org.apache.commons.collections4.trie.AbstractPatriciaTrie/default/tests/23
* Done!

* Computation finished
