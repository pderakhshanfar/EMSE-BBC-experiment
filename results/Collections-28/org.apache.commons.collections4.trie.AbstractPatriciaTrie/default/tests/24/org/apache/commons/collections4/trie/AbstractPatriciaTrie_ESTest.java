/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 04:01:21 GMT 2020
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractBitwiseTrie;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("R9o2)>Kd]7mU/=rF", "R9o2)>Kd]7mU/=rF");
      // Undeclared exception!
      try { 
        patriciaTrie0.getNearestEntryForKey("", 16);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-903));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put(",(,6b;a4l~ExVccBw", integer0);
      hashMap0.put("", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie1.previousKey("");
      patriciaTrie1.lowerEntry("$1e");
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      patriciaTrie0.ceilingEntry("");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("ygt&wD5 ao!", "ygt&wD5 ao!");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      patriciaTrie0.put("ygt&wD5 ao!", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.put("=MDhI&l'", abstractMap_SimpleImmutableEntry0);
      String string0 = "c&l3%L*2L&fzYE";
      patriciaTrie0.prefixMap("c&l3%L*2L&fzYE");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.incrementSize();
      Integer integer0 = new Integer((-1046));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("ygt&wD5 ao!", integer0, (-1046));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("/E#V)\"['+6P@", integer0, (-3));
      String string1 = "";
      abstractPatriciaTrie_TrieEntry1.setKeyValue("", integer0);
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.key = "";
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      Map.Entry.comparingByValue();
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("gt&wD5 ao!", "gt&wD5 ao!");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.entrySet();
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      patriciaTrie0.put("gt&wD5 ao!", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.put("=MDhI&l'", abstractMap_SimpleImmutableEntry0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.incrementSize();
      Integer integer0 = new Integer((-1046));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("gt&wD5 ao!", integer0, (-1046));
      String string0 = "/E#V)\"['+6P@";
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("/E#V)\"['+6P@", integer0, (-1046));
      abstractPatriciaTrie_TrieEntry1.setKeyValue("", integer0);
      abstractPatriciaTrie_TrieEntry0.key = "";
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      Map.Entry.comparingByValue();
      Integer integer1 = new Integer((-1046));
      abstractPatriciaTrie_TrieEntry0.value = integer1;
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("_d&oKw8CfmE", "_d&oKw8CfmE");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("Mi%O{*i8", "key=");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractMap_SimpleImmutableEntry1);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, Object>(abstractMap_SimpleEntry0, "key=", 192);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry0.key;
      patriciaTrie0.put("key=", abstractMap_SimpleEntry1);
      patriciaTrie0.select("");
      patriciaTrie0.ceilingEntry(", ");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("_d&oKw8CfmE", "_d&oKw8CfmE");
      patriciaTrie0.put("_d&oKw8CfmE", "_d&oKw8CfmE");
      patriciaTrie0.select("Trie[");
      patriciaTrie0.floorEntry("_d&oKw8CfmE");
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<Comparable<String>, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, Comparable<Object>>("_d&oKw8CfmE", comparable0, 2);
      abstractPatriciaTrie_TrieEntry0.left = null;
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("]r>\"", "");
      patriciaTrie1.put("", abstractMap_SimpleEntry0);
      patriciaTrie0.floorEntry("");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("", "");
      patriciaTrie0.higherEntry("");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.higherEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-903));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put(",(,6b;a4l~ExVccBw", integer0);
      hashMap0.put("", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie1.lowerEntry("$1e");
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      patriciaTrie0.floorEntry("");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      patriciaTrie0.clear();
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(object0, "/");
      patriciaTrie0.put("(8#mR*gHHvD]~B,3qx:", abstractMap_SimpleEntry0);
      Collection<AbstractMap.SimpleEntry<Object, String>> collection0 = patriciaTrie0.values();
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(collection0, (String) null, 1);
      abstractPatriciaTrie_TrieEntry0.bitIndex = 1;
      abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie0.put("iO{Bo9Q93:UYo", abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        patriciaTrie2.subMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap", "Pbd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "1";
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.decrementSize();
      String string1 = "^'2-\"?i%y6j";
      // Undeclared exception!
      try { 
        patriciaTrie0.firstEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie2.ceilingEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("/MWch^Ky:BbV/wO\"", "/MWch^Ky:BbV/wO\"");
      int int0 = 10;
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("", 10, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("LC5 G", "LC5 G");
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.PatriciaTrie", (Object) null);
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("1", (Integer) null);
      hashMap0.put("y'q;f;[4?IxB:?b3D*U", (Integer) null);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.decrementSize();
      Integer integer0 = new Integer((-903));
      hashMap0.put(",(,6b;a4l~ExVccBw", integer0);
      hashMap0.put("^'2-\"?i%y6j", integer0);
      patriciaTrie0.lowerEntry("1");
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer1 = new Integer((-903));
      Integer integer2 = new Integer((-903));
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      patriciaTrie1.computeIfPresent(",(,6b;a4l~ExVccBw", biFunction0);
      patriciaTrie1.put("^'2-\"?i%y6j", ",(,6b;a4l~ExVccBw");
      patriciaTrie1.toString();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie0.put("", "f8h-;");
      hashMap0.put("", "");
      patriciaTrie1.compareKeys("", ":Ga8V;ePgJ_cYC%Q,");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      patriciaTrie0.computeIfPresent("", biFunction0);
      patriciaTrie2.lowerEntry("mA:4LN9FGbwYV,M");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("1", (Integer) null);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(916);
      patriciaTrie0.put("X4RIxLgL_;]|?0", integer0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("X4RIxLgL_;]|?0", "", 916);
      abstractPatriciaTrie_TrieEntry0.bitIndex = 916;
      String string0 = abstractPatriciaTrie_TrieEntry0.value;
      patriciaTrie0.put("ZO)K", (Object) null);
      patriciaTrie0.values();
      patriciaTrie0.remove((Object) null);
      patriciaTrie0.previousKey("ZO)K");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      patriciaTrie0.ceilingEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.subtree("", (-3), 2);
      patriciaTrie0.isBitSet((String) null, (-325), (-3));
      patriciaTrie0.clear();
      String string0 = "CV_p0~fe";
      patriciaTrie0.put("]={\n", "CV_p0~fe");
      patriciaTrie0.ceilingEntry("<JL}4Es?|sBDbsEBaO");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("", (-325), (-37));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.forEach(biConsumer0);
      patriciaTrie0.put("&MeC~[M!*iR\"Y", "&MeC~[M!*iR\"Y");
      patriciaTrie0.nextKey("Q");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "Q", 64);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("&MeC~[M!*iR\"Y", "&MeC~[M!*iR\"Y", 64);
      abstractPatriciaTrie_TrieEntry0.key = null;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      abstractPatriciaTrie_TrieEntry2.toString();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
      abstractPatriciaTrie_TrieEntry2.equals("&MeC~[M!*iR\"Y");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry3, 64);
      patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "S", 0);
      abstractPatriciaTrie_TrieEntry5.setKeyValue((Object) null, (String) null);
      abstractPatriciaTrie_TrieEntry5.setValue((String) null);
      abstractPatriciaTrie_TrieEntry5.isInternalNode();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.mapIterator();
      patriciaTrie1.previousKey("Entry(key=&MeC~[M!*iR\"Y [64], value=&MeC~[M!*iR\"Y, parent=null, left=&MeC~[M!*iR\"Y [64], right=null, predecessor=&MeC~[M!*iR\"Y [64])");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.isBitSet((String) null, 1, 1);
      patriciaTrie0.put("CV_p0~fe", (Object) null);
      patriciaTrie0.ceilingEntry("CV_p0~fe");
      patriciaTrie0.subtree("CV_p0~fe", 8, 8);
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "CV_p0~fe");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("L5/ G", "L5/ G");
      patriciaTrie0.ceilingEntry("L5/ G");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(48);
      hashMap0.put("eEh'iAT6}9y~", integer0);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.decrementSize();
      Integer integer1 = new Integer((-903));
      hashMap0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", integer0);
      Integer integer2 = new Integer(48);
      hashMap0.put("", integer2);
      patriciaTrie0.lowerEntry("P");
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer3 = new Integer(48);
      Integer integer4 = new Integer((-903));
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie1.put("uiS.GaR-8,3*&-s.g", "");
      patriciaTrie1.toString();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie0.lengthInBits(".}u6#){XGot=hNwhf");
      patriciaTrie2.select(".}u6#){XGot=hNwhf");
      patriciaTrie2.put(".}u6#){XGot=hNwhf", patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.floorEntry("WR]WsF'");
      Object object0 = new Object();
      patriciaTrie2.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.subMap("=", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      // Undeclared exception!
      try { 
        patriciaTrie0.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.putIfAbsent("", "");
      // Undeclared exception!
      try { 
        patriciaTrie2.subtree("", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "]";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("]", "]", (-1));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("ZMs", "]", 2);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      Integer integer0 = new Integer(2);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("]", integer0, (-1));
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
      Map.Entry.comparingByKey();
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry1.toString();
      abstractPatriciaTrie_TrieEntry1.toString();
      Integer integer1 = new Integer((-1));
      abstractPatriciaTrie_TrieEntry2.equals(integer1);
      abstractPatriciaTrie_TrieEntry0.value = (Object) "]";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      abstractPatriciaTrie_TrieEntry2.bitIndex = (-1);
      abstractPatriciaTrie_TrieEntry0.toString();
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.isBitSet((String) null, 1, 1);
      patriciaTrie0.put("CV_p0~fe", (Object) null);
      patriciaTrie0.subtree("CV_p0~fe", 8, 8);
      patriciaTrie0.put("Entry(", "CV_p0~fe");
      patriciaTrie0.values();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie1.containsKey("CV_p0~fe");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "Entry(", 8);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("FLgi", "Failed to put: ", 1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("Qo`mNBeCn!qI'2Lcm", "Failed to pu]t: ", 992);
      AbstractBitwiseTrie.compare(abstractPatriciaTrie_TrieEntry1, hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry3);
      patriciaTrie0.mapIterator();
      // Undeclared exception!
      try { 
        patriciaTrie1.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("_k*o|Ig[>!#", "_k*o|Ig[>!#");
      patriciaTrie0.put("Ky:hEFO<NpJzo", "Ky:hEFO<NpJzo");
      patriciaTrie0.higherEntry("Ky:hEFO<NpJzo");
      patriciaTrie0.putIfAbsent("Ky:hEFO<NpJzo", (Object) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("Ky:hEFO<NpJzo", 0, 0);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie0.mapIterator();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(836);
      patriciaTrie0.putIfAbsent(" + ", integer0);
      patriciaTrie0.higherEntry("Ky:hEFO<NpJzo");
      Integer integer1 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("d2CmmWj2K,Z[CIUh", integer1, 0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Ky:hEFO<NpJzo", integer1, 2094);
      Integer integer2 = new Integer(836);
      abstractPatriciaTrie_TrieEntry1.setKeyValue(" + ", integer2);
      Integer integer3 = new Integer(0);
      abstractPatriciaTrie_TrieEntry1.equals(integer3);
      abstractPatriciaTrie_TrieEntry1.toString();
      patriciaTrie0.containsKey(" + ");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(836);
      patriciaTrie0.putIfAbsent(" + ", integer0);
      Integer integer1 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("d2CmmWj2K,Z[CIUh", integer1, 0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Ky:hEFO<NpJzo", integer1, 2094);
      Integer integer2 = new Integer(836);
      abstractPatriciaTrie_TrieEntry1.setKeyValue(" + ", integer2);
      Integer integer3 = new Integer(0);
      abstractPatriciaTrie_TrieEntry1.equals(integer3);
      abstractPatriciaTrie_TrieEntry1.toString();
      patriciaTrie0.containsKey(" + ");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      Integer integer0 = new Integer(3150);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.put("", integer0);
      patriciaTrie2.higherEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap");
      patriciaTrie2.getOrDefault("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap", (Integer) null);
      Integer integer1 = new Integer(3150);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer1, 857);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", "eCQnV<MTbvyJVvmU*");
      patriciaTrie0.put("Mjye!", "org.apache.commons.collections4.trie.KeyAnalyzer");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>((String) null, integer0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, Integer>(abstractMap_SimpleEntry0, (Integer) null, (-1));
      Integer integer1 = abstractPatriciaTrie_TrieEntry0.value;
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      Object object0 = new Object();
      patriciaTrie2.put("8cYNLZg", object0);
      patriciaTrie2.remove((Object) null);
      // Undeclared exception!
      try { 
        patriciaTrie2.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      String string0 = null;
      // Undeclared exception!
      try { 
        patriciaTrie1.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.higherEntry("m");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("m", "ZO)K", (-3));
      String string0 = abstractPatriciaTrie_TrieEntry0.value;
      patriciaTrie0.put("m", "ZO)K");
      patriciaTrie0.remove((Object) "y>");
      patriciaTrie0.previousKey("m");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.modCount = 1;
      patriciaTrie0.mapIterator();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      String string0 = null;
      // Undeclared exception!
      try { 
        patriciaTrie1.tailMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.isBitSet((String) null, (-37), (-37));
      patriciaTrie0.put("", (Object) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", (Object) null, (-37));
      patriciaTrie0.prefixMap("");
      patriciaTrie0.put("Entry(", (Object) null);
      patriciaTrie0.values();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry0, 928);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("L5/ G", "L5/ G");
      patriciaTrie0.floorEntry("L5/ G");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.isBitSet((String) null, (-37), (-37));
      Object object0 = new Object();
      patriciaTrie0.subtree("", (-3), (-3));
      patriciaTrie0.put("Entry(", "");
      patriciaTrie0.higherEntry("Entry(");
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (-37));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("L5/CG", "L5/CG");
      patriciaTrie0.higherEntry("L5/CG");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer integer0 = new Integer(741);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 6259);
      Object object0 = new Object();
      Integer integer1 = new Integer(741);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("g(X)*e_vIJ ;c3s@D", integer1, 0);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.setKeyValue("ob&f", (Integer) null);
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      abstractPatriciaTrie_TrieEntry0.equals(object0);
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      // Undeclared exception!
      try { 
        patriciaTrie0.subMap((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.trie.KeyAnalyzer").when(biFunction0).apply(anyString() , any());
      patriciaTrie1.compute("org.apache.commons.collections4.trie.KeyAnalyzer", biFunction0);
      Map.Entry.comparingByValue();
      Integer integer0 = new Integer(2148);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie3.getNearestEntryForKey("keyAnalyzer", 1066);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("#>^&kgah~552iaP", "#>^&kgah~552iaP");
      patriciaTrie0.lastKey();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      patriciaTrie0.mapIterator();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("Key is out of range: ", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      patriciaTrie1.higherEntry("Trie[");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-2178));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = new Integer((-338));
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer0, integer0, (-338));
      Integer integer1 = new Integer(272);
      Integer integer2 = new Integer(5);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer2, integer1, 0);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(integer1, integer2, (-33));
      abstractPatriciaTrie_TrieEntry2.value = integer1;
      abstractPatriciaTrie_TrieEntry0.equals("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("1", (Integer) null);
      hashMap0.put("y'q;f[4?IxB:?b3D*U", (Integer) null);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.decrementSize();
      Integer integer0 = new Integer((-903));
      hashMap0.put(",(,6b;a4l~ExVccBw", integer0);
      hashMap0.put("^'2-\"?i%y6j", integer0);
      patriciaTrie0.lowerEntry("Trie[");
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer1 = new Integer((-903));
      Integer integer2 = new Integer((-903));
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("y'q;f[4?IxB:?b3D*U", integer2);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.selectValue("^'2-\"?i%y6j");
      patriciaTrie1.remove((Object) null);
      patriciaTrie1.previousKey("");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.remove((Object) null);
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.PatriciaTrie", (Object) null);
      patriciaTrie0.subtree("org.apache.commons.collections4.trie.PatriciaTrie", 0, 0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(1360);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator", integer0);
      patriciaTrie1.nextKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator");
      patriciaTrie1.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$SingletonIterator");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.tailMap("D`z3U]+miG");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.previousKey("Z,>-!`%c^K");
      patriciaTrie0.ceilingEntry("Z,>-!`%c^K");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("DzC<", "Z,>-!`%c^K", 206);
      abstractPatriciaTrie_TrieEntry0.toString();
      patriciaTrie1.entrySet();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.ceilingEntry("Failed to put: ");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("1", (Integer) null);
      hashMap0.put("y'q;f[4?IxB:?b3D*U", (Integer) null);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.decrementSize();
      Integer integer0 = new Integer((-903));
      hashMap0.put(",(,6b;a4l~ExVccBw", integer0);
      hashMap0.put("^'2-\"?i%y6j", integer0);
      Integer integer1 = new Integer(272);
      patriciaTrie0.put("'BYbuu\"~<{", integer1);
      patriciaTrie0.lowerEntry("Trie[");
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer2 = new Integer((-903));
      hashMap1.put((String) null, integer2);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie1.put("^'2-\"?i%y6j", ",(,6b;a4l~ExVccBw");
      patriciaTrie1.toString();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(741);
      Integer integer1 = new Integer(6259);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", integer1);
      Integer integer2 = new Integer(1);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap1.put("d", integer1);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap1);
      patriciaTrie0.values();
      patriciaTrie0.headMap("");
      patriciaTrie0.put("vb#qV[", integer0);
      Integer integer3 = new Integer(4557);
      hashMap0.put("d", integer1);
      patriciaTrie0.put("DnoVIQgCv-!", "DnoVIQgCv-!");
      patriciaTrie0.toString();
      Integer integer4 = new Integer((-2));
      patriciaTrie0.remove((Object) null, (Object) "d");
      patriciaTrie0.lastEntry();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.select("");
      patriciaTrie2.put("", patriciaTrie0);
      String string0 = "";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.floorEntry("");
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, (Object) null);
      Integer integer1 = new Integer(0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(patriciaTrie0, abstractPatriciaTrie_TrieEntry0, 0);
      AbstractPatriciaTrie.TrieEntry abstractPatriciaTrie_TrieEntry2 = (AbstractPatriciaTrie.TrieEntry)abstractPatriciaTrie_TrieEntry1.value;
      // Undeclared exception!
      try { 
        patriciaTrie3.get(abstractPatriciaTrie_TrieEntry2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("", "");
      patriciaTrie0.floorEntry("");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("LC5 G", "LC5 G");
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.PatriciaTrie", (Object) null);
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Integer integer0 = new Integer(2253);
      patriciaTrie0.put("LC5 G", integer0);
      patriciaTrie1.put("`", (Object) null);
      patriciaTrie1.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put(")", ")");
      Integer integer0 = new Integer(2423);
      patriciaTrie0.put(")", (Object) null);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, (Object) null);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>((String) null, abstractMap_SimpleEntry0, 2423);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry0.value;
      patriciaTrie0.lowerEntry(")");
      Integer integer1 = new Integer(2423);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleEntry1);
      Integer integer2 = new Integer(2423);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, Integer>(abstractMap_SimpleEntry2, integer2, 2423);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry3 = abstractPatriciaTrie_TrieEntry1.key;
      AbstractBitwiseTrie.compare((Object) null, abstractMap_SimpleEntry3);
      patriciaTrie0.selectKey("");
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, String>>();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = new Integer(741);
      Integer integer1 = new Integer(6259);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", integer1);
      Integer integer2 = new Integer(1);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap1.put("d", integer1);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap1);
      patriciaTrie0.values();
      patriciaTrie0.headMap("");
      patriciaTrie0.put("vb#qV[", integer0);
      Integer integer3 = new Integer(4557);
      hashMap0.put("d", integer1);
      patriciaTrie0.put("DnoVIQgCv-!", "DnoVIQgCv-!");
      patriciaTrie0.toString();
      patriciaTrie0.lowerEntry("");
      Integer integer4 = new Integer(4557);
      AbstractBitwiseTrie.compare(integer4, "");
      patriciaTrie0.selectKey("vb#qV[");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("}\n", "~BLoc7uz)H`S");
      patriciaTrie0.tailMap("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      patriciaTrie0.ceilingEntry("2aFwq");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.isBitSet((String) null, (-37), (-37));
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.forEach(biConsumer0);
      patriciaTrie0.subtree("", (-3), (-3));
      String string0 = "Entry(";
      patriciaTrie0.put("Entry(", "");
      patriciaTrie0.values();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator");
      patriciaTrie1.containsKey("");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "Entry(", (-3));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("FLgi", "FLgi", (-37));
      // Undeclared exception!
      try { 
        Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, String>, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("LC5 G", "LC5 G");
      patriciaTrie0.higherEntry("right=");
      patriciaTrie0.floorEntry("right=");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = new Integer((-1214));
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, ".$=E");
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, String>, Integer>(abstractMap_SimpleEntry1, integer0, (-1));
      abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.isEmpty();
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(abstractMap_SimpleEntry1, "", 0);
      abstractPatriciaTrie_TrieEntry1.toString();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.select(".}u6#){XGot=hNwhf");
      patriciaTrie2.put(".}u6#){XGot=hNwhf", patriciaTrie0);
      Integer integer0 = new Integer((-424));
      patriciaTrie0.put("", integer0);
      patriciaTrie2.floorEntry("");
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, (Object) null);
      Integer integer2 = new Integer(0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("Entry(", integer1);
      patriciaTrie2.put("Entry(", object0);
      patriciaTrie2.toString();
      patriciaTrie2.lowerEntry(".}u6#){XGot=hNwhf");
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer1, "9Vu", 0);
      abstractPatriciaTrie_TrieEntry0.value = "MHGOkw%Oj";
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-1057));
      // Undeclared exception!
      try { 
        patriciaTrie0.getEntry(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("LC5 G", "LC5 G");
      patriciaTrie0.selectValue("LC5 G");
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.PatriciaTrie", (Object) null);
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "CxmO", (-665));
      Integer integer0 = new Integer((-872));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "CxmO", (-851));
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.equals("CxmO");
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.selectValue("CxmO");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.nextKey("");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", (-872));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.predecessor;
      patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("skiV", patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>>("skiV", abstractMap_SimpleImmutableEntry0, 1497);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>>) null, (AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>>) null, (AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("", "keyAnalyzer");
      patriciaTrie1.ceilingEntry("");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Trie[", patriciaTrie1, (-338));
      abstractPatriciaTrie_TrieEntry0.toString();
      patriciaTrie1.entrySet();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.tailMap("key=");
      patriciaTrie1.previousKey("DzC<");
      patriciaTrie1.ceilingEntry("");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, patriciaTrie1, (-338));
      abstractPatriciaTrie_TrieEntry0.toString();
      patriciaTrie0.entrySet();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.select(".}u6#){XGot=hNwhf");
      patriciaTrie2.put(".}u6#){XGot=hNwhf", patriciaTrie0);
      patriciaTrie2.floorEntry("");
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, (Object) null);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(16);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", integer2, 16);
      String string0 = abstractPatriciaTrie_TrieEntry0.key;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", 16);
      Map.Entry.comparingByKey();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      patriciaTrie4.put("oNz", "ex`+{w^G=");
      patriciaTrie2.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.putIfAbsent("org.apache.commons.collections4.trie.AbstractBitwiseTrie", "");
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      patriciaTrie3.prefixMap("PZCtUqvVT{V]");
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-334));
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", integer0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, Integer>(abstractMap_SimpleEntry0, (Integer) null, (-1605));
      Integer integer1 = abstractPatriciaTrie_TrieEntry0.value;
      patriciaTrie4.put("PZCtUqvVT{V]", (Object) null);
      patriciaTrie4.remove((Object) "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      patriciaTrie4.previousKey("");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.putIfAbsent("", "org.apache.commons.collections4.trie.PatriciaTrie");
      patriciaTrie0.prefixMap((String) null);
      patriciaTrie1.get((Object) null);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String>((AbstractMap.SimpleImmutableEntry<Object, Object>) null, (String) null, 0);
      abstractPatriciaTrie_TrieEntry0.toString();
      Integer integer0 = new Integer((-941));
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>("}\n", integer0);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>>((Object) null, abstractMap_SimpleEntry0, 0);
      abstractPatriciaTrie_TrieEntry1.isExternalNode();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.selectValue("org.apache.commons.collections4.trie.PatriciaTrie");
      patriciaTrie2.remove((Object) "}\n");
      patriciaTrie0.previousKey("");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "Ky:hEFO<NpJzo";
      patriciaTrie0.higherEntry("Ky:hEFO<NpJzo");
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("Ky:hEFO<NpJzo", (Object) null, 16);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      Integer integer0 = new Integer((-2));
      int int0 = (-4244);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Ky:hEFO<NpJzo", integer0, (-4244));
      // Undeclared exception!
      try { 
        AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "_d&oKw8CfmE";
      patriciaTrie0.firstEntry();
      patriciaTrie0.put("_d&oKw8CfmE", "_d&oKw8CfmE");
      String string1 = "Trie[";
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(1690);
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>(comparable0, integer0, 1690);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparable1).toString();
      abstractPatriciaTrie_TrieEntry0.key = comparable1;
      abstractPatriciaTrie_TrieEntry0.parent = null;
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<String, Object>, String>((AbstractMap.SimpleImmutableEntry<String, Object>) null, "", 1690);
      abstractPatriciaTrie_TrieEntry1.key = null;
      abstractPatriciaTrie_TrieEntry1.isExternalNode();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      patriciaTrie0.incrementSize();
      PatriciaTrie<Object> patriciaTrie1 = null;
      try {
        patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.select(".}u6#){XGot=hNwhf");
      patriciaTrie2.put(".}u6#){XGot=hNwhf", patriciaTrie0);
      patriciaTrie2.floorEntry("");
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, (Object) null);
      Integer integer1 = new Integer(0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("Entry(", integer0);
      patriciaTrie2.put("Entry(", object0);
      patriciaTrie2.toString();
      patriciaTrie2.lowerEntry(".}u6#){XGot=hNwhf");
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<String>>(comparable0, "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 2118);
      Object object1 = abstractPatriciaTrie_TrieEntry0.getKey();
      AbstractBitwiseTrie.compare(object1, abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("1", (Integer) null);
      hashMap0.put("y'q;f[4?IxB:?b3D*U", (Integer) null);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.decrementSize();
      Integer integer0 = new Integer((-903));
      hashMap0.put(",(,6b;a4l~ExVccBw", integer0);
      hashMap0.put("^'2-\"?i%y6j", integer0);
      hashMap0.put("ROOT", (Integer) null);
      patriciaTrie0.lowerEntry("Trie[");
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer1 = new Integer((-903));
      hashMap1.put((String) null, integer1);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie1.put("^'2-\"?i%y6j", ",(,6b;a4l~ExVccBw");
      patriciaTrie1.toString();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("_d&oKw8CfmE", "_d&oKw8CfmE");
      patriciaTrie0.lowerEntry("_d&oKw8CfmE");
      patriciaTrie0.select("Trie[");
      patriciaTrie0.ceilingEntry("_d&oKw8CfmE");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("_d&oKw8CfmE", "_d&oKw8CfmE");
      Integer integer0 = new Integer(1072);
      patriciaTrie0.put("Tie[", integer0);
      patriciaTrie0.select("Tie[");
      patriciaTrie0.ceilingEntry("_d&oKw8CfmE");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = null;
      int int0 = 1;
      patriciaTrie0.isBitSet((String) null, 1, 1);
      String string1 = "";
      int int1 = (-3);
      patriciaTrie0.put("", (Object) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("", (-3), (-3));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.putIfAbsent("", "");
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("", (-1607), (-2278));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("<,pw'Alf\"dC/", "");
      Integer integer0 = new Integer(2137);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("<,pw'Alf\"dC/", integer0);
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-696));
      hashMap0.put("", integer2);
      patriciaTrie0.values();
      patriciaTrie0.headMap("vb#qV[");
      patriciaTrie0.put("", "<,pw'Alf\"dC/");
      Integer integer3 = new Integer(2137);
      hashMap0.put("9+IO<Gx\"ap`&+O`", integer3);
      patriciaTrie0.put("", (Object) null);
      patriciaTrie0.toString();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.lowerEntry("");
      Integer integer4 = new Integer(827);
      AbstractBitwiseTrie.compare(integer4, "<,pw'Alf\"dC/");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("", "");
      patriciaTrie0.replace("", (Object) "", (Object) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie0.putIfAbsent("", (Object) null);
      patriciaTrie0.subtree("", 155, 155);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, "", (-646));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Integer>>("", integer0, (-646));
      abstractPatriciaTrie_TrieEntry1.getKey();
      abstractPatriciaTrie_TrieEntry0.setKeyValue(integer0, "");
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", 288);
      Integer integer1 = abstractPatriciaTrie_TrieEntry2.key;
      abstractPatriciaTrie_TrieEntry0.setValue((Object) null);
      Object object0 = new Object();
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer0, (-646));
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry3;
      Integer integer2 = new Integer((-646));
      abstractPatriciaTrie_TrieEntry0.key = integer2;
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.value = object0;
      abstractPatriciaTrie_TrieEntry0.toString();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("", "");
      patriciaTrie0.size();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.keySet();
      Object object0 = new Object();
      patriciaTrie1.put("", object0);
      Object object1 = new Object();
      patriciaTrie1.toString();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie0.put("<,pw'Alf\"dC/", "<,pw'Alf\"dC/");
      Integer integer0 = new Integer((-696));
      Integer integer1 = new Integer(1);
      hashMap0.put("?(MmV-q4", integer1);
      Integer integer2 = new Integer(1);
      hashMap0.put("m!b,]_<;c&gP/..EE", (Integer) null);
      patriciaTrie0.values();
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("?(MmV-q4");
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("9+IO<Gx\"ap`&+O`", "vb#qV[");
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Object>>("m!b,]_<;c&gP/..EE", abstractMap_SimpleEntry0, (-3409));
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = abstractPatriciaTrie_TrieEntry0.value;
      patriciaTrie0.put(" GbI/Q/K]L!>x2|", abstractMap_SimpleEntry1);
      Integer integer3 = new Integer(1);
      hashMap0.put("9+IO<Gx\"ap`&+O`", integer3);
      patriciaTrie1.put("m!b,]_<;c&gP/..EE", sortedMap0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.toString();
      patriciaTrie1.lowerEntry("<,pw'Alf\"dC/");
      AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, Object>(integer0, (Object) null, 0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      patriciaTrie0.subtree("org.apache.commons.collections4.trie.PatriciaTrie", 0, 320);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("1", (Integer) null);
      hashMap0.put("y'q;f[4?IxB:?b3D*U", (Integer) null);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.subMap("]={\n", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      patriciaTrie0.decrementSize();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie1.prefixMap("1");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie3.get((Object) null);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String>((AbstractMap.SimpleImmutableEntry<Object, Object>) null, "T0$cs", (-4608));
      abstractPatriciaTrie_TrieEntry0.toString();
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("_k0|?7h~&VEY,@Que", (-1), (-2802));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("#>^&kgah~552iaP", "#>^&kgah~552iaP");
      patriciaTrie0.lastKey();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "Failed to put: ", 992);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "Failed to put: ", 992);
      abstractPatriciaTrie_TrieEntry2.equals(abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.predecessor;
      patriciaTrie0.mapIterator();
      patriciaTrie0.higherEntry((String) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-672));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.isBitSet((String) null, 1, 1);
      patriciaTrie0.put("", (Object) null);
      patriciaTrie0.subtree("", 8, 8);
      patriciaTrie0.put("Entry(", "");
      patriciaTrie0.values();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie1.containsKey("");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "Entry(", 8);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("FLgi", "Failed to put: ", 1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("Qo`mNBeCn!qI'2Lcm", "Failed to put: ", 992);
      abstractPatriciaTrie_TrieEntry2.equals("Failed to put: ");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry3);
      patriciaTrie0.mapIterator();
      // Undeclared exception!
      try { 
        patriciaTrie1.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(304);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer0, 48);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      patriciaTrie0.select("");
      patriciaTrie0.floorEntry("");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.select(".}u6#){XGot=hNwhf");
      patriciaTrie2.put(".}u6#){XGot=hNwhf", patriciaTrie0);
      patriciaTrie2.floorEntry("");
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, (Object) null);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", abstractMap_SimpleEntry0, 1);
      Integer integer1 = new Integer(1);
      Object object1 = new Object();
      patriciaTrie2.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", object1);
      patriciaTrie2.previousKey("left=");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("_d&oKw8CfmE", "_d&oKw8CfmE");
      Integer integer0 = new Integer((-1));
      patriciaTrie0.put("Id3XUL 'OV!W1Y}pD6/Q", integer0);
      patriciaTrie0.toString();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("LC5 G", "LC5 G");
      patriciaTrie0.ceilingEntry("{A?3rJ)Lp1\"vgYfF#a");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("#>^&kgah~552iaP", "#>^&kgah~552iaP");
      patriciaTrie0.lastKey();
      patriciaTrie0.put("#>^&kgah~552iaP", "#>^&kgah~552iaP");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", "Failed to put: ", 992);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "Failed to put: ", 992);
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry2.equals(abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.predecessor;
      patriciaTrie0.mapIterator();
      patriciaTrie0.higherEntry((String) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.higherEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(778);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator", integer0);
      Integer integer1 = new Integer(247);
      patriciaTrie0.put("", integer1);
      patriciaTrie0.higherEntry("");
      Integer integer2 = new Integer(247);
      patriciaTrie0.put("", integer2);
      patriciaTrie0.getOrDefault((Object) null, (Integer) null);
      patriciaTrie0.lowerEntry("");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.isBitSet((String) null, 1, 1);
      int int0 = 8;
      patriciaTrie0.put("", (Object) null);
      patriciaTrie0.subtree("", 8, 8);
      patriciaTrie0.put("Entry(", "");
      patriciaTrie0.values();
      patriciaTrie0.getEntry((Object) null);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", (-578));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      String string0 = "@%ke|swy.;Ms`{*lO[H";
      patriciaTrie1.put("@%ke|swy.;Ms`{*lO[H", "keyAnalyzer");
      // Undeclared exception!
      try { 
        patriciaTrie1.addEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null, (-948));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.putIfAbsent("", "");
      patriciaTrie1.subtree("", 247, 247);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.higherEntry("Ky:hEFO<NpJzo");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.putIfAbsent("", "org.apache.commons.collections4.trie.PatriciaTrie");
      patriciaTrie0.prefixMap((String) null);
      patriciaTrie1.get((Object) null);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, String>((AbstractMap.SimpleImmutableEntry<Object, Object>) null, (String) null, 0);
      abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      patriciaTrie0.subtree("}\n", 118, 334);
      patriciaTrie0.lastEntry();
      patriciaTrie0.prefixMap((String) null);
      patriciaTrie0.getNearestEntryForKey("LGPLZ/#[]fX&]z", 334);
      Object object0 = new Object();
      Object object1 = new Object();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0, object1, 16);
      // Undeclared exception!
      try { 
        Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.floorEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)patriciaTrie0.entrySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.merge("'HG4~K-sGf&H", set0, biFunction0);
      patriciaTrie0.select("Vk7FtSr|#);*,9.HZ");
      patriciaTrie0.put("'HG4~K-sGf&H", "Vk7FtSr|#);*,9.HZ");
      patriciaTrie0.floorEntry("Q{p");
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, object0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("Vk7FtSr|#);*,9.HZ", 0);
      Object object1 = new Object();
      Integer integer1 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(object1, integer1, 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Integer>>) comparator0);
      abstractPatriciaTrie_TrieEntry1.isExternalNode();
      patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)patriciaTrie0.entrySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.merge("'HG4~K-sGf&H", set0, biFunction0);
      patriciaTrie0.select("Vk7FtSr|#);*,9.HZ");
      patriciaTrie0.put("'HG4~K-sGf&H", "Vk7FtSr|#);*,9.HZ");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("Q{p");
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, object0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>(" is not an external Entry!", abstractMap_SimpleEntry0, 0);
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>(patriciaTrie1);
      patriciaTrie2.tailMap("Q{p");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      SortedMap<String, String> sortedMap0 = patriciaTrie0.prefixMap("");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(sortedMap0);
      patriciaTrie1.subMap("", " -> ");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      patriciaTrie0.subMap("", "");
      patriciaTrie0.previousKey("_J88!JmchizlQ8W");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "_J88!JmchizlQ8W", 2314);
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      abstractPatriciaTrie_TrieEntry0.setValue((Object) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("AG9`zn$u", "_J88!JmchizlQ8W", 2314);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      Map.Entry.comparingByValue();
      abstractMap_SimpleEntry0.setValue("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry<AbstractMap.SimpleImmutableEntry, String>, Object>>) comparator0);
      patriciaTrie0.put("", abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, (String) null, (-1941));
      abstractPatriciaTrie_TrieEntry2.key = null;
      abstractPatriciaTrie_TrieEntry2.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("L5/ G", "L5/ G");
      patriciaTrie0.ceilingEntry("^~");
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Object object0 = new Object();
      int int0 = (-2);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", object0, (-2));
      abstractPatriciaTrie_TrieEntry0.key = "org.apache.commons.collections4.trie.AbstractBitwiseTrie";
      abstractPatriciaTrie_TrieEntry0.key = null;
      abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.selectKey("X");
      patriciaTrie0.floorEntry("");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.selectKey("X9;0je 2+mV3$");
      patriciaTrie0.lowerEntry("X9;0je 2+mV3$");
      patriciaTrie0.containsKey((Object) null);
      patriciaTrie0.selectKey("");
      patriciaTrie0.lengthInBits("X9;0je 2+mV3$");
      patriciaTrie0.select("e;NKW%wpZarL[ ` E%");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie0.isBitSet((String) null, 208, 0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      // Undeclared exception!
      try { 
        patriciaTrie2.get(patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(patriciaTrie1);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(hashMap1);
      patriciaTrie2.get((Object) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>(patriciaTrie1);
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie1);
      // Undeclared exception!
      try { 
        patriciaTrie4.remove((Object) patriciaTrie2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.decrementSize();
      patriciaTrie0.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator");
      patriciaTrie0.put("", "");
      patriciaTrie0.selectValue("The offsets and lengths must be at Character boundaries");
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        patriciaTrie0.getEntry(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.higherEntry("");
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.PatriciaTrie", (Object) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("org.apache.commons.collections4.trie.PatriciaTrie", 0, 0);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      Integer integer0 = new Integer((-731));
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, Integer>((AbstractMap.SimpleEntry<String, Integer>) null, integer0, (-251));
      Map.Entry.comparingByKey();
      Integer integer1 = abstractPatriciaTrie_TrieEntry1.value;
      patriciaTrie0.lastKey();
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", (Object) null);
      patriciaTrie0.remove((Object) "");
      patriciaTrie0.previousKey("");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie0.selectValue("");
      patriciaTrie0.lowerEntry("");
      // Undeclared exception!
      try { 
        patriciaTrie1.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.ceilingEntry("}igK8#I(zwr39z5n'");
      patriciaTrie0.remove((Object) "}igK8#I(zwr39z5n'");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-2496));
      patriciaTrie0.putIfAbsent("  ", integer0);
      Integer integer1 = new Integer(2);
      patriciaTrie0.put("  ", integer1);
      patriciaTrie0.get("");
      Integer integer2 = new Integer((-2496));
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", integer2);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>>("", abstractMap_SimpleEntry0, 2);
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.selectValue("  ");
      // Undeclared exception!
      try { 
        patriciaTrie1.remove((Object) abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.AbstractMap$SimpleImmutableEntry cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer((-2225));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("Nt", integer0, 0);
      Map.Entry.comparingByKey();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      abstractPatriciaTrie_TrieEntry0.equals(integer0);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, (-1));
      patriciaTrie0.size();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie1.put("", "");
      patriciaTrie2.floorEntry("]_^Yk9`");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>((Object) null, "Trie[", (-9));
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0, (Object) null, 16);
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Trie[", abstractPatriciaTrie_TrieEntry0, (-2));
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("Trie[", "Trie[");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleEntry<String, String>>((AbstractMap.SimpleEntry<Object, Integer>) null, abstractMap_SimpleEntry1, (-2));
      abstractPatriciaTrie_TrieEntry3.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      patriciaTrie0.isBitSet("org.apache.commons.collections4.trie.AbstractBitwiseTrie", (-2802), (-2802));
      OrderedMapIterator<String, AbstractMap.SimpleEntry<String, Object>> orderedMapIterator0 = patriciaTrie0.mapIterator();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet", (-2802));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, (-2802));
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractPatriciaTrie_TrieEntry2);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(orderedMapIterator0, "]={\n");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<Object, String>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1, 0);
      abstractPatriciaTrie_TrieEntry3.isEmpty();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = "}qhWTh\\|Up\"=+3L";
      patriciaTrie0.getEntry("}qhWTh|Up\"=+3L");
      patriciaTrie0.put("}qhWTh|Up\"=+3L", "P)%C)cs");
      patriciaTrie0.headMap("}qhWTh|Up\"=+3L");
      // Undeclared exception!
      try { 
        patriciaTrie0.forEach((BiConsumer<? super String, ? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      patriciaTrie2.keySet();
      patriciaTrie2.keySet();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.keySet();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.modCount = 1;
      patriciaTrie0.mapIterator();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>(patriciaTrie1);
      patriciaTrie2.keySet();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      Integer integer0 = new Integer(128);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("VSnw>", integer0, 128);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      // Undeclared exception!
      try { 
        patriciaTrie1.followRight((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.lowerEntry("c");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.firstEntry();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer(741);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 6259);
      Object object0 = new Object();
      Integer integer1 = new Integer(741);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("g(X)*e_vIJ ;c3s@D", integer1, 0);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      abstractPatriciaTrie_TrieEntry0.equals(object0);
      abstractPatriciaTrie_TrieEntry0.bitIndex = 741;
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.selectKey("X9;0je 2+mV3$");
      patriciaTrie0.selectKey("");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      // Undeclared exception!
      try { 
        patriciaTrie2.get(patriciaTrie0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.PatriciaTrie cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.prefixMap("ZwP4kw6h[$P>%khU F");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("KlizI>.7vj R&KDs.e", "KlizI>.7vj R&KDs.e");
      patriciaTrie0.putIfAbsent("S9`y(wfdV;)i", "S9`y(wfdV;)i");
      patriciaTrie0.subtree("S9`y(wfdV;)i", 0, 0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.prefixMap("");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.size();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.previousKey("fromKey > toKey");
      String string0 = "";
      patriciaTrie0.put("", "");
      patriciaTrie0.firstEntry();
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", "fromKey > toKey");
      SortedMap<String, Object> sortedMap0 = patriciaTrie1.prefixMap("|n0T=#~wTTWm~XXa");
      // Undeclared exception!
      try { 
        patriciaTrie0.get(sortedMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.higherEntry("");
      // Undeclared exception!
      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("S9`y(wfdV;)i", "S9`y(wfdV;)i");
      patriciaTrie0.subtree("S9`y(wfdV;)i", 0, 0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.previousKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator");
      Integer integer0 = new Integer(247);
      patriciaTrie0.put("", integer0);
      patriciaTrie0.higherEntry("");
      Integer integer1 = new Integer(247);
      patriciaTrie0.getOrDefault((Object) null, integer1);
      patriciaTrie0.ceilingEntry("");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      patriciaTrie0.mapIterator();
      patriciaTrie0.higherEntry((String) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (-672));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("L5C G", "L5C G");
      patriciaTrie0.higherEntry("={(g{c");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("_d&oKw8CfmE", "4X");
      patriciaTrie0.select("4X");
      patriciaTrie0.ceilingEntry("_d&oKw8CfmE");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)patriciaTrie0.entrySet();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.merge("'HG4~K-sGf&H", set0, biFunction0);
      patriciaTrie0.select("Vk7FtSr|#);*,9.HZ");
      patriciaTrie0.put("'HG4~K-sGf&H", "Vk7FtSr|#);*,9.HZ");
      patriciaTrie0.floorEntry("Q{p");
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, object0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>(" is not an external Entry!", abstractMap_SimpleEntry0, 0);
      Integer integer1 = new Integer((-1071));
      abstractPatriciaTrie_TrieEntry0.equals(integer1);
      abstractPatriciaTrie_TrieEntry0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "[E+hH#'u=x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("S9`y(wfdV;)i", patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("S9`y(wfdV;)i", (-23), (-23));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("_d&oKw8CfmE", "_d&oKw8CfmE");
      patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", (Object) null);
      patriciaTrie0.select("_d&oKw8CfmE");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("_d&oKw8CfmE", 134, 134);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.PatriciaTrie", (Object) null);
      patriciaTrie0.subtree("org.apache.commons.collections4.trie.PatriciaTrie", 15, 15);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.higherEntry("Ky:hEFO<NpJzo");
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.PatriciaTrie", (Object) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("Ky:hEFO<NpJzo", 0, 0);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      patriciaTrie4.lengthInBits("");
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie6 = new PatriciaTrie<String>();
      patriciaTrie6.isBitSet("(\f'yTrCfBVBh'msV!U", 0, 176);
      PatriciaTrie<Object> patriciaTrie7 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie7.get("(\f'yTrCfBVBh'msV!U");
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie8 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>((Object) null, "(\f'yTrCfBVBh'msV!U");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      patriciaTrie8.put("Jf~evoIa=)w7E/;+-N^", abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        patriciaTrie8.subtree("x^d[;H~", 0, 137);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.higherEntry("Ky:hEFO<NpJzo");
      int int0 = 0;
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.PatriciaTrie", (Object) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("Ky:hEFO<NpJzo", 0, 0);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      // Undeclared exception!
      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet", 3577, 2107);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.select("");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("}\n", "}\n");
      patriciaTrie0.select("}\n");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "_d&oKw8CfmE";
      patriciaTrie0.put("_d&oKw8CfmE", "_d&oKw8CfmE");
      int int0 = 134;
      patriciaTrie0.select("_d&oKw8CfmE");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("_d&oKw8CfmE", 134, 134);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("org.apache.commons.collections4.trie.PatriciaTrie", 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie0.lengthInBits(".}u6#){XGot=hNwhf");
      patriciaTrie2.select(".}u6#){XGot=hNwhf");
      patriciaTrie2.put(".}u6#){XGot=hNwhf", patriciaTrie0);
      patriciaTrie2.floorEntry("");
      Object object0 = new Object();
      patriciaTrie2.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, "", 2080);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.floorEntry("}\n");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie1.bitsPerElement();
      Integer integer0 = new Integer(16);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 16);
      abstractPatriciaTrie_TrieEntry0.equals((Object) null);
      Integer integer1 = new Integer(16);
      abstractPatriciaTrie_TrieEntry0.setKeyValue(")", integer1);
      patriciaTrie0.put("", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie1.previousKey("N3G^\".55tU`y/)");
      patriciaTrie1.clear();
      Integer integer2 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer2, "", 0);
      abstractPatriciaTrie_TrieEntry2.bitIndex = 0;
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry2);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.headMap("N3G^\".55tU`y/)");
      Integer integer3 = new Integer(1);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(patriciaTrie0, integer3, 1);
      abstractPatriciaTrie_TrieEntry3.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.PatriciaTrie", (Object) null);
      patriciaTrie0.subtree("org.apache.commons.collections4.trie.PatriciaTrie", 0, 0);
      patriciaTrie0.containsKey((Object) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("gVWjs/-G}y3", "gVWjs/-G}y3");
      patriciaTrie0.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", 128, 128);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.subtree("org.apache.commons.collections4.trie.PatriciaTrie", 0, 0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.put("qi/}Dg37~H", "qi/}Dg37~H");
      patriciaTrie0.toString();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.trie.KeyAnalyzer").when(biFunction0).apply(anyString() , any());
      patriciaTrie1.compute("org.apache.commons.collections4.trie.KeyAnalyzer", biFunction0);
      patriciaTrie1.nextKey("org.apache.commons.collections4.trie.KeyAnalyzer");
      Map.Entry.comparingByKey();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = null;
      Integer integer0 = new Integer((-3263));
      // Undeclared exception!
      try { 
        patriciaTrie0.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("org.apache.commons.collections4.trie.KeyAnalyzer").when(biFunction0).apply(anyString() , any());
      patriciaTrie1.compute("org.apache.commons.collections4.trie.KeyAnalyzer", biFunction0);
      patriciaTrie1.nextKey("org.apache.commons.collections4.trie.KeyAnalyzer");
      patriciaTrie1.size();
      Integer integer0 = new Integer(1);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", integer0, 1);
      Map.Entry.comparingByKey();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.nextKey("");
      patriciaTrie0.floorEntry("");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 16);
      patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie1.prefixMap("");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.nextKey(" > ");
      patriciaTrie0.size();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>(")", ")", 0);
      Map.Entry.comparingByKey();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      patriciaTrie0.put("sf`H%uK^}\"M", "");
      abstractPatriciaTrie_TrieEntry0.bitIndex = 0;
      patriciaTrie1.nextEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Integer integer0 = new Integer((-3667));
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("?Z( ]aEwe", integer0, 0);
      Integer integer1 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, String>>) comparator0);
      abstractPatriciaTrie_TrieEntry0.setKeyValue("?Z( ]aEwe", integer1);
      abstractPatriciaTrie_TrieEntry0.key = null;
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie1.subMap("k\",Pu>i>", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      // Undeclared exception!
      try { 
        patriciaTrie1.subMap("+nz", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Integer integer0 = new Integer(741);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 6259);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-498));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      Object object0 = new Object();
      Integer integer1 = new Integer(741);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("g(X)*e_vIJ ;c3s@D", integer1, 0);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry0.left = null;
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      abstractPatriciaTrie_TrieEntry0.equals(object0);
      abstractPatriciaTrie_TrieEntry0.bitIndex = 741;
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.lowerEntry("");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", patriciaTrie0);
      patriciaTrie1.toString();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      // Undeclared exception!
      try { 
        patriciaTrie1.subMap((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      patriciaTrie1.headMap("org.apache.commons.collections4.trie.KeyAnalyzer");
      patriciaTrie1.keySet();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "";
      patriciaTrie0.subtree("", 2092, 0);
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie1.followLeft((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.tailMap("kaZ5&MG!#gj83 ");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.isBitSet((String) null, 1, 1);
      patriciaTrie0.put("CV_p0~fe", (Object) null);
      patriciaTrie0.subtree("CV_p0~fe", 8, 8);
      patriciaTrie0.put("Entry(", "CV_p0~fe");
      patriciaTrie0.values();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.values();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.values();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.higherEntry("m");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("m", "ZO)K", (-3));
      String string0 = abstractPatriciaTrie_TrieEntry0.value;
      patriciaTrie0.put("m", "ZO)K");
      patriciaTrie0.remove((Object) "<>61");
      patriciaTrie0.previousKey("m");
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", patriciaTrie0);
      patriciaTrie0.higherEntry("QefFy.A");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.previousKey("");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("\n", integer0, 0);
      patriciaTrie0.bitsPerElement();
      abstractPatriciaTrie_TrieEntry0.bitIndex = 0;
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.entrySet();
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 0);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
      patriciaTrie0.clear();
      patriciaTrie0.values();
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry2);
      Integer integer1 = new Integer(16);
      patriciaTrie0.putIfAbsent("", integer1);
      patriciaTrie0.put("\n", (Integer) null);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("Et9|R9N%iPfh7u.L:", "Entry(");
      abstractPatriciaTrie_TrieEntry0.key = "Entry(";
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>("]={\n", abstractMap_SimpleEntry0, 0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", abstractMap_SimpleEntry0, (-1714));
      abstractPatriciaTrie_TrieEntry3.predecessor = abstractPatriciaTrie_TrieEntry4;
      abstractPatriciaTrie_TrieEntry3.value = abstractMap_SimpleEntry0;
      abstractPatriciaTrie_TrieEntry3.isEmpty();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2, 0);
      abstractPatriciaTrie_TrieEntry5.isEmpty();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.previousKey("");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer(784);
      patriciaTrie0.put("eE@vcm3oSf", integer0);
      patriciaTrie0.firstKey();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      String string0 = ".}u6#){XGot=hNwhf";
      int int0 = 32768;
      // Undeclared exception!
      try { 
        patriciaTrie1.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie0.put("<,pw'Alf\"dC/", "<,pw'Alf\"dC/");
      Integer integer0 = new Integer((-696));
      hashMap0.put("<,pw'Alf\"dC/", integer0);
      Integer integer1 = new Integer(1);
      hashMap0.put("<,pw'Alf\"dC/", integer1);
      patriciaTrie0.values();
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.headMap("vb#qV[");
      patriciaTrie1.put("<,pw'Alf\"dC/", (Object) null);
      Integer integer2 = new Integer(4557);
      hashMap0.put("vb#qV[", integer2);
      patriciaTrie1.put("9+IO<Gx\"ap`&+O`", "9+IO<Gx\"ap`&+O`");
      patriciaTrie1.toString();
      patriciaTrie1.lowerEntry("");
      AbstractBitwiseTrie.compare(sortedMap0, sortedMap0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie0.put("<,pw'Alf\"dC/", "<,pw'Alf\"dC/");
      Integer integer0 = new Integer((-696));
      Integer integer1 = new Integer((-696));
      hashMap0.put("<,pw'Alf\"dC/", integer1);
      Integer integer2 = new Integer(1);
      hashMap0.put("", (Integer) null);
      patriciaTrie0.values();
      patriciaTrie0.headMap("");
      patriciaTrie1.put("", "");
      Integer integer3 = new Integer(1437);
      Integer integer4 = new Integer((-1320));
      hashMap0.put("=", integer4);
      patriciaTrie1.put("vb#qV[", "=");
      patriciaTrie1.toString();
      patriciaTrie0.lowerEntry("invalid lookup: ");
      AbstractBitwiseTrie.compare("vb#qV[", "Trie[2]={\n  RootEntry(key= [-1], value=, parent=null, left=vb#qV[ [9], right=null, predecessor=vb#qV[ [9])\n  Entry(key=vb#qV[ [9], value==, parent=ROOT, left=ROOT, right=vb#qV[ [9], predecessor=vb#qV[ [9])\n}\n");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("H*", "H*", (-3));
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Integer integer0 = new Integer(74);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, 74);
      Integer integer1 = new Integer(74);
      Integer integer2 = new Integer(74);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer1, integer2, 32768);
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry1.toString();
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Integer>((AbstractMap.SimpleEntry<Object, String>) null, integer1, 14);
      Integer integer3 = new Integer((-272));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, Integer>((AbstractMap.SimpleEntry<Object, String>) null, integer3, 0);
      abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry3;
      abstractPatriciaTrie_TrieEntry2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-903));
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      String string0 = "n{B.mG";
      String string1 = null;
      // Undeclared exception!
      try { 
        patriciaTrie1.containsKey(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = null;
      hashMap0.put("1", (Integer) null);
      Integer integer1 = new Integer((-4608));
      hashMap0.put("y'q;f[4?IxB:?b3D*U", integer1);
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie0.decrementSize();
      int int0 = (-903);
      Integer integer2 = new Integer((-903));
      hashMap0.put(",(,6b;a4l~ExVccBw", integer2);
      hashMap0.put("^'2-\"?i%y6j", integer2);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("Trie[");
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      String string0 = "keyAnalyzer";
      patriciaTrie1.put("Trie[", "Trie[");
      patriciaTrie1.put("^'2-\"?i%y6j", (Object) null);
      Integer integer3 = new Integer((-1514));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", integer3, 0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.right;
      abstractPatriciaTrie_TrieEntry1.toString();
      // Undeclared exception!
      try { 
        patriciaTrie1.followRight((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      patriciaTrie0.comparator();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", (-3338));
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      patriciaTrie0.clear();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.clear();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Integer integer0 = new Integer((-1576));
      Integer integer1 = new Integer((-1576));
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer1, (-1232));
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, (-1232));
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      Integer integer2 = new Integer((-1576));
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.setValue(integer2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator1);
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0.predecessor;
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.left;
      abstractPatriciaTrie_TrieEntry2.isExternalNode();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.bitIndex("G'qEUT-|UV6X5A|l", "G'qEUT-|UV6X5A|l");
      patriciaTrie0.comparator();
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      String string0 = "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer";
      patriciaTrie1.clear();
      patriciaTrie1.floorEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      // Undeclared exception!
      try { 
        patriciaTrie1.containsKey(abstractPatriciaTrie_TrieEntry1.left);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.select(".}u6#){XGot=hNwhf");
      patriciaTrie2.put(".}u6#){XGot=hNwhf", patriciaTrie0);
      patriciaTrie2.floorEntry("");
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, (Object) null);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Object>>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", abstractMap_SimpleEntry0, 1);
      Integer integer1 = new Integer(1);
      abstractPatriciaTrie_TrieEntry0.equals("+[rytx>%9j Z");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>(" cx's|", " cx's|", 0);
      abstractPatriciaTrie_TrieEntry0.setKeyValue(" cx's|", " cx's|");
      abstractPatriciaTrie_TrieEntry0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie0.put("<,pw'Alf\"dC/", "<,pw'Alf\"dC/");
      Integer integer0 = new Integer((-696));
      hashMap0.put("<,pw'Alf\"dC/", integer0);
      Integer integer1 = new Integer(1);
      hashMap0.put("<,pw'Alf\"dC/", integer1);
      patriciaTrie0.values();
      patriciaTrie0.headMap("vb#qV[#");
      Integer integer2 = new Integer(4557);
      hashMap0.put("vb#qV[#", integer2);
      patriciaTrie1.put("9+IO<Gx\"ap`&+O`", "9+IO<Gx\"ap`&+O`");
      patriciaTrie1.toString();
      patriciaTrie1.lowerEntry("");
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer((-903));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put(",(,6b;a4l~ExVccBw", integer0);
      hashMap0.put("", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      patriciaTrie1.put("7>_1!}h-X;}iU[=8", (Integer) null);
      patriciaTrie1.lowerEntry("$1e");
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      patriciaTrie0.ceilingEntry("");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.floorEntry("");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", (-162));
      patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("", (Object) null);
      Integer integer0 = new Integer((-3));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>(", ", integer0, 944);
      Integer integer1 = new Integer(2094);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer1, 944);
      Integer integer2 = new Integer(1812);
      abstractPatriciaTrie_TrieEntry1.setKeyValue("Failed to put: ", integer0);
      Integer integer3 = new Integer(1812);
      abstractPatriciaTrie_TrieEntry1.equals(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer1, 944);
      abstractPatriciaTrie_TrieEntry2.toString();
      patriciaTrie0.containsKey("Entry(key= [944], value=2094, parent=null, left= [944], right=null, predecessor= [944])");
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("_d&oKw8CfmE", "_d&oKw8CfmE");
      patriciaTrie0.put("Trie[", "_d&oKw8CfmE");
      patriciaTrie0.floorEntry("key=");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("org.apache.comm<ns.collections4.trie.PatriciaTrie", "org.apache.comm<ns.collections4.trie.PatriciaTrie");
      patriciaTrie0.floorEntry("]6=D;,V6l:w");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("#.}ot)%o&Z", "#.}ot)%o&Z");
      patriciaTrie0.ceilingEntry("jKs3u*Weuz?Y");
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.mapIterator();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("LC5 G", "LC5 G");
      patriciaTrie0.ceilingEntry("");
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("_d&oKw8CfmE", "_d&oKw8CfmE");
      patriciaTrie0.lastKey();
      patriciaTrie0.select("_d&oKw8CfmE");
      patriciaTrie0.floorEntry("_d&oKw8CfmE");
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(hashMap0);
      patriciaTrie1.lastEntry();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      patriciaTrie0.containsKey((Object) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("n{B.mG", "n{B.mG");
      patriciaTrie1.put("n{B.mG", "n{B.mG");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("_d&oKw8CfmE", "_d&oKw8CfmE");
      patriciaTrie0.select("Trie[");
      patriciaTrie0.floorEntry("_d&oKw8CfmE");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.containsKey("#)X");
      patriciaTrie1.prefixMap("");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("#>^&kgah~552iaP", "#>^&kgah~552iaP");
      patriciaTrie0.lastKey();
      patriciaTrie0.put("#>^&kgah~552iaP", "#>^&kgah~552iaP");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie1.containsKey("FLgi");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("aqsr-S+ _79kMUN{x", "Failed to put: ", 992);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "Failed to put: ", 992);
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry2.equals(abstractPatriciaTrie_TrieEntry0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry1.predecessor;
      patriciaTrie2.previousEntry(abstractPatriciaTrie_TrieEntry3);
      patriciaTrie0.mapIterator();
      // Undeclared exception!
      try { 
        patriciaTrie2.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("RHz3pgU==KTB:N", "RHz3pgU==KTB:N");
      patriciaTrie0.putIfAbsent("RHz3pgU==KTB:N", "RHz3pgU==KTB:N");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", 0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(patriciaTrie0, (String) null);
      patriciaTrie0.put("rG-!]tM-{1O@yeD", abstractMap_SimpleEntry1);
      Integer integer1 = new Integer((-2));
      patriciaTrie0.put("rG-!]tM-{1O@yeD", abstractMap_SimpleEntry1);
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>(patriciaTrie0, integer1, (-2));
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry1.setKeyValue("rG-!]tM-{1O@yeD", integer1);
      abstractPatriciaTrie_TrieEntry1.getKey();
      patriciaTrie0.get("rG-!]tM-{1O@yeD");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.subtree("", (-2), (-2));
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = null;
      // Undeclared exception!
      try { 
        patriciaTrie0.putIfAbsent((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      int int0 = 2430;
      String string0 = "";
      hashMap0.put("", (Integer) null);
      Integer integer0 = new Integer(2430);
      String string1 = "  ";
      hashMap0.put("  ", (Integer) null);
      hashMap0.put((String) null, integer0);
      PatriciaTrie<Integer> patriciaTrie0 = null;
      try {
        patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("G(D\"R]=}P<Yg0-");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Integer integer0 = new Integer((-604));
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer0, (-604));
      int int0 = 0;
      Integer integer1 = new Integer(1);
      Integer integer2 = new Integer((-604));
      int int1 = 0;
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer0, integer2, 0);
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry0.setValue(integer1);
      Integer integer3 = new Integer(1);
      // Undeclared exception!
      try { 
        Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<AbstractMap.SimpleEntry, String>, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}
