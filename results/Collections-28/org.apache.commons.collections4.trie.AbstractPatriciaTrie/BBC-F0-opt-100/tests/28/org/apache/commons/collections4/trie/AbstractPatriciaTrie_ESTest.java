/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:58:21 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("wo!q(aS'OyT!", "l_Gr?6#{f'<k/(-9");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("jSK+'\"ql;_wU1", "jSK+'\"ql;_wU1");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "jSK+'\"ql;_wU1");
      assertNull(string2);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(any() , anyString());
      String string3 = patriciaTrie0.compute("jSK+'\"ql;_wU1", biFunction0);
      assertNull(string3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-246));
      assertEquals((-246), (int)integer0);
      assertNotNull(integer0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer1 = new Integer((-246));
      assertEquals((-246), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = hashMap0.put("The offsets and lengths must be at Character boundaries", integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer3 = new Integer(381);
      assertEquals(381, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = patriciaTrie1.put("", integer3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer4);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer5 = new Integer(0);
      assertEquals(0, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      
      Integer integer6 = patriciaTrie1.put("z*l_x17UXS~a9EW", integer5);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer6);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      
      Integer integer7 = patriciaTrie1.put("invalid lookup: ", (Integer) null);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer7);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("invalid lookup: ");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      
      Integer integer8 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals((-246), (int)integer8);
      assertNotNull(integer8);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer3));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.lowerEntry("lW\"COfB`GH9VQ>*dH:");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-246));
      assertEquals((-246), (int)integer0);
      assertNotNull(integer0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer1 = new Integer((-246));
      assertEquals((-246), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = hashMap0.put("The offsets and lengths must be at Character boundaries", integer1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer3 = patriciaTrie1.put("invalid lookup: ", (Integer) null);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer3);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("invalid lookup: ");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      
      Integer integer4 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals((-246), (int)integer4);
      assertNotNull(integer4);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(integer4.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.lowerEntry("lW\"COfB`GH9VQ>*dH:");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = "%*smJ2$#DH_/ ";
      Integer integer0 = new Integer(1360);
      assertEquals(1360, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 0;
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("%*smJ2$#DH_/ ", integer0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(1360);
      assertEquals(1360, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = patriciaTrie0.put("%*smJ2$#DH_/ ", integer1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(integer2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = patriciaTrie0.put("=", integer3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(integer4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("%*smJ2$#DH_/ ", integer3, 1259);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.equals("%*smJ2$#DH_/ ");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(boolean0);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("%*smJ2$#DH_/ ", integer1, 1360);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer3));
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry2;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", integer0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = abstractPatriciaTrie_TrieEntry0.setKeyValue("9(p n", "=$?'u[hJx%puU,");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertEquals(10, object0);
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, 0);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Comparable<Object>>(comparable0, comparable0, 1948);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Object object1 = abstractPatriciaTrie_TrieEntry3.getValue();
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(object1);
      
      Object object2 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", object1);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNull(object2);
      
      String string0 = patriciaTrie1.lastKey();
      assertNull(string0);
      
      String string1 = patriciaTrie1.nextKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("must have a from or to!", "must have a from or to!");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("org.apache.commons.sollctios4.trxe.AbstractPatricia.rie$TrieEntry", "org.apache.commons.sollctios4.trxe.AbstractPatricia.rie$TrieEntry");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("0o3rEJ");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry0);
      assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie1.firstEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("wXx:FqMtsU82?lGXpq", "x1R$,_5");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("org.apache.commons.collctions4.trie.bstractPatriciaTrie$TrieMpIterator", "b/K{@PK;<XSd");
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("org.apache.commons.collctions4.trie.bstractPatriciaTrie$TrieMpIterator", "\n");
      assertEquals("b/K{@PK;<XSd", string3);
      assertNotNull(string3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("\n", 0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(4031);
      assertEquals(4031, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.replace("", integer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(integer1);
      
      Integer integer2 = new Integer(11);
      assertEquals(11, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie1.put("", integer2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(integer3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie2.prefixMap("");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.floorEntry("N");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie4);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("$s7k{cL", "Jo&Ec^TsKWvo(2Eb");
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, Object>> comparator1 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      assertNotNull(comparator1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>("", abstractMap_SimpleEntry0, 11);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry2.predecessor = null;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie4.nextEntryImpl(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("]>v^M';ST#3$qd", "]>v^M';ST#3$qd", (-2));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 808);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string0 = patriciaTrie0.put("]>v^M';ST#3$qd", "]>v^M';ST#3$qd");
      assertEquals("]>v^M';ST#3$qd", string0);
      assertNotNull(string0);
      
      String string1 = patriciaTrie0.put("", "]>v^M';ST#3$qd");
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      String string0 = "\n";
      int int0 = (-2188);
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("deJle7te", (String) null);
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("HfO");
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("dele7Ute", (String) null);
      assertNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.put("keyAnalyzer", (Object) null);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("HfO");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("Zoi(+J+vXU", "Zoi(+J+vXU");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertTrue(set0.contains("Zoi(+J+vXU"));
      
      boolean boolean0 = hashMap0.remove((Object) set0, (Object) "");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(boolean0);
      assertFalse(set0.contains(""));
      assertTrue(set0.contains("Zoi(+J+vXU"));
      
      String string1 = patriciaTrie0.put("", "The offsets and lengths must be at Character boundaries");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      String string2 = patriciaTrie0.nextKey("The offsets and lengths must be at Character boundaries");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string2);
      
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      Comparator<? super String> comparator0 = patriciaTrie2.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string0 = patriciaTrie0.put("keyAnalyzer", "keyAnalyzer");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("keyAnalyzer");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = hashMap0.getOrDefault(patriciaTrie0, "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = hashMap0.remove((Object) patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("keyAnalyzer", patriciaTrie1, 1072);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry2;
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry3;
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.predecessor.isInternalNode());
      
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "sMf}`n-E`K&";
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("sMf}`n-E`K&");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparable<String> comparable0 = patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
      assertNull(comparable0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.getEntry("sMf}`n-E`K&");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Comparable<String> comparable1 = patriciaTrie0.put(" -> ", "sMf}`n-E`K&");
      assertNull(comparable1);
      
      String string1 = "";
      SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie0.prefixMap("");
      assertEquals(2, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie1.put(" -> ", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("sMf}`n-E`K&", (Integer) null, 1);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Integer integer2 = patriciaTrie1.put("p", (Integer) null);
      assertNull(integer2);
      
      Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.firstEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Integer integer3 = new Integer(32768);
      assertEquals(32768, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = patriciaTrie1.put("IsH8pULTx", integer3);
      assertNull(integer4);
      assertFalse(integer3.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry2, 32768);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      
      abstractPatriciaTrie_TrieEntry2.bitIndex = 1;
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      Comparator<Map.Entry<Integer, String>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry2.parent;
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry3));
      
      Integer integer5 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry5);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNull(integer5);
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry3));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.remove((Object) sortedMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Object object0 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry((String) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object1 = patriciaTrie0.put("", (Object) null);
      assertNull(object1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("A7(1oQHf@Vw");
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      
      boolean boolean0 = patriciaTrie0.containsKey("org.apache.commons.collections4.trie.PatriciaTrie");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("rqhNs?", "rqhNs?", 124);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = abstractPatriciaTrie_TrieEntry0.setValue("rqhNs?");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("rqhNs?", object0);
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Key cannot be null", "rqhNs?", 1198);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("%b0IR]])@_", "rqhNs?", 1223);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.right.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.right.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry3);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry3));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry3);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry5);
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry4));
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry3));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string0 = patriciaTrie0.put("+0u#92hD", "");
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      Set<String> set1 = patriciaTrie1.keySet();
      assertNotSame(set1, set0);
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      assertNotNull(set1);
      assertTrue(set1.contains("+0u#92hD"));
      assertFalse(set1.contains(""));
      assertTrue(set1.equals((Object)set0));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.getNearestEntryForKey("", 1045);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("must have a from or to!", "<=6D?w+Iu%");
      assertNull(string0);
      
      String string1 = patriciaTrie0.nextKey("}\n");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("}\n", (String) null);
      assertNull(string2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("zx(*w)5@J_!LXKwcu");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie2.prefixMap("Ie9qSHlqCB -s");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("org.apache.commons.collctions4.trie.bstractPatriciaTrie$TrieMpIterator", "b/K{@PK;<XSd");
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("org.apache.commons.collctions4.trie.bstractPatriciaTrie$TrieMpIterator", "\n");
      assertEquals("b/K{@PK;<XSd", string2);
      assertNotNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("\n", 0, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = patriciaTrie1.put("pXUdtQ}U", "\n");
      assertNull(string0);
      
      String string1 = patriciaTrie1.nextKey("");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getEntry("pXUdtQ}U");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.floorEntry("`\n");
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(3401);
      assertEquals(3401, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put("", integer1);
      assertNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(integer0.equals((Object)integer1));
      
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.bitIndex = 3401;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = null;
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.incrementSize();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      // Undeclared exception!
      try { 
        patriciaTrie1.higherEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("#S9Iwa'4CM40VbymbA4", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("#S9Iwa'4CM40VbymbA4", "#S9Iwa'4CM40VbymbA4");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie0.put("|T14|G?}ZF?J:TR&Px", "p}i");
      assertNull(string2);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.headMap("\"@Wn|QmU1ze8)s*");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("he");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string3 = patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("#S9Iwa'4CM40VbymbA4", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie1.put("#S9Iwa'4CM40VbymbA4", object0);
      assertNull(object1);
      
      Object object2 = patriciaTrie1.put("p}i", "|T14|G?}ZF?J:TR&Px");
      assertNull(object2);
      
      Collection<String> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains("p}i"));
      assertFalse(collection0.contains(string1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("he", "", 2);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, "", 2);
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      abstractPatriciaTrie_TrieEntry3.parent = abstractPatriciaTrie_TrieEntry4;
      assertTrue(abstractPatriciaTrie_TrieEntry3.parent.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.parent.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry3.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry6 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry5);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry6);
      
      PatriciaTrie<Comparable<String>> patriciaTrie2 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie2);
      
      Comparable<String> comparable0 = patriciaTrie2.put("", "");
      assertNull(comparable0);
      
      Object object3 = patriciaTrie1.selectValue("");
      assertSame(object3, object0);
      assertNotNull(object3);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry7 = patriciaTrie2.floorEntry("?!.S?\"F^i=lV");
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      
      Object object4 = patriciaTrie1.put("#S9Iwa'4CM40VbymbA4", "");
      assertSame(object4, object3);
      assertSame(object4, object0);
      assertNotNull(object4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry8 = patriciaTrie1.ceilingEntry("Hw9+Cc");
      assertNotSame(abstractPatriciaTrie_TrieEntry8, abstractPatriciaTrie_TrieEntry5);
      assertFalse(abstractPatriciaTrie_TrieEntry8.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry8.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry8.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry8);
      assertFalse(abstractPatriciaTrie_TrieEntry8.equals((Object)abstractPatriciaTrie_TrieEntry5));
      
      Object object5 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry8);
      assertNotSame(abstractPatriciaTrie_TrieEntry8, abstractPatriciaTrie_TrieEntry5);
      assertTrue(abstractPatriciaTrie_TrieEntry8.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry8.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry8.isInternalNode());
      assertEquals("|T14|G?}ZF?J:TR&Px", object5);
      assertNotNull(object5);
      assertFalse(abstractPatriciaTrie_TrieEntry8.equals((Object)abstractPatriciaTrie_TrieEntry5));
      assertFalse(object5.equals((Object)string1));
      assertFalse(object5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("0qN`MD2 Aa,i@.u", "Cannot determine prefix outside of Character boundaries");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("org.apache.commons.collections4.trie.KeyAnalyzer", 10, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      boolean boolean0 = hashMap0.remove((Object) set0, (Object) "");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(boolean0);
      assertFalse(set0.contains(""));
      
      String string0 = patriciaTrie0.put("", "The offsets and lengths must be at Character boundaries");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      String string1 = patriciaTrie0.nextKey("The offsets and lengths must be at Character boundaries");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      Comparator<? super String> comparator0 = patriciaTrie2.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-249));
      assertEquals((-249), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put("`", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Integer integer2 = patriciaTrie0.put(";,qWe", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry(";,qWe");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string0 = patriciaTrie2.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(string0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", 0, 0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string1 = patriciaTrie2.selectValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", string1);
      assertNotNull(string1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.remove((Object) null);
      assertNull(object0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", (-7));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.nextEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      String string0 = patriciaTrie1.put("<>Uvj|+xM@zm+G", "<>Uvj|+xM@zm+G");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 2676);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.right;
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.getEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry6 = patriciaTrie2.higherEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry6);
      
      Integer integer0 = new Integer(2676);
      assertEquals(2676, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, String> abstractPatriciaTrie_TrieEntry7 = new AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, String>(integer0, "", 2676);
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Integer, Object>> comparator1 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      assertNotNull(comparator1);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry7.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-249));
      assertEquals((-249), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put("`", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.toString();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("Trie[1]={\n  Entry(key=` [9], value=-249, parent=ROOT, left=ROOT, right=` [9], predecessor=` [9])\n}\n", string0);
      assertNotNull(string0);
      
      Integer integer2 = patriciaTrie0.put(";,qWe", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer3 = patriciaTrie1.put("left=", integer0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer4 = patriciaTrie1.put("Key cannot be null", (Integer) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry(";,qWe");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-365));
      assertEquals((-365), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "5k-Sd)n_p", (-365));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", (-365));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string0 = abstractPatriciaTrie_TrieEntry1.setValue("$axAN");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", string0);
      assertNotNull(string0);
      
      Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(boolean0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      Object object0 = patriciaTrie1.put("$axAN", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Object object1 = patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertEquals("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", object1);
      assertNotNull(object1);
      assertTrue(object1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("L=$EID>,@Snr<MKI", "L=$EID>,@Snr<MKI");
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      int int0 = 836;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (String) null, 836);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      abstractPatriciaTrie_TrieEntry0.key = "";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.firstEntry();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string2 = patriciaTrie1.lastKey();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("L=$EID>,@Snr<MKI", string2);
      assertNotNull(string2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
      
      String string3 = patriciaTrie0.put("=", (String) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.putIfAbsent((String) null, "NzXS BX:o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string0 = patriciaTrie2.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(string0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer0 = patriciaTrie0.get((Object) null);
      assertNull(integer0);
      
      String string1 = patriciaTrie2.put("g&Vm(H,q.,P.d(", "x\"::/;! ?.y{l");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(string1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.subtree((String) null, 256, 0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "org.apache.commons.collctions4.trie.bstractPat`iciaTrie$TrieMpIteraor");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("org.apache.commons.collctions4.trie.bstractPat`iciaTrie$TrieMpIteraor", "", (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Comparable<String> comparable0 = abstractPatriciaTrie_TrieEntry1.value;
      assertEquals("", comparable0);
      assertNotNull(comparable0);
      
      boolean boolean0 = patriciaTrie0.containsKey(comparable0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(boolean0);
      
      String string1 = patriciaTrie0.put("org.apache.commons.collctions4.trie.bstractPat`iciaTrie$TrieMpIteraor", "org.apache.commons.collctions4.trie.bstractPat`iciaTrie$TrieMpIteraor");
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.higherEntry("?qnJ1~CI\"dcb<?[G");
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = "";
      String string1 = patriciaTrie0.put("", "");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      boolean boolean0 = patriciaTrie0.containsKey((Object) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(boolean0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      String string2 = patriciaTrie0.put("", "f-'j_");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = patriciaTrie0.put("", "`\"Br3R&+");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertEquals("f-'j_", string3);
      assertNotNull(string3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = patriciaTrie0.get("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertEquals("`\"Br3R&+", string4);
      assertNotNull(string4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.forEach(biConsumer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("!.");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      String string0 = patriciaTrie3.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(string0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Integer integer0 = patriciaTrie1.get((Object) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(integer0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", 256, 0);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "Y\\|O8";
      Integer integer0 = new Integer(768);
      assertEquals(768, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.replace("Y|O8", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer((-297));
      assertEquals((-297), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("Y|O8", integer2);
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry(" =:8|KLW0M^>{");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = patriciaTrie0.computeIfPresent("", biFunction0);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.getNearestEntryForKey(" -> ", 2);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry(" -> ");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie1.putIfAbsent("", integer0);
      assertNull(integer1);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.tailMap(" -> ");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.lowerEntry("=nx~,");
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>(" -> ", (String) null, 2);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      abstractPatriciaTrie_TrieEntry4.key = "";
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry4.equals(patriciaTrie2);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(boolean0);
      
      abstractPatriciaTrie_TrieEntry4.bitIndex = (-5);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry4.bitIndex = 2;
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.left;
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry6 = patriciaTrie2.previousEntry(abstractPatriciaTrie_TrieEntry5);
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry6);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry7 = patriciaTrie1.getNearestEntryForKey("b_X|Iq", 3516);
      assertSame(abstractPatriciaTrie_TrieEntry7, abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
      
      Object object1 = patriciaTrie0.replace("]#Ze{sWDV ", (Object) null);
      assertNull(object1);
      
      SortedMap<String, Object> sortedMap1 = patriciaTrie0.prefixMap("");
      assertTrue(sortedMap1.isEmpty());
      assertEquals(0, sortedMap1.size());
      assertNotNull(sortedMap1);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, String>) null, abstractPatriciaTrie_TrieEntry5, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie1.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(1814, 1814);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1814);
      assertEquals(1814, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put("l<iJZ\"JACURMqh", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>(">?=ne/wpm'", patriciaTrie0, 1814);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = hashMap0.remove((Object) null, (Object) integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(object0, abstractMap_SimpleEntry0, 1814);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Object object1 = abstractPatriciaTrie_TrieEntry1.key;
      assertSame(object1, object0);
      assertNotNull(object1);
      
      Object object2 = abstractPatriciaTrie_TrieEntry0.setValue(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(object2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 16);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      Integer integer2 = new Integer(622);
      assertEquals(622, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = hashMap0.put((String) null, integer2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer4 = new Integer(1814);
      assertEquals(1814, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      
      Integer integer5 = patriciaTrie1.put("l<iJZ\"JACURMqh", integer4);
      assertNull(integer5);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.higherEntry("l<iJZ\"JACURMqh");
      assertNull(abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie0.lastEntry();
      assertNotSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertFalse(abstractPatriciaTrie_TrieEntry5.equals((Object)abstractPatriciaTrie_TrieEntry2));
      
      String string0 = patriciaTrie0.nextKey("l<iJZ\"JACURMqh");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(">?=ne/wpm'", integer4);
      assertNotNull(abstractMap_SimpleEntry1);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, AbstractMap.SimpleEntry<String, Integer>> abstractPatriciaTrie_TrieEntry6 = new AbstractPatriciaTrie.TrieEntry<Comparable<Integer>, AbstractMap.SimpleEntry<String, Integer>>(integer4, abstractMap_SimpleEntry1, 16);
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry6);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      
      String string1 = abstractPatriciaTrie_TrieEntry6.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry6.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry6.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry6.isInternalNode());
      assertEquals("Entry(key=1814 [16], value=>?=ne/wpm'=1814, parent=null, left=1814 [16], right=null, predecessor=1814 [16])", string1);
      assertNotNull(string1);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry7 = patriciaTrie1.floorEntry("ns");
      assertFalse(abstractPatriciaTrie_TrieEntry7.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry7.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry7.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry7);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("+S4p`8n`b~a+QaFI", integer0);
      assertNull(integer1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      String string0 = patriciaTrie1.nextKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry2, 2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry3);
      assertSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("invalid lookup: ", "bJPvey2Xlv0");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("ugA?0vXC2<0nW5]J]@");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie0.selectKey("ugA?0vXC2<0nW5]J]@");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("invalid lookup: ", string1);
      assertNotNull(string1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie2);
      
      String string2 = patriciaTrie0.remove((Object) "ugA?0vXC2<0nW5]J]@");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.lowerEntry("invalid lookup: ");
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("(CXB04Vc uV", (String) null);
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
      assertNull(string1);
      
      String string2 = "Dd";
      String string3 = patriciaTrie0.put("=", (String) null);
      assertNull(string3);
      
      int int0 = 2;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("Dd", 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.subMap("]. b", "(CXB04Vc uV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>((Object) null, patriciaTrie0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put(",R D@;O3IrU_sL6", abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      String string0 = "nM<QSE";
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry2 = patriciaTrie0.put("nM<QSE", (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      assertNull(abstractMap_SimpleImmutableEntry2);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry3 = patriciaTrie0.remove((Object) null);
      assertNull(abstractMap_SimpleImmutableEntry3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      String string1 = "";
      int int0 = (-343);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, "", (-343));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      Object object0 = patriciaTrie1.put("", "");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      Integer integer0 = new Integer((-343));
      assertEquals((-343), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("OafB%MkWb^", hashMap0, 2175);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Map.Entry<Object, String>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      HashMap hashMap1 = (HashMap)abstractPatriciaTrie_TrieEntry0.setKeyValue("OafB%MkWb^", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry0, 304);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.floorEntry("Trie[");
      assertNotSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.equals((Object)abstractPatriciaTrie_TrieEntry1));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(96);
      assertEquals(96, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("qjaxdvssb(w*+3", integer0);
      assertNull(integer1);
      
      Collection<Integer> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains(96));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Map.Entry<String, Integer> map_Entry0 = patriciaTrie1.select("YCn:b>8");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotNull(map_Entry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.toString();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("Trie[1]={\n  Entry(key=qjaxdvssb(w*+3 [9], value=96, parent=ROOT, left=ROOT, right=qjaxdvssb(w*+3 [9], predecessor=qjaxdvssb(w*+3 [9])\n}\n", string0);
      assertNotNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = null;
      Integer integer2 = new Integer(96);
      assertEquals(96, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, integer2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer(727);
      assertEquals(727, (int)integer0);
      assertNotNull(integer0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      Integer integer1 = new Integer((-1437));
      assertEquals((-1437), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put("RC&QK73\"?3qTwh)", integer1);
      assertNotSame(hashMap1, hashMap0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(integer2);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("RC&QK73\"?3qTwh)");
      assertNotSame(hashMap1, hashMap0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put(",2eA4=WFKJ", ",2eA4=WFKJ");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      String string1 = patriciaTrie1.firstKey();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(",2eA4=WFKJ", string1);
      assertNotNull(string1);
      
      String string2 = hashMap0.put(",2eA4=WFKJ", "*Hv#Q)]yy4mX");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(",2eA4=WFKJ", string2);
      assertNotNull(string2);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertNotNull(patriciaTrie2);
      
      String string3 = hashMap0.put("vY2^~L", (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string3);
      
      int int0 = patriciaTrie2.bitIndex(",2eA4=WFKJ", ",2eA4=WFKJ");
      assertEquals((-2), int0);
      
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("{Iw", (Object) null);
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<String, Object>> comparator1 = (Comparator<Map.Entry<String, Object>>)Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      assertNotNull(comparator1);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = patriciaTrie2.put("]{MhU)|sx>wX]", abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry2 = patriciaTrie2.get(",2eA4=WFKJ");
      assertNull(abstractMap_SimpleImmutableEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      Integer integer0 = patriciaTrie3.compute("", biFunction0);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNull(integer0);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      
      PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>(patriciaTrie4);
      assertNotNull(patriciaTrie5);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie5.subtree("'5W4>M5", 882, (-2));
      assertNotSame(patriciaTrie3, patriciaTrie5);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie5);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNotSame(patriciaTrie5, patriciaTrie3);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      
      OrderedMapIterator<String, String> orderedMapIterator0 = patriciaTrie0.mapIterator();
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertTrue(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      // Undeclared exception!
      try { 
        patriciaTrie3.containsKey(patriciaTrie4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(11);
      assertEquals(11, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie1);
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Comparable<Object> comparable1 = patriciaTrie1.remove((Object) null);
      assertNull(comparable1);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.lastEntry();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "The offsets and lengths must be at Character boundaries");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = patriciaTrie0.selectKey("  ");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie0.previousKey("The offsets and lengths must be at Character boundaries");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(4721);
      assertEquals(4721, (int)integer0);
      assertNotNull(integer0);
      
      String string3 = patriciaTrie0.remove((Object) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string3);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.subMap("  ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("t%9-ZIok7%", "t%9-ZIok7%");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = "";
      String string2 = patriciaTrie0.selectKey("");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("t%9-ZIok7%", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<String, Integer>>> comparator1 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<String, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, Integer>>) comparator0);
      assertNotNull(comparator1);
      
      String string3 = abstractPatriciaTrie_TrieEntry0.setKeyValue("", ")IZp37n/]$2CeCO\"");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("t%9-ZIok7%", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 1096);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("]={\n", "]={\n");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = hashMap0.put("]={\n", "YH;'IC`'09)QS'|");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("]={\n", string1);
      assertNotNull(string1);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie0.tailMap("YH;'IC`'09)QS'|");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      String string2 = patriciaTrie0.put("EI\"lT", "bt`kd=;twS");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, (-1202));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("]={\n", object0, (-1202));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string3 = abstractPatriciaTrie_TrieEntry1.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      int int0 = patriciaTrie1.size();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, int0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Comparable<Object>> patriciaTrie2 = new PatriciaTrie<Comparable<Object>>();
      assertNotNull(patriciaTrie2);
      
      hashMap0.putAll(patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable1).toString();
      Comparable<Object> comparable2 = patriciaTrie2.put("jvDh4*cVa", comparable1);
      assertNull(comparable2);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("fromKey > toKey", comparable0, 497);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = hashMap0.put("jvDh4*cVa", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      
      Comparable<Object> comparable3 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("fromKey > toKey", comparable3, (-310));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      
      Comparable<Object> comparable4 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable4).toString();
      Comparable<Object> comparable5 = patriciaTrie2.put("fromKey > toKey", comparable4);
      assertNull(comparable5);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-249));
      assertEquals((-249), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put("`", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("]U_0)\"t&.^k9j9.-", integer2);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer4 = new Integer(1712);
      assertEquals(1712, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      
      Integer integer5 = patriciaTrie1.put("", (Integer) null);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer5);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("`");
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("/?L26/8 ;=8e");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie0.clear();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("s%Q;T**,", "", 1801);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.subtree("", 1, (-1650));
      assertNull(abstractPatriciaTrie_TrieEntry3);
      
      abstractPatriciaTrie_TrieEntry2.value = "s%Q;T**,";
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<String, Integer>>> comparator1 = (Comparator<Map.Entry<Object, AbstractMap.SimpleEntry<String, Integer>>>)Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleEntry<String, Integer>>) comparator0);
      assertNotNull(comparator1);
      
      abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.parent.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.parent.isInternalNode());
      
      String string1 = abstractPatriciaTrie_TrieEntry2.setKeyValue("s%Q;T**,", (String) null);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertEquals("s%Q;T**,", string1);
      assertNotNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry2, 1801);
      assertNotSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      assertFalse(abstractPatriciaTrie_TrieEntry4.equals((Object)abstractPatriciaTrie_TrieEntry0));
      
      Comparator<Map.Entry<Comparable<Object>, AbstractMap.SimpleEntry<Integer, Integer>>> comparator2 = Map.Entry.comparingByKey();
      assertNotNull(comparator2);
      
      String string2 = patriciaTrie0.put("s%Q;T**,", "s%Q;T**,");
      assertNull(string2);
      
      String string3 = "";
      String string4 = patriciaTrie0.previousKey("");
      assertNull(string4);
      
      String string5 = patriciaTrie0.remove((Object) null);
      assertNull(string5);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subMap(abstractPatriciaTrie_TrieEntry2.value, string3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", "org.apache.commons.collectins4.trie.PatriciaTrie");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      String string1 = patriciaTrie0.previousKey("org.apache.commons.collectins4.trie.PatriciaTrie");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      String string2 = hashMap0.put((String) null, "org.apache.commons.collectins4.trie.PatriciaTrie");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      String string3 = patriciaTrie0.remove((Object) "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer((-170));
      assertEquals((-170), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = patriciaTrie1.put("<GIbj!2g", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subMap("|r{73-kdMK'(T2Kn9", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("/?L26/8 ;=8e");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      patriciaTrie0.clear();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("s%Q;T**,", "", 1801);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      String string1 = patriciaTrie0.nextKey("/?L26/8 ;=8e");
      assertNull(string1);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string2 = patriciaTrie0.put("", "");
      assertNull(string2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.floorEntry((String) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "qjaxdvssb\\(w*+3";
      int int0 = 96;
      Integer integer0 = new Integer(96);
      assertEquals(96, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = patriciaTrie0.put("qjaxdvssb(w*+3", integer0);
      assertNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer2 = new Integer(96);
      assertEquals(96, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      
      Integer integer3 = patriciaTrie0.put("qjaxdvssb(w*+3", integer2);
      assertEquals(96, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      
      Collection<Integer> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains(integer3));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.toString();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("Trie[1]={\n  Entry(key=qjaxdvssb(w*+3 [9], value=96, parent=ROOT, left=ROOT, right=qjaxdvssb(w*+3 [9], predecessor=qjaxdvssb(w*+3 [9])\n}\n", string1);
      assertNotNull(string1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      Integer integer4 = patriciaTrie1.put("", (Integer) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(integer4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string3 = null;
      Integer integer5 = new Integer(96);
      assertEquals(96, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, integer5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(96);
      assertEquals(96, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("qjaxdvssb(w*+3", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer(96);
      assertEquals(96, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("qjaxdvssb(w*+3", integer2);
      assertEquals(96, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      
      Collection<Integer> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains(integer3));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.toString();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("Trie[1]={\n  Entry(key=qjaxdvssb(w*+3 [9], value=96, parent=ROOT, left=ROOT, right=qjaxdvssb(w*+3 [9], predecessor=qjaxdvssb(w*+3 [9])\n}\n", string0);
      assertNotNull(string0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer4 = patriciaTrie1.put("", (Integer) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(integer4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer5 = new Integer(96);
      assertEquals(96, (int)integer5);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, integer5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "The offsets and lengths must be at Character boundaries");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("=").when(biFunction0).apply(anyString() , anyString());
      String string1 = patriciaTrie0.nextKey("The offsets and lengths must be at Character boundaries");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string1);
      
      String string2 = hashMap0.compute((String) null, biFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string2);
      
      String string3 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string3);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("T]=i[");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "The offsets and lengths must be at Character boundaries");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      String string1 = patriciaTrie0.nextKey("The offsets and lengths must be at Character boundaries");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("T]=i[");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("", "", 1953);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(boolean0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-251));
      assertEquals((-251), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put("`", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Integer integer2 = patriciaTrie0.put(";,qWe", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer3 = new Integer(1);
      assertEquals(1, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = patriciaTrie1.put("Key cannot be null", integer3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(integer3.equals((Object)integer0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie3);
      
      Integer integer5 = patriciaTrie0.replace("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", integer3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer5);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(integer3.equals((Object)integer0));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie4.floorEntry("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie4, patriciaTrie2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie2));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Object object0 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.PatriciaTrie");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("A7(1oQHf@Vw");
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      String string0 = "2No;+2erYdss]W+m%";
      String string1 = patriciaTrie1.put("2No;+2erYdss]W+m%", "The offsets and lengths must be at Character boundaries");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      String string2 = patriciaTrie1.nextKey("2No;+2erYdss]W+m%");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string2);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      String string3 = hashMap0.compute("@\\T$+^:", biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string3);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      // Undeclared exception!
      try { 
        patriciaTrie2.put((String) null, "=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = hashMap0.put("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      Collection<String> collection0 = hashMap0.values();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(collection0);
      assertTrue(collection0.contains(""));
      
      String string2 = patriciaTrie0.put(", ", "STZrHh!|G.Q>Z94T");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string2);
      
      String string3 = patriciaTrie0.nextKey("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(", ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference";
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      String string1 = patriciaTrie3.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(string1);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      String string2 = patriciaTrie3.nextKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(string2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        hashMap0.compute((String) null, (BiFunction<? super String, ? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "LX@]W@\\*";
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("LX@]W@*", integer0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      Integer integer1 = new Integer(2);
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>(abstractMap_SimpleImmutableEntry1, integer1, 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry2 = abstractPatriciaTrie_TrieEntry0.key;
      assertSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry1);
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.containsKey(abstractMap_SimpleImmutableEntry2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeMap", "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("t%9-ZIok7%", "t%9-ZIok7%");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string2 = hashMap0.put("}T`", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.higherEntry((String) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.ceilingEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = patriciaTrie2.floorEntry("y%h");
      assertNull(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("", "");
      assertNull(object0);
      
      Object object1 = patriciaTrie0.put("key=", (Object) null);
      assertNull(object1);
      
      Integer integer0 = new Integer((-1493));
      assertEquals((-1493), (int)integer0);
      assertNotNull(integer0);
      
      Object object2 = patriciaTrie0.put("U<Yc", integer0);
      assertNull(object2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry((String) null);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.PatriciaTrie");
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(360);
      assertEquals(360, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("", integer0);
      assertNull(integer1);
      
      Integer integer2 = new Integer((-61));
      assertEquals((-61), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie0.put("", integer2);
      assertEquals(360, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>>("8)KQZT", (AbstractMap.SimpleEntry<Object, Integer>) null, (-1));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.subMap("8)KQZT", "8)KQZT");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>>(integer3, (AbstractMap.SimpleEntry<Object, Integer>) null, 1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("RootEntry(key=8)KQZT [-1], value=null, parent=360 [1], left=ROOT, right=null, predecessor=ROOT)", string0);
      assertNotNull(string0);
      
      Object object0 = abstractPatriciaTrie_TrieEntry0.getValue();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(object0);
      
      boolean boolean0 = patriciaTrie0.remove((Object) null, (Object) abstractPatriciaTrie_TrieEntry0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.put("t%9-ZIok7%", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("t%9-ZIok7%");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      String string1 = hashMap0.put("yjcJYyuO?SoDD", (String) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.ceilingEntry((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = hashMap0.put("", "4~%I@&BJkL$ln*@ .e");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put((String) null, (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntrySet$EntryIterator");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string2);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      assertNotNull(patriciaTrie2);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>((String) null, "~@$F?C_/g]-I");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = patriciaTrie2.put("org.apache.commons.collections4.trie.KeyAnalyzer", abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      String string3 = patriciaTrie2.firstKey();
      assertEquals("org.apache.commons.collections4.trie.KeyAnalyzer", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , anyString());
      String string0 = patriciaTrie0.put("", "rS_^7h@qUBM&2");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = patriciaTrie0.merge("", "", biFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", string1);
      assertNotNull(string1);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("rS_^7h@qUBM&2");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry("");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = patriciaTrie1.put("", (Object) null);
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.floorEntry((String) null);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertTrue(set0.contains(""));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("t%9-ZIok7%", "t%9-ZIok7%");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("t%9-ZIok7%");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("", "The offsets and lengths must be at Character boundaries");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , anyString());
      String string1 = hashMap0.compute((String) null, biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", 0, 0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)patriciaTrie2.entrySet();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
      assertNotSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(abstractPatriciaTrie_TrieEntry1.equals((Object)abstractPatriciaTrie_TrieEntry0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      boolean boolean0 = patriciaTrie0.containsKey("LX@]W@*");
      assertFalse(boolean0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(patriciaTrie1);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie2);
      
      String string0 = patriciaTrie2.put("LX@]W@*", "LX@]W@*");
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(string0);
      
      String string1 = hashMap1.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "LX@]W@*");
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.higherEntry("7Eo");
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie4.ceilingEntry("py.v 1haVt$1");
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie4.floorEntry((String) null);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = patriciaTrie0.merge("", "", biFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      String string1 = hashMap1.compute("", biFunction1);
      assertNotSame(hashMap1, hashMap0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(string1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string2 = patriciaTrie1.put("", "F$zpvD_f/E OiK5");
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string2);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , anyString());
      String string0 = patriciaTrie0.put("", "rS_^7h@qUBM&2");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      String string1 = patriciaTrie0.merge("", "", biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie0.put("D", "rS_^7h@qUBM&2");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string2);
      
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string3 = hashMap0.merge("", "", biFunction1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      
      String string4 = patriciaTrie0.selectKey("");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = patriciaTrie0.previousKey("");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string5);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("]");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer((-42));
      assertEquals((-42), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie1.put("", integer0);
      assertNull(integer1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("D"));
      assertTrue(set0.contains(""));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("fNF)", " [");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(anyString() , any());
      String string1 = hashMap0.compute((String) null, biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      String string2 = patriciaTrie0.put(" [", " is not an internal Entry!");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree(" is not an internal Entry!", 0, 2319);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      String string0 = patriciaTrie1.put("Trie[", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNull(string0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      Integer integer0 = patriciaTrie3.get((Object) null);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer0);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", 256, 256);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("", "", 1953);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(boolean0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-251));
      assertEquals((-251), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put("`", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Integer integer2 = patriciaTrie0.put(";,qWe", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer3 = new Integer(1);
      assertEquals(1, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = patriciaTrie1.put("Key cannot be null", integer3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(integer3.equals((Object)integer0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(hashMap1);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      String string0 = patriciaTrie3.nextKey("a2<hRDq_yT>");
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(string0);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie3.entrySet();
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>((Map.Entry<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry((String) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
      try { 
        patriciaTrie0.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = (-343);
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "+v#CP=`oyrl@s)sP", (-343));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "", (-343));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.value = "";
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.value = "";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      abstractPatriciaTrie_TrieEntry1.value = "";
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.parent.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.parent.isEmpty());
      
      Comparator<Map.Entry<String, Integer>> comparator2 = Map.Entry.comparingByKey();
      assertSame(comparator2, comparator1);
      assertNotNull(comparator2);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("Entry(key=null [-343], value=, parent=null [-343], left=null [-343], right=null, predecessor=null [-343])", string0);
      assertNotNull(string0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<String> patriciaTrie1 = null;
      try {
        patriciaTrie1 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie0);
      
      Comparable<String> comparable0 = patriciaTrie0.put("", "");
      assertNull(comparable0);
      
      SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie0.tailMap("\n");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      SortedMap<String, Comparable<String>> sortedMap1 = patriciaTrie0.headMap("{aa:?S'^itbi@e_");
      assertNotSame(sortedMap1, sortedMap0);
      assertEquals(1, sortedMap1.size());
      assertFalse(sortedMap1.isEmpty());
      assertNotNull(sortedMap1);
      assertFalse(sortedMap1.equals((Object)sortedMap0));
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie1);
      
      patriciaTrie1.clear();
      SortedMap<String, Object> sortedMap2 = patriciaTrie1.prefixMap("6wo/y!");
      assertTrue(sortedMap2.isEmpty());
      assertEquals(0, sortedMap2.size());
      assertNotNull(sortedMap2);
      
      Comparator<? super String> comparator0 = patriciaTrie1.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "+v#CP=`oyrl@s)sP", (-343));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "", (-343));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.value = "";
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.value = "";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      abstractPatriciaTrie_TrieEntry1.value = "";
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      Comparator<Map.Entry<String, Integer>> comparator2 = Map.Entry.comparingByKey();
      assertSame(comparator2, comparator1);
      assertNotNull(comparator2);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertEquals("Entry(key=null [-343], value=, parent=null, left=null [-343], right=null, predecessor=null [-343])", string0);
      assertNotNull(string0);
      
      Comparator<Map.Entry<Integer, Object>> comparator3 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      assertNotNull(comparator3);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(boolean0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string1 = patriciaTrie0.selectKey("");
      assertNull(string1);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string2 = patriciaTrie1.selectKey("");
      assertNull(string2);
      
      boolean boolean1 = patriciaTrie1.replace("h_zxa1Ni>PbW3IjM", "g8^)>$d$~7ZOwGQ.Tz", "h_zxa1Ni>PbW3IjM");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.subtree("", 2, 2803);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      Comparator<? super String> comparator4 = patriciaTrie1.comparator();
      assertNotNull(comparator4);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(896);
      assertEquals(896, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.remove((Object) integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Integer integer0 = patriciaTrie0.get("Cannot determine prefix outside of Character boundaries");
      assertNull(integer0);
      
      Integer integer1 = new Integer(362);
      assertEquals(362, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = patriciaTrie0.putIfAbsent("Cannot determine prefix outside of Character boundaries", integer1);
      assertNull(integer2);
      
      Integer integer3 = patriciaTrie0.put("", (Integer) null);
      assertNull(integer3);
      
      patriciaTrie0.incrementSize();
      Set<Map.Entry<String, Integer>> set1 = (Set<Map.Entry<String, Integer>>)patriciaTrie0.entrySet();
      assertEquals(3, set1.size());
      assertFalse(set1.isEmpty());
      assertNotNull(set1);
      
      Set<String> set2 = patriciaTrie0.keySet();
      assertSame(set2, set0);
      assertEquals(3, set2.size());
      assertFalse(set2.isEmpty());
      assertNotNull(set2);
      assertTrue(set2.contains(""));
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(any() , anyString());
      String string0 = patriciaTrie0.put("", "rS_^7h@qUBM&2");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = patriciaTrie0.merge("", "", biFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", string1);
      assertNotNull(string1);
      
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string2 = hashMap0.merge("", "", biFunction1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = patriciaTrie0.selectKey("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = patriciaTrie0.previousKey("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string4);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.ceilingEntry("]");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer0 = new Integer((-42));
      assertEquals((-42), (int)integer0);
      assertNotNull(integer0);
      
      HashMap hashMap1 = (HashMap)hashMap0.clone();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree("", (-42), 32768);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(272);
      assertEquals(272, (int)integer0);
      assertNotNull(integer0);
      
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Integer integer1 = new Integer(1791);
      assertEquals(1791, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = hashMap1.put("jsL", integer1);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(integer2);
      assertFalse(integer1.equals((Object)integer0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap1);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotNull(patriciaTrie1);
      
      Integer integer3 = new Integer((-158));
      assertEquals((-158), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = patriciaTrie1.put(";,qWe", integer3);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(integer4);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(hashMap1);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer5 = new Integer(368);
      assertEquals(368, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      
      Integer integer6 = new Integer((-2));
      assertEquals((-2), (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      
      Integer integer7 = patriciaTrie2.put("Key cannot be null", integer6);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(integer7);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.lowerEntry("Cannot determine prefix outside of Character boundaries");
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = patriciaTrie0.merge("", "", biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = hashMap0.merge("", "", biFunction1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = patriciaTrie0.selectKey("");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = patriciaTrie0.put("Entry(", "dvj");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string3);
      
      String string4 = patriciaTrie0.previousKey("");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string4);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer((-42));
      assertEquals((-42), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie1.put("", integer0);
      assertNull(integer1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      assertTrue(set0.contains(""));
      assertFalse(set0.contains("Entry("));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("=T?`f'I}9|.g", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 1414);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer0 = new Integer(11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie1.put("", integer0);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNull(integer1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie3.put("_7wL=$o<'%z", "Trie[");
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertNull(string0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      
      SortedMap<String, String> sortedMap0 = patriciaTrie3.prefixMap("");
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, (String) null, (-895));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = "The offsets and lengths must be at Character boundaries";
      String string1 = patriciaTrie0.put("", "The offsets and lengths must be at Character boundaries");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("IOy>z9pA?;}^E Od", 0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.put("", "");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      String string1 = hashMap0.put((String) null, "V?]oNU'e:8p&et)");
      assertNotSame(hashMap0, hashMap1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      assertFalse(hashMap0.equals((Object)hashMap1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.subtree(")", 256, 0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "sMf}`n-E`K&";
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("sMf}`n-E`K&");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparable<String> comparable0 = patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", "Cannot determine prefix outside of Character boundaries");
      assertNull(comparable0);
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.getEntry("sMf}`n-E`K&");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Comparable<String> comparable1 = patriciaTrie0.put(" -> ", "sMf}`n-E`K&");
      assertNull(comparable1);
      
      String string1 = "";
      SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie0.prefixMap("");
      assertFalse(sortedMap0.isEmpty());
      assertEquals(2, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie1.put(" -> ", integer0);
      assertNull(integer1);
      
      int int0 = (-1221);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("sMf}`n-E`K&", (Integer) null, (-1221));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Integer integer2 = patriciaTrie1.put("p", (Integer) null);
      assertNull(integer2);
      
      Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = patriciaTrie1.firstEntry();
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Integer integer3 = new Integer(1);
      assertEquals(1, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      
      Integer integer4 = patriciaTrie1.put("IsH8pULTx", integer3);
      assertNull(integer4);
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry2, 32768);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie1.put("", integer0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie2.prefixMap("");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.floorEntry("N");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(patriciaTrie4);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("$s7k{cL", "Jo&Ec^TsKWvo(2Eb");
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Object, Object>> comparator1 = (Comparator<Map.Entry<Object, Object>>)Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      assertNotNull(comparator1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>>("", abstractMap_SimpleEntry0, 11);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, String>> abstractPatriciaTrie_TrieEntry4 = patriciaTrie4.nextEntryImpl(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = patriciaTrie0.merge("", "", biFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = hashMap0.merge("", "", biFunction1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      SortedMap<String, String> sortedMap0 = patriciaTrie3.subMap("", "o),YQz>E}_Ui");
      assertNotSame(patriciaTrie0, patriciaTrie3);
      assertNotSame(patriciaTrie0, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNotSame(patriciaTrie3, patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertNotNull(sortedMap0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer((-134));
      assertEquals((-134), (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("LXt'P,iaNWfI", integer0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, String>(abstractMap_SimpleEntry1, (String) null, (-134));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string2 = patriciaTrie2.put("6g", "N4yw%n\"O1:w)L)c");
      assertNotSame(patriciaTrie2, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNull(string2);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        patriciaTrie3.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("null", "CiV:EJjEi]vp");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("t%9-ZIok7%", "t%9-ZIok7%");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer0 = patriciaTrie2.get((Object) null);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(integer0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer1 = new Integer(1072);
      assertEquals(1072, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = patriciaTrie2.put("t%9-ZIok7%", integer1);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNull(integer2);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      int int0 = patriciaTrie1.lengthInBits("t%9-ZIok7%");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertEquals(160, int0);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.higherEntry("^1cwJLYUFPEa5KZL87");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie3);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, abstractPatriciaTrie_TrieEntry1, (-2));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.left;
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      // Undeclared exception!
      try { 
        patriciaTrie3.followLeft(abstractPatriciaTrie_TrieEntry3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-251));
      assertEquals((-251), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put("`", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = "";
      String string1 = patriciaTrie1.put("b-G:'^V,V+pJ'%E", "");
      assertNull(string1);
      
      int int0 = 0;
      int int1 = 256;
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("", (-251), 256);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("t%9-ZIok7%", "t%9-ZIok7%");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, 256, 256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("fNF)", " [");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("B*Kdt:[(D=[{PkV!UoY");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = hashMap0.merge("B*Kdt:[(D=[{PkV!UoY", "fNF)", biFunction0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("fNF)", string1);
      assertNotNull(string1);
      
      String string2 = hashMap0.put("Rhp arN", "");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string2);
      
      String string3 = hashMap0.put("l$N&MC<yv;rI", "l$N&MC<yv;rI");
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNull(string3);
      
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      String string4 = hashMap0.compute(")r-tFO^K_", biFunction1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNull(string4);
      
      String string5 = patriciaTrie0.put("O<3", (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNull(string5);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("B*Kdt:[(D=[{PkV!UoY", 2, 625);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = hashMap0.put("fromKey > toKey", "3WosgSQX<Ud{iN'5[");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1008);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.setValue("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "nyK4iyN/6+lq";
      String string2 = abstractPatriciaTrie_TrieEntry0.setKeyValue("nyK4iyN/6+lq", " is not an external Entry!");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = (-162);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("The offsets and lengths must be at Character boundaries", (String) null, (-162));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string3 = abstractPatriciaTrie_TrieEntry1.setKeyValue("&[\"lNSa", "}E`&a;,U3V`\"]Yzt>/");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNull(string3);
      
      Comparator<Map.Entry<Integer, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.right;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      abstractPatriciaTrie_TrieEntry0.parent = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.value = "oy|n=%VD3";
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry0.value = " is not an external Entry!";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      String string4 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("Entry(key=nyK4iyN/6+lq [1008], value= is not an external Entry!, parent=null, left=nyK4iyN/6+lq [1008], right=null, predecessor=nyK4iyN/6+lq [1008])", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("@\\T$+^:", "@\\T$+^:");
      assertNull(object0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains("@\\T$+^:"));
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = patriciaTrie0.computeIfPresent("C", biFunction0);
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("@\\T$+^:", "C");
      assertEquals("@\\T$+^:", object2);
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertNotNull(object3);
      
      Object object4 = patriciaTrie0.put("", object3);
      assertNull(object4);
      
      Object object5 = patriciaTrie0.put("@\\T$+^:", "\"L.Z6<wO");
      assertEquals("C", object5);
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object2));
      
      int int0 = patriciaTrie0.size();
      assertEquals(2, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("\"L.Z6<wO", "@\\T$+^:", 2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, (-1501));
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie1);
      
      String string0 = "7R-xyhm>spTvE|A";
      String string1 = "6";
      Comparable<String> comparable0 = patriciaTrie1.selectValue("6");
      assertNull(comparable0);
      
      int int0 = (-1133);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("7R-xyhm>spTvE|A", "7R-xyhm>spTvE|A", (-1133));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      OrderedMapIterator<String, Comparable<String>> orderedMapIterator0 = patriciaTrie1.mapIterator();
      assertFalse(orderedMapIterator0.hasNext());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertNotNull(orderedMapIterator0);
      
      abstractPatriciaTrie_TrieEntry0.parent = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.left = null;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subMap("6", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "+v#CP=`oyrl@s)sP";
      int int0 = (-343);
      Integer integer0 = new Integer((-343));
      assertEquals((-343), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "V0n7Pg", (-343));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = null;
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, (String) null, (-343));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByKey();
      assertSame(comparator1, comparator0);
      assertNotNull(comparator1);
      
      String string1 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("Entry(key=-343 [-343], value=V0n7Pg, parent=null, left=-343 [-343], right=null, predecessor=-343 [-343])", string1);
      assertNotNull(string1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(string1.equals((Object)string0));
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Integer, Object>> comparator3 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator2);
      assertNotNull(comparator3);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(boolean0);
      assertTrue(integer0.equals((Object)int0));
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string2 = patriciaTrie0.selectKey("");
      assertNull(string2);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.subMap("tiA{lkTYd(;r-Y,%-", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("t%9-ZIok7%", "t%9-ZIok7%");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = patriciaTrie0.selectKey("");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("t%9-ZIok7%", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie0.previousKey("t%9-ZIok7%");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(4721);
      assertEquals(4721, (int)integer0);
      assertNotNull(integer0);
      
      String string3 = patriciaTrie0.remove((Object) "t%9-ZIok7%");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("t%9-ZIok7%", string3);
      assertNotNull(string3);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.subMap("t%9-ZIok7%", "V4$hvc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string0 = patriciaTrie0.put("", "The offsets and lengths must be at Character boundaries");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = patriciaTrie0.nextKey("The offsets and lengths must be at Character boundaries");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string2);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      String string3 = patriciaTrie1.firstKey();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", string3);
      assertNotNull(string3);
      
      Object object0 = patriciaTrie1.remove((Object) "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("The offsets and lengths must be at Character boundaries", object0);
      assertNotNull(object0);
      assertFalse(object0.equals((Object)string3));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.floorEntry("T]=i[");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.put("x", "x");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.put("/&3(=u", "/&3(=u");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      int int0 = patriciaTrie3.bitsPerElement();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertEquals(16, int0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.higherEntry("o2Df1tyjd+T9");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Integer integer0 = new Integer(91);
      assertEquals(91, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "  ", 91);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(integer0.equals((Object)int0));
      
      abstractPatriciaTrie_TrieEntry1.bitIndex = (-1);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((-2352));
      assertEquals((-2352), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer1, (Object) null);
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Integer, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Integer, Object>>(patriciaTrie2, abstractMap_SimpleEntry0, (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Object object0 = abstractPatriciaTrie_TrieEntry2.getKey();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(object0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        patriciaTrie3.remove(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = patriciaTrie1.put("", object0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(object1);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      Object object2 = patriciaTrie1.computeIfPresent("", biFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(object2);
      
      Object object3 = patriciaTrie1.put("", "");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(object3);
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      
      Object object5 = patriciaTrie1.put("must have a from or to!", "must have a from or to!");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(object5);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, (-565));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Integer integer1 = new Integer((-565));
      assertEquals((-565), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object6 = abstractPatriciaTrie_TrieEntry0.setKeyValue(integer1, patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNull(object6);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = abstractPatriciaTrie_TrieEntry0.key;
      assertEquals((-565), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      Object object7 = patriciaTrie1.put("\"L.Z6<wO", integer2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNull(object7);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer0));
      
      int int0 = patriciaTrie1.size();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("t%9-ZIok7%", "t%9-ZIok7%");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("t%9-ZIok7%", "t%9-ZIok7%", 144);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = abstractPatriciaTrie_TrieEntry0.getKey();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertEquals("t%9-ZIok7%", object0);
      assertNotNull(object0);
      
      String string1 = patriciaTrie0.getOrDefault("t%9-ZIok7%", (String) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("t%9-ZIok7%", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)object0));
      
      String string2 = hashMap0.put(")IZp37n/]$2CeCO\"", "1vnF)7sBE)`~Oq");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      String string3 = patriciaTrie0.lastKey();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("t%9-ZIok7%", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "@\\\\T$+^:";
      String string1 = "fNF)";
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      
      String string2 = patriciaTrie3.put(">PrA", "invalid lookup: ");
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(string2);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.higherEntry("fNF)");
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string3 = hashMap0.merge("", "key=", biFunction0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("key=", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = hashMap0.put("|ec>Zn", (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string4);
      
      String string5 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values";
      String string6 = hashMap0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", "key=");
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNull(string6);
      
      String string7 = patriciaTrie3.lastKey();
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertEquals(">PrA", string7);
      assertNotNull(string7);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      
      String string8 = patriciaTrie2.nextKey("The offsets and lengths must be at Character boundaries");
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNull(string8);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie3.entrySet();
      assertNotSame(patriciaTrie1, patriciaTrie3);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>((Map.Entry<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", "org.apache.commons.collections4.trie.PatriciaTrie");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<Comparable<String>> patriciaTrie2 = new PatriciaTrie<Comparable<String>>();
      assertNotNull(patriciaTrie2);
      
      SortedMap<String, Comparable<String>> sortedMap0 = patriciaTrie2.tailMap("vAj");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      boolean boolean0 = patriciaTrie2.containsKey("org.apache.commons.collections4.trie.PatriciaTrie");
      assertFalse(boolean0);
      
      PatriciaTrie<Comparable<String>> patriciaTrie3 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Comparable<String> comparable0 = patriciaTrie3.put("/2", "org.apache.commons.collections4.trie.PatriciaTrie");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(comparable0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Comparable<String> comparable1 = patriciaTrie3.put("=OYo", (Comparable<String>) null);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(comparable1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.higherEntry("Key is out of range: ");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie1));
      
      String string1 = patriciaTrie0.selectValue("vAj");
      assertNotSame(patriciaTrie0, patriciaTrie4);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie4));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("t%9-ZIok7%", "t%9-ZIok7%");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = hashMap0.put(")IZp37n/]$2CeCO\"", "1vnF)7sBE)`~Oq");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      String string2 = hashMap0.put("Ce\"", (String) null);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      String string3 = patriciaTrie0.lastKey();
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("t%9-ZIok7%", string3);
      assertNotNull(string3);
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      Set<String> set1 = patriciaTrie0.keySet();
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(set1.isEmpty());
      assertEquals(1, set1.size());
      assertNotNull(set1);
      assertTrue(set1.contains(string3));
      assertFalse(set1.contains(")IZp37n/]$2CeCO\""));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("fNF)", (String) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = "B*Kdt:[(D=[{PkV!UoY";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string2 = "";
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        hashMap0.merge("", (String) null, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.put("", "");
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      String string1 = hashMap0.put((String) null, "V?]oNU'e:8p&et)");
      assertNotSame(hashMap0, hashMap1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      assertFalse(hashMap0.equals((Object)hashMap1));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.ceilingEntry("V?]oNU'e:8p&et)");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.floorEntry("%pWQjuKB5{nnji");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("_>vqMJ;S#y$qd", "_>vqMJ;S#y$qd");
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "", 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      abstractPatriciaTrie_TrieEntry0.key = "^V6QZjGz{c5:LO{&<";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, 1152);
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = patriciaTrie0.higherEntry("|_qh?mPAc");
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry2);
      assertNotSame(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry2));
      assertFalse(abstractPatriciaTrie_TrieEntry3.equals((Object)abstractPatriciaTrie_TrieEntry1));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string0 = "predecessor=";
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = patriciaTrie0.nextKey("predecessor=");
      assertNull(string1);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.headMap("predecessor=");
      assertEquals(0, sortedMap0.size());
      assertTrue(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
      
      Integer integer0 = new Integer(256);
      assertEquals(256, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie0.put("predecessor=", integer0);
      assertNull(integer1);
      
      int int0 = (-1920);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.getNearestEntryForKey("", (-1920));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer2 = new Integer((-1));
      assertEquals((-1), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, (-258));
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      patriciaTrie0.toString();
      Integer integer3 = patriciaTrie0.put(string0, integer2);
      patriciaTrie0.lengthInBits(string0);
      String string2 = "";
      patriciaTrie0.put(string2, integer3);
      String string3 = "Wl";
      int int1 = (-674);
      patriciaTrie0.getNearestEntryForKey(string3, int1);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Integer integer4 = new Integer(int0);
      int int2 = (-1441);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>(string2, integer4, int2);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.parent;
      patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      assertNotNull(patriciaTrie0);
      
      Collection<AbstractMap.SimpleEntry<Object, String>> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      
      Collection<AbstractMap.SimpleEntry<Object, String>> collection1 = patriciaTrie0.values();
      assertSame(collection1, collection0);
      assertNotNull(collection1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "+v#CP=`oyrl@s)sP", (-343));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "", (-343));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      
      abstractPatriciaTrie_TrieEntry1.value = "";
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      abstractPatriciaTrie_TrieEntry0.value = "";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      abstractPatriciaTrie_TrieEntry1.value = "";
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Comparator<Map.Entry<String, Integer>> comparator2 = Map.Entry.comparingByKey();
      assertSame(comparator2, comparator1);
      assertNotNull(comparator2);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertEquals("Entry(key=null [-343], value=, parent=null, left=null [-343], right=null, predecessor=null [-343])", string0);
      assertNotNull(string0);
      
      Comparator<Map.Entry<Integer, Object>> comparator3 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      assertNotNull(comparator3);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(boolean0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string1 = patriciaTrie0.selectKey("");
      assertNull(string1);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie1.subMap("S)q7^}J3!~ZR F/", "dp~[J(9;CF");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      Collection<String> collection0 = patriciaTrie1.values();
      assertNotNull(collection0);
      assertFalse(collection0.contains(string0));
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("On'K9NHt_\"]LdK)4%", (Integer) null);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      Comparator<Map.Entry<String, String>> comparator4 = Map.Entry.comparingByValue();
      assertNotNull(comparator4);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, String>(abstractMap_SimpleEntry1, "org.apache.commons.collections4.trie.PatriciaTrie", (-343));
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      String string2 = patriciaTrie1.put("YD]=$,>WU{a0D", "");
      assertNull(string2);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = patriciaTrie1.previousKey("On'K9NHt_\"]LdK)4%");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("t%9-ZIok7%", "t%9-ZIok7%");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("Nq6F6Uw\";}N@)-", "Nq6F6Uw\";}N@)-");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      hashMap0.putAll(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      String string2 = hashMap0.put(")IZp37n/]$2CeCO\"", "1vnF)7sBE)`~Oq");
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertNull(string2);
      
      String string3 = patriciaTrie0.lastKey();
      assertFalse(hashMap0.isEmpty());
      assertEquals(3, hashMap0.size());
      assertEquals("t%9-ZIok7%", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(1025);
      assertEquals(1025, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 1025);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.key;
      assertEquals("", string0);
      assertNotNull(string0);
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>("", "org.apache.commons.collections4.trie.PatriciaTrie");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = patriciaTrie0.put("{u]j", abstractMap_SimpleImmutableEntry0);
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      Integer integer1 = new Integer(48);
      assertEquals(48, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Object, String>(integer1, "{u]j");
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      
      Comparator<Map.Entry<String, String>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry3 = patriciaTrie0.put("{u]j", abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
      assertSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry4 = patriciaTrie0.put("{u]j", (AbstractMap.SimpleImmutableEntry<Object, String>) null);
      assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry3);
      assertSame(abstractMap_SimpleImmutableEntry4, abstractMap_SimpleImmutableEntry2);
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry5 = patriciaTrie0.put("{u]j", abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
      assertSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
      assertSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry3, abstractMap_SimpleImmutableEntry4);
      assertNull(abstractMap_SimpleImmutableEntry5);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry4));
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator");
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie0.put(" + ", "N[@APriZ");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      String string1 = patriciaTrie0.put("", "");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(string1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      String string2 = hashMap0.put((String) null, "V?]oNU'e:8p&et)");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie2);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.ceilingEntry("V?]oNU'e:8p&et)");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.floorEntry("%pWQjuKB5{nnji");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("fNF)", " [");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("B*Kdt:[(D=[{PkV!UoY");
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = hashMap0.merge("B*Kdt:[(D=[{PkV!UoY", "fNF)", biFunction0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("fNF)", string1);
      assertNotNull(string1);
      
      String string2 = hashMap0.put("Rhp arN", "");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      String string3 = hashMap0.put("l$N&MC<yv;rI", "l$N&MC<yv;rI");
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string3);
      
      String string4 = patriciaTrie0.lastKey();
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("fNF)", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      
      String string5 = patriciaTrie0.nextKey("a");
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string5);
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)patriciaTrie0.entrySet();
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractPatriciaTrie_TrieEntry0);
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<String, Object>>((String) null, abstractMap_SimpleImmutableEntry0, (-2));
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isEmpty();
      assertEquals(3, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("@\\T$+^:", "@\\T$+^:");
      assertNull(object0);
      
      Collection<Object> collection0 = patriciaTrie0.values();
      assertNotNull(collection0);
      assertTrue(collection0.contains("@\\T$+^:"));
      
      Object object1 = patriciaTrie0.put("@\\T$+^:", "C");
      assertEquals("@\\T$+^:", object1);
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object object3 = patriciaTrie0.put("", object2);
      assertNull(object3);
      
      Object object4 = patriciaTrie0.put("@\\T$+^:", "\"L.Z6<wO");
      assertEquals("C", object4);
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      
      int int0 = patriciaTrie0.size();
      assertEquals(2, int0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("\"L.Z6<wO", "@\\T$+^:", 2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, (-1501));
      assertSame(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      assertSame(abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Object object0 = patriciaTrie0.put("@\\T$+^:", "@\\T$+^:");
      assertNull(object0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = patriciaTrie0.computeIfPresent("C", biFunction0);
      assertNull(object1);
      
      Object object2 = patriciaTrie0.put("@\\T$+^:", "C");
      assertEquals("@\\T$+^:", object2);
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertNotNull(object3);
      
      Object object4 = patriciaTrie0.put("^`<", object3);
      assertNull(object4);
      
      Object object5 = patriciaTrie0.put("", "\"L.Z6<wO");
      assertNull(object5);
      
      int int0 = patriciaTrie0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Integer>>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>>("u5kzg", (AbstractMap.SimpleEntry<String, Integer>) null, (-100));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.addEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<String, Integer>>) null, 1523);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      Object object0 = patriciaTrie0.put("", "");
      assertNull(object0);
      
      boolean boolean0 = patriciaTrie0.isBitSet("5G*I!c#[GGtk$Cco", (-1), 0);
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("");
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie0.nextKey("  ");
      assertNull(string0);
      
      Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select("delegate");
      assertNotNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Set<String> set0 = hashMap0.keySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = hashMap0.put("?.;pEqZ;&", integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry((String) null);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie0.nextKey("K-/oXcXe4%)f;h/}9");
      assertNull(string0);
      
      Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select((String) null);
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      String string0 = patriciaTrie3.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(string0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      Integer integer0 = patriciaTrie1.get((Object) null);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(integer0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      // Undeclared exception!
      try { 
        patriciaTrie3.subtree((String) null, 256, 38);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = ";2Z[T";
      String string1 = "null";
      String string2 = hashMap0.put("fromKey > toKey", "3WosgSQX<Ud{iN'5[");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      String string3 = patriciaTrie0.put(";2Z[T", "null");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string3);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("A'9!*_I5wI", 2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      String string0 = patriciaTrie3.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(string0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie3.subtree((String) null, 256, 0);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie4.equals((Object)patriciaTrie3));
      
      AbstractPatriciaTrie.TrieEntry<Comparable<String>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Comparable<String>, String>((Comparable<String>) null, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", (-2));
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      String string1 = abstractPatriciaTrie_TrieEntry1.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertEquals("Entry(key=null [-2], value=org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference, parent=null, left=null [-2], right=null, predecessor=null [-2])", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = hashMap0.put("fromKey > toKey", "3WosgSQX<Ud{iN'5[");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = patriciaTrie0.put(";2Z[T", "null");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("A'9!*_I5wI", (-15), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = hashMap0.put("{,dhPK]@bXT^s^SM$$", "{,dhPK]@bXT^s^SM$$");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.getNearestEntryForKey("{,dhPK]@bXT^s^SM$$", 1270);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie1.higherEntry("{,dhPK]@bXT^s^SM$$");
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      int int0 = patriciaTrie0.lengthInBits((String) null);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        patriciaTrie0.getEntry(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "+v#CP=`oyrl@s)sP", (-343));
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "", (-343));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.left.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.left.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry1.value = "";
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.value = "";
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      abstractPatriciaTrie_TrieEntry1.value = "";
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      Comparator<Map.Entry<String, Integer>> comparator2 = Map.Entry.comparingByKey();
      assertSame(comparator2, comparator1);
      assertNotNull(comparator2);
      
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals("Entry(key=null [-343], value=, parent=null, left=null [-343], right=null, predecessor=null [-343])", string0);
      assertNotNull(string0);
      
      Comparator<Map.Entry<Integer, Object>> comparator3 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      assertNotNull(comparator3);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(boolean0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      String string1 = patriciaTrie0.selectKey("");
      assertNull(string1);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      SortedMap<String, String> sortedMap0 = patriciaTrie1.subMap("S)q7^}J3!~ZR F/", "dp~[J(9;CF");
      assertTrue(sortedMap0.isEmpty());
      assertEquals(0, sortedMap0.size());
      assertNotNull(sortedMap0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("On'K9NHt_\"]LdK)4%", (Integer) null);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      Comparator<Map.Entry<String, String>> comparator4 = Map.Entry.comparingByValue();
      assertNotNull(comparator4);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, Integer>, String>(abstractMap_SimpleEntry1, "org.apache.commons.collections4.trie.PatriciaTrie", (-343));
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      String string2 = patriciaTrie1.put("YD]=$,>WU{a0D", "");
      assertNull(string2);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = patriciaTrie1.previousKey("On'K9NHt_\"]LdK)4%");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.incrementSize();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-1437));
      assertEquals((-1437), (int)integer0);
      assertNotNull(integer0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      assertNotNull(patriciaTrie1);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("  ", "org.apache.commons.collections4.trie.KeyAnalyzer");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("  ", abstractMap_SimpleEntry0, (-2));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>) null, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = patriciaTrie1.selectValue("O");
      assertNull(abstractMap_SimpleEntry1);
      
      Integer integer1 = new Integer(1783);
      assertEquals(1783, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, String>>(integer1, (AbstractMap.SimpleEntry<Object, String>) null, 0);
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(integer1.equals((Object)integer0));
      
      String string0 = abstractPatriciaTrie_TrieEntry3.toString();
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertEquals("Entry(key=1783 [0], value=null, parent=null, left=1783 [0], right=null, predecessor=1783 [0])", string0);
      assertNotNull(string0);
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie1.put("", integer0);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer2 = new Integer(11);
      assertEquals(11, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      
      Integer integer3 = patriciaTrie1.put("\n", integer2);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(integer2.equals((Object)integer0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("#uM!ERS5+m6Y7R?", patriciaTrie2, 11);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      boolean boolean0 = patriciaTrie2.replace((String) null, (Object) abstractPatriciaTrie_TrieEntry1, (Object) "");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(boolean0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie patriciaTrie3 = (PatriciaTrie)abstractPatriciaTrie_TrieEntry1.value;
      assertNotNull(patriciaTrie3);
      
      Object object0 = patriciaTrie2.put("", patriciaTrie3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertEquals(11, object0);
      assertNotNull(object0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(object0.equals((Object)integer2));
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = patriciaTrie2.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry", patriciaTrie1);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(object2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      patriciaTrie2.incrementSize();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>>();
      assertNotNull(patriciaTrie4);
      
      OrderedMapIterator<String, Object> orderedMapIterator0 = patriciaTrie2.mapIterator();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertTrue(orderedMapIterator0.hasNext());
      assertNotNull(orderedMapIterator0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      assertNotNull(patriciaTrie1);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("b", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("b", abstractMap_SimpleEntry0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", abstractMap_SimpleEntry0);
      assertNull(abstractMap_SimpleEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = patriciaTrie1.selectValue("");
      assertSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry2);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, String>>(integer0, (AbstractMap.SimpleEntry<Object, String>) null, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      String string0 = abstractPatriciaTrie_TrieEntry3.toString();
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertEquals("Entry(key=0 [0], value=null, parent=null, left=0 [0], right=null, predecessor=0 [0])", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.subtree("org.apache.commons.collections4.trie.AbstractPatriciaTrie", (-1), 1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie2);
      
      OrderedMapIterator<String, Object> orderedMapIterator0 = patriciaTrie2.mapIterator();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(orderedMapIterator0.hasPrevious());
      assertFalse(orderedMapIterator0.hasNext());
      assertNotNull(orderedMapIterator0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      patriciaTrie2.forEach(biConsumer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Object object0 = patriciaTrie2.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie", patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.firstEntry();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.put("must have come from somewhere!", "must have come from somewhere!");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie3);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie2));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      
      String string1 = hashMap0.replace((String) null, (String) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      Set<String> set0 = patriciaTrie0.keySet();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = patriciaTrie0.put("+0u#92hD", "");
      assertNull(string0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.getNearestEntryForKey("g", 1045);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      Object object0 = patriciaTrie0.put("", "");
      assertNull(object0);
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      boolean boolean0 = patriciaTrie1.replace("", (Integer) null, integer0);
      assertFalse(boolean0);
      assertTrue(integer0.equals((Object)int0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("xrmW90}qge%<");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      assertNotNull(patriciaTrie2);
      
      Integer integer1 = new Integer(352);
      assertEquals(352, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      String string0 = "";
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("", "");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("", abstractMap_SimpleEntry0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.removeEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>("", "", 1953);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertTrue(boolean0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-251));
      assertEquals((-251), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put("`", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      Integer integer2 = patriciaTrie0.put(";,qWe", integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer3 = new Integer(1);
      assertEquals(1, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      
      Integer integer4 = patriciaTrie1.put("Key cannot be null", integer3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer4);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      assertFalse(integer3.equals((Object)integer0));
      
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(patriciaTrie2);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie3);
      
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      
      PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>(patriciaTrie4);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie5);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      
      PatriciaTrie<String> patriciaTrie6 = new PatriciaTrie<String>(patriciaTrie5);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(patriciaTrie6);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie5));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie6.subtree("5a$gYm&FAT?l4ZmM", 1, 0);
      assertNotSame(patriciaTrie3, patriciaTrie6);
      assertNotSame(patriciaTrie3, patriciaTrie5);
      assertNotSame(patriciaTrie3, patriciaTrie4);
      assertNotSame(patriciaTrie4, patriciaTrie3);
      assertNotSame(patriciaTrie4, patriciaTrie5);
      assertNotSame(patriciaTrie4, patriciaTrie6);
      assertNotSame(patriciaTrie5, patriciaTrie3);
      assertNotSame(patriciaTrie5, patriciaTrie6);
      assertNotSame(patriciaTrie5, patriciaTrie4);
      assertNotSame(patriciaTrie6, patriciaTrie5);
      assertNotSame(patriciaTrie6, patriciaTrie4);
      assertNotSame(patriciaTrie6, patriciaTrie3);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie6));
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie5));
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie6));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie6));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie3));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie4));
      assertTrue(patriciaTrie6.equals((Object)patriciaTrie5));
      
      Collection<Object> collection0 = patriciaTrie2.values();
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(collection0);
      assertFalse(collection0.contains(1953));
      assertTrue(collection0.contains(1));
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = new Integer(3690);
      assertEquals(3690, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, (Object) null, 3690);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      abstractPatriciaTrie_TrieEntry0.value = (Object) "1JL4zo>.-wPu^WwD";
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      Comparator<Map.Entry<String, String>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, abstractPatriciaTrie_TrieEntry0, 1284);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>, Object>> comparator3 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>, Object>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry<Object, AbstractMap.SimpleEntry>>>) comparator2);
      assertNotNull(comparator3);
      
      abstractPatriciaTrie_TrieEntry1.key = integer0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      
      abstractPatriciaTrie_TrieEntry1.bitIndex = (-1);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      
      Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, Object>> comparator4 = (Comparator<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, Object>>)Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleEntry<Object, Object>>) comparator0);
      assertNotNull(comparator4);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(boolean0);
      
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "7rqIt`tl]VY", 3690);
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry1.right.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.right.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.right.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.predecessor.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.predecessor.isExternalNode());
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("jtH\"x$gb(|xV?c57Z'6", "7rqIt`tl]VY", 2604);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry3);
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertNull(abstractPatriciaTrie_TrieEntry4);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(comparator3, abstractPatriciaTrie_TrieEntry1.parent);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry5 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Object>>(abstractPatriciaTrie_TrieEntry1.key, abstractMap_SimpleEntry0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      
      boolean boolean1 = abstractPatriciaTrie_TrieEntry5.isExternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.parent.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry1.parent.isInternalNode());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.firstEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Cannot delete root Entry!", object0, 0);
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry2);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Map.Entry<Integer, Object>> comparator1 = (Comparator<Map.Entry<Integer, Object>>)Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      assertNotNull(comparator1);
      
      boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isInternalNode();
      assertFalse(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry2.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry2.isExternalNode());
      assertFalse(boolean0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie1);
      
      String string0 = "";
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("5~)E#_nq0", "6Q");
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String>(abstractMap_SimpleEntry0, "", 1845);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      
      Object object1 = abstractPatriciaTrie_TrieEntry3.getKey();
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(object1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(object1, comparator1);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = patriciaTrie0.put("], ", abstractMap_SimpleEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertNull(abstractMap_SimpleEntry2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, String>("Cannot delete root Entry!", "", 0);
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      abstractPatriciaTrie_TrieEntry4.bitIndex = 0;
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry4.right;
      assertNull(abstractPatriciaTrie_TrieEntry5);
      
      // Undeclared exception!
      try { 
        patriciaTrie1.followRight((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      patriciaTrie0.decrementSize();
      Object object0 = patriciaTrie0.put("", "");
      assertNull(object0);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      assertNotNull(patriciaTrie2);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = patriciaTrie2.replace("* *.GWvsp", (Integer) null, (Integer) null);
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie1);
      assertFalse(boolean0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.lowerEntry("");
      assertNotSame(patriciaTrie1, patriciaTrie2);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie2));
      
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      assertNotNull(patriciaTrie3);
      
      Integer integer1 = new Integer((-135));
      assertEquals((-135), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(integer1, "5G*I!c#[GGtk$Cco");
      assertNotNull(abstractMap_SimpleEntry0);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("5G*I!c#[GGtk$Cco", abstractMap_SimpleEntry0, (-135));
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      assertFalse(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>("", "* *.GWvsp");
      assertNotNull(abstractMap_SimpleEntry1);
      assertFalse(abstractMap_SimpleEntry1.equals((Object)abstractMap_SimpleEntry0));
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry3 = patriciaTrie3.put("* *.GWvsp", abstractMap_SimpleEntry2);
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry0);
      assertNotSame(abstractMap_SimpleEntry2, abstractMap_SimpleEntry1);
      assertNull(abstractMap_SimpleEntry3);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry2));
      assertTrue(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry0));
      assertFalse(abstractMap_SimpleEntry2.equals((Object)abstractMap_SimpleEntry1));
      
      String string0 = patriciaTrie3.lastKey();
      assertEquals("* *.GWvsp", string0);
      assertNotNull(string0);
      
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie4);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", abstractPatriciaTrie_TrieEntry1, (-1));
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry3);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry2));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.left;
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry4);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry5 = patriciaTrie4.followLeft(abstractPatriciaTrie_TrieEntry4);
      assertNotSame(patriciaTrie4, patriciaTrie0);
      assertSame(abstractPatriciaTrie_TrieEntry4, abstractPatriciaTrie_TrieEntry5);
      assertSame(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry4);
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry2);
      assertNotSame(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      assertFalse(abstractPatriciaTrie_TrieEntry3.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry3.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry4.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry4.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry5.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry5.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry1.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry5);
      assertTrue(patriciaTrie4.equals((Object)patriciaTrie0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry1));
      assertTrue(abstractMap_SimpleEntry0.equals((Object)abstractMap_SimpleEntry2));
      
      PatriciaTrie<Integer> patriciaTrie5 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie5);
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie2));
      assertTrue(patriciaTrie5.equals((Object)patriciaTrie1));
      
      // Undeclared exception!
      try { 
        patriciaTrie5.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie2);
      
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      assertNotNull(patriciaTrie3);
      assertTrue(patriciaTrie3.equals((Object)patriciaTrie2));
      
      String string0 = patriciaTrie3.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet", "#r<{^<@j^8-b4o");
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNotSame(patriciaTrie3, patriciaTrie2);
      assertNull(string0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie2));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("}\n");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNull(abstractPatriciaTrie_TrieEntry0);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      hashMap0.putAll(patriciaTrie2);
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      
      patriciaTrie2.clear();
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      
      String string1 = patriciaTrie2.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet", "");
      assertNotSame(patriciaTrie2, patriciaTrie3);
      assertNull(string1);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie3));
      
      String string2 = patriciaTrie1.previousKey("");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string2);
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        patriciaTrie2.get(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("\"!6\"`:juMdg[Dc^}e(", "\"!6\"`:juMdg[Dc^}e(", (-381));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      // Undeclared exception!
      try { 
        patriciaTrie0.followRight((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      String string0 = hashMap0.put("", (String) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      String string1 = patriciaTrie0.put("", "pZ`;xTaW# uvPIV4");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      String string2 = patriciaTrie0.put("t%9-ZIok7%", "t%9-ZIok7%");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string2);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string3 = patriciaTrie0.selectKey("");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = patriciaTrie0.previousKey("t%9-ZIok7%");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("", string4);
      assertNotNull(string4);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(4721);
      assertEquals(4721, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie1.put(")IZp37n/]$2CeCO\"", integer0);
      assertNull(integer1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      assertTrue(set0.contains(")IZp37n/]$2CeCO\""));
      assertFalse(set0.contains(""));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer((-1255));
      assertEquals((-1255), (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("3X?!h,\"+u*57Yk", integer0, (-1255));
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      Object object0 = abstractPatriciaTrie_TrieEntry0.getValue();
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertEquals((-1255), object0);
      assertNotNull(object0);
      
      Object object1 = patriciaTrie0.put("3X?!h,\"+u*57Yk", object0);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNull(object1);
      
      String string0 = patriciaTrie0.nextKey("oI)A9mv");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      String string0 = patriciaTrie0.put("t%9-ZIok7%", "t%9-ZIok7%");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string1 = patriciaTrie0.selectKey("");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("t%9-ZIok7%", string1);
      assertNotNull(string1);
      
      String string2 = patriciaTrie0.previousKey("t%9-ZIok7%");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string2);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer(4721);
      assertEquals(4721, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie1.put(")IZp37n/]$2CeCO\"", integer0);
      assertNull(integer1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertTrue(set0.contains(")IZp37n/]$2CeCO\""));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      assertNotNull(patriciaTrie0);
      
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      assertNotNull(patriciaTrie1);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string0 = patriciaTrie1.put("org.apache.commons.collections4.trie.PatriciaTrie", "6$_rh=s");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertNull(string0);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      String string1 = patriciaTrie1.selectValue("value=");
      assertNotSame(patriciaTrie0, patriciaTrie1);
      assertNotSame(patriciaTrie1, patriciaTrie0);
      assertEquals("6$_rh=s", string1);
      assertNotNull(string1);
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie1));
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      assertNotNull(patriciaTrie0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Object object0 = patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", "");
      assertNull(object0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry((String) null);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.floorEntry("A7(1oQHf@Vw");
      assertNull(abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(patriciaTrie0);
      
      Integer integer0 = new Integer(11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 11);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer1 = new Integer(11);
      assertEquals(11, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = patriciaTrie0.put("", integer1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.lowerEntry("");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(abstractPatriciaTrie_TrieEntry2);
      
      SortedMap<String, Integer> sortedMap0 = patriciaTrie0.prefixMap("");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1, sortedMap0.size());
      assertFalse(sortedMap0.isEmpty());
      assertNotNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(patriciaTrie0);
      
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = patriciaTrie0.merge("", "", biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string1 = hashMap0.merge("", "", biFunction1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = patriciaTrie0.selectKey("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = patriciaTrie0.previousKey("");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string3);
      
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      assertNotNull(patriciaTrie1);
      
      Integer integer0 = new Integer((-42));
      assertEquals((-42), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = patriciaTrie1.put("", integer0);
      assertNull(integer1);
      
      Set<String> set0 = patriciaTrie1.keySet();
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      assertTrue(set0.contains(""));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.ZbstractPatriciaTrie$TrieMapIterOtor", "org.apache.commons.collections4.trie.ZbstractPatriciaTrie$TrieMapIterOtor");
      patriciaTrie0.put("s0drZME3rSkYRI2w-i<", "RdCF(@NflY+");
      patriciaTrie0.put("", "");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieMapIterator", "");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Object object0 = patriciaTrie1.put("org.apache.commons.collections4.trie.ZbstractPatriciaTrie$TrieMapIterOtor", (Object) null);
      assertEquals("org.apache.commons.collections4.trie.ZbstractPatriciaTrie$TrieMapIterOtor", object0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      hashMap0.put((String) null, patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(hashMap0, (String) null, 282);
      abstractPatriciaTrie_TrieEntry0.getValue();
      // Undeclared exception!
      try { 
        patriciaTrie1.put((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.keySet();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
      Integer integer0 = new Integer(428);
      patriciaTrie3.put("fromKey > toKey", integer0);
      PatriciaTrie<Integer> patriciaTrie4 = new PatriciaTrie<Integer>(patriciaTrie3);
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie5 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      String string0 = patriciaTrie5.nextKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("b", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("b", abstractMap_SimpleEntry0, 0);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie1.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie1.selectValue("");
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      patriciaTrie0.getEntry((Object) null);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.decrementSize();
      patriciaTrie0.put("", "");
      patriciaTrie0.isBitSet("5G*I!c#[GGtk$Cco", (-1), 0);
      patriciaTrie0.put("", (Object) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      Object object0 = new Object();
      patriciaTrie1.put("l%", object0);
      patriciaTrie1.incrementSize();
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Integer>>();
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Integer, Integer>> abstractPatriciaTrie_TrieEntry0 = patriciaTrie2.higherEntry("[NRsJ_+ob;w=oC");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.decrementSize();
      patriciaTrie0.put("", "");
      int int0 = (-1);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      String string0 = "* *.GWvsp";
      Integer integer0 = new Integer(1);
      patriciaTrie2.replace("* *.GWvsp", (Integer) null, (Integer) null);
      patriciaTrie1.lowerEntry("");
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      Integer integer1 = new Integer((-135));
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(integer1, "5G*I!c#[GGtk$Cco");
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("5G*I!c#[GGtk$Cco", abstractMap_SimpleEntry0, (-135));
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      // Undeclared exception!
      try { 
        patriciaTrie3.removeEntry((AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      Integer integer0 = new Integer(959);
      patriciaTrie1.replace((String) null, integer0);
      SortedMap<String, Integer> sortedMap0 = patriciaTrie1.prefixMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeMap");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.bitsPerElement();
      patriciaTrie0.getOrDefault(")", ")");
      Integer integer0 = new Integer(1337);
      patriciaTrie0.remove((Object) ")", (Object) integer0);
      patriciaTrie0.getEntry(")");
      patriciaTrie0.put(")", ")");
      patriciaTrie0.containsKey((Object) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, "~C_9\"a9OQu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(407);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("M", integer0, (-3064));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry1, (-3064));
      patriciaTrie0.put("key=", integer0);
      String string0 = patriciaTrie0.toString();
      assertEquals("Trie[1]={\n  Entry(key=M [-3064], value=407, parent=ROOT, left=M [-3064], right=ROOT, predecessor=key= [10])\n  Entry(key=key= [10], value=407, parent=ROOT, left=M [-3064], right=key= [10], predecessor=key= [10])\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(360);
      patriciaTrie0.put("", integer0);
      String string0 = "";
      Integer integer1 = new Integer((-61));
      Integer integer2 = patriciaTrie0.put("", integer1);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>>("8)KQZT", (AbstractMap.SimpleEntry<Object, Integer>) null, (-1));
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleEntry<Object, Integer>>(integer2, (AbstractMap.SimpleEntry<Object, Integer>) null, 1);
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.getValue();
      patriciaTrie0.remove((Object) null, (Object) abstractPatriciaTrie_TrieEntry0);
      Integer integer3 = null;
      patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", (Integer) null);
      Integer integer4 = new Integer((-1965));
      Integer integer5 = patriciaTrie0.put("", integer4);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", (Integer) null, (-343));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.right;
      patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      // Undeclared exception!
      try { 
        patriciaTrie1.get(integer5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      Set<String> set0 = hashMap0.keySet();
      hashMap0.put("?.;pEqZ;&", set0);
      patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      patriciaTrie0.nextKey("delegate");
      Map.Entry<String, Object> map_Entry0 = patriciaTrie0.select("");
      assertNull(map_Entry0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.firstEntry();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(patriciaTrie0, "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator");
      assertNull(abstractPatriciaTrie_TrieEntry0);
      
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Object, String>, Object>(abstractMap_SimpleImmutableEntry0, patriciaTrie1, 2074);
      String string0 = abstractPatriciaTrie_TrieEntry1.toString();
      assertEquals("Entry(key=Trie[0]={\n}\n=org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry [2074], value=Trie[0]={\n}\n, parent=null, left=Trie[0]={\n}\n=org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry [2074], right=null, predecessor=Trie[0]={\n}\n=org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry [2074])", string0);
      
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.bitsPerElement();
      Integer integer0 = new Integer((-112));
      patriciaTrie2.put("Entry(key=Trie[0]={\n}\n=org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry [2074], value=Trie[0]={\n}\n, parent=null, left=Trie[0]={\n}\n=org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry [2074], right=null, predecessor=Trie[0]={\n}\n=org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry [2074])", integer0);
      Map.Entry.comparingByValue();
      patriciaTrie2.previousKey("3Rs_p^G-W#NKTs\"Vx");
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie1, (String) null, 0);
      abstractPatriciaTrie_TrieEntry2.setValue("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator");
      String string1 = abstractPatriciaTrie_TrieEntry2.toString();
      assertEquals("Entry(key=Trie[0]={\n}\n [0], value=org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet$KeyIterator, parent=null, left=Trie[0]={\n}\n [0], right=null, predecessor=Trie[0]={\n}\n [0])", string1);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.put("", "bBWPo^XOrI&");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String>(abstractMap_SimpleEntry1, "`r", 16);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String>(abstractMap_SimpleEntry1, (String) null, (-112));
      abstractPatriciaTrie_TrieEntry3.predecessor = abstractPatriciaTrie_TrieEntry4;
      abstractPatriciaTrie_TrieEntry3.isEmpty();
      assertTrue(abstractPatriciaTrie_TrieEntry3.isExternalNode());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = null;
      String string0 = "Trie[";
      int int0 = (-184);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "Trie[", (-184));
      abstractPatriciaTrie_TrieEntry1.toString();
      abstractPatriciaTrie_TrieEntry1.bitIndex = (-184);
      // Undeclared exception!
      try { 
        Map.Entry.comparingByValue((Comparator<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      patriciaTrie0.headMap("predecessor=");
      patriciaTrie0.tailMap("F|vd=vuo10,:b");
      patriciaTrie0.selectValue("");
      patriciaTrie0.higherEntry("P$Q@");
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.getNearestEntryForKey("\n", 0);
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("ByN>7", integer0, 1);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie1.nextEntry(abstractPatriciaTrie_TrieEntry1);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry2 = patriciaTrie1.subtree("", (-1), 1248);
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("<xc ,s", "", (-209));
      Map.Entry.comparingByValue();
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.setKeyValue("qV~>8U", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 814);
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.bitIndex = 814;
      abstractPatriciaTrie_TrieEntry0.bitIndex = 814;
      abstractPatriciaTrie_TrieEntry0.setKeyValue("org.apache.commons.collections4.trie.KeyAnalyzer", "");
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(boolean0);
      
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      patriciaTrie0.compareKeys("", "");
      SortedMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> sortedMap0 = patriciaTrie0.prefixMap("<xc ,s");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "+v#C~=joyrl@s)sP", (-365));
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>((Integer) null, "+v#C~=joyrl@s)sP", (-365));
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.value = "+v#C~=joyrl@s)sP";
      abstractPatriciaTrie_TrieEntry0.value = "";
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.floorEntry("");
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.floorEntry("b!.}#Uj!!-; bG?\u0007");
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      SortedMap<String, Integer> sortedMap0 = patriciaTrie2.headMap("8omHUY;&LF");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.selectKey("");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.modCount = (-2562);
      patriciaTrie1.selectKey((String) null);
      // Undeclared exception!
      try { 
        patriciaTrie0.tailMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-1437));
      patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie1.prefixMap((String) null);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, String>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, String>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("b", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>>("b", abstractMap_SimpleEntry0, 0);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      assertFalse(abstractPatriciaTrie_TrieEntry1.isEmpty());
      
      Integer integer0 = new Integer(256);
      patriciaTrie0.put("1^O:\"\"#RQr[", integer0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie0);
      SortedMap<String, Integer> sortedMap0 = patriciaTrie2.prefixMap("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      assertTrue(sortedMap0.isEmpty());
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      SortedMap<String, Object> sortedMap1 = patriciaTrie3.subMap(" [", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
      assertTrue(sortedMap1.isEmpty());
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      String string0 = "K3:%Y>)KX:";
      patriciaTrie0.subtree("K3:%Y>)KX:", 2171, 3207);
      patriciaTrie0.decrementSize();
      patriciaTrie0.floorEntry("K3:%Y>)KX:");
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>((Object) null, "K3:%Y>)KX:", 2171);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<Object> patriciaTrie1 = null;
      try {
        patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("XX}\"-`NWtg99g[WHk~", "XX}\"-`NWtg99g[WHk~", 0);
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.bitIndex = 1480;
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("XX}\"-`NWtg99g[WHk~", "XX}\"-`NWtg99g[WHk~");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      hashMap0.replace("The offsets and lengths must be at Character boundaries", "XX}\"-`NWtg99g[WHk~");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.firstEntry();
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer0 = new Integer(226);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>(abstractPatriciaTrie_TrieEntry1);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>>(integer0, abstractMap_SimpleEntry0, 0);
      Integer integer1 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<String, Object>>(integer1, abstractMap_SimpleEntry0, 0);
      abstractPatriciaTrie_TrieEntry2.left = abstractPatriciaTrie_TrieEntry3;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      abstractPatriciaTrie_TrieEntry2.isInternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry2.isInternalNode());
      
      patriciaTrie0.subMap((String) null, ")cJ4mSY");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>("=", (Object) null, 0);
      boolean boolean1 = abstractPatriciaTrie_TrieEntry4.isExternalNode();
      assertTrue(boolean1);
  }
}
