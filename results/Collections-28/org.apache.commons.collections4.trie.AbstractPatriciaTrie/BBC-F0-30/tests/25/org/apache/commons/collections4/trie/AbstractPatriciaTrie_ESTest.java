/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:29:52 GMT 2021
 */

package org.apache.commons.collections4.trie;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.SortedMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.trie.AbstractBitwiseTrie;
import org.apache.commons.collections4.trie.AbstractPatriciaTrie;
import org.apache.commons.collections4.trie.PatriciaTrie;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractPatriciaTrie_ESTest extends AbstractPatriciaTrie_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.prefixMap((String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 224);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, (String) null, 224);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry2;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.followLeft(abstractPatriciaTrie_TrieEntry3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "F^eL7J?o<ICk=";
      Object object0 = new Object();
      patriciaTrie0.incrementSize();
      patriciaTrie0.selectValue("F^eL7J?o<ICk=");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("F^eL7J?o<ICk=", object0, 1);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      // Undeclared exception!
      try { 
        patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = "sND5Z\\c";
      int int0 = 1015;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("sND5Zc", "sND5Zc", 1015);
      Map.Entry.comparingByKey();
      patriciaTrie0.put("sND5Zc", "sND5Zc");
      abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.left = null;
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      patriciaTrie0.remove((Object) "Entry(key=sND5Zc [1015], value=sND5Zc, parent=null, left=sND5Zc [1015], right=null, predecessor=sND5Zc [1015])");
      patriciaTrie0.putIfAbsent("6P-yIc?$Z", "6P-yIc?$Z");
      // Undeclared exception!
      try { 
        patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have come from somewhere!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("'9pjtPRU>ZFy%=Z2Swy", "'9pjtPRU>ZFy%=Z2Swy");
      patriciaTrie0.ceilingEntry("-HJv=|D;");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie3.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie3.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("", "efb");
      patriciaTrie0.put("efb", "efb");
      patriciaTrie0.getEntry("");
      patriciaTrie0.floorEntry("The offsets and lengths Oust be at Character boundaries");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.firstKey();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("//af_nfO;/_", "Tr*=drFo)+", 2650);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 2650);
      patriciaTrie0.floorEntry("Nhe offsets and lengths Oust be aR Character boundaries");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.put("\"q4M^Vl{v}cTGq", "\"q4M^Vl{v}cTGq");
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      hashMap0.put("predecessor=", patriciaTrie0);
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
      patriciaTrie0.replace("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", (Object) hashMap0);
      patriciaTrie0.firstEntry();
      Object object0 = hashMap0.clone();
      hashMap0.keySet();
      patriciaTrie0.selectKey((String) null);
      patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", object0);
      patriciaTrie0.put("ZR:+%*&d", hashMap0);
      patriciaTrie0.lastEntry();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("t9Z]m=M{", "t9Z]m=M{");
      patriciaTrie0.put("t9Z]m=M{", "CQ$6]g)");
      patriciaTrie0.put("REc5b`p*Q#WC#Zs", (String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.putIfAbsent("", "ef=");
      patriciaTrie0.put("", (String) null);
      patriciaTrie0.put("ef=", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = null;
      try {
        patriciaTrie1 = new PatriciaTrie<Comparable<Object>>((Map<? extends String, ? extends Comparable<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("", "");
      patriciaTrie0.put("tz,sQk\"wi5", "tz,sQk\"wi5");
      patriciaTrie0.put("tz,sQk\"wi5", "x ]<|9X &6!*_/v,A");
      patriciaTrie0.floorEntry("");
      patriciaTrie0.put("org.apachecommons.collections4.trie.AbstractBitwiseTrie", "org.apachecommons.collections4.trie.AbstractBitwiseTrie");
      patriciaTrie0.higherEntry("tz,sQk\"wi5");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.remove((Object) "org.apachecommons.collections4.trie.AbstractBitwiseTrie");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("vrA(Q^n<;", "}");
      hashMap0.put("6zP; eP.n=[Uu", "");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("}", (String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("le.io");
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("}", "vrA(Q^n<;", (-1475));
      patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(">/@C0}YV@SS>`.#lt", (String) null);
      hashMap0.putIfAbsent("", (String) null);
      hashMap0.put("value=", "");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry((String) null);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent("I]5%DQkyF|7-", biFunction0);
      hashMap0.put("left=", "left=");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie1.put("", "&");
      patriciaTrie1.put("lh}3UO", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie1.higherEntry("");
      patriciaTrie1.removeEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("o^b%L", "}\n");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.put("}\n", (String) null);
      patriciaTrie0.put("}\n", "}\n");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry((String) null);
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap1);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(patriciaTrie2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Object>>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      String string0 = "";
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      patriciaTrie1.compute("", biFunction0);
      patriciaTrie1.firstEntry();
      PatriciaTrie<Comparable<Integer>> patriciaTrie2 = new PatriciaTrie<Comparable<Integer>>();
      patriciaTrie2.incrementSize();
      patriciaTrie1.put("", (Object) null);
      patriciaTrie1.higherEntry("");
      patriciaTrie1.decrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie2.firstEntry();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("", "");
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("2{(y!%K`");
      patriciaTrie0.put("2{(y!%K`", sortedMap0);
      Integer integer0 = new Integer(10);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      patriciaTrie0.merge("2{(y!%K`", "LaY4j4`3iV}QBuJ", biFunction0);
      patriciaTrie0.put("/", "");
      patriciaTrie0.put("", "UYLAo.t)^yHG{Ci");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.replaceAll(biFunction1);
      patriciaTrie1.lowerEntry("");
      patriciaTrie1.mapIterator();
      patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Comparable<Object>> patriciaTrie2 = new PatriciaTrie<Comparable<Object>>();
      patriciaTrie2.firstEntry();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("t9Z]m=M{", "t9Z]m=M{");
      patriciaTrie1.getEntry("t9Z]m=M{");
      patriciaTrie1.put("pC#Latd=5A/dBc", "pC#Latd=5A/dBc");
      patriciaTrie1.higherEntry("#hGydWMHo");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Set<String> set0 = patriciaTrie0.keySet();
      patriciaTrie0.put("ROOT", set0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", set0, 192);
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("JrxU.0DL", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", 192);
      abstractPatriciaTrie_TrieEntry1.isInternalNode();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie0.values();
      patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(0);
      patriciaTrie0.put("", integer0);
      patriciaTrie0.selectKey("DQ7[V[Q\"[_,");
      patriciaTrie0.put("AJeLJ?o@<ICk=", "AJeLJ?o@<ICk=");
      patriciaTrie0.lowerEntry("AJeLJ?o@<ICk=");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("AJeLJ?o@<ICk=", "AJeLJ?o@<ICk=");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("#|.Cois]@%?fRds\"FC");
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(144);
      patriciaTrie0.put("M", integer0);
      patriciaTrie0.subtree("HkhXUPTgmFD`", 16, 16);
      patriciaTrie0.lowerEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("\"mMH/`", patriciaTrie0, 80);
      String string0 = abstractPatriciaTrie_TrieEntry0.key;
      patriciaTrie0.put("\"mMH/`", "\"mMH/`");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", (-3247));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$EntrySet$EntryIterator", abstractPatriciaTrie_TrieEntry1, (-795));
      abstractPatriciaTrie_TrieEntry1.left = abstractPatriciaTrie_TrieEntry2;
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = ";[";
      patriciaTrie0.lowerEntry(";[");
      patriciaTrie0.put("%eYLP@\"gJ.+ai@S<", "V4)5bR42ALSFg");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("null", "", 192);
      patriciaTrie0.put("", "");
      patriciaTrie0.put("", (String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      abstractPatriciaTrie_TrieEntry0.value = "n`]U2x\"`W-'3n";
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator1);
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.value = ":*tN5Y7R\"WzIMU9";
      patriciaTrie0.lastKey();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      // Undeclared exception!
      try { 
        patriciaTrie0.followRight((AbstractPatriciaTrie.TrieEntry<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("AJeL7J?o@<ICk=", "AJeL7J?o@<ICk=");
      patriciaTrie0.get("AJeL7J?o@<ICk=");
      Integer integer0 = new Integer(912);
      patriciaTrie0.put(" [", integer0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.decrementSize();
      patriciaTrie0.selectKey("");
      // Undeclared exception!
      try { 
        patriciaTrie0.higherEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.putIfAbsent("", "");
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.prefixMap("2{(y!%K`");
      patriciaTrie0.put("2{(y!%K`", sortedMap0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      patriciaTrie0.merge("2{(y!%K`", "LaY4j4`3iV}QBuJ", biFunction0);
      patriciaTrie0.put("/", "");
      patriciaTrie0.put("", "UYLAo.t)^yHG{Ci");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie1.replaceAll(biFunction1);
      patriciaTrie1.lowerEntry("");
      patriciaTrie1.mapIterator();
      patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry0);
      PatriciaTrie<Comparable<Object>> patriciaTrie2 = new PatriciaTrie<Comparable<Object>>();
      patriciaTrie2.firstEntry();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.put("fromKey > toKey", "");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree(",w|_6WH cD)K", 0, 0);
      patriciaTrie0.decrementSize();
      hashMap0.keySet();
      patriciaTrie0.bitsPerElement();
      patriciaTrie0.replace("", "", "");
      patriciaTrie0.keySet();
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.put("The offsets and lengths must be at Character boundaries", "The offsets and lengths must be at Character boundaries");
      patriciaTrie1.entrySet();
      hashMap0.put("The offsets and lengths must be at Character boundaries", "]\u0001^&B1m'");
      patriciaTrie2.put("]\u0001^&B1m'", (String) null);
      patriciaTrie2.subtree("The offsets and lengths must be at Character boundaries", 224, 0);
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      patriciaTrie3.ceilingEntry(",w|_6WH cD)K");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer((-862));
      Object object0 = new Object();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, object0, (-1535));
      String string0 = "i";
      int int0 = 128;
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("i", abstractPatriciaTrie_TrieEntry0, 128);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string1 = "r^8L0hQT>s9q]c\"X42";
      patriciaTrie0.put("r^8L0hQT>s9q]c\"X42", "#W9dA##*tI;K");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.replace(">=oVWH[/aT[xss6q`h", (Object) abstractPatriciaTrie_TrieEntry0);
      patriciaTrie1.select("");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      Map.Entry.comparingByKey();
      int int1 = 212;
      Integer integer1 = new Integer(212);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object>(abstractMap_SimpleEntry0, integer1, (-862));
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object>(abstractMap_SimpleEntry0, "~", (-862));
      abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry3;
      abstractPatriciaTrie_TrieEntry2.toString();
      Integer integer2 = new Integer((-1535));
      // Undeclared exception!
      try { 
        patriciaTrie0.containsKey(integer2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Integer integer0 = new Integer((-2994));
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie", integer0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleEntry0);
      patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie", (Integer) null);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleEntry1);
      patriciaTrie0.putIfAbsent("org.apache.commons.collections4.trie.AbstractPatriciaTrie", abstractMap_SimpleImmutableEntry1);
      patriciaTrie0.nextKey("");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.containsKey((Object) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "F^eL7J?o<IC=");
      patriciaTrie0.incrementSize();
      Integer integer0 = new Integer(4199);
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(anyString() , any());
      Object object0 = patriciaTrie0.compute("F^eL7J?o<IC=", biFunction0);
      patriciaTrie0.containsKey("F^eL7J?o<IC=");
      patriciaTrie0.selectValue("F^eL7J?o<IC=");
      patriciaTrie0.put("F^eL7J?o<IC=", object0);
      patriciaTrie0.ceilingEntry("F^eL7J?o<IC=");
      patriciaTrie0.lastKey();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      String string0 = "SYH*hl)";
      patriciaTrie2.put("SYH*hl)", "H?6R?61*,**x_0o~}");
      String string1 = "";
      int int0 = 96;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", (Object) null, 96);
      abstractPatriciaTrie_TrieEntry0.right = null;
      abstractPatriciaTrie_TrieEntry0.setValue("SYH*hl)");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie1.previousEntry(abstractPatriciaTrie_TrieEntry1);
      patriciaTrie2.put("", patriciaTrie1);
      // Undeclared exception!
      try { 
        patriciaTrie2.getNearestEntryForKey("", 912);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.firstEntry();
      patriciaTrie0.putIfAbsent("", "");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie2.put("7tgKn7!'FW0z{gC*", (String) null);
      patriciaTrie2.floorEntry("7tgKn7!'FW0z{gC*");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.decrementSize();
      patriciaTrie0.put("left=", "left=");
      patriciaTrie0.putIfAbsent("", "left=");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1");
      patriciaTrie0.floorEntry("FromKey is out of range: ");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.lowerEntry("org.apache.commons.collections4.trie.PatriciaTrie");
      patriciaTrie2.firstEntry();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.keySet();
      patriciaTrie0.keySet();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Set<String> set0 = patriciaTrie0.keySet();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", set0, 192);
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("JrxU.0DL", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", 192);
      abstractPatriciaTrie_TrieEntry1.isInternalNode();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie0.values();
      patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, hashMap0, 2033);
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("sgbl?Cq!\"'OUo_", (Object) null, 2);
      abstractPatriciaTrie_TrieEntry1.toString();
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      hashMap0.put("sgbl?Cq!\"'OUo_", "org.apache.commons.collections4.trie.KeyAnalyzer");
      patriciaTrie1.values();
      patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("C", "parent=");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.firstKey();
      patriciaTrie0.floorEntry("FromKey is out of range: ");
      patriciaTrie1.putIfAbsent("FromKey is out of range: ", (String) null);
      patriciaTrie1.replace("FromKey is out of range: ", "");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.putIfAbsent("", "left=");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1");
      patriciaTrie0.floorEntry("FromKey is out of range: ");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.replace((String) null, "RGw=,M\"WXK;6(:7X}@V");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", "F^eL7J?o<ICk=");
      patriciaTrie0.incrementSize();
      patriciaTrie0.selectValue("F^eL7J?o<ICk=");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("F^eL7J?o<ICk=", (Object) null, 1);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
      patriciaTrie0.ceilingEntry("F^eL7J?o<ICk=");
      patriciaTrie0.lastKey();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.putIfAbsent("C", "parent=");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.incrementSize();
      patriciaTrie0.floorEntry("FromKey is out of range: ");
      patriciaTrie1.compareKeys("parent=", "iPYk!Gz7)Us,lLmY=UH");
      patriciaTrie1.replace("FromKey is out of range: ", "");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      int int0 = 0;
      hashMap0.put(",w|_6WH cD)K", ",w|_6WH cD)K");
      String string0 = "fromKey > toKey";
      patriciaTrie0.put("fromKey > toKey", (String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree(",w|_6WH cD)K", 0, 0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.ceilingEntry(",w|_6WH cD)K");
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie3.floorEntry("fromKey > toKey");
      // Undeclared exception!
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry1, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Ls/", "Ls/", (-2532));
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Ls/", "Ls/", (-2532));
      abstractPatriciaTrie_TrieEntry1.setValue("Entry(key=Ls/ [-2532], value=Ls/, parent=null, left=Ls/ [-2532], right=null, )");
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.predecessor = null;
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.headMap("B&s0nN`");
      patriciaTrie1.mapIterator();
      patriciaTrie1.tailMap("*cJt7%n|o0GQjd=QoX");
      patriciaTrie1.subtree("*cJt7%n|o0GQjd=QoX", (-4227), (-4227));
      patriciaTrie1.higherEntry("*cJt7%n|o0GQjd=QoX");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleImmutableEntry<Integer, String>, String>((AbstractMap.SimpleImmutableEntry<Integer, String>) null, "*cJt7%n|o0GQjd=QoX", 1523);
      abstractPatriciaTrie_TrieEntry0.left = null;
      abstractPatriciaTrie_TrieEntry0.toString();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("JDq8h[3c&<", "7B|X", (-2));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      patriciaTrie3.followLeft(abstractPatriciaTrie_TrieEntry2);
      patriciaTrie1.firstEntry();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie4 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      Integer integer0 = new Integer(1523);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(integer0, integer0);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>>("JDq8h[3c&<", abstractMap_SimpleEntry0, (-4227));
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry3.left;
      // Undeclared exception!
      try { 
        patriciaTrie4.removeEntry(abstractPatriciaTrie_TrieEntry4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, Integer>>();
      Integer integer0 = new Integer(11);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractBitwiseTrie", integer0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey();
      Map.Entry.comparingByValue((Comparator<? super Comparable<Comparable<Comparable>>>) comparator1);
      Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      Map.Entry.comparingByValue();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractBitwiseTrie", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.previousKey("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      patriciaTrie0.remove((Object) "y&0");
      patriciaTrie0.mapIterator();
      int int0 = (-2500);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("y&0", (-2500), (-2500));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.putIfAbsent("", "ef=");
      patriciaTrie0.put("ef=", "ef=");
      patriciaTrie0.floorEntry((String) null);
      patriciaTrie0.floorEntry("The offsets and lengths must be at Character boundaries");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.remove((Object) "Ls/kz#'+&T$v*G14");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "F^eL7J?o<IC=");
      patriciaTrie0.incrementSize();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.higherEntry("");
      Integer integer0 = new Integer(1);
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(anyString() , any());
      patriciaTrie0.compute("F^eL7J?o<IC=", biFunction0);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.selectValue("F^eL7J?o<IC=");
      Integer integer1 = new Integer(2);
      patriciaTrie0.put("F^eL7J?o<IC=", (Object) null);
      patriciaTrie0.ceilingEntry((String) null);
      patriciaTrie0.lastKey();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      hashMap0.put(",w|_6WH cD)K", ",w|_6WH cD)K");
      patriciaTrie0.put("fromKey > toKey", (String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree(",w|_6WH cD)K", 0, 0);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-3));
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.ceilingEntry(",w|_6WH cD)K");
      Integer integer0 = new Integer(3);
      patriciaTrie2.put("", (String) null);
      String string0 = "xY#jK";
      patriciaTrie0.higherEntry(string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("C$%", integer0, 2794);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.firstEntry();
      Integer integer1 = new Integer(0);
      patriciaTrie0.put("C$%", integer1);
      patriciaTrie0.incrementSize();
      patriciaTrie0.put("$kZA|T{`<ys(psom9", "C$%");
      patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      patriciaTrie0.tailMap("%F9:456qX9");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 26);
      patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, 26);
      patriciaTrie1.ceilingEntry("C$%");
      Integer integer2 = new Integer(0);
      patriciaTrie1.put("\"", "$kZA|T{`<ys(psom9");
      patriciaTrie1.higherEntry("\"");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable0).toString();
      Integer integer0 = new Integer((-905));
      AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Comparable<Object>, Integer>(comparable0, integer0, (-905));
      Comparable<Object> comparable1 = abstractPatriciaTrie_TrieEntry0.key;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("(?5R&$t=Va=u@ 8!Z|", comparable1, (-2532));
      abstractPatriciaTrie_TrieEntry1.toString();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, abstractPatriciaTrie_TrieEntry1, 1);
      abstractPatriciaTrie_TrieEntry2.setValue((Object) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2, abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "F^eL7J?o<IC=");
      patriciaTrie0.incrementSize();
      patriciaTrie0.lowerEntry("'*m<");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.tailMap("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", (-1));
      patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry0, (-1));
      patriciaTrie2.ceilingEntry("%F9:456qX9");
      Integer integer0 = new Integer(3026);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      patriciaTrie3.put("vq", "_K_)2g&0.n(");
      patriciaTrie2.higherEntry("vq");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>((String) null, comparable0, 154);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<Object>>("]", comparable1, 154);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Comparable<Object>, Object>>) comparator0);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("4N$*sh'gRjCDLa?", "4N$*sh'gRjCDLa?", 0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("left=", "R8+");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      hashMap0.keySet();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie2.lowerEntry("A`k8NK%^qY");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("C$%", integer0, 2794);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.firstEntry();
      Integer integer1 = new Integer(0);
      patriciaTrie0.put("C$%", integer1);
      patriciaTrie0.incrementSize();
      patriciaTrie0.incrementSize();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      patriciaTrie0.compute("", biFunction0);
      patriciaTrie0.selectValue("C$%");
      patriciaTrie0.put("", "");
      patriciaTrie0.put("Cannot determine prefix outside of Character boundaries", (Object) null);
      patriciaTrie0.getNearestEntryForKey("C$%", 0);
      patriciaTrie0.ceilingEntry("");
      patriciaTrie0.lastKey();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", integer0, 2794);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap");
      patriciaTrie0.firstEntry();
      Integer integer1 = new Integer(0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", integer1);
      patriciaTrie0.incrementSize();
      patriciaTrie0.put("$kZyA|T{`ys(psom9", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      patriciaTrie0.tailMap("%F9:456qX9");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference", "%F9:456qX9", 0);
      patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, 2794);
      patriciaTrie1.ceilingEntry("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      Integer integer2 = new Integer((-1185));
      patriciaTrie1.put("%F9:456qX9", "vq");
      patriciaTrie1.higherEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.bitsPerElement();
      patriciaTrie0.put("", "");
      patriciaTrie0.floorEntry("");
      patriciaTrie0.getNearestEntryForKey("", 16);
      String string0 = "2aR25*|?O^'X#";
      patriciaTrie0.prefixMap("2aR25*|?O^'X#");
      patriciaTrie0.decrementSize();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.keySet();
      String string1 = "";
      patriciaTrie1.entrySet();
      int int0 = (-802);
      AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, AbstractMap.SimpleImmutableEntry<Integer, Integer>>("", (AbstractMap.SimpleImmutableEntry<Integer, Integer>) null, (-802));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>((Map.Entry<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "B2aoY&$b7z;V6", (-1));
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "B2aoY&$b7z;V6", (-3706));
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.getValue();
      patriciaTrie1.get("B2aoY&$b7z;V6");
      // Undeclared exception!
      try { 
        patriciaTrie1.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie1.put("<", "<");
      String string0 = "";
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("", 10, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("4N$*sh'gRjCDLa?", "4N$*sh'gRjCDLa?", 0);
      abstractPatriciaTrie_TrieEntry0.value = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$PrefixRangeEntrySet$EntryIterator";
      abstractPatriciaTrie_TrieEntry0.isEmpty();
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      patriciaTrie0.nextKey("");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      // Undeclared exception!
      try { 
        patriciaTrie1.followRight((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("", integer0);
      patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.ceilingEntry("");
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      abstractPatriciaTrie_TrieEntry1.toString();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1107);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.put("", "}\n");
      patriciaTrie1.higherEntry("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("left=", "R8+");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie0.replace("R8+", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Reference");
      patriciaTrie1.lowerEntry("A`k8NK%^qY");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "F^eL7J?o<IC=");
      patriciaTrie0.incrementSize();
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      patriciaTrie0.compute("F^eL7J?o<IC=", biFunction0);
      patriciaTrie0.selectValue("F^eL7J?o<IC=");
      patriciaTrie0.put("F^eL7J?o<IC=", (Object) null);
      patriciaTrie0.ceilingEntry("F^eL7J?o<IC=");
      patriciaTrie0.lastKey();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "$Y7d{_$prr]]6L=5");
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>((Integer) null, abstractMap_SimpleEntry0, 0);
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Object>>) comparator0);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>(integer0, abstractMap_SimpleEntry0, 0);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0.right;
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("$Y7d{_$prr]]6L=5", abstractPatriciaTrie_TrieEntry0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>(0);
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(hashMap0);
      patriciaTrie1.entrySet();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("$Y7d{_$prr]]6L=5", "p7\"K4", 0);
      patriciaTrie2.followLeft(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>(hashMap0);
      hashMap0.values();
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>((String) null, (Comparable<String>) null, 1521);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      patriciaTrie0.nextEntry(abstractPatriciaTrie_TrieEntry1);
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Object>>();
      patriciaTrie1.values();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Comparable<String>> patriciaTrie1 = new PatriciaTrie<Comparable<String>>(patriciaTrie0);
      patriciaTrie1.lengthInBits("%>~");
      patriciaTrie0.toString();
      patriciaTrie0.put("Rb6U", "%>~");
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("%>~", 330, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>(hashMap0);
      patriciaTrie0.entrySet();
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("", "", 784);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry1);
      patriciaTrie0.subtree((String) null, 0, 0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      String string0 = " is not an internal Entry!";
      patriciaTrie1.put(" is not an internal Entry!", patriciaTrie0);
      patriciaTrie1.incrementSize();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(" is not an internal Entry!", "g:WD0A#^>R&LrV2");
      PatriciaTrie<Comparable<String>> patriciaTrie2 = new PatriciaTrie<Comparable<String>>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>((String) null, (Comparable<String>) null, 1);
      patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry0, 1);
      patriciaTrie2.put("_5;|>", (Comparable<String>) null);
      // Undeclared exception!
      try { 
        patriciaTrie2.get(patriciaTrie1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "4N$*sh'gRjCDLa?";
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>();
      patriciaTrie0.lengthInBits("!qEtjoeW");
      int int0 = 330;
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      String string1 = "FromKey is out of range: ";
      patriciaTrie1.put("^`|.J6?i", "FromKey is out of range: ");
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("Trie[", 2, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      abstractPatriciaTrie_TrieEntry1.toString();
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(";oqgmtXT]z", "ROOT");
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree((String) null, (-455), 1185);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offsets and lengths must be at Character boundaries
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = "org.apache.commons.collections4.trie.KeyAnalyzer";
      Integer integer0 = new Integer(272);
      patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer0);
      patriciaTrie0.toString();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("org.apache.commons.collections4.trie.KeyAnalyzer", "org.apache.commons.collections4.trie.KeyAnalyzer");
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree((String) null, 272, 272);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      abstractPatriciaTrie_TrieEntry1.toString();
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(";oqgmtXT]z", "ROOT");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.put("Entry(key= [-862], value=, parent=null, left= [-862], right=null, predecessor= [-862])", abstractPatriciaTrie_TrieEntry0.left);
      patriciaTrie0.previousKey("Entry(key= [-862], value=, parent=null, left= [-862], right=null, predecessor= [-862])");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, integer1);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, Object>(abstractMap_SimpleEntry0, integer0, 1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, Object>(abstractMap_SimpleEntry0, integer0, 1);
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.toString();
      Map.Entry.comparingByValue((Comparator<? super Comparable<Comparable<Comparable>>>) comparator0);
      Map.Entry.comparingByValue();
      abstractPatriciaTrie_TrieEntry0.toString();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(944);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("le^:,bpqP/vU8!dpgT\"", "le^:,bpqP/vU8!dpgT\"", 944);
      patriciaTrie2.put("le^:,bpqP/vU8!dpgT\"", "le^:,bpqP/vU8!dpgT\"");
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.addEntry(abstractPatriciaTrie_TrieEntry0, 176);
      patriciaTrie2.ceilingEntry("6");
      Integer integer1 = new Integer(1024);
      patriciaTrie1.put("h|f63|", "6");
      Object object0 = new Object();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(object0, abstractPatriciaTrie_TrieEntry1, 0);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("key=", patriciaTrie2, 11);
      abstractPatriciaTrie_TrieEntry2.parent = abstractPatriciaTrie_TrieEntry3;
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("h|f63|", "h|f63|", 144);
      abstractPatriciaTrie_TrieEntry2.left = abstractPatriciaTrie_TrieEntry4;
      abstractPatriciaTrie_TrieEntry2.toString();
      abstractPatriciaTrie_TrieEntry2.isExternalNode();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("]DG6!hVURR8yz,", comparator0, (-3));
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("ROOT", ";oqgmtXT]z");
      hashMap0.put("f#u>t;Szi2eS", "");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.put("u5]6#CFs3", "]DG6!hVURR8yz,");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie2.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      abstractPatriciaTrie_TrieEntry1.toString();
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(";oqgmtXT]z", "ROOT");
      String string0 = "f#u>t;Szi2eS";
      hashMap0.put("f#u>t;Szi2eS", "f#u>t;Szi2eS");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.put("k;g&sI`eJ8YAX-", hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.previousKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer((-44));
      patriciaTrie0.put("a/lX3L>+", integer0);
      Integer integer1 = new Integer(896);
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieIterator", integer1);
      patriciaTrie0.remove((Object) ";[");
      Integer integer2 = new Integer((-1));
      patriciaTrie0.put(";[", integer2);
      patriciaTrie0.toString();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.putIfAbsent("", "efb");
      patriciaTrie0.put("efb", "efb");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.floorEntry("The offsets and lengths Oust be at Character boundaries");
      patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<Comparable<Object>> patriciaTrie1 = new PatriciaTrie<Comparable<Object>>();
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      patriciaTrie1.put("", comparable0);
      patriciaTrie1.prefixMap("]={\n");
      Integer integer0 = new Integer(2531);
      patriciaTrie0.put(">%I]_8@", integer0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable1).toString();
      patriciaTrie1.compareKeys("]={\n", "]={\n");
      patriciaTrie1.putIfAbsent("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet", comparable1);
      patriciaTrie1.headMap("OSKsuFVQYL`jsRh");
      patriciaTrie1.selectKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet");
      Comparable<Object> comparable2 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparable2).toString();
      Comparable<Object> comparable3 = patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet", comparable2);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet", comparable3);
      patriciaTrie1.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", comparable3);
      BiFunction<String, Object, Comparable<Object>> biFunction0 = (BiFunction<String, Object, Comparable<Object>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      patriciaTrie1.computeIfPresent("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", biFunction0);
      patriciaTrie1.remove((Object) "");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie2.put("", (String) null);
      patriciaTrie2.prefixMap("iIL");
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, (String) null, 0);
      abstractPatriciaTrie_TrieEntry0.setKeyValue((Object) null, "]9\"evsOlP00>q:L1h");
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      abstractPatriciaTrie_TrieEntry1.toString();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1107);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.put("Entry(key= [-862], value=, parent=null, left= [-862], right=null, predecessor= [-862])", "Entry(key= [-862], value=, parent=null, left= [-862], right=null, predecessor= [-862])");
      patriciaTrie0.remove((Object) "Entry(key= [-862], value=, parent=null, left= [-862], right=null, predecessor= [-862])");
      patriciaTrie1.put("", "}\n");
      patriciaTrie1.higherEntry("");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      abstractPatriciaTrie_TrieEntry1.toString();
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(";oqgmtXT]z", "ROOT");
      hashMap0.put("f#u>t;Szi2eS", "f#u>t;Szi2eS");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.put("", "ROOT");
      patriciaTrie0.previousKey("");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie1.put(";oqgmtXT]z", (String) null);
      patriciaTrie1.put(";oqgmtXT]z", "");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie3.higherEntry("f#u>t;Szi2eS");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.keySet();
      String string0 = "%F9:456qX9";
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      String string1 = null;
      // Undeclared exception!
      try { 
        patriciaTrie1.tailMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.ceilingEntry("");
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.put("", "");
      patriciaTrie2.subtree("", 377, (-1));
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie3.decrementSize();
      patriciaTrie2.bitsPerElement();
      patriciaTrie2.replace("", "", "");
      patriciaTrie3.keySet();
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie2);
      patriciaTrie0.lastEntry();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie0);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "CG/2lEP", 0);
      patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("3 5KfmUD0Nu", patriciaTrie0);
      patriciaTrie0.put("3 5KfmUD0Nu", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.prefixMap("3 5KfmUD0Nu");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) comparator0);
      patriciaTrie0.modCount = 16;
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.subtree("3 5KfmUD0Nu", (-1705), 16);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.decrementSize();
      patriciaTrie3.prefixMap("");
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.keySet();
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie5.lastEntry();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = (-862);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      abstractPatriciaTrie_TrieEntry1.toString();
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = ";oqgmtXT]z";
      hashMap0.put(";oqgmtXT]z", "ROOT");
      hashMap0.put("f#u>t;Szi2eS", "f#u>t;Szi2eS");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.put("", "ROOT");
      patriciaTrie0.previousKey("");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie3 = null;
      try {
        patriciaTrie3 = new PatriciaTrie<String>((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("C$%", integer0, 2794);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.firstEntry();
      Integer integer1 = new Integer(0);
      patriciaTrie0.put("C$%", integer1);
      patriciaTrie0.incrementSize();
      patriciaTrie0.put("$kZyA|T{`ys(psom9", "C$%");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("%F9:456qX9");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie1.incrementSize();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("C$%", "%F9:456qX9", 0);
      AbstractBitwiseTrie.compare(integer0, sortedMap0);
      patriciaTrie1.ceilingEntry("C$%");
      Integer integer2 = new Integer((-1185));
      patriciaTrie1.put("%F9:456qX9", "vq");
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer2, integer1, 0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      abstractPatriciaTrie_TrieEntry3.toString();
      patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      hashMap0.put(",w|_6WH cD)K", ",w|_6WH cD)K");
      patriciaTrie0.put("fromKey > toKey", (String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.subtree(",w|_6WH cD)K", 0, 0);
      patriciaTrie0.addEntry(abstractPatriciaTrie_TrieEntry0, (-3));
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(13);
      patriciaTrie3.put("]^2_$L{lZ", integer0);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.ceilingEntry((String) null);
      patriciaTrie3.nextEntryImpl(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "";
      patriciaTrie0.ceilingEntry("");
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      int int0 = (-1399);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.tailMap("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(hashMap0);
      String string1 = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator";
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (-1));
      int int1 = (-370);
      Integer integer0 = new Integer((-370));
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values$ValueIterator", (-370));
      Integer integer1 = abstractPatriciaTrie_TrieEntry1.key;
      Integer integer2 = new Integer((-1399));
      AbstractBitwiseTrie.compare(integer1, integer2);
      // Undeclared exception!
      try { 
        patriciaTrie3.addEntry(abstractPatriciaTrie_TrieEntry0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.clear();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.lowerEntry((String) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.bitsPerElement();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.put("", patriciaTrie0);
      patriciaTrie1.size();
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      patriciaTrie3.headMap("${T");
      patriciaTrie3.incrementSize();
      // Undeclared exception!
      try { 
        patriciaTrie3.firstKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("57d'?;1rOx", "");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.subtree("=V&4RksZ]~", 0, 128);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie1.decrementSize();
      patriciaTrie1.bitsPerElement();
      patriciaTrie1.replace("EN]im", (String) null, "");
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie2);
      patriciaTrie4.keySet();
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(patriciaTrie4);
      patriciaTrie0.lastEntry();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put(" [", "");
      Object object0 = new Object();
      patriciaTrie0.put("The offsets and lengths must be at Character boundaries", object0);
      patriciaTrie0.values();
      Integer integer0 = new Integer((-2917));
      Integer integer1 = new Integer((-2917));
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      AbstractBitwiseTrie.compare(" [", "F^eL7J?o<IC=");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      int int0 = (-3062);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("R@jjKH4v)Vf[?^E", "R@jjKH4v)Vf[?^E", (-3062));
      // Undeclared exception!
      try { 
        patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry0, 1883);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.values();
      patriciaTrie0.values();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "F^eL7J?o<IC=");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>((String) null, "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", (-1469));
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("3 5KfmUD0Nu", patriciaTrie0);
      patriciaTrie0.put("3 5KfmUD0Nu", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.prefixMap("V?8E");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) comparator0);
      patriciaTrie0.modCount = 16;
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.subtree("V?8E", (-1705), 16);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.decrementSize();
      patriciaTrie3.prefixMap("");
      patriciaTrie3.subMap("", "");
      patriciaTrie1.put("u(mci`OoC[yL@C|o", "");
      patriciaTrie2.higherEntry(")=eL");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("57d'?;1rOx", "57d'?;1rOx");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.subtree("=V&4RksZ]~", 0, 128);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie1.decrementSize();
      String string0 = "";
      patriciaTrie2.prefixMap("");
      // Undeclared exception!
      try { 
        patriciaTrie2.subMap("|y@6.", "org.apache.commons.collections4.trie.AbstractBitwiseTrie");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "$Y7d{_$prr]]6L=5");
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>((Integer) null, abstractMap_SimpleEntry0, 0);
      abstractPatriciaTrie_TrieEntry0.value = abstractMap_SimpleEntry0;
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Object>>) comparator0);
      abstractPatriciaTrie_TrieEntry0.value = abstractMap_SimpleEntry0;
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>(integer0, abstractMap_SimpleEntry0, 0);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0.right;
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.subtree("=Rkxs#'s5y5EBl;Hr", 0, 0);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.decrementSize();
      patriciaTrie3.subMap("Failed to put: ", "rUzK+<o@+%JNlXmD+NA");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie4 = new PatriciaTrie<Object>(hashMap0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      abstractPatriciaTrie_TrieEntry1.toString();
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("value=", "ROOT");
      hashMap0.put("f#u>t;Szi2eS", "f#u>t;Szi2eS");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.put("0", "ROOT");
      patriciaTrie0.previousKey("");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie4.decrementSize();
      patriciaTrie3.subMap("right=", "right=");
      PatriciaTrie<Object> patriciaTrie5 = new PatriciaTrie<Object>(hashMap0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("3 5KfmUD0Nu", patriciaTrie0);
      patriciaTrie0.put("3 5KfmUD0Nu", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.prefixMap("V?8E");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) comparator0);
      patriciaTrie0.modCount = 16;
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.subtree("V?8E", (-1705), 16);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.decrementSize();
      patriciaTrie3.subMap("-Y61+]P5pPVrR", "-Y61+]P5pPVrR");
      PatriciaTrie<Object> patriciaTrie4 = null;
      try {
        patriciaTrie4 = new PatriciaTrie<Object>(patriciaTrie2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.clear();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = null;
      patriciaTrie0.lowerEntry((String) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, patriciaTrie1, (-1326));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      // Undeclared exception!
      try { 
        patriciaTrie1.previousEntry((AbstractPatriciaTrie.TrieEntry<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>(hashMap0);
      patriciaTrie0.entrySet();
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("+3<N@H&", "+3<N@H&", 784);
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Comparable<String>>("", "", 96);
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, Comparable<String>> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry0.predecessor;
      patriciaTrie0.previousEntry(abstractPatriciaTrie_TrieEntry2);
      patriciaTrie0.subtree((String) null, 0, 0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      PatriciaTrie<Comparable<String>> patriciaTrie0 = new PatriciaTrie<Comparable<String>>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie1.floorEntry("\n");
      patriciaTrie1.put("<", "<");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      Object object0 = new Object();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      patriciaTrie3.toString();
      PatriciaTrie<Comparable<String>> patriciaTrie4 = new PatriciaTrie<Comparable<String>>(patriciaTrie3);
      patriciaTrie4.put("]={\n", "]={\n");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "C$%";
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("C$%", integer0, 2794);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.firstEntry();
      Integer integer1 = new Integer(0);
      patriciaTrie0.put("C$%", integer1);
      patriciaTrie0.incrementSize();
      patriciaTrie0.put("$kZyA|T{`ys(psom9", "C$%");
      patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      patriciaTrie0.tailMap("%F9:456qX9");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(hashMap0, (Object) null, 2794);
      abstractPatriciaTrie_TrieEntry1.isInternalNode();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      hashMap2.keySet();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap1);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie1.floorEntry("");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = null;
      try {
        abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>((Map.Entry<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("org.apache.commons.collections4.trie.KeyAnalyzer", "org.apache.commons.collections4.trie.KeyAnalyzer", 144);
      Object object0 = new Object();
      int int0 = 2538;
      Integer integer0 = new Integer(2538);
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(object0, integer0, 1);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.predecessor;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>) comparator0);
      abstractPatriciaTrie_TrieEntry1.predecessor = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry0.setValue("org.apache.commons.collections4.trie.KeyAnalyzer");
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<String, Object>>) comparator1);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry2;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.floorEntry("org.apache.commons.collections4.trie.KeyAnalyzer");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = null;
      try {
        abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>((Map.Entry<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string0 = "";
      String string1 = "c1:d cxsn*sw?L`";
      patriciaTrie0.put("", "c1:d cxsn*sw?L`");
      String string2 = "";
      // Undeclared exception!
      try { 
        patriciaTrie0.subtree("jf", (-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.ceilingEntry("");
      PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleEntry<Integer, Object>>();
      patriciaTrie0.select("");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("A0lA\"WMhVZfw,  </", "A0lA\"WMhVZfw,  </");
      Map.Entry.comparingByKey();
      Integer integer0 = new Integer((-1681));
      Integer integer1 = new Integer((-1681));
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object>(abstractMap_SimpleEntry0, integer1, (-1399));
      abstractPatriciaTrie_TrieEntry0.toString();
      Integer integer2 = new Integer(212);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      patriciaTrie2.containsKey((Object) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", (-1681));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.left;
      patriciaTrie2.addEntry(abstractPatriciaTrie_TrieEntry2, (-1681));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie3 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer3 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer3, 0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer3, 1);
      abstractPatriciaTrie_TrieEntry3.left = abstractPatriciaTrie_TrieEntry4;
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry5 = abstractPatriciaTrie_TrieEntry3.left;
      patriciaTrie3.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry5, abstractPatriciaTrie_TrieEntry5);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      String string0 = "";
      patriciaTrie0.put("fromKey > toKey", "");
      patriciaTrie0.subtree(",w|_6WH cD)K", 0, 0);
      patriciaTrie0.firstKey();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.decrementSize();
      patriciaTrie2.decrementSize();
      patriciaTrie2.bitsPerElement();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie4 = null;
      try {
        patriciaTrie4 = new PatriciaTrie<String>(patriciaTrie2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(1);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      String string0 = "";
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        patriciaTrie2.getEntry(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "$Y7d{_$prr]]6L=5");
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      patriciaTrie0.put("-Ph-2[)w&B'1:7Q7a", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.prefixMap("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) comparator0);
      patriciaTrie0.ceilingEntry("@h0%Z_fUg");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(hashMap1);
      hashMap1.clear();
      Integer integer0 = new Integer(0);
      patriciaTrie1.put("$Y7d{_$prr]]6L=5", (Integer) null);
      patriciaTrie1.lowerEntry("");
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.bitsPerElement();
      patriciaTrie2.put("$Y7d{_$prr]]6L=5", hashMap1);
      patriciaTrie2.size();
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      AbstractPatriciaTrie.isValidUplink((AbstractPatriciaTrie.TrieEntry<?, ?>) null, (AbstractPatriciaTrie.TrieEntry<?, ?>) null);
      Integer integer1 = new Integer((-2764));
      // Undeclared exception!
      try { 
        patriciaTrie2.getEntry(integer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = new Integer((-862));
      Object object0 = new Object();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer0, object0, (-1535));
      String string0 = "";
      int int0 = 128;
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("", abstractPatriciaTrie_TrieEntry0, 128);
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      String string1 = "r^8L0hQT>s9q]c\"X42";
      patriciaTrie0.put("r^8L0hQT>s9q]c\"X42", "#W9dA##*tI;K");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.replace(">=oVWH[/aT[xss6q`h", (Object) abstractPatriciaTrie_TrieEntry0);
      patriciaTrie1.select("");
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      Map.Entry.comparingByKey();
      int int1 = 212;
      Integer integer1 = new Integer(212);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object>(abstractMap_SimpleEntry0, integer1, (-862));
      abstractPatriciaTrie_TrieEntry2.toString();
      Integer integer2 = new Integer((-1535));
      // Undeclared exception!
      try { 
        patriciaTrie0.containsKey(integer2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("4N$*sh'gRjCDLa?", "4N$*sh'gRjCDLa?", 0);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isEmpty();
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subMap("C+w", "7vb@1F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey > toKey
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("C$%", integer0, 2794);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.firstEntry();
      Integer integer1 = new Integer(0);
      patriciaTrie0.put("C$%", integer1);
      patriciaTrie0.incrementSize();
      patriciaTrie0.put("$kZyA|T{`ys(psom9", "C$%");
      patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      patriciaTrie0.tailMap("%F9:456qX9");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("C$%", "%F9:456qX9", 0);
      Integer integer2 = new Integer((-1));
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer1, "");
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>(integer2, abstractMap_SimpleEntry0, 0);
      abstractPatriciaTrie_TrieEntry2.toString();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie0);
      Integer integer3 = new Integer((-1));
      AbstractPatriciaTrie.TrieEntry<Integer, Integer> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Integer>(integer3, integer1, 32768);
      Object object0 = abstractPatriciaTrie_TrieEntry3.getValue();
      patriciaTrie3.put("C$%", object0);
      patriciaTrie0.higherEntry("jXJj");
      PatriciaTrie<String> patriciaTrie4 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie5 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie4.lastEntry();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      String string0 = "F^eL7J?o<IC=";
      String string1 = "fromKey > toKey";
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      patriciaTrie1.put("", "fromKey > toKey");
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("", 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Integer integer0 = null;
      String string0 = "$Y7d{_$prr]]6L=5";
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "$Y7d{_$prr]]6L=5");
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      patriciaTrie0.put("-Ph-2[)w&B'1:7Q7a", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.prefixMap("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) comparator0);
      patriciaTrie0.ceilingEntry("@h0%Z_fUg");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      // Undeclared exception!
      try { 
        hashMap1.forEach((BiConsumer<? super String, ? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.firstEntry();
      Integer integer0 = new Integer(0);
      patriciaTrie0.incrementSize();
      patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      patriciaTrie0.tailMap("%F9:456qX9");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      Integer integer1 = new Integer((-1185));
      patriciaTrie1.put("%F9:456qX9", "vq");
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer1, integer0, 0);
      abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      patriciaTrie1.higherEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "$Y7d{_$prr]]6L=5");
      String string0 = "";
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.isBitSet("", 0, 0);
      patriciaTrie1.put("", "");
      String string1 = "org.apache.commons.collections4.trie.AbstractBitwiseTrie";
      // Undeclared exception!
      try { 
        patriciaTrie1.subtree("org.apache.commons.collections4.trie.AbstractBitwiseTrie", (-4213), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.values();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "F^eL7J?o<IC=");
      patriciaTrie0.incrementSize();
      patriciaTrie0.put("F^eL7J?o<IC=", "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      patriciaTrie0.selectValue("F^eL7J?o<IC=");
      patriciaTrie0.ceilingEntry("F^eL7J?o<IC=");
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("i'i5H$_taP68.uM&", "i'i5H$_taP68.uM&", 1515);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put(" [", "");
      Object object0 = new Object();
      patriciaTrie0.put("The offsets and lengths must be at Character boundaries", object0);
      patriciaTrie0.values();
      Integer integer0 = new Integer((-2917));
      Integer integer1 = new Integer((-2917));
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.remove((Object) "F^eL7J?o<IC=");
      Integer integer2 = new Integer((-2532));
      Integer integer3 = new Integer((-2532));
      patriciaTrie1.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", integer3);
      patriciaTrie1.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", integer2);
      patriciaTrie1.decrementSize();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "F^eL7J?o<IC=");
      patriciaTrie0.incrementSize();
      patriciaTrie0.getNearestEntryForKey("F^eL7J?o<IC=", 48);
      patriciaTrie0.remove((Object) null);
      patriciaTrie0.selectValue("F^eL7J?o<IC=");
      patriciaTrie0.ceilingEntry("F^eL7J?o<IC=");
      patriciaTrie0.lastKey();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>("3 5KfmUD0Nu", patriciaTrie0);
      patriciaTrie0.put("3 5KfmUD0Nu", abstractMap_SimpleImmutableEntry0);
      String string0 = "V?8E";
      patriciaTrie0.prefixMap("V?8E");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) comparator0);
      patriciaTrie0.modCount = 16;
      patriciaTrie0.ceilingEntry("2H(yYsYsKu`t)1(");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      // Undeclared exception!
      try { 
        hashMap0.forEach((BiConsumer<? super String, ? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.keySet();
      Function<String, String> function0 = Function.identity();
      patriciaTrie1.put("j", "j");
      patriciaTrie0.put("j", "j");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("j").when(biFunction0).apply(any() , any());
      patriciaTrie1.compute("", biFunction0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("></SP''.", "j").when(function1).apply(any());
      Function<String, String> function2 = function0.compose((Function<? super String, ? extends String>) function1);
      Function<String, String> function3 = function2.andThen((Function<? super String, ? extends String>) function0);
      function3.apply("E4Sz,`w;koA0");
      patriciaTrie1.put("j", "j");
      patriciaTrie0.computeIfAbsent("j", function3);
      function2.apply("");
      patriciaTrie0.nextKey("x/3negp}1");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie", (String) null);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie", (String) null);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.higherEntry((String) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.keySet();
      Function<String, String> function0 = Function.identity();
      patriciaTrie1.put("j", "j");
      patriciaTrie0.put("j", "j");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("j").when(biFunction0).apply(any() , any());
      patriciaTrie1.compute("", biFunction0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("></SP''.").when(function1).apply(any());
      Function<String, String> function2 = function0.compose((Function<? super String, ? extends String>) function1);
      Function<String, String> function3 = function2.andThen((Function<? super String, ? extends String>) function0);
      function3.apply("E4Sz,`w;koA0");
      patriciaTrie1.put("j", "j");
      patriciaTrie0.computeIfAbsent("j", function3);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, "t");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String>(abstractMap_SimpleEntry0, "", 2);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String>(abstractMap_SimpleEntry0, "", 64);
      abstractPatriciaTrie_TrieEntry1.isInternalNode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.put("j", "></SP''.");
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie3.values();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "F^eL7J?o<IC=");
      patriciaTrie0.incrementSize();
      patriciaTrie0.remove((Object) null);
      patriciaTrie0.selectValue("F^eL7J?o<IC=");
      patriciaTrie0.ceilingEntry("F^eL7J?o<IC=");
      patriciaTrie0.lastKey();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("4N$*sh'gRjCDLa?", "4N$*sh'gRjCDLa?", 0);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.put("Trie[", "4N$*sh'gRjCDLa?");
      patriciaTrie0.lastKey();
      Function<String, String> function0 = Function.identity();
      function0.apply("");
      patriciaTrie0.lowerEntry("Trie[");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie1.bitIndex("P!<B]1m", "%");
      patriciaTrie1.tailMap("6831,spGS<");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      patriciaTrie0.computeIfPresent("", biFunction0);
      patriciaTrie0.forEach(biConsumer0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      int int0 = 272;
      patriciaTrie2.modCount = 272;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("6Cw]", "6Cw]", 2201);
      patriciaTrie2.compareKeys("", (String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", (String) null, 32);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = abstractPatriciaTrie_TrieEntry1.parent;
      patriciaTrie0.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, String>) null, (AbstractPatriciaTrie.TrieEntry<String, String>) null);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, 2201);
      abstractPatriciaTrie_TrieEntry0.bitIndex = 2201;
      abstractPatriciaTrie_TrieEntry0.key = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$1";
      abstractPatriciaTrie_TrieEntry3.predecessor = abstractPatriciaTrie_TrieEntry0;
      // Undeclared exception!
      try { 
        patriciaTrie0.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 0);
      abstractPatriciaTrie_TrieEntry1.isEmpty();
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      // Undeclared exception!
      try { 
        patriciaTrie0.nextKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(patriciaTrie0);
      hashMap0.put("YTn[uaZ{RXGM@cmHy%z", "");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.higherEntry("=");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(patriciaTrie0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
      // Undeclared exception!
      try { 
        patriciaTrie0.putIfAbsent((String) null, "B1RD) j~b.g?^\u0007");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer integer0 = new Integer((-463));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 1);
      abstractPatriciaTrie_TrieEntry0.getKey();
      Integer integer1 = new Integer(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Object) null, integer1);
      Map.Entry.comparingByValue();
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry0, "![", (-1871));
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(hashMap0);
      Function<Object, Object> function0 = Function.identity();
      Function<Object, Object> function1 = function0.compose((Function<? super Object, ?>) function0);
      Function<Object, Object> function2 = function1.andThen((Function<? super Object, ?>) function0);
      patriciaTrie2.computeIfAbsent("![", function2);
      patriciaTrie2.previousKey("");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = new Integer(0);
      int int0 = 2794;
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.firstEntry();
      Integer integer1 = new Integer(2794);
      patriciaTrie0.incrementSize();
      String string0 = "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer";
      patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      String string1 = "%F9:456qX9";
      patriciaTrie0.tailMap("%F9:456qX9");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie1.subtree("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 0, (-1));
      patriciaTrie1.containsKey((Object) null);
      // Undeclared exception!
      try { 
        patriciaTrie1.addEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null, 2794);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Ls/", "Ls/", (-2532));
      abstractPatriciaTrie_TrieEntry0.toString();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("n1<U~V0%h#-_|", "Ls/", (-2532));
      abstractPatriciaTrie_TrieEntry1.setValue("-#_r.,@>~(]l,&a_");
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("KtyTZ", "Ls/", 2);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.parent;
      // Undeclared exception!
      try { 
        patriciaTrie1.nextEntryImpl((AbstractPatriciaTrie.TrieEntry<String, Object>) null, (AbstractPatriciaTrie.TrieEntry<String, Object>) null, abstractPatriciaTrie_TrieEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = "";
      Integer integer0 = new Integer((-1658));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, (-2728));
      abstractPatriciaTrie_TrieEntry0.equals(patriciaTrie0);
      abstractPatriciaTrie_TrieEntry0.setValue(integer0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.predecessor;
      // Undeclared exception!
      try { 
        patriciaTrie0.removeEntry(abstractPatriciaTrie_TrieEntry1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = null;
      int int0 = 0;
      patriciaTrie0.lowerEntry((String) null);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("R;", patriciaTrie0);
      Map.Entry.comparingByValue();
      patriciaTrie0.putIfAbsent("GSy<=|F", abstractMap_SimpleEntry0);
      patriciaTrie0.firstKey();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie0.nextKey("GSy<=|F");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.incrementSize();
      patriciaTrie0.keySet();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      patriciaTrie1.comparator();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("org.apache.commons.collections4.trie.KeyAnalyzer", ">oq2}In}KBuBEm!D!}");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1689);
      hashMap0.put("W|\"D3s%x=", integer0);
      hashMap0.clear();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.lowerEntry("78");
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      patriciaTrie3.bitsPerElement();
      patriciaTrie3.put(">oq2}In}KBuBEm!D!}", abstractMap_SimpleImmutableEntry0);
      patriciaTrie3.previousKey("o?aa>9BN5");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.incrementSize();
      patriciaTrie0.keySet();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      patriciaTrie1.comparator();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("f')JYYC(wcBnf", ">oq2}In}KBuBEm!D!}");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.clear();
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      patriciaTrie2.lowerEntry("");
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      patriciaTrie3.bitsPerElement();
      patriciaTrie3.put(">oq2}In}KBuBEm!D!}", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.size();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("4N$*sh'gRjCDLa?", "4N$*sh'gRjCDLa?", 0);
      abstractPatriciaTrie_TrieEntry0.isEmpty();
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      patriciaTrie0.nextKey("");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "$Y7d{_$prr]]6L=5");
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>((Integer) null, abstractMap_SimpleEntry0, 0);
      abstractPatriciaTrie_TrieEntry0.value = abstractMap_SimpleEntry0;
      Integer integer0 = new Integer(0);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.decrementSize();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("predecessor=", "", (-2));
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("$Y7d{_$prr]]6L=5", "Ou{", (-2));
      patriciaTrie2.containsKey("s<?kZn'7*dXdu9");
      abstractPatriciaTrie_TrieEntry2.toString();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<String, String>("s<?kZn'7*dXdu9", "Ou{", 0);
      patriciaTrie0.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry3, abstractPatriciaTrie_TrieEntry3);
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry4 = new AbstractPatriciaTrie.TrieEntry<String, Object>((String) null, (Object) null, 0);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry2);
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie2);
      patriciaTrie3.selectValue("s<?kZn'7*dXdu9");
      // Undeclared exception!
      try { 
        patriciaTrie0.ceilingEntry("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.put("fromKey > toKey", "");
      patriciaTrie0.subtree(",w|_6WH cD)K", 0, 0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.decrementSize();
      patriciaTrie2.bitsPerElement();
      patriciaTrie2.modCount = 16;
      patriciaTrie2.put("", "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry");
      patriciaTrie2.replace("", "", "");
      patriciaTrie2.keySet();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 0);
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, integer1);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Integer, Object>, Object>(abstractMap_SimpleEntry0, integer0, 1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(";oqgmtXT]z", "org.apache.commons.collections4.trie.KeyAnalyzer");
      hashMap0.put("=[`\"x]O#uAg26`rOMx", ":FbT8r");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      patriciaTrie0.put("org.apache.commons.collections4.trie.KeyAnalyzer", integer1);
      patriciaTrie0.previousKey("org.apache.commons.collections4.trie.KeyAnalyzer");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie1.compareKeys(";oqgmtXT]z", ":FbT8r");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>(patriciaTrie1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = "8j=UYO";
      patriciaTrie0.prefixMap("8j=UYO");
      Integer integer0 = new Integer((-3668));
      patriciaTrie0.put("8j=UYO", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      patriciaTrie0.mapIterator();
      patriciaTrie0.put("8j=UYO", (Integer) null);
      patriciaTrie1.bitIndex("8j=UYO", "8j=UYO");
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie0.put("8j=UYO", (Integer) null);
      patriciaTrie1.bitsPerElement();
      int int0 = 0;
      // Undeclared exception!
      try { 
        patriciaTrie0.remove((Object) patriciaTrie2, (Object) "8j=UYO");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("C$%", integer0, 2794);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.firstEntry();
      Integer integer1 = new Integer(0);
      patriciaTrie0.put("C$%", integer1);
      patriciaTrie0.incrementSize();
      patriciaTrie0.put("$kZyA|T{`ys(psom9", "C$%");
      patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      SortedMap<String, Object> sortedMap0 = patriciaTrie0.tailMap("%F9:456qX9");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, String>("C$%", "%F9:456qX9", 0);
      AbstractBitwiseTrie.compare(integer0, sortedMap0);
      patriciaTrie1.addEntry(abstractPatriciaTrie_TrieEntry1, 2794);
      patriciaTrie1.ceilingEntry("C$%");
      Integer integer2 = new Integer((-1185));
      patriciaTrie1.put("%F9:456qX9", "vq");
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer2, integer1, 0);
      abstractPatriciaTrie_TrieEntry2.toString();
      abstractPatriciaTrie_TrieEntry2.isExternalNode();
      patriciaTrie1.higherEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.keySet();
      Function<String, String> function0 = Function.identity();
      patriciaTrie1.put("j", "j");
      patriciaTrie0.put("j", "j");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      patriciaTrie1.compute("", biFunction0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function1).apply(any());
      Function<String, String> function2 = function0.compose((Function<? super String, ? extends String>) function1);
      Function<String, String> function3 = function2.andThen((Function<? super String, ? extends String>) function0);
      function3.apply("E4Sz,`w;koA0");
      patriciaTrie1.put("j", "j");
      patriciaTrie0.computeIfAbsent("j", function3);
      function2.apply("");
      patriciaTrie0.nextKey("x/3negp}1");
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie", (String) null);
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie", (String) null);
      patriciaTrie1.lastKey();
      function2.apply("");
      patriciaTrie1.lowerEntry((String) null);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie2.tailMap("");
      PatriciaTrie<Integer> patriciaTrie3 = null;
      try {
        patriciaTrie3 = new PatriciaTrie<Integer>((Map<? extends String, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("4N$*sh'gRjCDLa?", (Object) null, (-1));
      String string0 = "!-#*o#_OfV73R[";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("!-#*o#_OfV73R[", abstractPatriciaTrie_TrieEntry0, (-1));
      abstractPatriciaTrie_TrieEntry1.toString();
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "!-#*o#_OfV73R[");
      String string1 = "";
      hashMap0.put("", "");
      PatriciaTrie<Object> patriciaTrie0 = null;
      try {
        patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("Ls/", "Ls/", (-2532));
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=Ls/ [-2532], value=Ls/, parent=null, left=Ls/ [-2532], right=null, predecessor=Ls/ [-2532])", string0);
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("n1<U~V0%h#-_|", "Ls/", (-2532));
      abstractPatriciaTrie_TrieEntry1.setValue("Entry(key=Ls/ [-2532], value=Ls/, parent=null, left=Ls/ [-2532], right=null, predecessor=Ls/ [-2532])");
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.nextEntryImpl(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertNull(abstractPatriciaTrie_TrieEntry2);
      assertFalse(abstractPatriciaTrie_TrieEntry0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<String, String>>();
      String string0 = "";
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      abstractMap_SimpleEntry0.setValue("");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleEntry0);
      Map.Entry.comparingByValue();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator1);
      patriciaTrie0.put("", abstractMap_SimpleImmutableEntry0);
      patriciaTrie0.toString();
      // Undeclared exception!
      try { 
        patriciaTrie0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.clear();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = "";
      patriciaTrie0.lowerEntry((String) null);
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>();
      patriciaTrie1.bitsPerElement();
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      patriciaTrie2.put("", patriciaTrie0);
      patriciaTrie1.size();
      PatriciaTrie<AbstractMap.SimpleEntry<String, Object>> patriciaTrie3 = new PatriciaTrie<AbstractMap.SimpleEntry<String, Object>>();
      // Undeclared exception!
      try { 
        patriciaTrie3.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.higherEntry("org.apache.commons.collections4.trie.PatriciaTrie");
      String string0 = null;
      // Undeclared exception!
      try { 
        patriciaTrie0.headMap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.headMap("]:H-Jv~t");
      patriciaTrie0.put(" [", "");
      Object object0 = new Object();
      patriciaTrie0.put("The offsets and lengths must be at Character boundaries", object0);
      patriciaTrie0.selectValue("");
      patriciaTrie0.values();
      Integer integer0 = new Integer((-2917));
      Integer integer1 = new Integer((-2917));
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>();
      patriciaTrie1.remove((Object) "F^eL7J?o<IC=");
      Integer integer2 = new Integer((-2532));
      Integer integer3 = new Integer((-2532));
      patriciaTrie1.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", integer3);
      patriciaTrie1.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", integer2);
      patriciaTrie1.decrementSize();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "$Y7d{_$prr]]6L=5");
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>((Integer) null, abstractMap_SimpleEntry0, 0);
      abstractPatriciaTrie_TrieEntry0.value = abstractMap_SimpleEntry0;
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super AbstractMap.SimpleImmutableEntry<Integer, Object>>) comparator0);
      abstractPatriciaTrie_TrieEntry0.value = abstractMap_SimpleEntry0;
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>(integer0, abstractMap_SimpleEntry0, 0);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0.right;
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.toString();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("$Y7d{_$prr]]6L=5", abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.higherEntry("");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) null, "$Y7d{_$prr]]6L=5");
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>((Integer) null, abstractMap_SimpleEntry0, 0);
      abstractPatriciaTrie_TrieEntry0.value = abstractMap_SimpleEntry0;
      Integer integer0 = new Integer(0);
      abstractPatriciaTrie_TrieEntry0.value = abstractMap_SimpleEntry0;
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Integer, String>>(integer0, abstractMap_SimpleEntry0, 0);
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.parent = abstractPatriciaTrie_TrieEntry0.right;
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry0.right = abstractPatriciaTrie_TrieEntry1;
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("$Y7d{_$prr]]6L=5", abstractPatriciaTrie_TrieEntry0);
      patriciaTrie0.higherEntry("");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie2.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      abstractPatriciaTrie_TrieEntry1.right = abstractPatriciaTrie_TrieEntry0;
      abstractPatriciaTrie_TrieEntry1.toString();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 1107);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie1.put("", "}\n");
      patriciaTrie1.higherEntry("");
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      Integer integer0 = new Integer(944);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("le^:,bpqP/vU8!dpgT\"", "le^:,bpqP/vU8!dpgT\"", 944);
      PatriciaTrie<String> patriciaTrie3 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie3.addEntry(abstractPatriciaTrie_TrieEntry0, 176);
      patriciaTrie2.ceilingEntry("6");
      Integer integer1 = new Integer(1024);
      patriciaTrie1.put("h|f63|", "6");
      Object object0 = new Object();
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(object0, abstractPatriciaTrie_TrieEntry1, 0);
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Object, Object>("h|f63|", "h|f63|", 144);
      abstractPatriciaTrie_TrieEntry2.left = abstractPatriciaTrie_TrieEntry3;
      abstractPatriciaTrie_TrieEntry2.toString();
      boolean boolean0 = abstractPatriciaTrie_TrieEntry2.isExternalNode();
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie0.putIfAbsent("", "left=");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.put("left=", "");
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie0);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie0));
      
      patriciaTrie0.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$1", "FromKey is out of range: ");
      patriciaTrie2.higherEntry((String) null);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      Integer integer0 = new Integer((-644));
      hashMap0.put("*>l", integer0);
      // Undeclared exception!
      try { 
        patriciaTrie0.subMap((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have a from or to!
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>(hashMap0);
      Integer integer0 = new Integer((-3513));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>(")", integer0, (-3513));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.parent;
      // Undeclared exception!
      try { 
        patriciaTrie0.followLeft((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = "org.apache.commons.collections4.trie.AbstractBitwiseTrie$BasicEntry";
      int int0 = (-2);
      Integer integer0 = new Integer((-2));
      Integer integer1 = new Integer((-2));
      // Undeclared exception!
      try { 
        patriciaTrie0.remove((Object) integer1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.put("fromKey > toKey", "");
      patriciaTrie0.subtree(",w|_6WH cD)K", 0, 0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.decrementSize();
      patriciaTrie2.bitsPerElement();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(885);
      hashMap1.put(" n{l0<x1:-NOW~N", integer0);
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>(patriciaTrie1);
      patriciaTrie3.put("JK9`Di$<XqaM", "JK9`Di$<XqaM");
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      patriciaTrie0.tailMap("-\"'csjvCSwhNEBNN");
      SortedMap<String, Object> sortedMap0 = patriciaTrie3.subMap((String) null, ",w|_6WH cD)K");
      assertEquals(0, sortedMap0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<String, Object>("", "", (-862));
      abstractPatriciaTrie_TrieEntry1.toString();
      abstractPatriciaTrie_TrieEntry0.parent = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isInternalNode();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("value=", "ROOT");
      hashMap0.put("f#u>t;Szi2eS", "f#u>t;Szi2eS");
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>(hashMap0);
      String string0 = "0";
      patriciaTrie0.put("0", "ROOT");
      patriciaTrie0.previousKey("");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie1.getNearestEntryForKey("The offsets and lengths must be at Character boundaries", (-862));
      Integer integer0 = new Integer((-2627));
      patriciaTrie1.put("ROOT", "hXarcZu&[?>Ds");
      Integer integer1 = new Integer((-2385));
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>(integer0, integer1, (-862));
      Object object0 = new Object();
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<Integer, Object>((Integer) null, object0, 0);
      abstractPatriciaTrie_TrieEntry2.right = abstractPatriciaTrie_TrieEntry3;
      AbstractPatriciaTrie.TrieEntry<Integer, Object> abstractPatriciaTrie_TrieEntry4 = abstractPatriciaTrie_TrieEntry2.right;
      abstractPatriciaTrie_TrieEntry4.isInternalNode();
      patriciaTrie1.tailMap("");
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      // Undeclared exception!
      try { 
        patriciaTrie2.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.incrementSize();
      patriciaTrie0.keySet();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      patriciaTrie1.comparator();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("f')JYYC(wcBnf", ">oq2}In}KBuBEm!D!}");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>>(patriciaTrie1, abstractMap_SimpleImmutableEntry1, 1);
      abstractPatriciaTrie_TrieEntry0.bitIndex = 1;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=Trie[0]={\n}\n [1], value=f')JYYC(wcBnf=>oq2}In}KBuBEm!D!}, parent=null, left=Trie[0]={\n}\n [1], right=null, predecessor=Trie[0]={\n}\n [1])", string0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.clear();
      Integer integer0 = new Integer(1);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>();
      Integer integer1 = new Integer(1);
      patriciaTrie2.put("", integer1);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.lowerEntry("org.apache.commons.collections4.trie.KeyAnalyzer");
      assertNotNull(abstractPatriciaTrie_TrieEntry1);
      
      PatriciaTrie<Object> patriciaTrie3 = new PatriciaTrie<Object>();
      patriciaTrie3.bitsPerElement();
      patriciaTrie3.put("", ">oq2}In}KBuBEm!D!}");
      int int0 = patriciaTrie3.size();
      assertEquals(1, int0);
      assertFalse(patriciaTrie3.equals((Object)patriciaTrie0));
      
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      assertTrue(boolean0);
      
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry0);
      assertFalse(abstractPatriciaTrie_TrieEntry1.isInternalNode());
      
      patriciaTrie0.getEntry("f')JYYC(wcBnf");
      assertFalse(patriciaTrie0.equals((Object)patriciaTrie3));
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, ",Pm*q6Mj&[ksz;|TX", (-2));
      Integer integer1 = new Integer((-2));
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer1, (String) null, (-2));
      abstractPatriciaTrie_TrieEntry1.key = integer0;
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertTrue(abstractPatriciaTrie_TrieEntry0.isInternalNode());
      
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      patriciaTrie0.put(",Pm*q6Mj&[ksz;|TX", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "C$%";
      Integer integer0 = new Integer(0);
      int int0 = 2794;
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("C$%", integer0, 2794);
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.firstEntry();
      int int1 = 0;
      Integer integer1 = new Integer(0);
      patriciaTrie0.put("C$%", integer1);
      patriciaTrie0.incrementSize();
      patriciaTrie0.put("$kZyA|T{`ys(psom9", "C$%");
      String string1 = "org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer";
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry1 = patriciaTrie0.lowerEntry("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer");
      String string2 = "%F9:456qX9";
      patriciaTrie0.tailMap("%F9:456qX9");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie1.subtree("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", 0, (-1));
      // Undeclared exception!
      try { 
        patriciaTrie1.containsKey(abstractPatriciaTrie_TrieEntry1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      Integer integer0 = new Integer(2699);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, String>(integer0, "s>)}c;`C}-{:5UV", 2699);
      AbstractPatriciaTrie.TrieEntry<Object, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Object, String>(patriciaTrie0, "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values", 2699);
      Map.Entry.comparingByKey();
      abstractPatriciaTrie_TrieEntry1.setValue("s>)}c;`C}-{:5UV");
      patriciaTrie0.tailMap("org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values");
      abstractPatriciaTrie_TrieEntry0.setKeyValue(integer0, "}r");
      abstractPatriciaTrie_TrieEntry0.left = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry0.isExternalNode();
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      abstractPatriciaTrie_TrieEntry0.value = "org.apache.commons.collections4.trie.AbstractPatriciaTrie$Values";
      patriciaTrie0.put("", (Object) null);
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0.left, abstractPatriciaTrie_TrieEntry0.left);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, String>("s>)}c;`C}-{:5UV", "v#Nv)C8LUwZ9ya>ZLp", 2699);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry3 = abstractPatriciaTrie_TrieEntry2.parent;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry4 = patriciaTrie2.nextEntry((AbstractPatriciaTrie.TrieEntry<String, String>) null);
      assertNull(abstractPatriciaTrie_TrieEntry4);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      hashMap0.putAll(patriciaTrie0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie1.comparator();
      Integer integer0 = new Integer(1);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("0.j&Fzd66HDb", integer0, 3060);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isExternalNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("a!$Y^x\"Uj", "a!|>rD", 1621);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.left;
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry2 = patriciaTrie0.followRight(abstractPatriciaTrie_TrieEntry1);
      assertNull(abstractPatriciaTrie_TrieEntry2);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.incrementSize();
      patriciaTrie0.keySet();
      PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>> patriciaTrie1 = new PatriciaTrie<AbstractMap.SimpleImmutableEntry<Object, Object>>();
      patriciaTrie1.comparator();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("f')JYYC(wcBnf", ">oq2}In}KBuBEm!D!}");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>>(patriciaTrie1, abstractMap_SimpleImmutableEntry1, 1);
      abstractPatriciaTrie_TrieEntry0.bitIndex = 1;
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      assertEquals("Entry(key=Trie[0]={\n}\n [1], value=f')JYYC(wcBnf=>oq2}In}KBuBEm!D!}, parent=null, left=Trie[0]={\n}\n [1], right=null, predecessor=Trie[0]={\n}\n [1])", string0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, String>, String>(abstractMap_SimpleEntry0, "f')JYYC(wcBnf", 2);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry1.isInternalNode();
      assertFalse(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(hashMap0);
      patriciaTrie2.put("f')JYYC(wcBnf", "rL^9Qu^5(l=%");
      Collection<String> collection0 = patriciaTrie2.values();
      assertTrue(collection0.contains("rL^9Qu^5(l=%"));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lastEntry();
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      Integer integer0 = new Integer(1);
      patriciaTrie0.put("org.apache.commons.collections4.trie.PatriciaTrie", integer0);
      Integer integer1 = new Integer((-1));
      patriciaTrie2.put("!~0~C(<1EL!X", integer1);
      Integer integer2 = new Integer(1565);
      patriciaTrie2.selectKey("!nk,/u-y&Q%/y?");
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("!nk,/u-y&Q%/y?", integer2, 32768);
      patriciaTrie2.nextEntryInSubtree(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = "8j=UYO";
      patriciaTrie0.prefixMap("8j=UYO");
      Integer integer0 = new Integer((-3668));
      patriciaTrie0.put("8j=UYO", integer0);
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      String string1 = null;
      patriciaTrie0.mapIterator();
      // Undeclared exception!
      try { 
        patriciaTrie0.put((String) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Key cannot be null
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>(hashMap0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.put("fromKey > toKey", "");
      patriciaTrie0.subtree(",w|_6WH cD)K", 0, 0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.decrementSize();
      patriciaTrie2.bitsPerElement();
      patriciaTrie2.replace("", "", "");
      patriciaTrie2.keySet();
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, String>("", "", 0);
      boolean boolean0 = abstractPatriciaTrie_TrieEntry0.isInternalNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Integer integer0 = new Integer((-463));
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>((String) null, integer0, 1);
      abstractPatriciaTrie_TrieEntry0.getKey();
      Integer integer1 = new Integer(0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super String>) comparator0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Object) null, integer1);
      Map.Entry.comparingByValue();
      Map.Entry.comparingByValue();
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, Object>(abstractMap_SimpleEntry0, "![", (-1871));
      AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry1, abstractPatriciaTrie_TrieEntry1);
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      patriciaTrie0.getNearestEntryForKey("`", (-7));
      patriciaTrie1.put("org.apache.commons.collections4.trie.AbstractPatriciaTrie$KeySet", (String) null);
      patriciaTrie1.modCount = (-1);
      patriciaTrie1.selectKey(",0bW??so0~9n");
      assertFalse(patriciaTrie1.equals((Object)patriciaTrie0));
      
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<String, Object>("org.apache.commons.collections4.trie.AbstractPatriciaTrie$RangeEntryMap", "#?MY>M%", 0);
      abstractPatriciaTrie_TrieEntry2.isInternalNode();
      PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>> patriciaTrie2 = new PatriciaTrie<AbstractMap.SimpleEntry<Object, Integer>>();
      patriciaTrie2.prefixMap("4HLvM:gDrcEobEv");
      patriciaTrie1.decrementSize();
      assertTrue(patriciaTrie0.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("keyAnalyzer", "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      Map.Entry.comparingByKey();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry1);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>(integer0, abstractMap_SimpleImmutableEntry0, 1253);
      Comparator<Map.Entry<String, Integer>> comparator1 = Map.Entry.comparingByKey();
      Integer integer1 = new Integer(1253);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Object>(comparator1, abstractMap_SimpleEntry1);
      Map.Entry.comparingByKey();
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>(integer1, abstractMap_SimpleImmutableEntry1, 0);
      abstractPatriciaTrie_TrieEntry0.predecessor = abstractPatriciaTrie_TrieEntry1;
      abstractPatriciaTrie_TrieEntry1.key = integer0;
      abstractPatriciaTrie_TrieEntry0.bitIndex = 0;
      abstractPatriciaTrie_TrieEntry0.setKeyValue(integer0, abstractMap_SimpleImmutableEntry0);
      abstractPatriciaTrie_TrieEntry0.toString();
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      patriciaTrie2.incrementSize();
      assertFalse(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      int int0 = patriciaTrie2.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.keySet();
      patriciaTrie0.getNearestEntryForKey("org.apache.commons.collections4.trie.AbstractPatriciaTrie$TrieEntry", (-2128));
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.lowerEntry("R;*!Cg]R;o:|");
      assertNull(abstractPatriciaTrie_TrieEntry0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PatriciaTrie<Object> patriciaTrie0 = new PatriciaTrie<Object>();
      patriciaTrie0.put("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", "F^eL7J?o<IC=");
      patriciaTrie0.incrementSize();
      patriciaTrie0.selectValue("F^eL7J?o<IC=");
      AbstractPatriciaTrie.TrieEntry<String, Object> abstractPatriciaTrie_TrieEntry0 = patriciaTrie0.ceilingEntry("F^eL7J?o<IC=");
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      assertNotNull(abstractPatriciaTrie_TrieEntry0);
      
      String string0 = patriciaTrie0.lastKey();
      assertNotNull(string0);
      assertEquals("org.apache.commons.collections4.trie.analyzer.StringKeyAnalyzer", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      String string0 = "";
      patriciaTrie0.selectValue("");
      String string1 = "";
      int int0 = 0;
      Integer integer0 = new Integer(0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<String, Integer>("", integer0, 0);
      AbstractPatriciaTrie.TrieEntry<String, Integer> abstractPatriciaTrie_TrieEntry1 = abstractPatriciaTrie_TrieEntry0.right;
      abstractPatriciaTrie_TrieEntry0.left = null;
      patriciaTrie0.nextEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      Map.Entry.comparingByValue();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      PatriciaTrie<Integer> patriciaTrie2 = new PatriciaTrie<Integer>(patriciaTrie1);
      // Undeclared exception!
      try { 
        patriciaTrie2.addEntry((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Integer integer0 = new Integer((-1424));
      AbstractPatriciaTrie.TrieEntry<Integer, String> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, String>(integer0, (String) null, (-1424));
      Integer integer1 = new Integer((-1424));
      abstractPatriciaTrie_TrieEntry0.key = integer1;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator1);
      int int0 = (-318);
      abstractPatriciaTrie_TrieEntry0.setValue((String) null);
      abstractPatriciaTrie_TrieEntry0.key = integer0;
      abstractPatriciaTrie_TrieEntry0.bitIndex = (-318);
      abstractPatriciaTrie_TrieEntry0.bitIndex = (-318);
      abstractPatriciaTrie_TrieEntry0.toString();
      PatriciaTrie<AbstractMap.SimpleEntry<String, String>> patriciaTrie0 = new PatriciaTrie<AbstractMap.SimpleEntry<String, String>>();
      patriciaTrie0.selectValue((String) null);
      Integer integer2 = new Integer((-818));
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("=J%&a$K.m>G7 lBn<", integer2);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = null;
      try {
        abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>((Map.Entry<?, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      PatriciaTrie<Integer> patriciaTrie0 = new PatriciaTrie<Integer>();
      PatriciaTrie<Integer> patriciaTrie1 = new PatriciaTrie<Integer>(patriciaTrie0);
      String string0 = "Q0PWG1VK7y]/9X{";
      Integer integer0 = new Integer((-2269));
      Integer integer1 = new Integer(383);
      String string1 = "[LG?GSuu0f{r':";
      patriciaTrie1.put("[LG?GSuu0f{r':", integer1);
      patriciaTrie0.replace("Q0PWG1VK7y]/9X{", integer0, integer1);
      patriciaTrie1.nextEntryInSubtree((AbstractPatriciaTrie.TrieEntry<String, Integer>) null, (AbstractPatriciaTrie.TrieEntry<String, Integer>) null);
      PatriciaTrie<Object> patriciaTrie2 = new PatriciaTrie<Object>();
      // Undeclared exception!
      try { 
        patriciaTrie2.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.trie.AbstractPatriciaTrie", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(patriciaTrie0);
      patriciaTrie0.isBitSet("", 0, 0);
      patriciaTrie1.put("1N-dWFbN", patriciaTrie0);
      patriciaTrie1.clear();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Integer integer0 = new Integer((-263));
      AbstractPatriciaTrie.TrieEntry<Object, Integer> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Object, Integer>("%!}sy?^!';rII", integer0, (-263));
      Map.Entry.comparingByValue();
      boolean boolean0 = AbstractPatriciaTrie.isValidUplink(abstractPatriciaTrie_TrieEntry0, abstractPatriciaTrie_TrieEntry0);
      assertTrue(boolean0);
      assertTrue(abstractPatriciaTrie_TrieEntry0.isExternalNode());
      
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.compareKeys("%!}sy?^!';rII", "!cJ3@O");
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(patriciaTrie0);
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.ceilingEntry("");
      patriciaTrie2.selectKey("");
      patriciaTrie2.bitsPerElement();
      patriciaTrie2.replace("!cJ3@O", "jAB'Gt2'z B6!W", (String) null);
      AbstractPatriciaTrie.TrieEntry<String, String> abstractPatriciaTrie_TrieEntry1 = patriciaTrie2.higherEntry("%!}sy?^!';rII");
      assertNull(abstractPatriciaTrie_TrieEntry1);
      
      Integer integer1 = new Integer((-263));
      AbstractPatriciaTrie.TrieEntry<Object, Object> abstractPatriciaTrie_TrieEntry2 = new AbstractPatriciaTrie.TrieEntry<Object, Object>(integer1, patriciaTrie2, (-263));
      abstractPatriciaTrie_TrieEntry2.toString();
      patriciaTrie1.clear();
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractPatriciaTrie_TrieEntry2);
      Integer integer2 = new Integer((-142));
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>("i", integer2);
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<String, Integer>> abstractPatriciaTrie_TrieEntry3 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<String, Integer>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1, (-142));
      String string0 = abstractPatriciaTrie_TrieEntry3.toString();
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      assertEquals("Entry(key=-263=Trie[0]={\n}\n [-142], value=i=-142, parent=null, left=-263=Trie[0]={\n}\n [-142], right=null, predecessor=-263=Trie[0]={\n}\n [-142])", string0);
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("d.X`RTv", "d.X`RTv");
      AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<AbstractMap.SimpleEntry<String, String>, Object>(abstractMap_SimpleEntry0, (Object) null, 616);
      Integer integer0 = new Integer(616);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractPatriciaTrie_TrieEntry1 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>(integer0, abstractMap_SimpleImmutableEntry0, 1412);
      Object object0 = abstractPatriciaTrie_TrieEntry1.getKey();
      abstractPatriciaTrie_TrieEntry0.setValue(object0);
      Object object1 = new Object();
      String string0 = abstractPatriciaTrie_TrieEntry0.toString();
      abstractPatriciaTrie_TrieEntry0.setValue(object1);
      String string1 = abstractPatriciaTrie_TrieEntry0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      patriciaTrie0.mapIterator();
      patriciaTrie0.entrySet();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      PatriciaTrie<Object> patriciaTrie1 = new PatriciaTrie<Object>(hashMap0);
      String string0 = patriciaTrie1.previousKey("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(patriciaTrie0);
      PatriciaTrie<String> patriciaTrie1 = new PatriciaTrie<String>(hashMap0);
      assertTrue(patriciaTrie1.equals((Object)patriciaTrie0));
      
      PatriciaTrie<String> patriciaTrie2 = new PatriciaTrie<String>(patriciaTrie1);
      patriciaTrie2.higherEntry("=");
      assertTrue(patriciaTrie2.equals((Object)patriciaTrie1));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PatriciaTrie<String> patriciaTrie0 = new PatriciaTrie<String>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-3815));
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(integer0, integer1);
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleImmutableEntry0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleImmutableEntry1);
      AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Integer>> abstractPatriciaTrie_TrieEntry0 = new AbstractPatriciaTrie.TrieEntry<Integer, AbstractMap.SimpleEntry<Object, Integer>>(integer0, abstractMap_SimpleEntry0, 0);
      // Undeclared exception!
      try { 
        abstractMap_SimpleImmutableEntry0.setValue(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }
}
