/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 16:16:55 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", (-520L));
      Integer integer0 = new Integer(1);
      hashMap0.put("No header mapping was specified, the record values can't be accessed by name", integer0);
      Map<String, String> map0 = cSVRecord0.toMap();
      assertEquals((-520L), cSVRecord0.getRecordNumber());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", (-520L));
      Integer integer0 = new Integer(1);
      hashMap0.put("No header mapping was specified, the record values can't be accessed by name", integer0);
      boolean boolean0 = cSVRecord0.isSet("No header mapping was specified, the record values can't be accessed by name");
      assertFalse(boolean0);
      assertEquals((-520L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", (-520L));
      Integer integer0 = new Integer(1429);
      hashMap0.put("No header mapping was specified, the record values can't be accessed by name", integer0);
      hashMap0.put((String) null, integer0);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals((-520L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-344L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index for header '' is 1 but CSVRecord only has 0 values!
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", (-937L));
      cSVRecord0.values();
      assertEquals((-937L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", (-937L));
      cSVRecord0.size();
      assertEquals((-937L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[5];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "p|+A>j^", 4260L);
      cSVRecord0.putIn((HashMap<String, String>) null);
      assertEquals(4260L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "{]S<xMrC8W,Y", 0L);
      HashMap<String, String> hashMap1 = new HashMap<String, String>(0);
      HashMap<String, String> hashMap2 = cSVRecord0.putIn(hashMap1);
      assertSame(hashMap1, hashMap2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "{]S<xMrC8W,Y", 0L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-3367L));
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-3367L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[15];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 1411L);
      cSVRecord0.getComment();
      assertEquals(1411L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 3501L);
      cSVRecord0.getComment();
      assertEquals(3501L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "{]S<xMrC8W,Y";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(2);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "{]S<xMrC8W,Y", 2);
      cSVRecord0.get("");
      assertEquals(2L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "{]S<xMrC8W,Y", 0L);
      String string0 = cSVRecord0.get("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 1L);
      cSVRecord0.get(0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ykU;IV\"RI";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "4d#>J6!m9[~", 0L);
      String string0 = cSVRecord0.get(0);
      assertEquals("ykU;IV\"RI", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 1L);
      String string0 = cSVRecord0.get(0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put("", integer0);
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      hashMap0.replaceAll(biFunction0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", (-937L));
      // Undeclared exception!
      try { 
        cSVRecord0.toMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[9];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
      Integer integer0 = new Integer(2);
      hashMap0.put("yTPp!/k|bY)@Nv", integer0);
      // Undeclared exception!
      try { 
        cSVRecord0.putIn((HashMap<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-969));
      hashMap0.put((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 1371L);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        cSVRecord0.putIn(hashMap1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -969
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-10L));
      hashMap0.put("", (Integer) null);
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "1!mbi ", 37L);
      cSVRecord0.isMapped("1!mbi ");
      assertEquals(37L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Index for header '%s' is %d but CSVRecord only has %d values!", 0L);
      Integer integer0 = new Integer(62);
      hashMap0.putIfAbsent("", integer0);
      boolean boolean0 = cSVRecord0.isMapped("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put((String) null, integer0);
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zTA1K", 1597L);
      Map<String, String> map0 = cSVRecord0.toMap();
      assertEquals(1597L, cSVRecord0.getRecordNumber());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", (-520L));
      Integer integer0 = new Integer(1429);
      hashMap0.put("No header mapping was specified, the record values can't be accessed by name", integer0);
      boolean boolean0 = cSVRecord0.isSet("No header mapping was specified, the record values can't be accessed by name");
      assertFalse(boolean0);
      assertEquals((-520L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put((String) null, integer0);
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zTA1K", 1597L);
      boolean boolean0 = cSVRecord0.isSet(stringArray0[2]);
      assertEquals(1597L, cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "{]S<xMrC8W,Y", 2);
      boolean boolean0 = cSVRecord0.isMapped("v yGYKU");
      assertEquals(2L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[15];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "~ULX_]Z7", 0L);
      boolean boolean0 = cSVRecord0.isSet("~ULX_]Z7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 1429);
      assertFalse(cSVRecord0.isConsistent());
      
      Integer integer0 = new Integer((-2337));
      hashMap0.put("", integer0);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "{]S<xMrC8W,Y", 2);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(2L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[15];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "~ULX_]Z7", 0L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put((String) null, integer0);
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zTA1K", 1597L);
      assertEquals("[null, null, null, null, null, null, null, null]", cSVRecord0.toString());
      
      cSVRecord0.get((String) null);
      assertEquals(1597L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "A.F~<m#l;/[-Y#Q", (-1L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("A.F~<m#l;/[-Y#Q");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zTA1K", 1597L);
      // Undeclared exception!
      try { 
        cSVRecord0.get((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for null not found, expected one of []
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "@l", (-1L));
      Integer integer0 = new Integer((-1789569705));
      hashMap0.put("@l", integer0);
      // Undeclared exception!
      try { 
        cSVRecord0.toMap();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1789569705
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[15];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 2L);
      int int0 = cSVRecord0.size();
      assertEquals(2L, cSVRecord0.getRecordNumber());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[15];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 2L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", cSVRecord0.toString());
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[15];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 2L);
      // Undeclared exception!
      try { 
        cSVRecord0.get((-1932735281));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1932735281
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 1429);
      String[] stringArray1 = cSVRecord0.values();
      assertEquals(1429L, cSVRecord0.getRecordNumber());
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[5];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
      String string0 = cSVRecord0.toString();
      assertEquals("[null, null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[15];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 2L);
      cSVRecord0.getComment();
      assertEquals(2L, cSVRecord0.getRecordNumber());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[15];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 2L);
      cSVRecord0.iterator();
      assertEquals(2L, cSVRecord0.getRecordNumber());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", cSVRecord0.toString());
  }
}
