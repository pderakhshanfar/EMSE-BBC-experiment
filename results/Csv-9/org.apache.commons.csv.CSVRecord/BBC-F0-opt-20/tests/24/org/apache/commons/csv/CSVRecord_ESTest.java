/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 02:40:28 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("C#A*9e$H_p<d?I", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "9N*GM", (-1L));
      cSVRecord0.toMap();
      assertEquals((-1L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("C#A*9e$H_p<d?I", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "9N*GM", (-1L));
      boolean boolean0 = cSVRecord0.isSet("C#A*9e$H_p<d?I");
      assertFalse(boolean0);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "gQq&Yu/SR.", 0);
      assertTrue(cSVRecord0.isConsistent());
      
      hashMap0.put("", integer0);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put(".Qgp&Q;WOjy5M9%8-k", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "Mapping for %s not found, expected one of %s", 1609L);
      // Undeclared exception!
      try { 
        cSVRecord0.get(".Qgp&Q;WOjy5M9%8-k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index for header '.Qgp&Q;WOjy5M9%8-k' is -1 but CSVRecord only has 0 values!
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zlFq!NT!.KuRxZB<]", (-583L));
      cSVRecord0.values();
      assertEquals((-583L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ";Bf8*Ixlw[W", (-2603L));
      cSVRecord0.size();
      assertEquals((-2603L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zlFq!NT!.KuRxZB<]", (-583L));
      cSVRecord0.putIn((HashMap<String, String>) null);
      assertEquals((-583L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ">az%P<v`hjeVzJ1%c=D", 678);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      cSVRecord0.putIn(hashMap1);
      assertEquals(678L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[5];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zBaf6g", 0L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "S+t_O6_CDtU?]4", 1854L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(1854L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, (String) null, (-494L));
      cSVRecord0.getComment();
      assertEquals((-494L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "", (-1L));
      cSVRecord0.getComment();
      assertEquals((-1L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";Bf8*Ixlw[W";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(";Bf8*Ixlw[W", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ";Bf8*Ixlw[W", (-2603L));
      cSVRecord0.get(";Bf8*Ixlw[W");
      assertEquals((-2603L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[3] = "";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ",aIA c\";&Z", (-520L));
      Integer integer0 = new Integer(3);
      hashMap0.put("", integer0);
      cSVRecord0.get("");
      assertEquals((-520L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "F~", 1L);
      cSVRecord0.get(2);
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "No header mapping was specified, the record values can't be accessed by name";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zBaf6g", 0L);
      String string0 = cSVRecord0.get(0);
      assertEquals("No header mapping was specified, the record values can't be accessed by name", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zlFq!NT!.KuRxZB<]", (-583L));
      String string0 = cSVRecord0.get(0);
      assertEquals((-583L), cSVRecord0.getRecordNumber());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "", (-1527L));
      // Undeclared exception!
      try { 
        cSVRecord0.toMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Sn{uZ0", 1919L);
      Integer integer0 = new Integer((-209));
      hashMap0.put("Sn{uZ0", integer0);
      // Undeclared exception!
      try { 
        cSVRecord0.toMap();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -209
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 102L);
      hashMap0.put("=hCv", (Integer) null);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        cSVRecord0.putIn(hashMap1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
      Integer integer0 = new Integer((-2702));
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put("TLdrla16Z@NLeHt", integer0);
      // Undeclared exception!
      try { 
        cSVRecord0.putIn(hashMap1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2702
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Sn{uZ0", 1919L);
      hashMap0.put("", (Integer) null);
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
      boolean boolean0 = cSVRecord0.isMapped("r}Fkf},Kp1~jat/_Q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[17];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-520L));
      Integer integer0 = new Integer(0);
      hashMap0.put("*^AQ<''7g6", integer0);
      boolean boolean0 = cSVRecord0.isMapped("*^AQ<''7g6");
      assertTrue(boolean0);
      assertEquals((-520L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(3488);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ">az%P<v`hjeVzJ1%c=D", 678);
      cSVRecord0.toMap();
      assertEquals(678L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("j#=8]QFYV'As", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 330L);
      Map<String, String> map0 = cSVRecord0.toMap();
      assertEquals(330L, cSVRecord0.getRecordNumber());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(3488);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ">az%P<v`hjeVzJ1%c=D", 678);
      boolean boolean0 = cSVRecord0.isSet("");
      assertEquals(678L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ",aIA c\";&Z", (-520L));
      Integer integer0 = new Integer(3);
      hashMap0.put("", integer0);
      boolean boolean0 = cSVRecord0.isSet("");
      assertTrue(boolean0);
      assertEquals((-520L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 330L);
      boolean boolean0 = cSVRecord0.isSet((String) null);
      assertFalse(boolean0);
      assertEquals(330L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "", (-1L));
      boolean boolean0 = cSVRecord0.isMapped("");
      assertFalse(boolean0);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-520L));
      assertFalse(cSVRecord0.isConsistent());
      
      Integer integer0 = Integer.valueOf(0);
      hashMap0.put("*^AQ<''7g6", integer0);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-520L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals((-520L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "", (-1L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("j#=8]QFYV'As", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 330L);
      cSVRecord0.get("j#=8]QFYV'As");
      assertEquals(330L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[3];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "", 1L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 330L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("j#=8]QFYV'As");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for j#=8]QFYV'As not found, expected one of []
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "TwK\"M7.0JKjL$W|", 695);
      assertEquals("[]", cSVRecord0.toString());
      
      cSVRecord0.size();
      assertEquals(695L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "zlFq!NT!.KuRxZB<]", (-583L));
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-583L), long0);
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ">az%P<v`hjeVzJ1%c=D", 678);
      // Undeclared exception!
      try { 
        cSVRecord0.get((-630));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -630
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "TwK\"M7.0JKjL$W|", 695);
      String[] stringArray0 = cSVRecord0.values();
      assertNotNull(stringArray0);
      assertEquals(695L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 330L);
      String string0 = cSVRecord0.toString();
      assertEquals("[null, null, null, null]", string0);
      assertEquals(330L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "TwK\"M7.0JKjL$W|", 695);
      cSVRecord0.getComment();
      assertEquals(695L, cSVRecord0.getRecordNumber());
      assertEquals("[]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 330L);
      cSVRecord0.iterator();
      assertEquals(4, cSVRecord0.size());
      assertEquals(330L, cSVRecord0.getRecordNumber());
  }
}
