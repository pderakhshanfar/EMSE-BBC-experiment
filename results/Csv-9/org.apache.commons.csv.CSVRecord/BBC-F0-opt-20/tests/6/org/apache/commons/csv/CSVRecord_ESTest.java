/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:14:34 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("H%R@e%7268K~.Fe)S", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "H%R@e%7268K~.Fe)S", (-1L));
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      cSVRecord0.putIn(hashMap1);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("org.apache.commons.csv.CSVRecord", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "org.apache.commons.csv.CSVRecord", 0L);
      boolean boolean0 = cSVRecord0.isSet("org.apache.commons.csv.CSVRecord");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "QRlv;L'&c{dviuaF{/", 0L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-257));
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 520L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index for header '' is -257 but CSVRecord only has 2 values!
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "!6pHdxm)Lu", 905L);
      cSVRecord0.values();
      assertEquals(905L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("3Qpla20J)xid", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "?>i,X", 0L);
      Map<String, String> map0 = cSVRecord0.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "6BHlxOLU8bw", (-898L));
      cSVRecord0.size();
      assertEquals((-898L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
      HashMap<String, String> hashMap1 = cSVRecord0.putIn((HashMap<String, String>) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "Mapping for %s not found, expected one of %s", 0L);
      Iterator<String> iterator0 = cSVRecord0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "k7O|", 5267L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(5267L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-2066L));
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-2066L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 1844L);
      cSVRecord0.getComment();
      assertEquals(1844L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-2066L));
      cSVRecord0.getComment();
      assertEquals((-2066L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "No header mapping was specified, the record values can't be accessed by name";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "i`uLYb:RV@q&Ne,tj", 0L);
      Integer integer0 = new Integer(0);
      hashMap0.put("No header mapping was specified, the record values can't be accessed by name", integer0);
      String string0 = cSVRecord0.get("No header mapping was specified, the record values can't be accessed by name");
      assertEquals("No header mapping was specified, the record values can't be accessed by name", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(3);
      hashMap0.put("v,<24}s_-$ki>z,FP", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 0L);
      String string0 = cSVRecord0.get("v,<24}s_-$ki>z,FP");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "6B-0d*x1HOL\":TfdO*>", 1979L);
      cSVRecord0.get(1);
      assertEquals(1979L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "QRlv;L'&c{dviuaF{/";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "QRlv;L'&c{dviuaF{/", 0L);
      String string0 = cSVRecord0.get(0);
      assertEquals("QRlv;L'&c{dviuaF{/", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "WYw2", 0L);
      String string0 = cSVRecord0.get(1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "Index for header '%s' is %d but CSVRecord only has %d values!", 1871L);
      // Undeclared exception!
      try { 
        cSVRecord0.toMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1760));
      hashMap0.put(".V'n7,2~w!5j2R", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "org.apache.commons.csv.CSVRecord", 1979L);
      // Undeclared exception!
      try { 
        cSVRecord0.toMap();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1760
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "}", 2034L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        cSVRecord0.putIn(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[9];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-3003));
      hashMap0.put("JP", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1L));
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        cSVRecord0.putIn(hashMap1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3003
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("Index for header '%s' is %d but CSVRecord only has %d values!", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("Index for header '%s' is %d but CSVRecord only has %d values!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 1705L);
      cSVRecord0.isMapped("");
      assertEquals(1705L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "BrAOO=5p\"8tUSvA", 0L);
      boolean boolean0 = cSVRecord0.isMapped("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = Integer.getInteger("", 3);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "org.apache.commons.csv.CSVRecord", 2806L);
      cSVRecord0.toMap();
      assertEquals(2806L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1));
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "org.apache.commons.csv.CSVRecord", (-1));
      boolean boolean0 = cSVRecord0.isSet("");
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put("org.apache.commons.csv.CSVRecord", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "org.apache.commons.csv.CSVRecord", 0L);
      boolean boolean0 = cSVRecord0.isSet("org.apache.commons.csv.CSVRecord");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "org.apache.commons.csv.CSVRecord", 0L);
      boolean boolean0 = cSVRecord0.isSet("org.apache.commons.csv.CSVRecord");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "Mapping for %s not found, expected one of %s", (-5468L));
      boolean boolean0 = cSVRecord0.isMapped("N;,G@U@g]NvC9.{%");
      assertEquals((-5468L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("H%R@e%7268K~.Fe)S", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "H%R@e%7268K~.Fe)S", (-1L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "H%R@e%7268K~.Fe)S", (-1L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "Z]", 0L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("_1Bv@59$SJPf xiw", integer0);
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[3], 2572L);
      assertEquals(7, cSVRecord0.size());
      
      cSVRecord0.get("_1Bv@59$SJPf xiw");
      assertEquals(2572L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "Z]", 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("Z]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "l_sOvp-iInK", 1635L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("_1Bv@59$SJPf xiw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for _1Bv@59$SJPf xiw not found, expected one of []
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "org.apache.commons.csv.CSVRecord", 2806L);
      cSVRecord0.size();
      assertEquals(2806L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "QRlv;L'&c{dviuaF{/", 0L);
      cSVRecord0.getRecordNumber();
      assertEquals("[null, null, null, null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "org.apache.commons.csv.CSVRecord", 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.get(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "O$$5Btd[2C>P,6;l}6M", (-835L));
      String[] stringArray1 = cSVRecord0.values();
      assertEquals((-835L), cSVRecord0.getRecordNumber());
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 0L);
      String string0 = cSVRecord0.toString();
      assertEquals("[null, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "org.apache.commons.csv.CSVRecord", 2806L);
      cSVRecord0.getComment();
      assertEquals(2806L, cSVRecord0.getRecordNumber());
  }
}
