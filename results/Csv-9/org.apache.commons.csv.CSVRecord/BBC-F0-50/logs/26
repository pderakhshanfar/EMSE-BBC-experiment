* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.csv.CSVRecord
* Starting Client-0
* Connecting to master process on port 9111
* Analyzing classpath: 
  - subjects/buggy-versions/Csv-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.csv.CSVRecord
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 234
* Using seed 482108789
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 98 / 234
[MASTER] 20:48:13.636 [logback-1] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 20:48:13.636 [logback-1] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 20:48:13.636 [logback-1] ERROR TestCluster - Failed to check cache for java.util.HashMap<K, V> : Type points to itself
[MASTER] 20:48:41.773 [logback-1] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
* Search finished after 601s and 6542 generations, 3349033 statements, best individual has fitness: 27.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 33
* Number of covered goals: 32
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 34
* Number of covered goals: 33
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 98%
* Total number of goals: 59
* Number of covered goals: 58
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 75%
* Total number of goals: 44
* Number of covered goals: 33
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 93%
* Total number of goals: 15
* Number of covered goals: 14
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 93%
* Total number of goals: 15
* Number of covered goals: 14
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 97%
* Total number of goals: 34
* Number of covered goals: 33
* Generated 45 tests with total length 225
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 58%
* Compiling and checking tests
[MASTER] 20:58:17.763 [logback-1] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_8_1629233897763
[MASTER] 20:58:17.763 [logback-2] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 20:58:18.241 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.286 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.320 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.366 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.413 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.446 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.488 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.530 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.568 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.600 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.631 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.662 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.695 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.726 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.756 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.789 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.815 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.849 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.878 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.908 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.957 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.986 [logback-1] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_30_1629233898958/org/apache/commons/csv/CSVRecord_29_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_30_1629233898958/org/apache/commons/csv/CSVRecord_29_tmp__ESTest_scaffolding.java]]
[MASTER] 20:58:18.986 [logback-1] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Csv-9/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-9/target/classes
[MASTER] 20:58:18.986 [logback-1] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-9/target/classes
[MASTER] 20:58:18.989 [logback-1] ERROR JUnitAnalyzer - Diagnostic: method putIn in class org.apache.commons.csv.CSVRecord cannot be applied to given types;
  required: M
  found: java.util.Map<java.lang.String,java.lang.Integer>
  reason: inferred type does not conform to upper bound(s)
    inferred: java.util.Map<java.lang.String,java.lang.Integer>
    upper bound(s): java.util.Map<java.lang.String,java.lang.String>: 29
[MASTER] 20:58:18.990 [logback-2] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 20:58:19.015 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:18.990 [logback-1] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_30_1629233898958/org/apache/commons/csv/CSVRecord_29_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 20:58:18 GMT 2021
4:  */
5: 
6: package org.apache.commons.csv;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.HashMap;
12: import java.util.Map;
13: import org.apache.commons.csv.CSVRecord;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class CSVRecord_29_tmp__ESTest extends CSVRecord_29_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       String[] stringArray0 = new String[7];
24:       stringArray0[0] = "";
25:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
26:       Integer integer0 = new Integer(0);
27:       hashMap0.put("", integer0);
28:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "H", 1L);
29:       cSVRecord0.putIn((Map<String, Integer>) hashMap0);
30:       // Undeclared exception!
31:       try { 
32:         cSVRecord0.get("");
33:         fail("Expecting exception: ClassCastException");
34:       
35:       } catch(ClassCastException e) {
36:          //
37:          // java.lang.String cannot be cast to java.lang.Integer
38:          //
39:          verifyException("org.apache.commons.csv.CSVRecord", e);
40:       }
41:   }
42: }
RegularFileObject[/tmp/EvoSuite_30_1629233898958/org/apache/commons/csv/CSVRecord_29_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 20:58:18 GMT 2021
5:  */
6: 
7: package org.apache.commons.csv;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class CSVRecord_29_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.csv.CSVRecord"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CSVRecord_29_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "org.apache.commons.csv.CSVRecord"
70:     );
71:   } 
72: 
73:   private static void resetClasses() {
74:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CSVRecord_29_tmp__ESTest_scaffolding.class.getClassLoader()); 
75: 
76:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
77:       "org.apache.commons.csv.CSVRecord"
78:     );
79:   }
80: }

[MASTER] 20:58:19.043 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.062 [logback-2] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 20:58:19.062 [logback-1] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_33_1629233899045/org/apache/commons/csv/CSVRecord_32_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_33_1629233899045/org/apache/commons/csv/CSVRecord_32_tmp__ESTest_scaffolding.java]]
[MASTER] 20:58:19.062 [logback-1] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Csv-9/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-9/target/classes
[MASTER] 20:58:19.062 [logback-1] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-9/target/classes
[MASTER] 20:58:19.062 [logback-1] ERROR JUnitAnalyzer - Diagnostic: method putIn in class org.apache.commons.csv.CSVRecord cannot be applied to given types;
  required: M
  found: java.util.Map<java.lang.String,java.lang.Integer>
  reason: inferred type does not conform to upper bound(s)
    inferred: java.util.Map<java.lang.String,java.lang.Integer>
    upper bound(s): java.util.Map<java.lang.String,java.lang.String>: 29
[MASTER] 20:58:19.062 [logback-1] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_33_1629233899045/org/apache/commons/csv/CSVRecord_32_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 20:58:19 GMT 2021
4:  */
5: 
6: package org.apache.commons.csv;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.HashMap;
12: import java.util.Map;
13: import org.apache.commons.csv.CSVRecord;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class CSVRecord_32_tmp__ESTest extends CSVRecord_32_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
24:       String[] stringArray0 = new String[6];
25:       Integer integer0 = new Integer(0);
26:       hashMap0.put("@:", integer0);
27:       stringArray0[0] = "";
28:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "aE>", (-333L));
29:       cSVRecord0.putIn((Map<String, Integer>) hashMap0);
30:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
31:       // Undeclared exception!
32:       try { 
33:         cSVRecord0.putIn(hashMap1);
34:         fail("Expecting exception: ClassCastException");
35:       
36:       } catch(ClassCastException e) {
37:          //
38:          // java.lang.String cannot be cast to java.lang.Integer
39:          //
40:          verifyException("org.apache.commons.csv.CSVRecord", e);
41:       }
42:   }
43: }
RegularFileObject[/tmp/EvoSuite_33_1629233899045/org/apache/commons/csv/CSVRecord_32_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 20:58:19 GMT 2021
5:  */
6: 
7: package org.apache.commons.csv;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class CSVRecord_32_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.csv.CSVRecord"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CSVRecord_32_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "org.apache.commons.csv.CSVRecord"
70:     );
71:   } 
72: 
73:   private static void resetClasses() {
74:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CSVRecord_32_tmp__ESTest_scaffolding.class.getClassLoader()); 
75: 
76:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
77:       "org.apache.commons.csv.CSVRecord"
78:     );
79:   }
80: }

[MASTER] 20:58:19.088 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.108 [logback-2] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 20:58:19.107 [logback-1] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_35_1629233899090/org/apache/commons/csv/CSVRecord_34_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_35_1629233899090/org/apache/commons/csv/CSVRecord_34_tmp__ESTest_scaffolding.java]]
[MASTER] 20:58:19.107 [logback-1] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Csv-9/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-9/target/classes
[MASTER] 20:58:19.107 [logback-1] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-9/target/classes
[MASTER] 20:58:19.107 [logback-1] ERROR JUnitAnalyzer - Diagnostic: method putIn in class org.apache.commons.csv.CSVRecord cannot be applied to given types;
  required: M
  found: java.util.Map<java.lang.String,java.lang.Integer>
  reason: inferred type does not conform to upper bound(s)
    inferred: java.util.Map<java.lang.String,java.lang.Integer>
    upper bound(s): java.util.Map<java.lang.String,java.lang.String>: 29
[MASTER] 20:58:19.108 [logback-1] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_35_1629233899090/org/apache/commons/csv/CSVRecord_34_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 20:58:19 GMT 2021
4:  */
5: 
6: package org.apache.commons.csv;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.HashMap;
12: import java.util.Map;
13: import org.apache.commons.csv.CSVRecord;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class CSVRecord_34_tmp__ESTest extends CSVRecord_34_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
24:       String[] stringArray0 = new String[6];
25:       Integer integer0 = new Integer(0);
26:       hashMap0.put("@:", integer0);
27:       stringArray0[0] = "";
28:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "aE>", (-333L));
29:       cSVRecord0.putIn((Map<String, Integer>) hashMap0);
30:       // Undeclared exception!
31:       try { 
32:         cSVRecord0.toMap();
33:         fail("Expecting exception: ClassCastException");
34:       
35:       } catch(ClassCastException e) {
36:          //
37:          // java.lang.String cannot be cast to java.lang.Integer
38:          //
39:          verifyException("org.apache.commons.csv.CSVRecord", e);
40:       }
41:   }
42: }
RegularFileObject[/tmp/EvoSuite_35_1629233899090/org/apache/commons/csv/CSVRecord_34_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 20:58:19 GMT 2021
5:  */
6: 
7: package org.apache.commons.csv;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class CSVRecord_34_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.csv.CSVRecord"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CSVRecord_34_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "org.apache.commons.csv.CSVRecord"
70:     );
71:   } 
72: 
73:   private static void resetClasses() {
74:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CSVRecord_34_tmp__ESTest_scaffolding.class.getClassLoader()); 
75: 
76:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
77:       "org.apache.commons.csv.CSVRecord"
78:     );
79:   }
80: }

[MASTER] 20:58:19.133 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.160 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.188 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.219 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.253 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.284 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.310 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.343 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.369 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.397 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.428 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.454 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.491 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.519 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.544 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.570 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.599 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.641 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:58:19.737 [logback-1] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_54_1629233899642/org/apache/commons/csv/CSVRecord_53_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_54_1629233899642/org/apache/commons/csv/CSVRecord_53_tmp__ESTest_scaffolding.java]]
[MASTER] 20:58:19.737 [logback-1] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Csv-9/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-9/target/classes
[MASTER] 20:58:19.737 [logback-1] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-9/target/classes
[MASTER] 20:58:19.738 [logback-1] ERROR JUnitAnalyzer - Diagnostic: method putIn in class org.apache.commons.csv.CSVRecord cannot be applied to given types;
  required: M
  found: java.util.Map<java.lang.String,java.lang.Integer>
  reason: inferred type does not conform to upper bound(s)
    inferred: java.util.Map<java.lang.String,java.lang.Integer>
    upper bound(s): java.util.Map<java.lang.String,java.lang.String>: 273
[MASTER] 20:58:19.738 [logback-1] ERROR JUnitAnalyzer - Diagnostic: method putIn in class org.apache.commons.csv.CSVRecord cannot be applied to given types;
  required: M
  found: java.util.Map<java.lang.String,java.lang.Integer>
  reason: inferred type does not conform to upper bound(s)
    inferred: java.util.Map<java.lang.String,java.lang.Integer>
    upper bound(s): java.util.Map<java.lang.String,java.lang.String>: 335
[MASTER] 20:58:19.739 [logback-1] ERROR JUnitAnalyzer - Diagnostic: method putIn in class org.apache.commons.csv.CSVRecord cannot be applied to given types;
  required: M
  found: java.util.Map<java.lang.String,java.lang.Integer>
  reason: inferred type does not conform to upper bound(s)
    inferred: java.util.Map<java.lang.String,java.lang.Integer>
    upper bound(s): java.util.Map<java.lang.String,java.lang.String>: 377
[MASTER] 20:58:19.740 [logback-2] WARN  JUnitAnalyzer - Failed to compile the test cases 
[MASTER] 20:58:19.740 [logback-1] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_54_1629233899642/org/apache/commons/csv/CSVRecord_53_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 20:58:19 GMT 2021
4:  */
5: 
6: package org.apache.commons.csv;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.HashMap;
12: import java.util.Iterator;
13: import java.util.Map;
14: import org.apache.commons.csv.CSVRecord;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class CSVRecord_53_tmp__ESTest extends CSVRecord_53_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test00()  throws Throwable  {
24:       String[] stringArray0 = new String[1];
25:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
26:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 1);
27:       cSVRecord0.getComment();
28:       assertEquals(1L, cSVRecord0.getRecordNumber());
29:       assertFalse(cSVRecord0.isConsistent());
30:   }
31: 
32:   @Test(timeout = 4000)
33:   public void test01()  throws Throwable  {
34:       String[] stringArray0 = new String[1];
35:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
36:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 1);
37:       String string0 = cSVRecord0.toString();
38:       assertEquals("[null]", string0);
39:       assertEquals(1L, cSVRecord0.getRecordNumber());
40:   }
41: 
42:   @Test(timeout = 4000)
43:   public void test02()  throws Throwable  {
44:       String[] stringArray0 = new String[1];
45:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
46:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 1);
47:       String[] stringArray1 = cSVRecord0.values();
48:       assertEquals(1L, cSVRecord0.getRecordNumber());
49:       assertEquals(1, stringArray1.length);
50:   }
51: 
52:   @Test(timeout = 4000)
53:   public void test03()  throws Throwable  {
54:       String[] stringArray0 = new String[1];
55:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
56:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", (-710L));
57:       assertEquals(1, cSVRecord0.size());
58:       
59:       cSVRecord0.get(0);
60:       assertEquals((-710L), cSVRecord0.getRecordNumber());
61:   }
62: 
63:   @Test(timeout = 4000)
64:   public void test04()  throws Throwable  {
65:       String[] stringArray0 = new String[2];
66:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
67:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1980L));
68:       long long0 = cSVRecord0.getRecordNumber();
69:       assertEquals((-1980L), long0);
70:   }
71: 
72:   @Test(timeout = 4000)
73:   public void test05()  throws Throwable  {
74:       String[] stringArray0 = new String[1];
75:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
76:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 1);
77:       cSVRecord0.size();
78:       assertEquals(1L, cSVRecord0.getRecordNumber());
79:   }
80: 
81:   @Test(timeout = 4000)
82:   public void test06()  throws Throwable  {
83:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
84:       CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "S2$=OlnU2F3Pg,[#S", 0L);
85:       hashMap0.put("S2$=OlnU2F3Pg,[#S", (Integer) null);
86:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
87:       // Undeclared exception!
88:       try { 
89:         cSVRecord0.putIn(hashMap1);
90:         fail("Expecting exception: NullPointerException");
91:       
92:       } catch(NullPointerException e) {
93:          //
94:          // no message in exception (getMessage() returned null)
95:          //
96:          verifyException("org.apache.commons.csv.CSVRecord", e);
97:       }
98:   }
99: 
100:   @Test(timeout = 4000)
101:   public void test07()  throws Throwable  {
102:       String[] stringArray0 = new String[1];
103:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
104:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 0);
105:       // Undeclared exception!
106:       try { 
107:         cSVRecord0.get("jiPz");
108:         fail("Expecting exception: IllegalArgumentException");
109:       
110:       } catch(IllegalArgumentException e) {
111:          //
112:          // Mapping for jiPz not found, expected one of []
113:          //
114:          verifyException("org.apache.commons.csv.CSVRecord", e);
115:       }
116:   }
117: 
118:   @Test(timeout = 4000)
119:   public void test08()  throws Throwable  {
120:       String[] stringArray0 = new String[1];
121:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "", 0L);
122:       // Undeclared exception!
123:       try { 
124:         cSVRecord0.get("");
125:         fail("Expecting exception: IllegalStateException");
126:       
127:       } catch(IllegalStateException e) {
128:          //
129:          // No header mapping was specified, the record values can't be accessed by name
130:          //
131:          verifyException("org.apache.commons.csv.CSVRecord", e);
132:       }
133:   }
134: 
135:   @Test(timeout = 4000)
136:   public void test09()  throws Throwable  {
137:       String[] stringArray0 = new String[1];
138:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
139:       Integer integer0 = new Integer(0);
140:       hashMap0.put("jiPz", integer0);
141:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 0);
142:       String string0 = cSVRecord0.get("jiPz");
143:       assertNull(string0);
144:   }
145: 
146:   @Test(timeout = 4000)
147:   public void test10()  throws Throwable  {
148:       String[] stringArray0 = new String[5];
149:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "Mapping for %s not found, expected one of %s", 0L);
150:       boolean boolean0 = cSVRecord0.isConsistent();
151:       assertTrue(boolean0);
152:   }
153: 
154:   @Test(timeout = 4000)
155:   public void test11()  throws Throwable  {
156:       String[] stringArray0 = new String[2];
157:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
158:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "c", 0L);
159:       boolean boolean0 = cSVRecord0.isConsistent();
160:       assertFalse(boolean0);
161:   }
162: 
163:   @Test(timeout = 4000)
164:   public void test12()  throws Throwable  {
165:       String[] stringArray0 = new String[2];
166:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
167:       Integer integer0 = new Integer(0);
168:       hashMap0.put("", integer0);
169:       hashMap0.put("mOTFp\"IZj`o9<`", integer0);
170:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1980L));
171:       boolean boolean0 = cSVRecord0.isConsistent();
172:       assertEquals((-1980L), cSVRecord0.getRecordNumber());
173:       assertTrue(boolean0);
174:   }
175: 
176:   @Test(timeout = 4000)
177:   public void test13()  throws Throwable  {
178:       String[] stringArray0 = new String[4];
179:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "`IH1{hJ`/ducuaU3!W", 0L);
180:       boolean boolean0 = cSVRecord0.isMapped((String) null);
181:       assertFalse(boolean0);
182:   }
183: 
184:   @Test(timeout = 4000)
185:   public void test14()  throws Throwable  {
186:       String[] stringArray0 = new String[1];
187:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
188:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 0);
189:       boolean boolean0 = cSVRecord0.isMapped("jiPz");
190:       assertFalse(boolean0);
191:   }
192: 
193:   @Test(timeout = 4000)
194:   public void test15()  throws Throwable  {
195:       String[] stringArray0 = new String[1];
196:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
197:       Integer integer0 = new Integer(0);
198:       hashMap0.put("jiPz", integer0);
199:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 0);
200:       boolean boolean0 = cSVRecord0.isMapped("jiPz");
201:       assertTrue(boolean0);
202:   }
203: 
204:   @Test(timeout = 4000)
205:   public void test16()  throws Throwable  {
206:       String[] stringArray0 = new String[1];
207:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
208:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "%AgtiK[HNSe9utf", 0L);
209:       boolean boolean0 = cSVRecord0.isSet("#3cry;x{=]C$HW3");
210:       assertFalse(boolean0);
211:   }
212: 
213:   @Test(timeout = 4000)
214:   public void test17()  throws Throwable  {
215:       String[] stringArray0 = new String[1];
216:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
217:       Integer integer0 = new Integer(0);
218:       hashMap0.put("jiPz", integer0);
219:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 0);
220:       boolean boolean0 = cSVRecord0.isSet("jiPz");
221:       assertTrue(boolean0);
222:   }
223: 
224:   @Test(timeout = 4000)
225:   public void test18()  throws Throwable  {
226:       String[] stringArray0 = new String[1];
227:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
228:       Integer integer0 = Integer.valueOf(3859);
229:       hashMap0.put("@:", integer0);
230:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "%AgtiK[HNSe9utf", 0L);
231:       boolean boolean0 = cSVRecord0.isSet("@:");
232:       assertFalse(boolean0);
233:   }
234: 
235:   @Test(timeout = 4000)
236:   public void test19()  throws Throwable  {
237:       String[] stringArray0 = new String[1];
238:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
239:       Integer integer0 = Integer.valueOf(3859);
240:       hashMap0.put("@:", integer0);
241:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "%AgtiK[HNSe9utf", 0L);
242:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
243:       HashMap<String, String> hashMap2 = cSVRecord0.putIn(hashMap1);
244:       assertSame(hashMap2, hashMap1);
245:   }
246: 
247:   @Test(timeout = 4000)
248:   public void test20()  throws Throwable  {
249:       String[] stringArray0 = new String[0];
250:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
251:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Tc8u+Fv^`_;G>pb]iw", 0L);
252:       // Undeclared exception!
253:       try { 
254:         cSVRecord0.get(875);
255:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
256:       
257:       } catch(ArrayIndexOutOfBoundsException e) {
258:          //
259:          // 875
260:          //
261:          verifyException("org.apache.commons.csv.CSVRecord", e);
262:       }
263:   }
264: 
265:   @Test(timeout = 4000)
266:   public void test21()  throws Throwable  {
267:       String[] stringArray0 = new String[7];
268:       stringArray0[0] = "";
269:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
270:       Integer integer0 = new Integer(0);
271:       hashMap0.put("", integer0);
272:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "H", 1L);
273:       cSVRecord0.putIn((Map<String, Integer>) hashMap0);
274:       // Undeclared exception!
275:       try { 
276:         cSVRecord0.get("");
277:         fail("Expecting exception: ClassCastException");
278:       
279:       } catch(ClassCastException e) {
280:          //
281:          // java.lang.String cannot be cast to java.lang.Integer
282:          //
283:          verifyException("org.apache.commons.csv.CSVRecord", e);
284:       }
285:   }
286: 
287:   @Test(timeout = 4000)
288:   public void test22()  throws Throwable  {
289:       String[] stringArray0 = new String[1];
290:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
291:       hashMap0.put("a^A]-yT`W^tkS", (Integer) null);
292:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "a^A]-yT`W^tkS", 881);
293:       // Undeclared exception!
294:       try { 
295:         cSVRecord0.isSet("a^A]-yT`W^tkS");
296:         fail("Expecting exception: NullPointerException");
297:       
298:       } catch(NullPointerException e) {
299:          //
300:          // no message in exception (getMessage() returned null)
301:          //
302:          verifyException("org.apache.commons.csv.CSVRecord", e);
303:       }
304:   }
305: 
306:   @Test(timeout = 4000)
307:   public void test23()  throws Throwable  {
308:       String[] stringArray0 = new String[1];
309:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
310:       Integer integer0 = new Integer((-51));
311:       hashMap0.put("", integer0);
312:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "mOTFp\"IZj`o9<`", (-3));
313:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
314:       // Undeclared exception!
315:       try { 
316:         cSVRecord0.putIn(hashMap1);
317:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
318:       
319:       } catch(ArrayIndexOutOfBoundsException e) {
320:          //
321:          // -51
322:          //
323:          verifyException("org.apache.commons.csv.CSVRecord", e);
324:       }
325:   }
326: 
327:   @Test(timeout = 4000)
328:   public void test24()  throws Throwable  {
329:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
330:       String[] stringArray0 = new String[6];
331:       Integer integer0 = new Integer(0);
332:       hashMap0.put("@:", integer0);
333:       stringArray0[0] = "";
334:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "aE>", (-333L));
335:       cSVRecord0.putIn((Map<String, Integer>) hashMap0);
336:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
337:       // Undeclared exception!
338:       try { 
339:         cSVRecord0.putIn(hashMap1);
340:         fail("Expecting exception: ClassCastException");
341:       
342:       } catch(ClassCastException e) {
343:          //
344:          // java.lang.String cannot be cast to java.lang.Integer
345:          //
346:          verifyException("org.apache.commons.csv.CSVRecord", e);
347:       }
348:   }
349: 
350:   @Test(timeout = 4000)
351:   public void test25()  throws Throwable  {
352:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
353:       Integer integer0 = new Integer((-221));
354:       hashMap0.put("", integer0);
355:       CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", (-809L));
356:       // Undeclared exception!
357:       try { 
358:         cSVRecord0.toMap();
359:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
360:       
361:       } catch(ArrayIndexOutOfBoundsException e) {
362:          //
363:          // -221
364:          //
365:          verifyException("org.apache.commons.csv.CSVRecord", e);
366:       }
367:   }
368: 
369:   @Test(timeout = 4000)
370:   public void test26()  throws Throwable  {
371:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
372:       String[] stringArray0 = new String[6];
373:       Integer integer0 = new Integer(0);
374:       hashMap0.put("@:", integer0);
375:       stringArray0[0] = "";
376:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "aE>", (-333L));
377:       cSVRecord0.putIn((Map<String, Integer>) hashMap0);
378:       // Undeclared exception!
379:       try { 
380:         cSVRecord0.toMap();
381:         fail("Expecting exception: ClassCastException");
382:       
383:       } catch(ClassCastException e) {
384:          //
385:          // java.lang.String cannot be cast to java.lang.Integer
386:          //
387:          verifyException("org.apache.commons.csv.CSVRecord", e);
388:       }
389:   }
390: 
391:   @Test(timeout = 4000)
392:   public void test27()  throws Throwable  {
393:       String[] stringArray0 = new String[6];
394:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "\"r", (-24L));
395:       // Undeclared exception!
396:       try { 
397:         cSVRecord0.toMap();
398:         fail("Expecting exception: NullPointerException");
399:       
400:       } catch(NullPointerException e) {
401:          //
402:          // no message in exception (getMessage() returned null)
403:          //
404:          verifyException("org.apache.commons.csv.CSVRecord", e);
405:       }
406:   }
407: 
408:   @Test(timeout = 4000)
409:   public void test28()  throws Throwable  {
410:       String[] stringArray0 = new String[7];
411:       stringArray0[0] = "";
412:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
413:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "PGQw=ne", 0L);
414:       String string0 = cSVRecord0.get(0);
415:       assertEquals("", string0);
416:   }
417: 
418:   @Test(timeout = 4000)
419:   public void test29()  throws Throwable  {
420:       String[] stringArray0 = new String[8];
421:       stringArray0[0] = "S2{g_'W.6ZhPL";
422:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
423:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 417L);
424:       cSVRecord0.get(0);
425:       assertEquals(417L, cSVRecord0.getRecordNumber());
426:   }
427: 
428:   @Test(timeout = 4000)
429:   public void test30()  throws Throwable  {
430:       String[] stringArray0 = new String[7];
431:       stringArray0[1] = "";
432:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
433:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "PGQw=ne", 0L);
434:       Integer integer0 = new Integer(1);
435:       hashMap0.put("", integer0);
436:       String string0 = cSVRecord0.get("");
437:       assertEquals("", string0);
438:   }
439: 
440:   @Test(timeout = 4000)
441:   public void test31()  throws Throwable  {
442:       String[] stringArray0 = new String[3];
443:       stringArray0[1] = "q";
444:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
445:       Integer integer0 = new Integer(1);
446:       hashMap0.put("q", integer0);
447:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "%5%IB%\"", (-2771L));
448:       cSVRecord0.get("q");
449:       assertEquals((-2771L), cSVRecord0.getRecordNumber());
450:   }
451: 
452:   @Test(timeout = 4000)
453:   public void test32()  throws Throwable  {
454:       String[] stringArray0 = new String[2];
455:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
456:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1980L));
457:       cSVRecord0.getComment();
458:       assertEquals((-1980L), cSVRecord0.getRecordNumber());
459:   }
460: 
461:   @Test(timeout = 4000)
462:   public void test33()  throws Throwable  {
463:       String[] stringArray0 = new String[2];
464:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
465:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 363L);
466:       cSVRecord0.getComment();
467:       assertEquals(363L, cSVRecord0.getRecordNumber());
468:   }
469: 
470:   @Test(timeout = 4000)
471:   public void test34()  throws Throwable  {
472:       String[] stringArray0 = new String[2];
473:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
474:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "F5K-;yxK_;$2", 1625L);
475:       long long0 = cSVRecord0.getRecordNumber();
476:       assertEquals(1625L, long0);
477:   }
478: 
479:   @Test(timeout = 4000)
480:   public void test35()  throws Throwable  {
481:       String[] stringArray0 = new String[2];
482:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
483:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "c", 0L);
484:       long long0 = cSVRecord0.getRecordNumber();
485:       assertEquals(0L, long0);
486:   }
487: 
488:   @Test(timeout = 4000)
489:   public void test36()  throws Throwable  {
490:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
491:       CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "S2$=OlnU2F3Pg,[#S", 0L);
492:       Iterator<String> iterator0 = cSVRecord0.iterator();
493:       assertNotNull(iterator0);
494:   }
495: 
496:   @Test(timeout = 4000)
497:   public void test37()  throws Throwable  {
498:       String[] stringArray0 = new String[2];
499:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
500:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Mapping for %s not found, expected one of %s", 1501L);
501:       cSVRecord0.putIn((HashMap<String, String>) null);
502:       assertEquals(1501L, cSVRecord0.getRecordNumber());
503:   }
504: 
505:   @Test(timeout = 4000)
506:   public void test38()  throws Throwable  {
507:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
508:       CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "S2$=OlnU2F3Pg,[#S", 0L);
509:       int int0 = cSVRecord0.size();
510:       assertEquals(0, int0);
511:   }
512: 
513:   @Test(timeout = 4000)
514:   public void test39()  throws Throwable  {
515:       String[] stringArray0 = new String[2];
516:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
517:       Integer integer0 = new Integer(0);
518:       hashMap0.put("", integer0);
519:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1980L));
520:       Map<String, String> map0 = cSVRecord0.toMap();
521:       assertFalse(map0.isEmpty());
522:       assertEquals((-1980L), cSVRecord0.getRecordNumber());
523:   }
524: 
525:   @Test(timeout = 4000)
526:   public void test40()  throws Throwable  {
527:       String[] stringArray0 = new String[0];
528:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
529:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Tc8u+Fv^`_;G>pb]iw", 0L);
530:       String[] stringArray1 = cSVRecord0.values();
531:       assertSame(stringArray1, stringArray0);
532:   }
533: 
534:   @Test(timeout = 4000)
535:   public void test41()  throws Throwable  {
536:       String[] stringArray0 = new String[2];
537:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
538:       Integer integer0 = new Integer(875);
539:       hashMap0.put("No header mapping was specified, the record values can't be accessed by name", integer0);
540:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "c", 0L);
541:       // Undeclared exception!
542:       try { 
543:         cSVRecord0.get("No header mapping was specified, the record values can't be accessed by name");
544:         fail("Expecting exception: IllegalArgumentException");
545:       
546:       } catch(IllegalArgumentException e) {
547:          //
548:          // Index for header 'No header mapping was specified, the record values can't be accessed by name' is 875 but CSVRecord only has 2 values!
549:          //
550:          verifyException("org.apache.commons.csv.CSVRecord", e);
551:       }
552:   }
553: 
554:   @Test(timeout = 4000)
555:   public void test42()  throws Throwable  {
556:       String[] stringArray0 = new String[0];
557:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
558:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Tc8u+Fv^`_;G>pb]iw", 0L);
559:       assertTrue(cSVRecord0.isConsistent());
560:       
561:       Integer integer0 = new Integer(875);
562:       hashMap0.put("", integer0);
563:       boolean boolean0 = cSVRecord0.isConsistent();
564:       assertFalse(boolean0);
565:   }
566: 
567:   @Test(timeout = 4000)
568:   public void test43()  throws Throwable  {
569:       String[] stringArray0 = new String[1];
570:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
571:       Integer integer0 = new Integer(1);
572:       hashMap0.put("jiPz", integer0);
573:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 1);
574:       boolean boolean0 = cSVRecord0.isSet("jiPz");
575:       assertEquals(1L, cSVRecord0.getRecordNumber());
576:       assertFalse(boolean0);
577:   }
578: 
579:   @Test(timeout = 4000)
580:   public void test44()  throws Throwable  {
581:       String[] stringArray0 = new String[1];
582:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
583:       Integer integer0 = new Integer(1);
584:       hashMap0.put("jiPz", integer0);
585:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 1);
586:       cSVRecord0.toMap();
587:       assertEquals(1L, cSVRecord0.getRecordNumber());
588:   }
589: }
RegularFileObject[/tmp/EvoSuite_54_1629233899642/org/apache/commons/csv/CSVRecord_53_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 20:58:19 GMT 2021
5:  */
6: 
7: package org.apache.commons.csv;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class CSVRecord_53_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.csv.CSVRecord"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CSVRecord_53_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "org.apache.commons.csv.CSVRecord"
70:     );
71:   } 
72: 
73:   private static void resetClasses() {
74:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CSVRecord_53_tmp__ESTest_scaffolding.class.getClassLoader()); 
75: 
76:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
77:       "org.apache.commons.csv.CSVRecord"
78:     );
79:   }
80: }

[MASTER] 20:58:19.817 [logback-2] WARN  JUnitAnalyzer - Failed to compile the test cases 
* Writing tests to file
* Writing JUnit test case 'CSVRecord_ESTest' to results/Csv-9/org.apache.commons.csv.CSVRecord/BBC-F0-50/tests/26
[MASTER] 20:58:19.815 [logback-1] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_55_1629233899740/org/apache/commons/csv/CSVRecord_54_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_55_1629233899740/org/apache/commons/csv/CSVRecord_54_tmp__ESTest_scaffolding.java]]
[MASTER] 20:58:19.815 [logback-1] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Csv-9/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-9/target/classes
[MASTER] 20:58:19.815 [logback-1] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Csv-9/target/classes
[MASTER] 20:58:19.816 [logback-1] ERROR JUnitAnalyzer - Diagnostic: method putIn in class org.apache.commons.csv.CSVRecord cannot be applied to given types;
  required: M
  found: java.util.Map<java.lang.String,java.lang.Integer>
  reason: inferred type does not conform to upper bound(s)
    inferred: java.util.Map<java.lang.String,java.lang.Integer>
    upper bound(s): java.util.Map<java.lang.String,java.lang.String>: 229
[MASTER] 20:58:19.816 [logback-1] ERROR JUnitAnalyzer - Diagnostic: method putIn in class org.apache.commons.csv.CSVRecord cannot be applied to given types;
  required: M
  found: java.util.Map<java.lang.String,java.lang.Integer>
  reason: inferred type does not conform to upper bound(s)
    inferred: java.util.Map<java.lang.String,java.lang.Integer>
    upper bound(s): java.util.Map<java.lang.String,java.lang.String>: 270
[MASTER] 20:58:19.817 [logback-1] ERROR JUnitAnalyzer - Diagnostic: method putIn in class org.apache.commons.csv.CSVRecord cannot be applied to given types;
  required: M
  found: java.util.Map<java.lang.String,java.lang.Integer>
  reason: inferred type does not conform to upper bound(s)
    inferred: java.util.Map<java.lang.String,java.lang.Integer>
    upper bound(s): java.util.Map<java.lang.String,java.lang.String>: 333
[MASTER] 20:58:19.817 [logback-1] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_55_1629233899740/org/apache/commons/csv/CSVRecord_54_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Aug 17 20:58:19 GMT 2021
4:  */
5: 
6: package org.apache.commons.csv;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.HashMap;
12: import java.util.Iterator;
13: import java.util.Map;
14: import org.apache.commons.csv.CSVRecord;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class CSVRecord_54_tmp__ESTest extends CSVRecord_54_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test00()  throws Throwable  {
24:       String[] stringArray0 = new String[1];
25:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
26:       Integer integer0 = new Integer(1);
27:       hashMap0.put("jiPz", integer0);
28:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 1);
29:       cSVRecord0.toMap();
30:       assertEquals(1L, cSVRecord0.getRecordNumber());
31:   }
32: 
33:   @Test(timeout = 4000)
34:   public void test01()  throws Throwable  {
35:       String[] stringArray0 = new String[1];
36:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
37:       Integer integer0 = new Integer(1);
38:       hashMap0.put("jiPz", integer0);
39:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 1);
40:       boolean boolean0 = cSVRecord0.isSet("jiPz");
41:       assertEquals(1L, cSVRecord0.getRecordNumber());
42:       assertFalse(boolean0);
43:   }
44: 
45:   @Test(timeout = 4000)
46:   public void test02()  throws Throwable  {
47:       String[] stringArray0 = new String[0];
48:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
49:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Tc8u+Fv^`_;G>pb]iw", 0L);
50:       assertTrue(cSVRecord0.isConsistent());
51:       
52:       Integer integer0 = new Integer(875);
53:       hashMap0.put("", integer0);
54:       boolean boolean0 = cSVRecord0.isConsistent();
55:       assertFalse(boolean0);
56:   }
57: 
58:   @Test(timeout = 4000)
59:   public void test03()  throws Throwable  {
60:       String[] stringArray0 = new String[2];
61:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
62:       Integer integer0 = new Integer(875);
63:       hashMap0.put("No header mapping was specified, the record values can't be accessed by name", integer0);
64:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "c", 0L);
65:       // Undeclared exception!
66:       try { 
67:         cSVRecord0.get("No header mapping was specified, the record values can't be accessed by name");
68:         fail("Expecting exception: IllegalArgumentException");
69:       
70:       } catch(IllegalArgumentException e) {
71:          //
72:          // Index for header 'No header mapping was specified, the record values can't be accessed by name' is 875 but CSVRecord only has 2 values!
73:          //
74:          verifyException("org.apache.commons.csv.CSVRecord", e);
75:       }
76:   }
77: 
78:   @Test(timeout = 4000)
79:   public void test04()  throws Throwable  {
80:       String[] stringArray0 = new String[0];
81:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
82:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Tc8u+Fv^`_;G>pb]iw", 0L);
83:       String[] stringArray1 = cSVRecord0.values();
84:       assertSame(stringArray1, stringArray0);
85:   }
86: 
87:   @Test(timeout = 4000)
88:   public void test05()  throws Throwable  {
89:       String[] stringArray0 = new String[2];
90:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
91:       Integer integer0 = new Integer(0);
92:       hashMap0.put("", integer0);
93:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1980L));
94:       Map<String, String> map0 = cSVRecord0.toMap();
95:       assertFalse(map0.isEmpty());
96:       assertEquals((-1980L), cSVRecord0.getRecordNumber());
97:   }
98: 
99:   @Test(timeout = 4000)
100:   public void test06()  throws Throwable  {
101:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
102:       CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "S2$=OlnU2F3Pg,[#S", 0L);
103:       int int0 = cSVRecord0.size();
104:       assertEquals(0, int0);
105:   }
106: 
107:   @Test(timeout = 4000)
108:   public void test07()  throws Throwable  {
109:       String[] stringArray0 = new String[2];
110:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
111:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Mapping for %s not found, expected one of %s", 1501L);
112:       cSVRecord0.putIn((HashMap<String, String>) null);
113:       assertEquals(1501L, cSVRecord0.getRecordNumber());
114:   }
115: 
116:   @Test(timeout = 4000)
117:   public void test08()  throws Throwable  {
118:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
119:       CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "S2$=OlnU2F3Pg,[#S", 0L);
120:       Iterator<String> iterator0 = cSVRecord0.iterator();
121:       assertNotNull(iterator0);
122:   }
123: 
124:   @Test(timeout = 4000)
125:   public void test09()  throws Throwable  {
126:       String[] stringArray0 = new String[2];
127:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
128:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "c", 0L);
129:       long long0 = cSVRecord0.getRecordNumber();
130:       assertEquals(0L, long0);
131:   }
132: 
133:   @Test(timeout = 4000)
134:   public void test10()  throws Throwable  {
135:       String[] stringArray0 = new String[2];
136:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
137:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "F5K-;yxK_;$2", 1625L);
138:       long long0 = cSVRecord0.getRecordNumber();
139:       assertEquals(1625L, long0);
140:   }
141: 
142:   @Test(timeout = 4000)
143:   public void test11()  throws Throwable  {
144:       String[] stringArray0 = new String[2];
145:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
146:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 363L);
147:       cSVRecord0.getComment();
148:       assertEquals(363L, cSVRecord0.getRecordNumber());
149:   }
150: 
151:   @Test(timeout = 4000)
152:   public void test12()  throws Throwable  {
153:       String[] stringArray0 = new String[2];
154:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
155:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1980L));
156:       cSVRecord0.getComment();
157:       assertEquals((-1980L), cSVRecord0.getRecordNumber());
158:   }
159: 
160:   @Test(timeout = 4000)
161:   public void test13()  throws Throwable  {
162:       String[] stringArray0 = new String[3];
163:       stringArray0[1] = "q";
164:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
165:       Integer integer0 = new Integer(1);
166:       hashMap0.put("q", integer0);
167:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "%5%IB%\"", (-2771L));
168:       cSVRecord0.get("q");
169:       assertEquals((-2771L), cSVRecord0.getRecordNumber());
170:   }
171: 
172:   @Test(timeout = 4000)
173:   public void test14()  throws Throwable  {
174:       String[] stringArray0 = new String[7];
175:       stringArray0[1] = "";
176:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
177:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "PGQw=ne", 0L);
178:       Integer integer0 = new Integer(1);
179:       hashMap0.put("", integer0);
180:       String string0 = cSVRecord0.get("");
181:       assertEquals("", string0);
182:   }
183: 
184:   @Test(timeout = 4000)
185:   public void test15()  throws Throwable  {
186:       String[] stringArray0 = new String[8];
187:       stringArray0[0] = "S2{g_'W.6ZhPL";
188:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
189:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 417L);
190:       cSVRecord0.get(0);
191:       assertEquals(417L, cSVRecord0.getRecordNumber());
192:   }
193: 
194:   @Test(timeout = 4000)
195:   public void test16()  throws Throwable  {
196:       String[] stringArray0 = new String[7];
197:       stringArray0[0] = "";
198:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
199:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "PGQw=ne", 0L);
200:       String string0 = cSVRecord0.get(0);
201:       assertEquals("", string0);
202:   }
203: 
204:   @Test(timeout = 4000)
205:   public void test17()  throws Throwable  {
206:       String[] stringArray0 = new String[6];
207:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "\"r", (-24L));
208:       // Undeclared exception!
209:       try { 
210:         cSVRecord0.toMap();
211:         fail("Expecting exception: NullPointerException");
212:       
213:       } catch(NullPointerException e) {
214:          //
215:          // no message in exception (getMessage() returned null)
216:          //
217:          verifyException("org.apache.commons.csv.CSVRecord", e);
218:       }
219:   }
220: 
221:   @Test(timeout = 4000)
222:   public void test18()  throws Throwable  {
223:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
224:       String[] stringArray0 = new String[6];
225:       Integer integer0 = new Integer(0);
226:       hashMap0.put("@:", integer0);
227:       stringArray0[0] = "";
228:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "aE>", (-333L));
229:       cSVRecord0.putIn((Map<String, Integer>) hashMap0);
230:       // Undeclared exception!
231:       try { 
232:         cSVRecord0.toMap();
233:         fail("Expecting exception: ClassCastException");
234:       
235:       } catch(ClassCastException e) {
236:          //
237:          // java.lang.String cannot be cast to java.lang.Integer
238:          //
239:          verifyException("org.apache.commons.csv.CSVRecord", e);
240:       }
241:   }
242: 
243:   @Test(timeout = 4000)
244:   public void test19()  throws Throwable  {
245:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
246:       Integer integer0 = new Integer((-221));
247:       hashMap0.put("", integer0);
248:       CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", (-809L));
249:       // Undeclared exception!
250:       try { 
251:         cSVRecord0.toMap();
252:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
253:       
254:       } catch(ArrayIndexOutOfBoundsException e) {
255:          //
256:          // -221
257:          //
258:          verifyException("org.apache.commons.csv.CSVRecord", e);
259:       }
260:   }
261: 
262:   @Test(timeout = 4000)
263:   public void test20()  throws Throwable  {
264:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
265:       String[] stringArray0 = new String[6];
266:       Integer integer0 = new Integer(0);
267:       hashMap0.put("@:", integer0);
268:       stringArray0[0] = "";
269:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "aE>", (-333L));
270:       cSVRecord0.putIn((Map<String, Integer>) hashMap0);
271:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
272:       // Undeclared exception!
273:       try { 
274:         cSVRecord0.putIn(hashMap1);
275:         fail("Expecting exception: ClassCastException");
276:       
277:       } catch(ClassCastException e) {
278:          //
279:          // java.lang.String cannot be cast to java.lang.Integer
280:          //
281:          verifyException("org.apache.commons.csv.CSVRecord", e);
282:       }
283:   }
284: 
285:   @Test(timeout = 4000)
286:   public void test21()  throws Throwable  {
287:       String[] stringArray0 = new String[1];
288:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
289:       Integer integer0 = new Integer((-51));
290:       hashMap0.put("", integer0);
291:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "mOTFp\"IZj`o9<`", (-3));
292:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
293:       // Undeclared exception!
294:       try { 
295:         cSVRecord0.putIn(hashMap1);
296:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
297:       
298:       } catch(ArrayIndexOutOfBoundsException e) {
299:          //
300:          // -51
301:          //
302:          verifyException("org.apache.commons.csv.CSVRecord", e);
303:       }
304:   }
305: 
306:   @Test(timeout = 4000)
307:   public void test22()  throws Throwable  {
308:       String[] stringArray0 = new String[1];
309:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
310:       hashMap0.put("a^A]-yT`W^tkS", (Integer) null);
311:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "a^A]-yT`W^tkS", 881);
312:       // Undeclared exception!
313:       try { 
314:         cSVRecord0.isSet("a^A]-yT`W^tkS");
315:         fail("Expecting exception: NullPointerException");
316:       
317:       } catch(NullPointerException e) {
318:          //
319:          // no message in exception (getMessage() returned null)
320:          //
321:          verifyException("org.apache.commons.csv.CSVRecord", e);
322:       }
323:   }
324: 
325:   @Test(timeout = 4000)
326:   public void test23()  throws Throwable  {
327:       String[] stringArray0 = new String[7];
328:       stringArray0[0] = "";
329:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
330:       Integer integer0 = new Integer(0);
331:       hashMap0.put("", integer0);
332:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "H", 1L);
333:       cSVRecord0.putIn((Map<String, Integer>) hashMap0);
334:       // Undeclared exception!
335:       try { 
336:         cSVRecord0.get("");
337:         fail("Expecting exception: ClassCastException");
338:       
339:       } catch(ClassCastException e) {
340:          //
341:          // java.lang.String cannot be cast to java.lang.Integer
342:          //
343:          verifyException("org.apache.commons.csv.CSVRecord", e);
344:       }
345:   }
346: 
347:   @Test(timeout = 4000)
348:   public void test24()  throws Throwable  {
349:       String[] stringArray0 = new String[0];
350:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
351:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Tc8u+Fv^`_;G>pb]iw", 0L);
352:       // Undeclared exception!
353:       try { 
354:         cSVRecord0.get(875);
355:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
356:       
357:       } catch(ArrayIndexOutOfBoundsException e) {
358:          //
359:          // 875
360:          //
361:          verifyException("org.apache.commons.csv.CSVRecord", e);
362:       }
363:   }
364: 
365:   @Test(timeout = 4000)
366:   public void test25()  throws Throwable  {
367:       String[] stringArray0 = new String[1];
368:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
369:       Integer integer0 = Integer.valueOf(3859);
370:       hashMap0.put("@:", integer0);
371:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "%AgtiK[HNSe9utf", 0L);
372:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
373:       HashMap<String, String> hashMap2 = cSVRecord0.putIn(hashMap1);
374:       assertSame(hashMap2, hashMap1);
375:   }
376: 
377:   @Test(timeout = 4000)
378:   public void test26()  throws Throwable  {
379:       String[] stringArray0 = new String[1];
380:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
381:       Integer integer0 = Integer.valueOf(3859);
382:       hashMap0.put("@:", integer0);
383:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "%AgtiK[HNSe9utf", 0L);
384:       boolean boolean0 = cSVRecord0.isSet("@:");
385:       assertFalse(boolean0);
386:   }
387: 
388:   @Test(timeout = 4000)
389:   public void test27()  throws Throwable  {
390:       String[] stringArray0 = new String[1];
391:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
392:       Integer integer0 = new Integer(0);
393:       hashMap0.put("jiPz", integer0);
394:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 0);
395:       boolean boolean0 = cSVRecord0.isSet("jiPz");
396:       assertTrue(boolean0);
397:   }
398: 
399:   @Test(timeout = 4000)
400:   public void test28()  throws Throwable  {
401:       String[] stringArray0 = new String[1];
402:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
403:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "%AgtiK[HNSe9utf", 0L);
404:       boolean boolean0 = cSVRecord0.isSet("#3cry;x{=]C$HW3");
405:       assertFalse(boolean0);
406:   }
407: 
408:   @Test(timeout = 4000)
409:   public void test29()  throws Throwable  {
410:       String[] stringArray0 = new String[1];
411:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
412:       Integer integer0 = new Integer(0);
413:       hashMap0.put("jiPz", integer0);
414:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 0);
415:       boolean boolean0 = cSVRecord0.isMapped("jiPz");
416:       assertTrue(boolean0);
417:   }
418: 
419:   @Test(timeout = 4000)
420:   public void test30()  throws Throwable  {
421:       String[] stringArray0 = new String[1];
422:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
423:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 0);
424:       boolean boolean0 = cSVRecord0.isMapped("jiPz");
425:       assertFalse(boolean0);
426:   }
427: 
428:   @Test(timeout = 4000)
429:   public void test31()  throws Throwable  {
430:       String[] stringArray0 = new String[4];
431:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "`IH1{hJ`/ducuaU3!W", 0L);
432:       boolean boolean0 = cSVRecord0.isMapped((String) null);
433:       assertFalse(boolean0);
434:   }
435: 
436:   @Test(timeout = 4000)
437:   public void test32()  throws Throwable  {
438:       String[] stringArray0 = new String[2];
439:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
440:       Integer integer0 = new Integer(0);
441:       hashMap0.put("", integer0);
442:       hashMap0.put("mOTFp\"IZj`o9<`", integer0);
443:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1980L));
444:       boolean boolean0 = cSVRecord0.isConsistent();
445:       assertEquals((-1980L), cSVRecord0.getRecordNumber());
446:       assertTrue(boolean0);
447:   }
448: 
449:   @Test(timeout = 4000)
450:   public void test33()  throws Throwable  {
451:       String[] stringArray0 = new String[2];
452:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
453:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "c", 0L);
454:       boolean boolean0 = cSVRecord0.isConsistent();
455:       assertFalse(boolean0);
456:   }
457: 
458:   @Test(timeout = 4000)
459:   public void test34()  throws Throwable  {
460:       String[] stringArray0 = new String[5];
461:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "Mapping for %s not found, expected one of %s", 0L);
462:       boolean boolean0 = cSVRecord0.isConsistent();
463:       assertTrue(boolean0);
464:   }
465: 
466:   @Test(timeout = 4000)
467:   public void test35()  throws Throwable  {
468:       String[] stringArray0 = new String[1];
469:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
470:       Integer integer0 = new Integer(0);
471:       hashMap0.put("jiPz", integer0);
472:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 0);
473:       String string0 = cSVRecord0.get("jiPz");
474:       assertNull(string0);
475:   }
476: 
477:   @Test(timeout = 4000)
478:   public void test36()  throws Throwable  {
479:       String[] stringArray0 = new String[1];
480:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "", 0L);
481:       // Undeclared exception!
482:       try { 
483:         cSVRecord0.get("");
484:         fail("Expecting exception: IllegalStateException");
485:       
486:       } catch(IllegalStateException e) {
487:          //
488:          // No header mapping was specified, the record values can't be accessed by name
489:          //
490:          verifyException("org.apache.commons.csv.CSVRecord", e);
491:       }
492:   }
493: 
494:   @Test(timeout = 4000)
495:   public void test37()  throws Throwable  {
496:       String[] stringArray0 = new String[1];
497:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
498:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 0);
499:       // Undeclared exception!
500:       try { 
501:         cSVRecord0.get("jiPz");
502:         fail("Expecting exception: IllegalArgumentException");
503:       
504:       } catch(IllegalArgumentException e) {
505:          //
506:          // Mapping for jiPz not found, expected one of []
507:          //
508:          verifyException("org.apache.commons.csv.CSVRecord", e);
509:       }
510:   }
511: 
512:   @Test(timeout = 4000)
513:   public void test38()  throws Throwable  {
514:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
515:       CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "S2$=OlnU2F3Pg,[#S", 0L);
516:       hashMap0.put("S2$=OlnU2F3Pg,[#S", (Integer) null);
517:       HashMap<String, String> hashMap1 = new HashMap<String, String>();
518:       // Undeclared exception!
519:       try { 
520:         cSVRecord0.putIn(hashMap1);
521:         fail("Expecting exception: NullPointerException");
522:       
523:       } catch(NullPointerException e) {
524:          //
525:          // no message in exception (getMessage() returned null)
526:          //
527:          verifyException("org.apache.commons.csv.CSVRecord", e);
528:       }
529:   }
530: 
531:   @Test(timeout = 4000)
532:   public void test39()  throws Throwable  {
533:       String[] stringArray0 = new String[1];
534:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
535:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 1);
536:       cSVRecord0.size();
537:       assertEquals(1L, cSVRecord0.getRecordNumber());
538:   }
539: 
540:   @Test(timeout = 4000)
541:   public void test40()  throws Throwable  {
542:       String[] stringArray0 = new String[2];
543:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
544:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1980L));
545:       long long0 = cSVRecord0.getRecordNumber();
546:       assertEquals((-1980L), long0);
547:   }
548: 
549:   @Test(timeout = 4000)
550:   public void test41()  throws Throwable  {
551:       String[] stringArray0 = new String[1];
552:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
553:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", (-710L));
554:       assertEquals(1, cSVRecord0.size());
555:       
556:       cSVRecord0.get(0);
557:       assertEquals((-710L), cSVRecord0.getRecordNumber());
558:   }
559: 
560:   @Test(timeout = 4000)
561:   public void test42()  throws Throwable  {
562:       String[] stringArray0 = new String[1];
563:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
564:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 1);
565:       String[] stringArray1 = cSVRecord0.values();
566:       assertEquals(1L, cSVRecord0.getRecordNumber());
567:       assertEquals(1, stringArray1.length);
568:   }
569: 
570:   @Test(timeout = 4000)
571:   public void test43()  throws Throwable  {
572:       String[] stringArray0 = new String[1];
573:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
574:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 1);
575:       String string0 = cSVRecord0.toString();
576:       assertEquals("[null]", string0);
577:       assertEquals(1L, cSVRecord0.getRecordNumber());
578:   }
579: 
580:   @Test(timeout = 4000)
581:   public void test44()  throws Throwable  {
582:       String[] stringArray0 = new String[1];
583:       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
584:       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "jiPz", 1);
585:       cSVRecord0.getComment();
586:       assertEquals(1L, cSVRecord0.getRecordNumber());
587:       assertFalse(cSVRecord0.isConsistent());
588:   }
589: }
RegularFileObject[/tmp/EvoSuite_55_1629233899740/org/apache/commons/csv/CSVRecord_54_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Aug 17 20:58:19 GMT 2021
5:  */
6: 
7: package org.apache.commons.csv;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class CSVRecord_54_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.csv.CSVRecord"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CSVRecord_54_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "org.apache.commons.csv.CSVRecord"
70:     );
71:   } 
72: 
73:   private static void resetClasses() {
74:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CSVRecord_54_tmp__ESTest_scaffolding.class.getClassLoader()); 
75: 
76:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
77:       "org.apache.commons.csv.CSVRecord"
78:     );
79:   }
80: }

* Done!

* Computation finished
