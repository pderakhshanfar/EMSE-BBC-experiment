/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:15:21 GMT 2021
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("`hh9.]71`CZ 4}77Pn", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", (-997L));
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      cSVRecord0.putIn(hashMap1);
      assertEquals((-997L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put((String) null, integer0);
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 956L);
      boolean boolean0 = cSVRecord0.isSet(stringArray0[0]);
      assertEquals(956L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1911);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", (-1L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index for header '' is 1911 but CSVRecord only has 0 values!
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "", 2371L);
      cSVRecord0.values();
      assertEquals(2371L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[6];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "F<3;Y1]$u!~\"Yj3e", (-463L));
      cSVRecord0.size();
      assertEquals((-463L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "J*<", 2212L);
      cSVRecord0.iterator();
      assertEquals(2212L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Index for header '%s' is %d but CSVRecord only has %d values!", 2);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "b", (-2783L));
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-2783L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "Nn>J--OF[", 0L);
      String string0 = cSVRecord0.getComment();
      assertEquals("Nn>J--OF[", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 705L);
      cSVRecord0.getComment();
      assertEquals(705L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      stringArray0[4] = "1n}Vy{b`$HA>7@%";
      Integer integer0 = new Integer(4);
      hashMap0.put("1n}Vy{b`$HA>7@%", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "1n}Vy{b`$HA>7@%", 0L);
      String string0 = cSVRecord0.get("1n}Vy{b`$HA>7@%");
      assertEquals("1n}Vy{b`$HA>7@%", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 705L);
      cSVRecord0.get("");
      assertEquals(705L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "mo|6C^F]y=|rb3";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "`hh9.]71`CZ 4}77Pn", (-1L));
      String string0 = cSVRecord0.get(0);
      assertNotNull(string0);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "5^I|>1IU#f7", 604L);
      String string0 = cSVRecord0.get(0);
      assertEquals(604L, cSVRecord0.getRecordNumber());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "`O(si>", 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.toMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = Integer.getInteger("V;f:WO", (-457));
      hashMap0.put("V;f:WO", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "42+OmT>mewvy+", 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.toMap();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -457
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "`hh9.]71`CZ 4}77Pn", 0L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        cSVRecord0.putIn(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Integer integer0 = new Integer((-715));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ")TZ'7^LsVjl>", (-1));
      hashMap0.put("", integer0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        cSVRecord0.putIn(hashMap1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -715
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("Yq^jrDDo]ZV", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "Yq^jrDDo]ZV", 1622L);
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("Yq^jrDDo]ZV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "3J U,", 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.get((-2224));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2224
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, (String) null, 1722L);
      cSVRecord0.isMapped((String) null);
      assertEquals(1722L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(691);
      hashMap0.put("2;^/@xD:ZE", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "S4=2", (-1231L));
      boolean boolean0 = cSVRecord0.isMapped("2;^/@xD:ZE");
      assertEquals((-1231L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[9];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "org.apache.commons.csv.CSVRecord", 1123L);
      Integer integer0 = new Integer(1418);
      hashMap0.put("", integer0);
      cSVRecord0.putIn((HashMap<String, String>) null);
      assertEquals(1123L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      Integer integer0 = new Integer(4);
      hashMap0.put(stringArray0[4], integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], 0L);
      Map<String, String> map0 = cSVRecord0.toMap();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, (String) null, 0L);
      String[] stringArray0 = new String[1];
      boolean boolean0 = cSVRecord0.isSet(stringArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 0L);
      Integer integer0 = new Integer(1);
      hashMap0.put("hiA^Pu/-{2(!{+>1", integer0);
      boolean boolean0 = cSVRecord0.isSet("hiA^Pu/-{2(!{+>1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 0L);
      boolean boolean0 = cSVRecord0.isSet("hiA^Pu/-{2(!{+>1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, ")TZ'7^LsVjl>", 454L);
      boolean boolean0 = cSVRecord0.isMapped("T[h#bklI\"");
      assertEquals(454L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", (-1L));
      assertTrue(cSVRecord0.isConsistent());
      
      Integer integer0 = new Integer(2806);
      hashMap0.put("", integer0);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", (-1L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "%4K", 0L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      Integer integer0 = new Integer(4);
      hashMap0.put(stringArray0[4], integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], 0L);
      String string0 = cSVRecord0.get(stringArray0[0]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "[R`vzoXg(e=QL|[", (-3898L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.get(stringArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for null not found, expected one of []
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "%4K", 0L);
      int int0 = cSVRecord0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "pP9}WGtk2VkMuYBc", 0L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "J*<", 2212L);
      assertFalse(cSVRecord0.isConsistent());
      
      cSVRecord0.get(3);
      assertEquals(2212L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Index for header '%s' is %d but CSVRecord only has %d values!", 2);
      String[] stringArray1 = cSVRecord0.values();
      assertEquals(1, stringArray1.length);
      assertEquals(2L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "5^I|>1IU#f7", 604L);
      String string0 = cSVRecord0.toString();
      assertEquals("[null, null, null, null]", string0);
      assertEquals(604L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], 0L);
      cSVRecord0.toMap();
      assertEquals(6, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, (String) null, 1722L);
      cSVRecord0.getComment();
      assertEquals("[]", cSVRecord0.toString());
      assertEquals(1722L, cSVRecord0.getRecordNumber());
  }
}
