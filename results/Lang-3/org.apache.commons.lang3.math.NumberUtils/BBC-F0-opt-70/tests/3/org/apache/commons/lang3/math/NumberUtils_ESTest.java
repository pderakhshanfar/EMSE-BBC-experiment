/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 09:56:46 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xf(ep");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xaP<6InsH3w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)1, (byte)106, (byte)106);
      assertEquals((byte)106, byte0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)55, (byte)55, (byte)102);
      assertEquals((byte)102, byte0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = NumberUtils.max((short)7591, (short) (byte)39, (short)0);
      assertEquals((short)7591, short0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = NumberUtils.max(469L, 0L, 0L);
      assertEquals(469L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-63), (byte) (-4), (byte) (-63));
      assertEquals((byte) (-63), byte0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = NumberUtils.min(1L, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = NumberUtils.min((-2370L), (-2370L), (-12L));
      assertEquals((-2370L), long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[2] = (-1013L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-74.0F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-74.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".E!J7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        NumberUtils.createNumber("ZEx`~AHdQ9wF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ZEx`~AHdQ9wF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short short0 = NumberUtils.toShort("-0", (short) (byte)48);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short short0 = NumberUtils.toShort("0x-0X,w7WiHvS5uynAa8", (short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short short0 = NumberUtils.toShort("4");
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short short0 = NumberUtils.toShort("-05");
      assertEquals((short) (-5), short0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = NumberUtils.toLong("mr@2^7)<46]+~!t1>a", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = NumberUtils.toLong("1");
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = NumberUtils.toLong("-1");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = NumberUtils.toInt("", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = NumberUtils.toInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = NumberUtils.toInt("-8");
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = NumberUtils.toFloat(">", 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = NumberUtils.toFloat(".1");
      assertEquals(0.1F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = NumberUtils.toDouble("\n", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-0X");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = NumberUtils.toDouble("5");
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("`gDbM7=PjhoZ", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-!_Y_* 0O", (byte)115);
      assertEquals((byte)115, byte0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("n&");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("5");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)82;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)2244;
      shortArray0[3] = (short)661;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short)994;
      shortArray0[6] = (short)406;
      shortArray0[7] = (short)169;
      shortArray0[8] = (short)57;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 48;
      longArray0[1] = (long) (byte)48;
      longArray0[2] = 1184L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(48L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)7;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (-991);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-991), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1426;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(1426.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)60, byte0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-38);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-38), byte0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      short short0 = NumberUtils.min((short)0, (short)524, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short short0 = NumberUtils.min((short)7, (short)7, (short)7);
      assertEquals((short)7, short0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = NumberUtils.min(1L, 520L, 1376L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte)48, 387, (int) (byte)48);
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float float0 = NumberUtils.min((float) (short)0, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = NumberUtils.min((float) (short)5, 320.065F, (float) (short)5);
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = NumberUtils.min(1.0, (-1.0), (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)8, (byte)0, (byte)8);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1362);
      shortArray0[1] = (short) (-2741);
      shortArray0[2] = (short) (-2741);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1362), short0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[4] = 1939L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1939L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-715);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-715L), long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-3500);
      intArray0[1] = (int) (short) (-3500);
      intArray0[2] = (int) (short) (-3500);
      intArray0[3] = (int) (short) (-3500);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-3500), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-2741);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-2741.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-2741);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-2741.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-44), byte0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-898), (short)0, (short) (-898));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = NumberUtils.max((-2464L), (-2464L), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = NumberUtils.max(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = NumberUtils.max(1.0F, 0.0F, (-1.0F));
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float float0 = NumberUtils.max((-3551.7227F), (-3551.7227F), (-524.4F));
      assertEquals((-524.4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = NumberUtils.max((double) 0L, (double) 0L, (-1381.3903));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = NumberUtils.max((double) (-1L), (double) (-1L), (-1381.3903));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-25), (byte) (-18), (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0X0e");
      assertEquals((-14L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0x0d");
      assertEquals((-13), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("5");
      assertEquals(5.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-0");
      assertEquals(-0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("2");
      assertEquals(2.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-1");
      assertEquals((-1.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("5");
      assertEquals((byte)5, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-7");
      assertEquals((short) (-7), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("|gB");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"|gB\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("0E7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"E7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("-[#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("LL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("-7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0Xorg.apache.commons.lang3.StringUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Xorg.ap\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Long long0 = NumberUtils.createLong("5");
      assertEquals(5L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("5");
      assertEquals(5, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("mZ&AHDrHi<aeg");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-05");
      assertEquals((-5.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short short0 = NumberUtils.toShort("mZ&AHDrHi<aeg", (short)64);
      assertEquals((short)64, short0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("B]&;/#=XwQFH", (byte) (-66));
      assertEquals((byte) (-66), byte0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = NumberUtils.toDouble("P=", (-760.354990193902));
      assertEquals((-760.354990193902), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float float0 = NumberUtils.toFloat("+`", (-1805.0F));
      assertEquals((-1805.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = NumberUtils.toLong("i].", (long) (byte)117);
      assertEquals(117L, long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = NumberUtils.toInt("Jskw+e(/7BOvZ(J|e=", 1696);
      assertEquals(1696, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E-7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+CZ7;,<zQ9DQQO3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e_ZR8Y!ict+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1EeFaS[kxuWYi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4.E!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0E.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xArray cannot be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x9cjSb='h'D$7PL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0}SJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0e");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-7), (byte) (-59), (byte) (-59));
      assertEquals((byte) (-7), byte0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-3500), (short) (-1), (short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1415), (short) (-1415), (short)500);
      assertEquals((short)500, short0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = NumberUtils.max((int) (short) (-3500), (-127351757), (-2096353083));
      assertEquals((-3500), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = NumberUtils.max((int) (byte)39, (int) (byte)101, 108);
      assertEquals(108, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = NumberUtils.max((-447L), (long) (byte)48, (long) (byte)48);
      assertEquals(48L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long long0 = NumberUtils.max((-2464L), (-2464L), (-2464L));
      assertEquals((-2464L), long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-74), (byte) (-74), (byte) (-113));
      assertEquals((byte) (-113), byte0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)48, (byte)7, (byte)117);
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      short short0 = NumberUtils.min((short)791, (short)1761, (short) (-1890));
      assertEquals((short) (-1890), short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short short0 = NumberUtils.min((short)32, (short) (-1292), (short)32);
      assertEquals((short) (-1292), short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = NumberUtils.min(61, 1996, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = NumberUtils.min((-2328), (-2096353083), (-1));
      assertEquals((-2096353083), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = NumberUtils.min(1L, (long) (byte)7, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[3] = (float) 256;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(256.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[4] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[7] = (double) (short)1414;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1414.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) Float.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)106;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)106, byte0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)1918;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1918, short0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 1048;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1048, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)66;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[4] = (-2407.0);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-2407.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) Float.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-27849);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-27849), short0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 256;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[2] = (-4483L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-4483L), long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--XKP6OW)B#?LvGz");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --XKP6OW)B#?LvGz is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      try { 
        NumberUtils.createNumber("d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-#0e");
      assertEquals((byte) (-14), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0xe");
      assertEquals((short)14, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--5");
      assertEquals((byte)5, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("8.");
      assertEquals(8.0F, number0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0E7");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3d");
      assertEquals(3.0, number0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-Strings mustnot b ull");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -Strings mustnot b ull is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("5l");
      assertEquals(5L, number0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        NumberUtils.createNumber("$.pl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // $.pl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-05l");
      assertEquals((-5L), number0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("5f");
      assertEquals(5.0F, number0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0d");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        NumberUtils.createNumber("\"D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        NumberUtils.createNumber("gWJF]E:PI1[K=:Je");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // gWJF]E:PI1[K=:Je is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.E!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.E! is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e2; u<vW.*&Xu");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e2; u<vW.*&Xu is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber("%l6HBe4b.G2EVHmE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // %l6HBe4b.G2EVHmE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0Xi].");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-i].\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0Xorg.apache.commons.lang3.StringUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Xorg.ap\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X,w7WiHvS5uynAa8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-,w7WiHvS5uynAa8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        NumberUtils.createNumber("%*#8Cr@E%e(ork ))7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%*#8Cr@E%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short) (byte)7);
      assertEquals((short)7, short0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (double) (short)117);
      assertEquals(117.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (-2471L));
      assertEquals((-2471L), long0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (-626));
      assertEquals((-626), int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      short short0 = NumberUtils.toShort("-0");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-05");
      assertEquals((-5.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = NumberUtils.toInt("5");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      long long0 = NumberUtils.toLong("-0X8.E!J8N!\"F");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double double0 = NumberUtils.max((double) (byte)48, (-801.019), (double) (byte)48);
      assertEquals(48.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-05");
      assertEquals((byte) (-5), byte0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte((String) null, (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double double0 = NumberUtils.min(1.0, 1.0, 2097.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-8.");
      assertEquals((-8.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 684.51636F, (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      float float0 = NumberUtils.max((float) 0, (float) 0L, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
