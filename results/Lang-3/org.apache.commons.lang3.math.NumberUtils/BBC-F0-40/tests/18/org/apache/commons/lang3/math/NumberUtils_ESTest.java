/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 07:32:53 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xE9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0~]9F{NwO6X#`$t/e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = NumberUtils.max((int) (byte)46, (int) (byte)46, 5607);
      assertEquals(5607, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = NumberUtils.max((long) 0, (-323L), (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 0L, (-4587L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte)0, 64, (-1181));
      assertEquals((-1181), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = NumberUtils.min((-1L), (-1L), (-417L));
      assertEquals((-417L), long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)8;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(8.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = NumberUtils.toShort("o", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short short0 = NumberUtils.toShort("~]9dF{NwO?6X#`$t/e", (short) (-1342));
      assertEquals((short) (-1342), short0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short short0 = NumberUtils.toShort("2");
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short short0 = NumberUtils.toShort("-7");
      assertEquals((short) (-7), short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = NumberUtils.toLong("~]9dF{NwO?6X#`$tO/e", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = NumberUtils.toLong("LQWE6Fl)b");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = NumberUtils.toLong("-3");
      assertEquals((-3L), long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = NumberUtils.toInt("", 1506);
      assertEquals(1506, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = NumberUtils.toInt("9");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = NumberUtils.toInt("-05");
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = NumberUtils.toFloat("3");
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-3");
      assertEquals((-3.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = NumberUtils.toDouble("The Array must not be null", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = NumberUtils.toDouble("2");
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-6.");
      assertEquals((-6.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("VLQq", (byte)8);
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("2");
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)101;
      shortArray0[3] = (short)834;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)7, short0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[3] = (short) (-3);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-3), short0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)6;
      longArray0[1] = (long) (short)6;
      longArray0[2] = (long) (short)6;
      longArray0[3] = (long) (short)6;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 68;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(68, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)10;
      floatArray0[1] = 2.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-3L);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-3.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)8;
      doubleArray0[1] = 1.0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (-945.27261601971);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-945.27261601971), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)45, byte0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-108);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-108), byte0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = NumberUtils.min(0L, 534L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)57, (long) (short)76, (long) (byte)57);
      assertEquals(57L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = NumberUtils.min(493, (int) (byte)1, 120);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float float0 = NumberUtils.min((float) (byte)0, 473.742F, (float) (byte)113);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float float0 = NumberUtils.min((float) (byte)2, 46.0F, (float) (byte)45);
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = NumberUtils.min((double) (short)482, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = NumberUtils.min((-1364.786927618142), (-1364.786927618142), (-290.4565894409723));
      assertEquals((-1364.786927618142), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)6;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-14);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-14), short0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-296L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-296L), long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 68;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(68, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-53);
      intArray0[1] = (int) (byte) (-21);
      intArray0[2] = (int) (byte) (-25);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-21), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 8.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(8.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3.0F);
      floatArray0[1] = (-3.0F);
      floatArray0[2] = (-3.0F);
      floatArray0[3] = (-3.0F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-3.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 835.966112161353;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(835.966112161353, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3042L);
      doubleArray0[1] = (double) (-2251L);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-2251.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-53);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-53), byte0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1342), (short) (-1342), (short) (-1342));
      assertEquals((short) (-1342), short0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = NumberUtils.max((-3042L), (-1L), (-3042L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = NumberUtils.max((-3660), (int) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = NumberUtils.max((-317277669), (-645), (-645));
      assertEquals((-645), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float float0 = NumberUtils.max(0.0F, (float) (byte) (-16), (float) (byte) (-38));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = NumberUtils.max((-1990.3016F), (-1050.9F), (-1050.9F));
      assertEquals((-1050.9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = NumberUtils.max((-246.142337269), (double) (short)0, (-1.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = NumberUtils.max((-3042.835632), (-3042.835632), (-3042.835632));
      assertEquals((-3042.835632), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte) (-126), (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0-3");
      assertEquals((byte) (-3), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0XE9");
      assertEquals(233L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-#E9");
      assertEquals((-233L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("8");
      assertEquals(8, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-#E9");
      assertEquals((-233), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("8F");
      assertEquals(8.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-3");
      assertEquals((-3.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("6");
      assertEquals((byte)6, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("2");
      assertEquals((short)2, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-3");
      assertEquals((short) (-3), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("I3M");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"I3M\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("-0XMinimum abbreviation width with offset is 7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Minimum abbreviation width with offset is 7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("-0L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("~23fm]UQp3!;*623");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-3");
      assertEquals((byte) (-3), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("2");
      assertEquals(2.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-9");
      assertEquals((-9.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)1);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("VLQq", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte) (-103));
      assertEquals((byte) (-103), byte0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 3335.534303);
      assertEquals(3335.534303, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float float0 = NumberUtils.toFloat("VLQq", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = NumberUtils.toLong("MqSkID[?E", (-3982L));
      assertEquals((-3982L), long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = NumberUtils.toInt("?S!l?'", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("7l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-05");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0e-s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E@uWpcQlrT(1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("15eEp*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0eg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xam!l,m@L`Kl1V{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xA0/nZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("9d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)2, (byte)9, (byte)57);
      assertEquals((byte)57, byte0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)10, (byte)0);
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-50), (byte) (-50), (byte) (-50));
      assertEquals((byte) (-50), byte0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      short short0 = NumberUtils.max((short)100, (short)1, (short)1822);
      assertEquals((short)1822, short0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short short0 = NumberUtils.max((short)1, (short)2367, (short)1);
      assertEquals((short)2367, short0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short) (-2598), (short) (-2598));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = NumberUtils.max(1708, (int) (byte) (-2), (int) (byte)70);
      assertEquals(1708, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = NumberUtils.max((long) (byte)1, (long) (byte)70, 2137L);
      assertEquals(2137L, long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)78, (byte)10, (byte) (-59));
      assertEquals((byte) (-59), byte0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)2, (byte)45, (byte)85);
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      short short0 = NumberUtils.min((short) (byte)16, (short) (byte)16, (short) (byte)1);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-73), (short) (-435), (short) (-73));
      assertEquals((short) (-435), short0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short short0 = NumberUtils.min((short) (byte)0, (short)1425, (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = NumberUtils.min(582L, 1L, (-417L));
      assertEquals((-417L), long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = NumberUtils.min((-1L), 0L, 0L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-571.608F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-808.8804604982249);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)3;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-559);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[3] = 2532L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(2532L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 32.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)8;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[3] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)16;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[5] = (int) (short) (-1204);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1204), int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1559L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("#s}cu9Oo9UOPr");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"s}cu9O\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0.");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-6.");
      assertEquals((-6.0F), number0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      try { 
        NumberUtils.createNumber("E9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        NumberUtils.createNumber(",YbKkEewZDt1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",Yb\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("07F");
      assertEquals(7.0F, number0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        NumberUtils.createNumber("09L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        NumberUtils.createNumber("78*#fe7<6i(pL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 78*#fe7<6i(pL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".k$_CKXA}UaL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .k$_CKXA}UaL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-wH_=}O2,UjZ&Rl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -wH_=}O2,UjZ&Rl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        NumberUtils.createNumber("2;p3zp3?d}ki/gQm#yf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 2;p3zp3?d}ki/gQm#yf is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("9d");
      assertEquals(9.0, number0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        NumberUtils.createNumber("{'G =D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // {'G =D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0eAinYO0LVC}PL/i5t");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0eAinYO0LVC}PL/i5t is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        NumberUtils.createNumber("|oE1VS:BFeU.+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // |oE1VS:BFeU.+ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--3");
      assertEquals((short)3, number0.shortValue());
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        NumberUtils.createNumber("s 6'-7FZsPVTw3*Ee");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // s 6'-7FZsPVTw3*Ee is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0Nx|oE1VS:BFeU.+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0Nx|oE1VS:BFeU.+ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.b^X#iE.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.Pyhv<WC.1*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.Pyhv<WC.1* is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-^\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0Xs 6'-7FZsPVTw3*Ee");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0Xj>+;W=j2y!s9N[^3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j>+;W=j2y!s9N[^3\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0L");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-3");
      assertEquals((byte) (-3), byte0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-n", (-1723.0));
      assertEquals((-1723.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, 1737L);
      assertEquals(1737L, long0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (-187));
      assertEquals((-187), int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = NumberUtils.toInt("]n]zKE:bdPms[");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      long long0 = NumberUtils.toLong("2");
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double double0 = NumberUtils.max(1.0, (-2157.718733117), (-4111.999365));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double double0 = NumberUtils.min(1463.54, 1463.54, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      float float0 = NumberUtils.min((-567.0F), (-567.0F), 976.916F);
      assertEquals((-567.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      float float0 = NumberUtils.max((float) (short)482, (float) (short)482, 0.0F);
      assertEquals(482.0F, float0, 0.01F);
  }
}
