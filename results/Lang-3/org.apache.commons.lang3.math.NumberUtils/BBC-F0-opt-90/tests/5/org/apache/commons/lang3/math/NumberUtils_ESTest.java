/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 23:54:36 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xAb");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xa)IE]uOSAv[(k5TyiU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xb9w!8o/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xim3<MTN+=U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = NumberUtils.max((short)1171, (short)274, (short)45);
      assertEquals((short)1171, short0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = NumberUtils.max((long) (byte)0, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-990), (short)0, (short)0);
      assertEquals((short) (-990), short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = NumberUtils.min((long) (short)4, (long) 4, (long) 4);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        NumberUtils.createNumber("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short short0 = NumberUtils.toShort("=`mrf80gVg", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short short0 = NumberUtils.toShort("-0x", (short) (-296));
      assertEquals((short) (-296), short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short short0 = NumberUtils.toShort("+56");
      assertEquals((short)56, short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short short0 = NumberUtils.toShort("-6");
      assertEquals((short) (-6), short0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = NumberUtils.toLong("", (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = NumberUtils.toLong("9/!_-9iDT^TJDx");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = NumberUtils.toLong("6");
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = NumberUtils.toInt("", (-1869));
      assertEquals((-1869), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = NumberUtils.toInt("2XZJ_HR}fo2`G6");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = NumberUtils.toInt("6");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = NumberUtils.toFloat("\r", (float) (short)2);
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-41d");
      assertEquals((-41.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (-584.77655));
      assertEquals((-584.77655), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = NumberUtils.toDouble("8");
      assertEquals(8.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-41d");
      assertEquals((-41.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("", (byte)63);
      assertEquals((byte)63, byte0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("7");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-62");
      assertEquals((byte) (-62), byte0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)1;
      longArray0[2] = (long) (short)102;
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) (short)1;
      longArray0[5] = (long) (short)48;
      longArray0[6] = (long) (short)1;
      longArray0[7] = (long) (short)102;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-2385L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-2385L), long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1615;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(1615, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1639);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1639), int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 76;
      floatArray0[1] = (float) (byte)76;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(76.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 730L;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(730.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-996);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-996.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-1);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short short0 = NumberUtils.min((short)1756, (short) (-1903), (short)3144);
      assertEquals((short) (-1903), short0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = NumberUtils.min(0L, 0L, 1L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = NumberUtils.min(1601.0F, 0.0F, 1601.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float float0 = NumberUtils.min((-1553.1632F), 0.0F, (float) (short)0);
      assertEquals((-1553.1632F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, 3324.40196997, 3324.40196997);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = NumberUtils.min(146.787201, 146.787201, (double) 5);
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)29, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-98);
      shortArray0[1] = (short) (byte) (-98);
      shortArray0[2] = (short) (byte) (-98);
      shortArray0[3] = (short) (byte) (-98);
      shortArray0[4] = (short) (byte) (-98);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-98), short0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-39);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-39L), long0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 76;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (byte) (-10);
      intArray0[1] = (int) (byte) (-10);
      intArray0[2] = (int) (byte) (-10);
      intArray0[3] = (int) (byte) (-10);
      intArray0[4] = (int) (byte) (-10);
      intArray0[5] = (int) (byte) (-10);
      intArray0[6] = (-5708);
      intArray0[7] = (int) (byte) (-10);
      intArray0[8] = (int) (byte) (-10);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 744.9F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(744.9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-589.53F);
      floatArray0[2] = (-2396.41F);
      floatArray0[3] = (-1.0F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)76;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(76.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)120, byte0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-62), byte0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short)0, (short) (-2009));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = NumberUtils.max((long) (byte) (-39), (-75L), (-87L));
      assertEquals((-39L), long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = NumberUtils.max((int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float float0 = NumberUtils.max(0.0F, (-1.0F), 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float float0 = NumberUtils.max((-1.0F), (-319.1F), (-3658.476F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = NumberUtils.max((double) (short)3870, (double) (short)3870, (-1720.1255344));
      assertEquals(3870.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = NumberUtils.max((double) (byte) (-98), (double) (byte) (-98), (double) (byte) (-98));
      assertEquals((-98.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte) (-38), (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-60), (byte) (-60), (byte) (-105));
      assertEquals((byte) (-60), byte0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Long long0 = NumberUtils.createLong("#0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0x7C85");
      assertEquals(31877L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0xF");
      assertEquals((-15L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0x0Dd");
      assertEquals((-221), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("7");
      assertEquals(7.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("5");
      assertEquals(5.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-2");
      assertEquals((-2.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("8");
      assertEquals((short)8, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-1");
      assertEquals((short) (-1), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("BU$yrO?DEuWqtU|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"BU$yrO?DEuWqtU|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat(">x&(ze'V8l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble(">J2%@b");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("EEP!`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("+56");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("6");
      assertEquals((short)6, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("#0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0xd");
      assertEquals((byte) (-13), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("-*#1wR;ad}4UYX!+BLA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-*#1wR;ad}4UYX!+BLA\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("6");
      assertEquals(6, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-41d");
      assertEquals((-41.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)70);
      assertEquals((short)70, short0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "%m-2*nC\\uu5Rru$1";
      byte byte0 = NumberUtils.toByte(string0, (byte) (-96));
      assertEquals((byte) (-96), byte0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = NumberUtils.toDouble("0xb9w!8o/", 79.0);
      assertEquals(79.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (-1696.0F));
      assertEquals((-1696.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", (float) (byte)0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = NumberUtils.toLong("org.apache.commons.lang3.StringUtils", (long) (short) (-1695));
      assertEquals((-1695L), long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = NumberUtils.toInt("U% 1KDb\"Uh", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-41d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("6E+6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+W9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("EEP!`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4e>WYjRiRt$yD_/E*5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1E.VO1.fH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xfXpf$RBD%gfv`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0.Irve#{bDKH)?qT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0EL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("---");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)1, (byte)1, (byte)56);
      assertEquals((byte)56, byte0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)1, (byte)56, (byte)1);
      assertEquals((byte)56, byte0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1695), (short) (-48), (short)2);
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-19005), (short) (-996), (short) (-1704));
      assertEquals((short) (-996), short0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      short short0 = NumberUtils.max((short)337, (short)337, (short)337);
      assertEquals((short)337, short0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = NumberUtils.max((int) (byte) (-39), 546, 1376);
      assertEquals(1376, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = NumberUtils.max((int) (byte) (-10), (-3606), (-5708));
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long long0 = NumberUtils.max((long) (short)43, 0L, 467L);
      assertEquals(467L, long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = NumberUtils.max((-28L), 64L, (long) (byte)0);
      assertEquals(64L, long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)56, (byte)1, (byte)56);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-1), (byte) (-1), (byte) (-17));
      assertEquals((byte) (-17), byte0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      short short0 = NumberUtils.min((short)3204, (short)3204, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      short short0 = NumberUtils.min((short)1469, (short)70, (short)1039);
      assertEquals((short)70, short0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short short0 = NumberUtils.min((short) (byte)0, (short) (byte)0, (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = NumberUtils.min(2146402336, (int) (short)2, (-1393));
      assertEquals((-1393), int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = NumberUtils.min((long) (short)76, 1L, (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = NumberUtils.min((-1072L), 1608L, (-1521L));
      assertEquals((-1521L), long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-30672);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[3] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3373.4470888759192);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-11);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1381);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-1);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[3] = 4511L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(4511L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[3] = (-2085.5564F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-2085.5564F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6.0F;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[4] = (short) (byte) (-1);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 675;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 2752L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--c$Nw4ii_'Jx");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --c$Nw4ii_'Jx is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      try { 
        NumberUtils.createNumber("d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--9");
      assertEquals((byte)9, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      try { 
        NumberUtils.createNumber("00Ed&M0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      try { 
        NumberUtils.createNumber("eBm6E6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"eBm6E6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3D");
      assertEquals(3.0, number0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0L");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--0L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --0L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        NumberUtils.createNumber("'>P.aF39l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // '>P.aF39l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0f");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        NumberUtils.createNumber("09L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("2F");
      assertEquals(2.0F, number0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.Irv2#{QDM)lqT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.Irv2#{QDM)lqT is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        NumberUtils.createNumber("E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber("gQ1iE+PWpewO");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // gQ1iE+PWpewO is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("6E7");
      assertEquals(6.0E7F, number0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.Irve#{bDKH)?qT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.Irve#{bDKH)?qT is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".OhC%4Pe|UlsE4!_1n[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .OhC%4Pe|UlsE4!_1n[ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0.");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber("##=.Df. N3Mz0IH1=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"#=.Df. N3Mz0IH1=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-#ym!n~J%,}E6'6)}M]Z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ym!n\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0x7C85");
      assertNotNull(number0);
      assertEquals(31877, number0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      short short0 = NumberUtils.toShort("@2i0Z$c/:nGwV-ZAE[");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, 589L);
      assertEquals(589L, long0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 3871);
      assertEquals(3871, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      float float0 = NumberUtils.toFloat("3D");
      assertEquals(3.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = NumberUtils.toInt("-6");
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      long long0 = NumberUtils.toLong("-62");
      assertEquals((-62L), long0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      double double0 = NumberUtils.max(0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.BYTE_ONE, 46, 1471);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      double double0 = NumberUtils.min((-507.82060853), 120.83056854703, 3324.40196997);
      assertEquals((-507.82060853), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      double double0 = NumberUtils.toDouble("t3v{0q");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      float float0 = NumberUtils.min((float) (byte)79, 784.7F, (float) (byte)79);
      assertEquals(79.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      float float0 = NumberUtils.max((float) (byte)0, 1.0F, (float) (byte)0);
      assertEquals(1.0F, float0, 0.01F);
  }
}
