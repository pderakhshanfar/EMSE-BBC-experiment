/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 07:35:59 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0y#,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)70, (byte)0, (byte)0);
      assertEquals((byte)70, byte0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-21534), (short) (-21534), (short) (-21534));
      assertEquals((short) (-21534), short0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = NumberUtils.max((short)1071, (short)45, (short) (byte) (-15));
      assertEquals((short)1071, short0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = NumberUtils.max(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)113, (byte) (-8), (byte) (-8));
      assertEquals((byte) (-8), byte0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-1), (byte)39, (byte)39);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = NumberUtils.min((-83617762), 60, (int) (byte)60);
      assertEquals((-83617762), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte) (-15), (long) (byte) (-15), (-1L));
      assertEquals((-15L), long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1464.01F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1464.01F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = 2630L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(2630L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2091.207F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-2091.207F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) 94L;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short short0 = NumberUtils.toShort("u*X*D:);HJV8o5rnu?=", (short)962);
      assertEquals((short)962, short0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short short0 = NumberUtils.toShort("4");
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = NumberUtils.toShort("-1");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = NumberUtils.toLong("", 1359L);
      assertEquals(1359L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = NumberUtils.toLong("", (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = NumberUtils.toLong("+2");
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = NumberUtils.toInt("X!5[]", (-2861));
      assertEquals((-2861), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = NumberUtils.toInt("Threshold must not be negative");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = NumberUtils.toInt("5");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", 2618.0F);
      assertEquals(2618.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float float0 = NumberUtils.toFloat("9d");
      assertEquals(9.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = NumberUtils.toDouble("&U|ljH", (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = NumberUtils.toDouble("", (-2186.479456013));
      assertEquals((-2186.479456013), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-1");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("Minimum abbreviation width is 4", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("42");
      assertEquals((byte)42, byte0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-07");
      assertEquals((byte) (-7), byte0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)962;
      shortArray0[1] = (short)962;
      shortArray0[2] = (short)962;
      shortArray0[3] = (short)962;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)962, short0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)7;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)1008;
      intArray0[1] = (int) (short)1008;
      intArray0[2] = (int) (short)1008;
      intArray0[3] = (int) (short)1008;
      intArray0[4] = (int) (short)1008;
      intArray0[5] = (int) (short)1008;
      intArray0[6] = (int) (short)1008;
      intArray0[7] = (int) (short)1008;
      intArray0[8] = (int) (short)1008;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(1008, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (-2137);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-2137), int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[1] = (float) (byte)1;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)124;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(124.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-11);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-11), byte0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      short short0 = NumberUtils.min((short)3, (short)3, (short)3);
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = NumberUtils.min(2524L, (long) (short)962, 2644L);
      assertEquals(962L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = NumberUtils.min((int) (short)70, (int) (byte)70, (int) (byte)70);
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float float0 = NumberUtils.min(613.65F, 1.0F, 1761.8433F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float float0 = NumberUtils.min((float) (byte)0, (-1607.312F), (float) (byte)0);
      assertEquals((-1607.312F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = NumberUtils.min(1.0, 2664.5068804086204, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = NumberUtils.min((-1744.33), 0.0, (double) 0L);
      assertEquals((-1744.33), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-112);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-112), short0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = (int) (short)2511;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2511, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-82);
      intArray0[1] = (int) (short) (-2465);
      intArray0[2] = (int) (short) (-82);
      intArray0[3] = (int) (short) (-82);
      intArray0[4] = (int) (short) (-82);
      intArray0[5] = (int) (short) (-82);
      intArray0[6] = (int) (short) (-2465);
      intArray0[7] = (int) (short) (-82);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-82), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 1514L;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1514.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-726L);
      floatArray0[1] = (float) (-726L);
      floatArray0[2] = (float) (-726L);
      floatArray0[3] = (float) (-726L);
      floatArray0[4] = (float) (-726L);
      floatArray0[5] = (float) (-726L);
      floatArray0[6] = (float) (-726L);
      floatArray0[7] = (float) (-726L);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-726.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-76);
      doubleArray0[1] = (double) (-76);
      doubleArray0[2] = (double) (-76);
      doubleArray0[3] = (double) (-76);
      doubleArray0[4] = (double) (-76);
      doubleArray0[5] = (double) (-76);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-76.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-15), byte0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-28887), (short) (byte)0, (short) (-64));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = NumberUtils.max((long) (byte)0, (-123L), (long) (short)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = NumberUtils.max((long) (byte) (-32), (long) (byte) (-32), (long) (byte) (-32));
      assertEquals((-32L), long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = NumberUtils.max((int) (short)0, (-317), (-317));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float float0 = NumberUtils.max(66.36554F, 1814.245F, 1814.245F);
      assertEquals(1814.245F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = NumberUtils.max((-5225.0F), (float) (-1566L), (-138.5F));
      assertEquals((-138.5F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = NumberUtils.max((double) 0.0F, (double) 0.0F, (double) (short)0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = NumberUtils.max((double) (byte) (-8), (double) (byte) (-8), (double) (byte) (-8));
      assertEquals((-8.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)15, (byte)64, (byte)70);
      assertEquals((byte)70, byte0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-123), (byte) (-1), (byte) (-1));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0-07");
      assertEquals((byte) (-7), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = NumberUtils.createLong("5");
      assertEquals(5L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-#C");
      assertEquals((-12L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0X9d");
      assertEquals((-157), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("01.");
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-07");
      assertEquals((-7.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("07");
      assertEquals(7.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-07");
      assertEquals((-7.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("6");
      assertEquals((byte)6, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("86");
      assertEquals((short)86, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-07");
      assertEquals((byte) (-7), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("oTtL^o~AEwb>XFgR)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"oTtL^o~AEwb>XFgR)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("7l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7l\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("-(?: s|[s&&[^ ]])s*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("brPO\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("-0x`K/}7luYZy0Fb");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0X-&U|ljH");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0xE");
      assertEquals((byte) (-14), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("--0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0x0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("1");
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("0.l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      short short0 = NumberUtils.toShort("", (short) (-1400));
      assertEquals((short) (-1400), short0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("U; *<bbUh\"a", (byte) (-123));
      assertEquals((byte) (-123), byte0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 904.2483514138);
      assertEquals(904.2483514138, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (float) (byte) (-21));
      assertEquals((-21.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float float0 = NumberUtils.toFloat("0X", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = NumberUtils.toInt("aei*fF.Ue|", (int) (short)69);
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8e/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-07l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("9d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("00e-I>Z:A7YFN,m/q0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+^aG$!; !32(qGwQ0da.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("eoJtS`}[2wl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0eej{`'cgX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8el");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xaeej{`'cgX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xA blank string is not a valid number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x9d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xfHsh]nAG_}K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-076");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-15), (byte) (-1), (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte) (-1));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1538), (short)0, (short)1691);
      assertEquals((short)1691, short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = NumberUtils.max((-2414), (-2414), (int) (byte)60);
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = NumberUtils.max((int) (short) (-2424), (-1746), (int) (short) (-2424));
      assertEquals((-1746), int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 3420L, 1L);
      assertEquals(3420L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 0L, 94L);
      assertEquals(94L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte) (-62), (byte) (-119));
      assertEquals((byte) (-119), byte0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)101, (byte)16, (byte)58);
      assertEquals((byte)16, byte0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)19);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      short short0 = NumberUtils.min((short) (byte) (-1), (short)68, (short) (-738));
      assertEquals((short) (-738), short0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      short short0 = NumberUtils.min((short)68, (short) (-1421), (short)2);
      assertEquals((short) (-1421), short0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      short short0 = NumberUtils.min((short)0, (short)1345, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = NumberUtils.min(5, 0, (-3319));
      assertEquals((-3319), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = NumberUtils.min(944L, 0L, (-36L));
      assertEquals((-36L), long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long long0 = NumberUtils.min(1514L, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long long0 = NumberUtils.min((-1566L), 0L, (-1566L));
      assertEquals((-1566L), long0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1814.334F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[7] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 599.786103911;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(599.786103911, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short) (-82);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (-4055.18);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-4055.18), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1991;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)2511;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[5] = (-1943L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1943L), long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--1");
      assertEquals((byte)1, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("9.");
      assertEquals(9.0F, number0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0.");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        NumberUtils.createNumber("C{;MuE>b1DeX'ipy6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"C{;MuE>b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("6f");
      assertEquals(6.0F, number0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        NumberUtils.createNumber("097l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"97\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0D-#07l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -0D-#07l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0f");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("9d");
      assertEquals(9.0, number0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber("QttgO!@U/)1dxskL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // QttgO!@U/)1dxskL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        NumberUtils.createNumber("E1BKz?&Uw=|KiyhSd4F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // E1BKz?&Uw=|KiyhSd4F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("D0fHY4D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D0fHY4D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0EKwfu[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0EKwfu[ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.@TI0hS,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.@TI0hS, is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        NumberUtils.createNumber("WE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // WE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-07l");
      assertEquals((-7L), number0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("yeFhYu<(E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // yeFhYu<(E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e-I>Z:A7YFN,m0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.StringUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.StringUtils is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be emty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be emty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("!TzS@<K.eBl<E#MPW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // !TzS@<K.eBl<E#MPW is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x-#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X)T2P8I@L,)ncNuKj");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-)T2P8I@L,)ncNuKj\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x-0X)T2F88@L,)ncNuKF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X)T\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)40);
      assertEquals((byte)40, byte0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      short short0 = NumberUtils.toShort("");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-07d");
      assertEquals((-7.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = NumberUtils.toInt("-076");
      assertEquals((-76), int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      long long0 = NumberUtils.toLong("-07");
      assertEquals((-7L), long0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double double0 = NumberUtils.max(0.0, 1262.0, (double) (short)69);
      assertEquals(1262.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      double double0 = NumberUtils.min(705.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      double double0 = NumberUtils.toDouble("9d");
      assertEquals(9.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      float float0 = NumberUtils.min((float) 0, 1.0F, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      float float0 = NumberUtils.max((-383.0F), (float) (byte)0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
