/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 00:11:32 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x6fJaH.Egu#`y{G");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9hQWt+%q=^8m2CoIo>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0X%G-Ga`<w5:8g+rq0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short short0 = NumberUtils.max((short)440, (short) (byte) (-80), (short) (-17030));
      assertEquals((short)440, short0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = NumberUtils.max(1025L, (long) (short) (-479), (long) (byte)0);
      assertEquals(1025L, long0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = NumberUtils.min((int) (short) (-2867), 1047, (int) (short) (-2867));
      assertEquals((-2867), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[2] = (short)70;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        NumberUtils.createNumber("...");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        NumberUtils.createNumber("id-0Pbi 3CF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // id-0Pbi 3CF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)43);
      assertEquals((short)43, short0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short short0 = NumberUtils.toShort("10");
      assertEquals((short)10, short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short short0 = NumberUtils.toShort("-6");
      assertEquals((short) (-6), short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = NumberUtils.toLong("", (-1368L));
      assertEquals((-1368L), long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = NumberUtils.toLong("05");
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = NumberUtils.toInt("0", 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = NumberUtils.toInt("10");
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", 488.0F);
      assertEquals(488.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (-103.9F));
      assertEquals((-103.9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float float0 = NumberUtils.toFloat("");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = NumberUtils.toFloat("2");
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = NumberUtils.toDouble("P7!aOxToh'^%", (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = NumberUtils.toDouble("4");
      assertEquals(4.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("bB", (byte)14);
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("4");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)3029;
      shortArray0[1] = (short)76;
      shortArray0[2] = (short)45;
      shortArray0[3] = (short)5;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[6] = (short) (-1);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)55;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(55L, long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)10;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = (-2011);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-2011), int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 3300.82F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(3300.82F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = (-308.905F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-308.905F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2125.29F;
      doubleArray0[1] = (double) 3383.9573F;
      doubleArray0[2] = (double) 1423.3F;
      doubleArray0[3] = (double) 4137.0F;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 4137.0F;
      doubleArray0[6] = (double) 1423.3F;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-638.403455491364);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-638.403455491364), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-61);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-61), byte0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      short short0 = NumberUtils.min((short)108, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      short short0 = NumberUtils.min((short)7, (short)7, (short)2727);
      assertEquals((short)7, short0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = NumberUtils.min(0L, (long) (byte)88, (long) (byte)43);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, 22);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float float0 = NumberUtils.min(698.305F, 698.305F, 698.305F);
      assertEquals(698.305F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = NumberUtils.min((float) (short) (-530), (-38.0F), 0.0F);
      assertEquals((-530.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = NumberUtils.min(1555.0, 2347.697998046875, 1555.0);
      assertEquals(1555.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)100);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-69), (byte) (-69), (byte) (-69));
      assertEquals((byte) (-69), byte0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 735L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(735L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-80);
      longArray0[1] = (long) (byte) (-80);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-80L), long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 8;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short) (-1950);
      intArray0[1] = (int) (short) (-1950);
      intArray0[2] = (int) (short) (-1950);
      intArray0[3] = (int) (short) (-1950);
      intArray0[4] = (int) (short) (-1950);
      intArray0[5] = (int) (short) (-1950);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-1950), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (short) (-479);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 1.0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-665.0F);
      doubleArray0[1] = (double) (-665.0F);
      doubleArray0[2] = (double) (-665.0F);
      doubleArray0[3] = (double) (-665.0F);
      doubleArray0[4] = (double) (-665.0F);
      doubleArray0[5] = (double) (-665.0F);
      doubleArray0[6] = (double) (-665.0F);
      doubleArray0[7] = (-1669.0);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-665.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)81, byte0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-69);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-69), byte0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = NumberUtils.max((-1L), (long) (short)0, (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = NumberUtils.max(0, 0, (int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = NumberUtils.max((-118), (-118), (-118));
      assertEquals((-118), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float float0 = NumberUtils.max(0.0F, (-236.75F), (-236.75F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float float0 = NumberUtils.max((-665.0F), (-665.0F), (-665.0F));
      assertEquals((-665.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = NumberUtils.max((-300.3829), (double) (short) (-1419), (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = NumberUtils.max((double) 101, (double) 0, 385.5375285032);
      assertEquals(385.5375285032, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-44), (byte) (-44), (byte) (-44));
      assertEquals((byte) (-44), byte0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--6");
      assertEquals((byte)6, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-#1e9");
      assertEquals((-489L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("10");
      assertEquals(10, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0XF");
      assertEquals((-15), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("10");
      assertEquals(10.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-6");
      assertEquals((-6.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-6");
      assertEquals((-6.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-1");
      assertEquals((short) (-1), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("1e9");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("5.");
      assertEquals((byte)5, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-8");
      assertEquals((short) (-8), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("hUwY%33m:W8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"hUwY%33m:W8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits(".d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("10");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("..");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0X-'BD]2f(vCac3c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("10");
      assertEquals((byte)10, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Long long0 = NumberUtils.createLong("10");
      assertEquals(10L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("1e9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1e9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("4");
      assertEquals(4.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short) (-1419));
      assertEquals((short) (-1419), short0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      short short0 = NumberUtils.toShort("r/7m", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("tHfKLH", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte) (-59));
      assertEquals((byte) (-59), byte0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (-1419.0));
      assertEquals((-1419.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = NumberUtils.toDouble("tPj:?_8H}", 2084.07856262);
      assertEquals(2084.07856262, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float float0 = NumberUtils.toFloat("cB&K ^{yra", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, 1483L);
      assertEquals(1483L, long0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = NumberUtils.toLong("cB&K ^{yra", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = NumberUtils.toInt("", (-118));
      assertEquals((-118), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (int) (byte)102);
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3E-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("284D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1e9+`z\"LH;S*oF*i#{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1ee9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("eo=[)T@]We\"h4<fvW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3EL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xA blank string is not a valid number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0|P\"$t?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xa\"t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("#-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--#SrinRs mstrnRt M`nu\"l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)19, (byte)46, (byte)48);
      assertEquals((byte)48, byte0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte) (-69), (byte) (-69));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1), (short) (-686), (short)102);
      assertEquals((short)102, short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-778), (short) (byte) (-52), (short) (byte) (-52));
      assertEquals((short) (-52), short0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = NumberUtils.max((-1968), (-1968), 3);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = NumberUtils.max(1712, 3074, 3074);
      assertEquals(3074, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = NumberUtils.max(101, 0, 0);
      assertEquals(101, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long long0 = NumberUtils.max((-862L), (-1L), 803L);
      assertEquals(803L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long long0 = NumberUtils.max((-3120L), (-3120L), (-3120L));
      assertEquals((-3120L), long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)100, (byte)64, (byte)55);
      assertEquals((byte)55, byte0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)43, (byte)88, (byte)88);
      assertEquals((byte)43, byte0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      short short0 = NumberUtils.min((short) (byte)0, (short)7, (short) (-623));
      assertEquals((short) (-623), short0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = NumberUtils.min(3, 1, 57);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = NumberUtils.min((-862), 4, (-1056));
      assertEquals((-1056), int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)0, (long) (byte)0, (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long long0 = NumberUtils.min((long) 3074, 1854L, 1882L);
      assertEquals(1854L, long0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long long0 = NumberUtils.min(1L, 1L, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[3] = 963.7476F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(963.7476F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[7] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4274.66943359375);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)20461;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)20461, short0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-276);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-1690);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 39.24F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[3] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2125.29F;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) Float.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)1;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-3372L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-3372L), long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1e9");
      assertEquals(1.0E9F, number0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("4F");
      assertEquals(4.0F, number0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3L");
      assertEquals(3L, number0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".d$2yNl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .d$2yNl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--#S#rings mustrnot b`pnull");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --#S#rings mustrnot b`pnull is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-03L");
      assertEquals((-3L), number0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        NumberUtils.createNumber("veu5V;XT])*D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // veu5V;XT])*D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.f");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1EdIB+NG2pq-6v{^es");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1EdIB+NG2pq-6v{^es is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.e%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.e% is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".8d");
      assertEquals(0.8, number0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        NumberUtils.createNumber("BEe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // BEe is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber("E1e9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"E1e9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        NumberUtils.createNumber("/b0#%A8{o.eqEh=ee");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // /b0#%A8{o.eqEh=ee is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.e2");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0-6");
      assertNotNull(number0);
      assertEquals((short) (-6), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-#Minimum bbreviation with i 4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Minimum\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x1EdIBNt2pq-6v^^6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-1EdIBNt2pq-6v^^6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0.");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = NumberUtils.toInt("-4");
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-8");
      assertEquals((-8.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long long0 = NumberUtils.toLong("-10");
      assertEquals((-10L), long0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      double double0 = NumberUtils.max((-4274.66943359375), (-4274.66943359375), (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-6");
      assertEquals((byte) (-6), byte0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      double double0 = NumberUtils.min((-4274.6693), (-4274.6693), (-4274.6693));
      assertEquals((-4274.6693), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-8");
      assertEquals((-8.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      float float0 = NumberUtils.min((float) 2, (float) 0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float float0 = NumberUtils.max((float) (byte) (-17), 1423.3F, (float) (byte) (-17));
      assertEquals(1423.3F, float0, 0.01F);
  }
}
