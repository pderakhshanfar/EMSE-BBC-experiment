/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 06:09:02 GMT 2020
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xf=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = NumberUtils.max(2497L, 1433L, 1433L);
      assertEquals(2497L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-2980), (short) (-2980), (short)1382);
      assertEquals((short) (-2980), short0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = NumberUtils.min((-222), (-222), (-222));
      assertEquals((-222), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 1835.563F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0Xw4$g\"r'%L#HK_/9P");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"w4$g\"r'%L#HK_/9P\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short short0 = NumberUtils.toShort("", (short) (-2980));
      assertEquals((short) (-2980), short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short short0 = NumberUtils.toShort(".");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = NumberUtils.toShort("3");
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = NumberUtils.toLong("@/=!tZ", (long) (short) (-2980));
      assertEquals((-2980L), long0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = NumberUtils.toInt("ykVCc?nQ", (int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = NumberUtils.toInt("", (-1077));
      assertEquals((-1077), int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = NumberUtils.toInt("5");
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float float0 = NumberUtils.toFloat("Strings must not be null", 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = NumberUtils.toDouble("'n_QH.%G?#Fq(bU^", (-1914.6301933916634));
      assertEquals((-1914.6301933916634), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = NumberUtils.toDouble("5");
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("D0.", (byte) (-58));
      assertEquals((byte) (-58), byte0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-4B26_q;QjvnkWPdw Q");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("2");
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)7361;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)7361, short0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[4] = (short) (-2547);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-2547), short0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 639;
      longArray0[1] = (long) 639;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(639L, long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-33L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-33L), long0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)9;
      intArray0[1] = (int) (byte)9;
      intArray0[2] = (int) (byte)9;
      intArray0[3] = (int) (byte)9;
      intArray0[4] = (int) (byte)9;
      intArray0[5] = (int) (byte)9;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = (-1);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1433L;
      doubleArray0[1] = (double) 1433L;
      doubleArray0[2] = (double) 2497L;
      doubleArray0[3] = (double) 1433L;
      doubleArray0[4] = (double) 2497L;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1433.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1478.16231833);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1478.16231833), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)59;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)59, byte0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-100), byte0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      short short0 = NumberUtils.min((short)3743, (short)3, (short)3743);
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.BYTE_ONE, (int) numberUtils0.BYTE_ZERO, 32);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = NumberUtils.min(639, 2347, 2347);
      assertEquals(639, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = NumberUtils.min(1.0F, 1.0F, 3316.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, 513.5537367190622, 513.5537367190622);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = NumberUtils.min(1128.3804, (-1462.2301682342409), (-1935.478759015));
      assertEquals((-1935.478759015), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)14, (byte)14, (byte)14);
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)4445;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)4445, short0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-76);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-76), short0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 533L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(533L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-58);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-58L), long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 107;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(107, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1077);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-1077), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1895.1329F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1895.1329F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1077);
      floatArray0[1] = (float) (-1077);
      floatArray0[2] = (float) (-1077);
      floatArray0[3] = (float) (-1077);
      floatArray0[4] = (float) (-1077);
      floatArray0[5] = (float) (-1077);
      floatArray0[6] = (float) (-1077);
      floatArray0[7] = (float) (-1077);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1077.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2581.6);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-2581.6), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)82;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)82, byte0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-115), byte0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short) (-346), (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-2980), (short) (-2980), (short) (-1501));
      assertEquals((short) (-1501), short0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = NumberUtils.max(0L, (long) (short)0, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = NumberUtils.max(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = NumberUtils.max((float) (short) (-2205), (float) 0L, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = NumberUtils.max((float) (byte) (-1), (float) (byte) (-1), (-2357.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = NumberUtils.max(0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = NumberUtils.max((double) (byte) (-58), (double) (byte) (-58), (-2949.8219599651734));
      assertEquals((-58.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-8), (byte) (-84), (byte) (-8));
      assertEquals((byte) (-8), byte0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Long long0 = NumberUtils.createLong("5");
      assertEquals(5L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-#F");
      assertEquals((-15L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("00");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("5");
      assertEquals(5, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("00");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("00");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("5");
      assertEquals(5.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-1");
      assertEquals((-1.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("60");
      assertEquals((byte)60, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("00");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("=]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("U1C-\"o{.:`H@=R':!x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("2");
      assertEquals((byte)2, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0Xk-3-wyvF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("-0XUE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-UE\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble(".W}tgZjq`_{O");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("60");
      assertEquals(60.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Minimum abbreviation width is 4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      short short0 = NumberUtils.toShort("0", (short)1382);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("", (byte)63);
      assertEquals((byte)63, byte0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-0Xa", 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", 1441.6F);
      assertEquals(1441.6F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = NumberUtils.toLong("QOe", 2719L);
      assertEquals(2719L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = NumberUtils.toInt("%", 256);
      assertEquals(256, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E/4n>znu+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0e\"fz42hJ]gphK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xArray cannot be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xdG@|?,<d%[I4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x s not avalid number.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.-2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)1, (byte)106, (byte)1);
      assertEquals((byte)106, byte0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-81), (byte) (-81), (byte)102);
      assertEquals((byte)102, byte0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      short short0 = NumberUtils.max((short)729, (short) (-2205), (short) (-2205));
      assertEquals((short)729, short0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-2980), (short)14, (short)2280);
      assertEquals((short)2280, short0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = NumberUtils.max(766, (-1), (-479));
      assertEquals(766, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = NumberUtils.max(639, 693, 1870);
      assertEquals(1870, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = NumberUtils.max((-1098), (-1098), (int) (short) (-696));
      assertEquals((-696), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 0L, (long) (short)729);
      assertEquals(729L, long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = NumberUtils.max((long) 0, 554L, (-739L));
      assertEquals(554L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = NumberUtils.max((-2337L), (-2337L), (-2337L));
      assertEquals((-2337L), long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-85), (byte)0, (byte) (-115));
      assertEquals((byte) (-115), byte0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)101, (byte) (-1), (byte)100);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short short0 = NumberUtils.min((short)1706, (short)108, (short) (-1));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      short short0 = NumberUtils.min((short)0, (short)3743, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, (-2949));
      assertEquals((-2949), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long long0 = NumberUtils.min(2279L, 2279L, 1896L);
      assertEquals(1896L, long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = NumberUtils.min(1L, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = NumberUtils.min((long) (short) (-2980), (-207L), 0L);
      assertEquals((-2980L), long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3501.6F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[4] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-388.172284);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-100);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-490);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-854);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-1L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = (float) (short) (-2980);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-2980.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3467.3845F;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)70;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 48;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 533L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--Threshol must not be neatve");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --Threshol must not be neatve is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("#5I/05]d}l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5I\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0x9");
      assertEquals((byte) (-9), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      try { 
        NumberUtils.createNumber(",eh\u0006");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ,eh\u0006 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0-0");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        NumberUtils.createNumber("5I/05]d}l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 5I/05]d}l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0l");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      try { 
        NumberUtils.createNumber("H,hj.6zM&__XvxQl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // H,hj.6zM&__XvxQl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Strings must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".G*f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .G*f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      try { 
        NumberUtils.createNumber("ji@d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ji@d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      try { 
        NumberUtils.createNumber("k-3wyvF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // k-3wyvF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      try { 
        NumberUtils.createNumber(";hN0V{SSUCD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ;hN0V{SSUCD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.-~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.-~ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e\"fz42hJ]gphK");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e\"fz42hJ]gphK is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        NumberUtils.createNumber("UE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // UE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        NumberUtils.createNumber("QdyMD=!eLJSE>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // QdyMD=!eLJSE> is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        NumberUtils.createNumber(";7@s5Iq:7zK>eEg.4:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ;7@s5Iq:7zK>eEg.4: is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        NumberUtils.createNumber(")r_[.VeQkM{a0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x/PgvXWPSUmf[gN+4!-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)11);
      assertEquals((short)11, short0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (int) (short)304);
      assertEquals(304, int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      short short0 = NumberUtils.toShort("-1");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      float float0 = NumberUtils.toFloat("04");
      assertEquals(4.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      int int0 = NumberUtils.toInt("323L<EGm2&lJxm");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      long long0 = NumberUtils.toLong("5");
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double double0 = NumberUtils.max((double) (-1), (double) (short)304, 2301.4183);
      assertEquals(2301.4183, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-1");
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte((String) null, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double double0 = NumberUtils.min((double) (byte)16, (double) (byte)16, 2204.5);
      assertEquals(16.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      double double0 = NumberUtils.toDouble("PO");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      float float0 = NumberUtils.min((-239.0F), 1376.536F, 602.43F);
      assertEquals((-239.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      float float0 = NumberUtils.max((-2980.0F), (float) 917L, (float) 0L);
      assertEquals(917.0F, float0, 0.01F);
  }
}
