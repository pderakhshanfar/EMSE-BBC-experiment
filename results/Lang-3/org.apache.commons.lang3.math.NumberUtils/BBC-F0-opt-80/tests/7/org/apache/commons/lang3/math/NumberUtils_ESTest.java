/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 23:59:09 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xdAut)`DW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0~*|4{:Mv98IW=6/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+<qwa*-!)+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)121, (byte)8, (byte)121);
      assertEquals((byte)121, byte0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = NumberUtils.max((-204L), (long) (short)0, (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = NumberUtils.max((long) (byte)108, (-1111L), (-345L));
      assertEquals(108L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)1, (byte)1, (byte)1);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short short0 = NumberUtils.min((short)108, (short)108, (short)108);
      assertEquals((short)108, short0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte)121, (int) (byte)121, (int) (byte)121);
      assertEquals(121, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1577.47F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1577.47F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)43;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 2;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0xs*JrVYzTb`)b>+FO");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"s*JrVYzTb`)b>+FO\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        NumberUtils.createNumber("c2w%5{,N$f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // c2w%5{,N$f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short short0 = NumberUtils.toShort("", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      short short0 = NumberUtils.toShort("0x9");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short short0 = NumberUtils.toShort("6");
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = NumberUtils.toLong("", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = NumberUtils.toLong("70");
      assertEquals(70L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = NumberUtils.toLong("-1");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = NumberUtils.toInt("9X8&auxo&>N97\"+", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt(" is not a valid number.", (int) numberUtils0.SHORT_ONE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = NumberUtils.toInt("2");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = NumberUtils.toInt("-5");
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", (float) 1L);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = NumberUtils.toFloat("QlPX=421FJB/Er", (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = NumberUtils.toFloat("8F");
      assertEquals(8.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("k9", (double) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = NumberUtils.toDouble("A blank string is not a valid number");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-3");
      assertEquals((-3.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-0x", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("4");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-5");
      assertEquals((byte) (-5), byte0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2476;
      shortArray0[1] = (short)1969;
      shortArray0[2] = (short)102;
      shortArray0[3] = (short)1969;
      shortArray0[4] = (short)1969;
      shortArray0[5] = (short)102;
      shortArray0[6] = (short)1969;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)102, short0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-1);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)17;
      longArray0[1] = (long) (byte)17;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(17L, long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2489;
      intArray0[1] = 2489;
      intArray0[2] = 108;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(108, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[3] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)43;
      floatArray0[1] = (float) (byte)43;
      floatArray0[2] = (float) (byte)43;
      floatArray0[3] = (float) (byte)43;
      floatArray0[4] = (float) (byte)43;
      floatArray0[5] = (float) (byte)43;
      floatArray0[6] = (float) (byte)43;
      floatArray0[7] = (float) (byte)43;
      floatArray0[8] = (float) (byte)43;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(43.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)1980;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1980.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (-1422.9142064155612);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1422.9142064155612), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-1);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short short0 = NumberUtils.min((short) (byte)0, (short) (byte)0, (short) (-213));
      assertEquals((short) (-213), short0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = NumberUtils.min(2903L, 277L, 2903L);
      assertEquals(277L, long0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = NumberUtils.min(100, 0, 69);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 0.0F, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = NumberUtils.min(440.5F, 440.5F, 440.5F);
      assertEquals(440.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = NumberUtils.min(1.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = NumberUtils.min((-1.0), 15.2, (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-2987);
      shortArray0[1] = (short) (-1454);
      shortArray0[2] = (short) (-2987);
      shortArray0[3] = (short) (-2301);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1454), short0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 757L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(757L, long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2248);
      intArray0[1] = (-312);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-312), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-2677.0F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)121;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(121.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-69.0);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-69.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-11);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-11), byte0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-2987), (short) (-2987), (short) (-2301));
      assertEquals((short) (-2301), short0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = NumberUtils.max((-1247), (-1247), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = NumberUtils.max((-2679), (-2679), (-2679));
      assertEquals((-2679), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float float0 = NumberUtils.max(0.0F, (-1.0F), (float) (-222L));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = NumberUtils.max((-1.0F), 651.0F, (-178.329F));
      assertEquals(651.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float float0 = NumberUtils.max((float) (short) (-11690), (float) (short) (-11690), (float) (short) (-11690));
      assertEquals((-11690.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = NumberUtils.max(0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = NumberUtils.max(939.1105, 102.0, (double) (short)0);
      assertEquals(939.1105, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = NumberUtils.max((-846.97), (-1.0), (double) (-1L));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-81), (byte) (-81), (byte) (-115));
      assertEquals((byte) (-81), byte0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0x7");
      assertEquals(7L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-#1D");
      assertEquals((-29L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0x7");
      assertEquals(7, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-#1D");
      assertEquals((-29), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("5");
      assertEquals(5.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-5");
      assertEquals((-5.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-5");
      assertEquals((-5.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("6");
      assertEquals((byte)6, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-90");
      assertEquals((byte) (-90), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("# SsO!;H>w%7}E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("0x7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("1EL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("7");
      assertEquals((byte)7, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0x1D");
      assertEquals((short) (-29), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("A blank string is not a valid number");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"A blank string is not a valid number\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("0xdAut)`DW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"dAut)`DW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("1f");
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      short short0 = NumberUtils.toShort("T1OL+8v{S>JNl@", (short) (-11690));
      assertEquals((short) (-11690), short0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("@Aki'TTtVl", (byte) (-107));
      assertEquals((byte) (-107), byte0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-0X", (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = NumberUtils.toLong("...", (long) (short)1980);
      assertEquals(1980L, long0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = NumberUtils.toInt("--", (-2248));
      assertEquals((-2248), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1E*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1E.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--0x)hE^Il-)dAhUAeJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e?(WueF,]l^N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1Ee*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0e.DFs");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("6.l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1EL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0fCa|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("01E+S}WT5'/]3[fi;9mR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x&iJ3_DQF'KnVAF3(+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-81), (byte) (-81), (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)114, (byte)0);
      assertEquals((byte)114, byte0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      short short0 = NumberUtils.max((short)57, (short) (-1), (short)5);
      assertEquals((short)57, short0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      short short0 = NumberUtils.max((short)57, (short)876, (short)3509);
      assertEquals((short)3509, short0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = NumberUtils.max(0, (-1713), 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = NumberUtils.max(108, 2489, 2489);
      assertEquals(2489, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = NumberUtils.max(101, (-1), (-1));
      assertEquals(101, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long long0 = NumberUtils.max((-1L), (-1L), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = NumberUtils.max((-1L), (-1L), (-89L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)25, (byte)101, (byte) (-124));
      assertEquals((byte) (-124), byte0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)69, (byte)0, (byte)69);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      short short0 = NumberUtils.min((short)1622, (short)18, (short)4);
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      short short0 = NumberUtils.min((short)0, (short)75, (short) (byte)121);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = NumberUtils.min((int) (short) (-1), (int) (byte)66, (-155952485));
      assertEquals((-155952485), int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)8, (long) (byte)16, (-1584L));
      assertEquals((-1584L), long0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long long0 = NumberUtils.min(5123L, (-1L), (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long long0 = NumberUtils.min((long) 0, (long) 0, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 8.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(8.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3685.0);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)121;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)121, byte0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)3979;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)3979, short0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 1524;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1524, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-2574L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = (-3653.6F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-3653.6F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 653.4596819;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-1612L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1612L), long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--3");
      assertEquals((byte)3, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-#6Slgq-br-5eL1;b");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".1");
      assertEquals(0.1F, number0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        NumberUtils.createNumber("CQTf&e_E27`eb3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"CQTf&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1D");
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0l");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Strings must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.pache.cm3ons.lang3.StrngUtil");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.pache.cm3ons.lang3.StrngUtil is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        NumberUtils.createNumber("08l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0d");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-/(|f_W{[XL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -/(|f_W{[XL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("2F");
      assertEquals(2.0F, number0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.D");
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" YO!9;>w%7}E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  YO!9;>w%7}E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        NumberUtils.createNumber(")hE^Il-)dAhUAeJ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // )hE^Il-)dAhUAeJ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0f");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("qloF] a.Eueq");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // qloF] a.Eueq is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.m)\"KkEKw");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.m)\"KkEKw is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-00.");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x&iJ3_DQF'KnVAF3(+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0Ed7d8M gn]94Pn6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)1980);
      assertEquals((short)1980, short0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)108);
      assertEquals((byte)108, byte0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 217.01);
      assertEquals(217.01, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (long) (short) (-1));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (int) (short) (-2301));
      assertEquals((-2301), int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      short short0 = NumberUtils.toShort("-9");
      assertEquals((short) (-9), short0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-5");
      assertEquals((-5.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = NumberUtils.toInt("-0x&iJ3_DQF'KnVAF3(+");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      long long0 = NumberUtils.toLong("-0x&iJ3_DQF'KnVAF3(+");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("0~*|4{:Mv98IW=6/");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double double0 = NumberUtils.min(3584.49893, 3584.49893, 3584.49893);
      assertEquals(3584.49893, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double double0 = NumberUtils.toDouble("1D");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, (float) (short) (-2301), 0.0F);
      assertEquals((-2301.0F), float0, 0.01F);
  }
}
