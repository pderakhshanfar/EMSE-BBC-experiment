/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 18 23:47:06 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xft\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0x/...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0{U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = NumberUtils.max((short)4, (short) (byte) (-125), (short) (byte) (-125));
      assertEquals((short)4, short0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = NumberUtils.max(681, 88, 681);
      assertEquals(681, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = NumberUtils.max((int) (byte)116, (int) (byte)116, 101);
      assertEquals(116, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short short0 = NumberUtils.min((short) (byte)2, (short) (byte)113, (short)2);
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        NumberUtils.createNumber("#XY|;z?7C=qE6ym^r");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"XY|;z?7C=qE6ym^r\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short short0 = NumberUtils.toShort("h`sa-,>jqg3", (short)613);
      assertEquals((short)613, short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short short0 = NumberUtils.toShort("+6");
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short short0 = NumberUtils.toShort("-3");
      assertEquals((short) (-3), short0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong("!1\"=K=+VlM/c<-S/3E", (long) numberUtils0.LONG_ZERO);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = NumberUtils.toLong(")[4T#^h'd*D4}]S!*", 2468L);
      assertEquals(2468L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = NumberUtils.toLong("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = NumberUtils.toLong("3");
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, (int) (short) (-1056));
      assertEquals((-1056), int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = NumberUtils.toInt("+6");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = NumberUtils.toFloat("", (float) 0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float float0 = NumberUtils.toFloat("3e5");
      assertEquals(300000.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-3");
      assertEquals((-3.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = NumberUtils.toDouble("Array cannot be empty.", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = NumberUtils.toDouble("3");
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-#org.apache.commons.lang3.math.NumberUtils", (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte byte0 = NumberUtils.toByte(">'xoB\"RoNU^*\"", (byte) (-50));
      assertEquals((byte) (-50), byte0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("uu'>MYJXH$ZOCun!U-");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("+6");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)43;
      shortArray0[1] = (short)43;
      shortArray0[2] = (short)43;
      shortArray0[3] = (short) (byte)124;
      shortArray0[4] = (short)43;
      shortArray0[5] = (short)43;
      shortArray0[6] = (short)3591;
      shortArray0[7] = (short) (byte)124;
      shortArray0[8] = (short) (byte)124;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)43, short0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-26);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-26), short0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) numberUtils0.LONG_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = (-1L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1088;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(1088, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-715);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-715), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 815L;
      floatArray0[1] = (float) (byte)100;
      floatArray0[2] = (float) (byte)100;
      floatArray0[3] = (float) (byte)100;
      floatArray0[4] = (float) (byte)100;
      floatArray0[5] = (float) 815L;
      floatArray0[6] = (float) 815L;
      floatArray0[7] = (float) (byte)100;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(100.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-705.0F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-705.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 102.0;
      doubleArray0[1] = (double) (byte)116;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(102.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) (-2656.1F);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-2656.10009765625), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)69, byte0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = NumberUtils.min((long) (byte)124, (long) (byte)0, (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = NumberUtils.min(1911L, 1911L, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = NumberUtils.min(5, 70, (int) (short)102);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float float0 = NumberUtils.min(1.0F, (float) 0, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float float0 = NumberUtils.min((float) (-1L), (-3419.4275F), (float) (-1L));
      assertEquals((-3419.4275F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = NumberUtils.min(0.0, 0.0, (double) (byte)97);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = NumberUtils.min(48.0, 857.82, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)115, (byte)2);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)5, (byte)16, (byte)16);
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2559);
      shortArray0[1] = (short) (-4585);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-2559), short0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-4);
      longArray0[1] = (long) (byte) (-4);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-4L), long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 538;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(538, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-29);
      intArray0[1] = (-29);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-29);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-602L);
      floatArray0[1] = (float) (-602L);
      floatArray0[2] = (float) (-602L);
      floatArray0[3] = (float) (-602L);
      floatArray0[4] = (float) (-602L);
      floatArray0[5] = (float) (-602L);
      floatArray0[6] = (float) (-602L);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-602.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)2;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-602L);
      doubleArray0[1] = (double) (-602L);
      doubleArray0[2] = (double) (-602L);
      doubleArray0[3] = (double) (-602.0F);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-602.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)25, byte0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-81), byte0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      short short0 = NumberUtils.max((short) (byte)0, (short) (byte)0, (short) (-370));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = NumberUtils.max((-766L), (long) 0, (-766L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = NumberUtils.max((-602L), (-602L), (-602L));
      assertEquals((-602L), long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = NumberUtils.max((-95862877), (-2176), 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float float0 = NumberUtils.max((float) 0, (float) 0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float float0 = NumberUtils.max((-1.0F), (float) (-109), (float) (-766L));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = NumberUtils.max(0.0, 0.0, (double) 2468L);
      assertEquals(2468.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = NumberUtils.max((double) (-592L), (-349.0), (double) (-475L));
      assertEquals((-349.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-14), (byte) (-1), (byte) (-27));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Long long0 = NumberUtils.createLong("+6");
      assertEquals(6L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0x3e5");
      assertEquals(997, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0x013e5");
      assertEquals((-5093), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("5 ");
      assertEquals(5.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-3");
      assertEquals((-3.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("3");
      assertEquals(3.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-1");
      assertEquals((-1.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("+6");
      assertEquals((byte)6, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("4");
      assertEquals((short)4, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-3");
      assertEquals((short) (-3), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("0X is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" is not a valid number.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal(" ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0X0(_$r1X3Cl1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0x3e5");
      assertEquals((-997L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      short short0 = NumberUtils.toShort("6=PcX~F3", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("", (byte)4);
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = NumberUtils.toDouble("^x-F5H*3'uWs,", 1521.54971898305);
      assertEquals(1521.54971898305, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (-2656.1F));
      assertEquals((-2656.1F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float float0 = NumberUtils.toFloat("H5)BXcLNwKSO", (float) 2096);
      assertEquals(2096.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = NumberUtils.toLong("", (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = NumberUtils.toInt("ertg:^fKq|[yk", 69);
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("7L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3eD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0e-#kBPsT:o32~7e,c;v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+R5?u8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("EU*PC6KWbU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3eE5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("6E.>Y}mJ(W+JxP2dGp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3e5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xa,CY(%;D.'OW ,LA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x3e5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xAborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)48, (byte)4, (byte)118);
      assertEquals((byte)118, byte0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short short0 = NumberUtils.max((short)65, (short)65, (short)3215);
      assertEquals((short)3215, short0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-4585), (short)724, (short)724);
      assertEquals((short)724, short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1056), (short) (-1056), (short) (-1056));
      assertEquals((short) (-1056), short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = NumberUtils.max((-3101), (-132379129), (-2743));
      assertEquals((-2743), int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = NumberUtils.max((-1153L), (-1153L), 1454L);
      assertEquals(1454L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long long0 = NumberUtils.max((long) (short)76, (long) (short)2, (long) (short)76);
      assertEquals(76L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)25, (byte)0, (byte) (-62));
      assertEquals((byte) (-62), byte0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-64), (byte) (-64), (byte) (-64));
      assertEquals((byte) (-64), byte0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short short0 = NumberUtils.min((short) (byte)0, (short)2041, (short) (-125));
      assertEquals((short) (-125), short0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      short short0 = NumberUtils.min((short)13, (short)7, (short)13);
      assertEquals((short)7, short0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      short short0 = NumberUtils.min((short) (byte)0, (short) (byte)0, (short) (byte)113);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = NumberUtils.min((-262), 2611, (-4547));
      assertEquals((-4547), int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = NumberUtils.min(0, (int) (byte) (-108), (int) (byte) (-108));
      assertEquals((-108), int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((long) (byte) (-27), (-1088L), (long) numberUtils0.SHORT_ONE);
      assertEquals((-1088L), long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = NumberUtils.min((-43L), 0L, (-862L));
      assertEquals((-862L), long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[4] = 57.02715F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(57.02715F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-296);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-4);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2559);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-29);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long[] longArray0 = new long[15];
      longArray0[1] = 1959L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1959L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[15];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 815L;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[6] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2218.2245162;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-125);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-125), byte0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)13;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)118;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--...");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --... is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-7");
      assertEquals((short) (-7), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0+6");
      assertEquals((short)6, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0.");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3e5");
      assertEquals(300000.0F, number0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.ej.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("7F");
      assertEquals(7.0F, number0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0l");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e\"5]ERL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e\"5]ERL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-00l");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        NumberUtils.createNumber("f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("4d");
      assertEquals(4.0, number0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        NumberUtils.createNumber("7-5:H7.U58#/W'A2L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 7-5:H7.U58#/W'A2L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0dD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0dD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0..X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0..X is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0EI>50V<~#$6\"6{gQ(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0EI>50V<~#$6\"6{gQ( is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      try { 
        NumberUtils.createNumber("gsx7E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // gsx7E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber("\"Z\"ggeE[9,\u0000");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"Z\"ggeE[9,\u0000 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("&h.PBGde}e!_>HNEd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // &h.PBGde}e!_>HNEd is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber("...");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0XcOw->|<Tq9H2Y=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-cOw->|<Tq9H2Y=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-#kBPsTzIo32~7e,c;v");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"kBP\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0x3e5");
      assertEquals((-997), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short) (-296));
      assertEquals((short) (-296), short0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)116);
      assertEquals((byte)116, byte0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (-5091L));
      assertEquals((-5091L), long0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      short short0 = NumberUtils.toShort("eUx%");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = NumberUtils.toInt("-1");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      long long0 = NumberUtils.toLong("-1");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double double0 = NumberUtils.max((double) (short) (-184), 0.0, (-466.5081));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-4");
      assertEquals((byte) (-4), byte0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      double double0 = NumberUtils.min((double) (byte)116, (double) (byte)116, (-3984.181172596));
      assertEquals((-3984.181172596), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-8");
      assertEquals((-8.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float float0 = NumberUtils.min((float) 3054L, (float) 3054L, (float) 179L);
      assertEquals(179.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      float float0 = NumberUtils.max((float) 281L, (float) 281L, (-5256.1F));
      assertEquals(281.0F, float0, 0.01F);
  }
}
