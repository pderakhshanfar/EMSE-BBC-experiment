/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 01:50:57 GMT 2021
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0yD0!@u=EE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = NumberUtils.max(6L, 6L, 0L);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-86), (byte) (-10), (byte)63);
      assertEquals((byte) (-86), byte0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-422), (short)100, (short)0);
      assertEquals((short) (-422), short0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-174), (short)102, (short) (-803));
      assertEquals((short) (-803), short0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = NumberUtils.min(0L, 0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = 1.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 352.8682683335392;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(352.8682683335392, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)100, byte0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-2555.11F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-2555.11F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)2074;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short short0 = NumberUtils.toShort("Y", (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short short0 = NumberUtils.toShort("0x0", (short) (-1790));
      assertEquals((short) (-1790), short0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short short0 = NumberUtils.toShort("5");
      assertEquals((short)5, short0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short short0 = NumberUtils.toShort("-4");
      assertEquals((short) (-4), short0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = NumberUtils.toLong(".ey1lzld!|", (long) (byte)0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = NumberUtils.toLong("&I");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = NumberUtils.toLong("4");
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = NumberUtils.toInt("&I", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = NumberUtils.toInt("", (-829));
      assertEquals((-829), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = NumberUtils.toInt("4");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = NumberUtils.toInt("-6");
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-0X-#", 810.9994F);
      assertEquals(810.9994F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = NumberUtils.toFloat("");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float float0 = NumberUtils.toFloat("1");
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = NumberUtils.toDouble("0!AmgDR4\">v.)E@N", (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = NumberUtils.toDouble("^9yBdB\u0005N", (-1873.0));
      assertEquals((-1873.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = NumberUtils.toDouble("01");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = NumberUtils.toDouble("-4");
      assertEquals((-4.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("w)[3", (byte)108);
      assertEquals((byte)108, byte0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("4");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("-4");
      assertEquals((byte) (-4), byte0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)118;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)118, short0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2977);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-2977), short0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2702L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(2702L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)6;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-3257);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-3257), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)100;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(100.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2864.3;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(2864.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1325);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1325.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)102;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-74);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-74), byte0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short short0 = NumberUtils.min((short)2, (short)1, (short)1);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = NumberUtils.min(1789L, (long) (byte)74, 119L);
      assertEquals(74L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = NumberUtils.min(76, 76, 76);
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float float0 = NumberUtils.min(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = NumberUtils.min(1.0F, 6.0F, 1671.3085F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = NumberUtils.min((double) (byte)0, 0.0, 509.2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = NumberUtils.min((double) (short)0, (-1274.5907947708329), (double) (short)0);
      assertEquals((-1274.5907947708329), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)54);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)6;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2268);
      shortArray0[1] = (short) (-1727);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1727), short0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-804L);
      longArray0[1] = (long) (byte) (-128);
      longArray0[2] = (long) (byte) (-128);
      longArray0[3] = (long) (byte) (-128);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-128L), long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-79);
      intArray0[1] = (int) (byte) (-79);
      intArray0[2] = (int) (byte) (-79);
      intArray0[3] = (int) (byte) (-79);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-79), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-105);
      floatArray0[1] = (float) (byte) (-4);
      floatArray0[2] = (float) (byte) (-4);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-4.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2992L);
      doubleArray0[1] = (-1274.5907947708329);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1274.5907947708329), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1), (short) (-1), (short) (-21843));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = NumberUtils.max((-450L), (-825L), (-1078L));
      assertEquals((-450L), long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = NumberUtils.max((int) (short) (-9920), (-175039403), (-175039403));
      assertEquals((-9920), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float float0 = NumberUtils.max(1134.3883F, 1134.3883F, 1134.3883F);
      assertEquals(1134.3883F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = NumberUtils.max((double) 0.0F, (-1.0), (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = NumberUtils.max((-4129.0), (-4129.0), (-4129.0));
      assertEquals((-4129.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte) (-118), (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-86), (byte) (-64), (byte) (-10));
      assertEquals((byte) (-10), byte0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0-5");
      assertEquals((short) (-5), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Long long0 = NumberUtils.createLong("7");
      assertEquals(7L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Long long0 = NumberUtils.createLong("-0xb");
      assertEquals((-11L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("0");
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("3");
      assertEquals(3, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger("-0xb");
      assertEquals((-11), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("0");
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("2");
      assertEquals(2.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float float0 = NumberUtils.createFloat("-4");
      assertEquals((-4.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("7");
      assertEquals(7.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("6.");
      assertEquals((short)6, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("-4");
      assertEquals((byte) (-4), bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("0yD0!@u=EE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yD0!@u=EE\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0xf");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--/9nqlW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --/9nqlW is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("w6E2}@7K{HGCh5xJ*eL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"w\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0X--B/e5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("#F");
      assertEquals((byte)15, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Long long0 = NumberUtils.createLong("0");
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("-45");
      assertEquals((-45.0), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short short0 = NumberUtils.toShort("-#", (short)43);
      assertEquals((short)43, short0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("6\"_4u'", (byte) (-128));
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (double) (byte)43);
      assertEquals(43.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = NumberUtils.toFloat("0", (float) (byte)0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = NumberUtils.toLong("0X", (-2992L));
      assertEquals((-2992L), long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = NumberUtils.toInt("-#", 1798);
      assertEquals(1798, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4.L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8E%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("'3JIQ5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1E+L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".ey1lzld!|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1e.>E#xYbEbQ/6C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1EL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xEAjVgklrwsYOUMAm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xa6.jU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0eE(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9BK{=]i'Uh\"1SjV_z3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)101, (byte) (-67), (byte)40);
      assertEquals((byte)101, byte0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)74, (byte)74, (byte)103);
      assertEquals((byte)103, byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      short short0 = NumberUtils.max((short)6, (short)1, (short)3933);
      assertEquals((short)3933, short0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-8), (short)1609, (short)1569);
      assertEquals((short)1609, short0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = NumberUtils.max((-22), 73, 73);
      assertEquals(73, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = NumberUtils.max((-1247), (-1247), (int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = NumberUtils.max((long) (-2261), (-1L), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = NumberUtils.max((long) (short)0, 1170L, 1170L);
      assertEquals(1170L, long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-1), (byte) (-1), (byte) (-19));
      assertEquals((byte) (-19), byte0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)30, (byte)5, (byte)5);
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      short short0 = NumberUtils.min((short)0, (short) (byte)0, (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte)1, 1695, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = NumberUtils.min(1366, (-1002), (-459));
      assertEquals((-1002), int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = NumberUtils.min(0, (int) (byte)74, 46);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long long0 = NumberUtils.min(298L, 2899L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long long0 = NumberUtils.min((-1339L), (long) (short) (-1500), 1L);
      assertEquals((-1500L), long0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-4813.0F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[6] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[7] = (double) 108;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(108.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)3;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-1703);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 2146690926;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2146690926, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-804L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 6740.46F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[4] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1203.0054;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)610;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 73;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = (-3102L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-3102L), long0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--JB/-e5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --JB/-e5 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      try { 
        NumberUtils.createNumber("f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0xF");
      assertEquals((byte) (-15), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0e8");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        NumberUtils.createNumber("CEN,le0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"CEN,le0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("5d");
      assertEquals(5.0, number0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-41L");
      assertEquals((-41L), number0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-(L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -(L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        NumberUtils.createNumber("3gN(hf,hP8?. l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 3gN(hf,hP8?. l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3f");
      assertEquals(3.0F, number0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        NumberUtils.createNumber("08L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("/9nqlWD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // /9nqlWD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.0F");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber("EO,>Shgry~FvZ#e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // EO,>Shgry~FvZ#e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3.");
      assertEquals(3.0F, number0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber("__y~Yj+U>Z^EtHJne[9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // __y~Yj+U>Z^EtHJne[9 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.lMou?ucI4fP,esY1-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.lMou?ucI4fP,esY1- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".VeE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .VeE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".0F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      try { 
        NumberUtils.createNumber("#2]=i*U_e_*&>dkx\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      try { 
        NumberUtils.createNumber("#M#PdI$3$:o~7h^Pl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"M#PdI$3$:o~7h^Pl\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--8");
      assertNotNull(number0);
      assertEquals((byte)8, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)1179);
      assertEquals((short)1179, short0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (float) (short) (-5193));
      assertEquals((-5193.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, (long) (short)1196);
      assertEquals(1196L, long0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 1803);
      assertEquals(1803, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      short short0 = NumberUtils.toShort("Threshold must not be negative");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      float float0 = NumberUtils.toFloat("-4");
      assertEquals((-4.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = NumberUtils.toInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      long long0 = NumberUtils.toLong("-4");
      assertEquals((-4L), long0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      double double0 = NumberUtils.max((double) (short)6, 336.6214331659, 336.6214331659);
      assertEquals(336.6214331659, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      double double0 = NumberUtils.min(1480.3, 1064.9133029042214, 1064.9133029042214);
      assertEquals(1064.9133029042214, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      float float0 = NumberUtils.min((float) (short)0, (-82.372F), 0.0F);
      assertEquals((-82.372F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      float float0 = NumberUtils.max((float) (byte) (-26), (float) (byte) (-26), (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }
}
