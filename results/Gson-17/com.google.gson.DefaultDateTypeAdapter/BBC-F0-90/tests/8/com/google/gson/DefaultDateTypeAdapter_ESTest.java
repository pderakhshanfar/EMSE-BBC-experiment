/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 07:08:04 GMT 2021
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.JsonPrimitive;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.CharArrayWriter;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.DateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultDateTypeAdapter_ESTest extends DefaultDateTypeAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDateFormat.getInstance();
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      defaultDateTypeAdapter0.nullSafe();
      Timestamp timestamp0 = new Timestamp((-1L));
      Timestamp timestamp1 = new Timestamp(0L);
      Date date0 = new Date((-1L));
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(date0);
      defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      Character character0 = Character.valueOf('!');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      jsonPrimitive0.deepCopy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Date> class1 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "");
      StringReader stringReader0 = new StringReader("{j|+");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter1.read(jsonReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null, dateFormat0, dateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      defaultDateTypeAdapter0.nullSafe();
      Timestamp timestamp0 = new Timestamp(146L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "");
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      try { 
        defaultDateTypeAdapter0.write(jsonWriter0, (java.util.Date) timestamp0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(0, 0);
      StringReader stringReader0 = new StringReader("JsonReader is closed");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      defaultDateTypeAdapter0.nullSafe();
      Timestamp timestamp0 = new Timestamp(146L);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(timestamp0);
      defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "");
      System.setCurrentTimeMillis(146L);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = new PipedWriter();
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      jsonWriter0.value("");
      Class<Timestamp> class2 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class2, "");
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter2.read(jsonReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      System.setCurrentTimeMillis((-232L));
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
      defaultDateTypeAdapter0.toString();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (java.util.Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Class<java.util.Date> class0 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      defaultDateTypeAdapter0.nullSafe();
      Timestamp timestamp0 = new Timestamp((-430L));
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(timestamp0);
      java.util.Date date0 = defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      defaultDateTypeAdapter0.toJsonTree(date0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 2);
      defaultDateTypeAdapter0.nullSafe();
      Timestamp timestamp0 = new Timestamp(0L);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(timestamp0);
      java.util.Date date0 = defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      timestamp0.setNanos(2158);
      defaultDateTypeAdapter0.toJsonTree(date0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4SF r(NQGT^PF");
      JsonReader jsonReader0 = null;
      System.setCurrentTimeMillis((-1L));
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, 1856);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1856
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      Class<java.util.Date> class0 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      defaultDateTypeAdapter0.nullSafe();
      Timestamp timestamp0 = new Timestamp((-3020L));
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(timestamp0);
      defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      defaultDateTypeAdapter0.toJsonTree(timestamp0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4SF r(NQGT^PF");
      System.setCurrentTimeMillis((-1477L));
      defaultDateTypeAdapter0.toString();
      JsonReader jsonReader0 = null;
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 2);
      defaultDateTypeAdapter0.nullSafe();
      Timestamp timestamp0 = new Timestamp(0L);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(timestamp0);
      java.util.Date date0 = defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      timestamp0.setNanos(2158);
      defaultDateTypeAdapter0.toJsonTree(date0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4SF r(NQGT^PF");
      System.setCurrentTimeMillis(2158);
      defaultDateTypeAdapter0.toString();
      JsonReader jsonReader0 = null;
      java.util.Date date1 = null;
      try {
        date1 = new MockDate("DefaultDateTypeAdapter(SimpleDateFormat)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      defaultDateTypeAdapter0.nullSafe();
      long long0 = 146L;
      Timestamp timestamp0 = new Timestamp(146L);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(timestamp0);
      defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      // Undeclared exception!
      try { 
        timestamp0.setNanos((-1470));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nanos > 999999999 or < 0
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Date> class0 = Date.class;
      String string0 = "";
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      Class<Timestamp> class1 = Timestamp.class;
      String string0 = "C[?5";
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "C[?5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'C'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Date date0 = new Date((-320L));
      defaultDateTypeAdapter0.toJson((java.util.Date) date0);
      defaultDateTypeAdapter0.toString();
      Long long0 = new Long(1670L);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("\"Dec 31, 1969 11:59:59 PM\"");
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.fromJsonTree(jsonPrimitive1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // \"Dec 31, 1969 11:59:59 PM\"
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 1, 1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockFile mockFile0 = new MockFile(" but was ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(39, 39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 39
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Date date0 = new Date((-320L));
      defaultDateTypeAdapter0.toJson((java.util.Date) date0);
      defaultDateTypeAdapter0.toString();
      Long long0 = new Long(1670L);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(long0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      MockDate mockDate0 = new MockDate();
      defaultDateTypeAdapter0.write(jsonWriter0, (java.util.Date) date0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write(jsonWriter0, (java.util.Date) mockDate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 1, 1);
      defaultDateTypeAdapter0.toString();
      MockDate mockDate0 = new MockDate((-922337203685477580L));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Date date0 = new Date((-320L));
      defaultDateTypeAdapter0.toJson((java.util.Date) date0);
      defaultDateTypeAdapter0.toString();
      Long long0 = new Long(1670L);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(long0);
      jsonPrimitive0.deepCopy();
      JsonReader jsonReader0 = null;
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      Class<java.util.Date> class1 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, (-2328), (-2328));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2328
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Date> class0 = Date.class;
      int int0 = 0;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      defaultDateTypeAdapter0.toString();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.toString();
      jsonReader0.setLenient(false);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Date date0 = new Date((-320L));
      defaultDateTypeAdapter0.toJson((java.util.Date) date0);
      defaultDateTypeAdapter0.toString();
      Long long0 = new Long(1670L);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(long0);
      JsonPrimitive jsonPrimitive1 = jsonPrimitive0.deepCopy();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.fromJsonTree(jsonPrimitive1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Date date0 = new Date(1670L);
      defaultDateTypeAdapter0.toJson((java.util.Date) null);
      defaultDateTypeAdapter0.toString();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.fromJsonTree((JsonElement) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, (DateFormat) null, (DateFormat) null);
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Date> class0 = Date.class;
      String string0 = "";
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      defaultDateTypeAdapter0.toString();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.setLenient(false);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      Timestamp timestamp0 = new Timestamp(1L);
      defaultDateTypeAdapter0.toJsonTree(timestamp0);
      defaultDateTypeAdapter0.toString();
      JsonWriter jsonWriter0 = null;
      MockDate mockDate0 = new MockDate(1975L);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (java.util.Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile(", ", ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(0, 0);
      defaultDateTypeAdapter0.toString();
      StringReader stringReader0 = new StringReader("DefaultDateTypeAdapter(SimpleDateFormat)");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }
}
