/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 01:10:43 GMT 2021
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Period;
import java.time.chrono.IsoChronology;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultDateTypeAdapter_ESTest extends DefaultDateTypeAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, (DateFormat) null, (DateFormat) null);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 0;
      int int1 = 2;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(0, 2);
      StringReader stringReader0 = new StringReader("jnTl/^Dyym0Tk6qEN(");
      stringReader0.skip(0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W#?.__");
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(1, 1);
      StringReader stringReader0 = new StringReader("[");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      System.setCurrentTimeMillis(0L);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = '6';
      charArray0[2] = 'q';
      charArray0[3] = 'H';
      MockDate mockDate0 = new MockDate(0L);
      defaultDateTypeAdapter0.toJson((Writer) pipedWriter0, (java.util.Date) mockDate0);
      charArray0[4] = '%';
      charArray0[5] = '!';
      charArray0[6] = 'M';
      pipedReader0.read(charArray0, 0, 0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      defaultDateTypeAdapter0.read(jsonReader0);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Date type must be one of ");
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0);
      MockDate mockDate0 = new MockDate(0L);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(mockDate0);
      defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value((-136.112));
      jsonWriter2.beginObject();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter1.write(jsonWriter0, (java.util.Date) mockDate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0);
      MockDate mockDate0 = new MockDate(0L);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(mockDate0);
      defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      StringWriter stringWriter0 = new StringWriter(0);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      JsonWriter jsonWriter2 = jsonWriter1.value((-136.112));
      JsonWriter jsonWriter3 = jsonWriter2.beginObject();
      JsonWriter jsonWriter4 = jsonWriter3.name("Unterminated array");
      defaultDateTypeAdapter1.write(jsonWriter4, (java.util.Date) mockDate0);
      System.setCurrentTimeMillis((-2026L));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Class<java.util.Date> class0 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(mockDate0);
      java.util.Date date0 = defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      defaultDateTypeAdapter0.toString();
      StringReader stringReader0 = new StringReader("Adr");
      System.setCurrentTimeMillis(0L);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0);
      MockDate mockDate0 = new MockDate((-922337203685477580L));
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(mockDate0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockDate mockDate0 = new MockDate(0L);
      defaultDateTypeAdapter0.toJson((Writer) mockPrintWriter0, (java.util.Date) mockDate0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0);
      JsonElement jsonElement0 = defaultDateTypeAdapter1.toJsonTree(mockDate0);
      defaultDateTypeAdapter1.fromJsonTree(jsonElement0);
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class0);
      assertFalse(defaultDateTypeAdapter2.equals((Object)defaultDateTypeAdapter1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      defaultDateTypeAdapter0.toString();
      StringReader stringReader0 = new StringReader("DefaultDateTypeAdapter(MockSimpleDateFormat)");
      System.setCurrentTimeMillis(0L);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0);
      MockDate mockDate0 = new MockDate((-1690L));
      JsonElement jsonElement0 = defaultDateTypeAdapter1.toJsonTree(mockDate0);
      defaultDateTypeAdapter1.fromJsonTree(jsonElement0);
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class1);
      assertFalse(defaultDateTypeAdapter2.equals((Object)defaultDateTypeAdapter1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      defaultDateTypeAdapter0.toString();
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0);
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        defaultDateTypeAdapter1.read(jsonReader0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0);
      MockDate mockDate0 = new MockDate(0L);
      defaultDateTypeAdapter0.toJson((Writer) mockPrintWriter0, (java.util.Date) mockDate0);
      Class<java.util.Date> class1 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1);
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree((java.util.Date) null);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter1.fromJsonTree(jsonElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Class<Date> class1 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      System.setCurrentTimeMillis((-1L));
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      defaultDateTypeAdapter0.toString();
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 32);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      JsonObject jsonObject0 = new JsonObject();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter1.fromJsonTree(jsonObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      System.setCurrentTimeMillis((-922337203685477580L));
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "JsonReader is closed");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'J'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Class<Date> class1 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, 1449);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 1449
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
      defaultDateTypeAdapter0.toString();
      Period period0 = Period.ZERO;
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Date date0 = Date.valueOf(localDate0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (java.util.Date) date0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, "");
      Date date0 = new Date(611L);
      defaultDateTypeAdapter1.toJsonTree(date0);
      defaultDateTypeAdapter0.toString();
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class1);
      System.setCurrentTimeMillis((-1781L));
      String string0 = defaultDateTypeAdapter2.toString();
      assertEquals("DefaultDateTypeAdapter(SimpleDateFormat)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      System.setCurrentTimeMillis(0L);
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("DefaultDateTypeAdapter");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      System.setCurrentTimeMillis(0L);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(2921, 2921);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2921
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (java.util.Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "7");
      defaultDateTypeAdapter0.toString();
      int int0 = 1;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, (-1777), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -1777
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.toString();
      int int0 = 192;
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      JsonReader jsonReader0 = null;
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      int int0 = 0;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(32);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      try { 
        pipedWriter0.append((CharSequence) charBuffer0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      defaultDateTypeAdapter0.toString();
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.flush();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      int int0 = 12;
      // Undeclared exception!
      try { 
        pipedReader0.skip((-1806L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip value is negative
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(0, 0);
      defaultDateTypeAdapter0.toString();
      Writer writer0 = null;
      Instant instant0 = MockInstant.ofEpochSecond((-215L), (-215L));
      java.util.Date date0 = java.util.Date.from(instant0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.toJson((Writer) null, date0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // out == null
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }
}
