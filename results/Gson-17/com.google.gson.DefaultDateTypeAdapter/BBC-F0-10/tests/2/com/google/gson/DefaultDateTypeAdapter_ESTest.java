/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 08:04:39 GMT 2021
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.JsonPrimitive;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.time.Instant;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultDateTypeAdapter_ESTest extends DefaultDateTypeAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "??";
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends Date>) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      StringReader stringReader0 = new StringReader("6.0c-I!=k9?:OVtSz");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 6.0c-I!
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "|?");
      defaultDateTypeAdapter0.nullSafe();
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, "|?");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("|?");
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter1.toString();
      defaultDateTypeAdapter1.fromJsonTree(jsonPrimitive0);
      defaultDateTypeAdapter1.toString();
      defaultDateTypeAdapter0.toString();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.beginArray();
      jsonWriter1.beginArray();
      Long long0 = new Long(1759L);
      JsonWriter jsonWriter2 = jsonWriter1.value((Number) long0);
      JsonWriter jsonWriter3 = jsonWriter2.nullValue();
      JsonWriter jsonWriter4 = jsonWriter3.jsonValue("12G:&xgw");
      jsonWriter1.value(1277L);
      MockDate mockDate0 = new MockDate(2111, 2111, 47, 16, 6, 0);
      defaultDateTypeAdapter0.write(jsonWriter4, (Date) mockDate0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "??");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("??");
      defaultDateTypeAdapter0.fromJsonTree(jsonPrimitive0);
      // Undeclared exception!
      try { 
        MockInstant.parse("??");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text '??' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "??");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("??");
      Class<java.sql.Date> class1 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "??");
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "|?");
      Class<java.sql.Date> class1 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "|?");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("|?");
      Character character0 = new Character('x');
      Class<Date> class2 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class2);
      defaultDateTypeAdapter2.toString();
      Date date0 = defaultDateTypeAdapter1.fromJsonTree(jsonPrimitive0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "|?");
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, "|?");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("|?");
      Character character0 = new Character('x');
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter2.toString();
      Timestamp timestamp0 = (Timestamp)defaultDateTypeAdapter0.fromJsonTree(jsonPrimitive0);
      assertEquals(320000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)92;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      Double double0 = new Double(0.0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("VYYTeAO$g:*3BL(cpf");
      Class<java.sql.Date> class1 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1);
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = null;
      try {
        defaultDateTypeAdapter2 = new DefaultDateTypeAdapter((Class<? extends Date>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, ".sss");
      defaultDateTypeAdapter0.toJson((Date) null);
      MockDate mockDate0 = new MockDate(0, (-1), 0);
      mockDate0.toInstant();
      MockFileWriter mockFileWriter0 = new MockFileWriter(".sss", true);
      JsonWriter jsonWriter0 = new JsonWriter(mockFileWriter0);
      defaultDateTypeAdapter0.write(jsonWriter0, (Date) null);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-18), (-18), (-18));
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      defaultDateTypeAdapter0.toJson((Date) mockDate0);
      defaultDateTypeAdapter0.toJson((Date) mockDate0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, ".sss");
      defaultDateTypeAdapter0.toJson((Date) null);
      MockDate mockDate0 = new MockDate(0, (-1), 0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-18), (-18), (-18));
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      Locale locale0 = Locale.TAIWAN;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kh%5mV4+");
      Locale locale1 = Locale.FRENCH;
      locale0.getDisplayCountry(locale1);
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>(40);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      int int1 = 0;
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer1);
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.value(2548L);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write(jsonWriter1, (Date) mockDate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-28);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)83;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Timestamp> class0 = Timestamp.class;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      StringReader stringReader0 = new StringReader("ErCp9I@W/v>IG/(IPvs");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.toString();
      Double double0 = new Double((-5459.03827216));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
      Class<Date> class1 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, (-784));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -784
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      Double double0 = new Double((-5459.03827216));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("DefaultDateTypeAdapter(SimpleDateFormat)");
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.fromJsonTree(jsonPrimitive0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DefaultDateTypeAdapter(SimpleDateFormat)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      MockDate mockDate0 = new MockDate(0, 2, 0);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "com.google.gson.DefaultDateTypeAdapter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'c'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      Double double0 = new Double((-5459.03827216));
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(double0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.fromJsonTree(jsonPrimitive0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.toString();
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, 5555, (-2010));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2010
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      PipedReader pipedReader0 = new PipedReader(110);
      pipedReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(110, 110);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 110
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, (DateFormat) null, (DateFormat) null);
      int int0 = 1;
      PipedReader pipedReader0 = new PipedReader(1);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      MockDate mockDate0 = new MockDate(1, 1, 1);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, ".eG5k%");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // .eG5k%
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
      JsonWriter jsonWriter0 = null;
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      // Undeclared exception!
      try { 
        MockInstant.minus(instant0, 0L, (TemporalUnit) chronoUnit0);
        fail("Expecting exception: UnsupportedTemporalTypeException");
      
      } catch(UnsupportedTemporalTypeException e) {
         //
         // Unsupported unit: Millennia
         //
         verifyException("java.time.Instant", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, (DateFormat) null, (DateFormat) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(0, 0);
      String string0 = "kW";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("LDp#mOY", "kW");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // kW
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.toString();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
}
