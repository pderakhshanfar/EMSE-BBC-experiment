/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 16:34:28 GMT 2021
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonPrimitive;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.CharArrayWriter;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.DateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultDateTypeAdapter_ESTest extends DefaultDateTypeAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, ", ");
      int int0 = 60;
      MockDate mockDate0 = new MockDate(60, 60, 60);
      defaultDateTypeAdapter0.toJson((java.util.Date) mockDate0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(", ");
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, ", ");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      jsonWriter0.setHtmlSafe(true);
      try { 
        defaultDateTypeAdapter1.write(jsonWriter0, (java.util.Date) mockDate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("");
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      jsonWriter0.setHtmlSafe(false);
      Timestamp timestamp0 = new Timestamp(0L);
      defaultDateTypeAdapter0.write(jsonWriter0, (java.util.Date) timestamp0);
      System.setCurrentTimeMillis(0L);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "[K|");
      StringReader stringReader0 = new StringReader("[K|");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      String string0 = ", ";
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null, ", ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, ", ");
      MockDate mockDate0 = new MockDate(60, 60, 60);
      defaultDateTypeAdapter0.toJson((java.util.Date) mockDate0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(", ");
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, ", ");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      jsonWriter0.setHtmlSafe(true);
      defaultDateTypeAdapter1.write(jsonWriter0, (java.util.Date) mockDate0);
      System.setCurrentTimeMillis(60);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      java.util.Date date0 = defaultDateTypeAdapter0.read(jsonReader0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (java.util.Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", ");
      Boolean boolean0 = new Boolean("\n");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", ");
      JsonWriter jsonWriter0 = new JsonWriter(mockPrintWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      MockDate mockDate0 = new MockDate((-1059L));
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write(jsonWriter1, (java.util.Date) mockDate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, ", ");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(", ");
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, ", ");
      java.util.Date date0 = defaultDateTypeAdapter1.fromJsonTree(jsonPrimitive0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      PipedReader pipedReader0 = new PipedReader(84);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      MockDate mockDate0 = new MockDate();
      defaultDateTypeAdapter0.write(jsonWriter0, (java.util.Date) mockDate0);
      assertFalse(jsonWriter0.isHtmlSafe());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XATuv56$%q[L?a:YP");
      System.setCurrentTimeMillis(0L);
      Class<java.util.Date> class0 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, (DateFormat) null, (DateFormat) null);
      JsonElement jsonElement0 = null;
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, ", ");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) ", ");
      defaultDateTypeAdapter1.fromJsonTree(jsonPrimitive0);
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class1);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      Class<java.util.Date> class1 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class1, ", ");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) ", ");
      defaultDateTypeAdapter0.fromJsonTree(jsonPrimitive0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0);
      assertFalse(defaultDateTypeAdapter1.equals((Object)defaultDateTypeAdapter0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Class<Date> class1 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("La_]");
      int int0 = 97;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, 97);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 97
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      JsonArray jsonArray0 = new JsonArray(782);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.fromJsonTree(jsonArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "9)Y");
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter((-1411), (-2763));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2763
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.nullSafe();
      defaultDateTypeAdapter0.toString();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("NULL");
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.fromJsonTree(jsonPrimitive0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NULL
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Date> class0 = Date.class;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
      String string0 = defaultDateTypeAdapter0.toString();
      assertEquals("DefaultDateTypeAdapter(SimpleDateFormat)", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      StringReader stringReader0 = new StringReader("DefaultDateTypeAdapter(SimpleDateFormat)");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(0, 0);
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      String string0 = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "9|5");
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Boolean boolean0 = Boolean.TRUE;
      Class<Date> class1 = Date.class;
      int int0 = 62;
      int int1 = 117;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, 62, 117);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 117
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Class<java.util.Date> class1 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "^m|D[ O4J]ZZX{z8b,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'O'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      Class<java.util.Date> class1 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "");
      String string0 = "mE\\=2qw";
      StringReader stringReader0 = new StringReader("mE=2qw");
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      int int0 = 183;
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 183, 183);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      MockDate mockDate0 = new MockDate(1, 1192, (-37), 2257, (-98));
      defaultDateTypeAdapter0.toJson((java.util.Date) mockDate0);
      MockDate mockDate1 = new MockDate(15, 0, 0, (-1040), (-119));
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (java.util.Date) mockDate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      JsonReader jsonReader0 = null;
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Date> class0 = Date.class;
      int int0 = 0;
      int int1 = 1;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 1);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, dateFormat0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter0);
      // Undeclared exception!
      try { 
        jsonWriter0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Nesting problem.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      java.util.Date date0 = null;
      defaultDateTypeAdapter0.toJsonTree((java.util.Date) null);
      defaultDateTypeAdapter0.toString();
      String string0 = "f|x\\y=";
      MockFileWriter mockFileWriter0 = new MockFileWriter("f|xy=");
      JsonWriter jsonWriter0 = new JsonWriter(mockFileWriter0);
      boolean boolean0 = false;
      JsonWriter jsonWriter1 = jsonWriter0.value(false);
      // Undeclared exception!
      try { 
        jsonWriter1.nullValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.nullSafe();
      defaultDateTypeAdapter0.toString();
      PipedReader pipedReader0 = new PipedReader();
      Date date0 = new Date(264L);
      defaultDateTypeAdapter0.toJsonTree(date0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      try { 
        defaultDateTypeAdapter0.fromJson("Expected a boolean but was ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      String string0 = "";
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
}
