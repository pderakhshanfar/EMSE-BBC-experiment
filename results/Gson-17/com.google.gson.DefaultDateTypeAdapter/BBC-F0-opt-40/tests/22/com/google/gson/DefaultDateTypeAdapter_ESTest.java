/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 04:20:35 GMT 2021
 */

package com.google.gson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.DefaultDateTypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.CharArrayWriter;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.time.Instant;
import java.time.LocalDate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultDateTypeAdapter_ESTest extends DefaultDateTypeAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "+0000");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 172);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$@/Y`pQTNPvCd*?");
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(0, 0);
      PipedReader pipedReader0 = new PipedReader();
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Date date0 = Date.valueOf(localDate0);
      defaultDateTypeAdapter1.write(jsonWriter0, (java.util.Date) date0);
      System.setCurrentTimeMillis(0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      Timestamp timestamp0 = (Timestamp)defaultDateTypeAdapter1.read(jsonReader0);
      assertEquals(320000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "0 1");
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("0 1");
      Class<Date> class1 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "0 1");
      Date date0 = (Date)defaultDateTypeAdapter1.fromJsonTree(jsonPrimitive0);
      DefaultDateTypeAdapter defaultDateTypeAdapter2 = new DefaultDateTypeAdapter(class1);
      PipedWriter pipedWriter0 = new PipedWriter();
      Class<Date> class2 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter3 = new DefaultDateTypeAdapter(class2);
      System.setCurrentTimeMillis(0L);
      JsonWriter jsonWriter0 = new JsonWriter(pipedWriter0);
      try { 
        defaultDateTypeAdapter2.write(jsonWriter0, (java.util.Date) date0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "0 1");
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive("0 1");
      Class<Date> class1 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1, "0 1");
      java.util.Date date0 = defaultDateTypeAdapter1.fromJsonTree(jsonPrimitive0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class1, "0 1");
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive((Object) "0 1");
      defaultDateTypeAdapter0.fromJsonTree(jsonPrimitive0);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      Timestamp timestamp0 = new Timestamp((-1241L));
      JsonElement jsonElement0 = defaultDateTypeAdapter0.toJsonTree(timestamp0);
      defaultDateTypeAdapter0.fromJsonTree(jsonElement0);
      try { 
        defaultDateTypeAdapter0.fromJson("X_amDcb>");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      jsonNull0.deepCopy();
      StringReader stringReader0 = new StringReader("0 1");
      stringReader0.markSupported();
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(0, 0);
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      StringReader stringReader0 = new StringReader("\"K[j(AmEoW");
      int int0 = 0;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(0, 0);
      Character character0 = Character.valueOf('2');
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(character0);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter1.fromJsonTree(jsonPrimitive0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 2
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "0 1");
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null, "0 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = null;
      try {
        defaultDateTypeAdapter0 = new DefaultDateTypeAdapter((Class<? extends java.util.Date>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Date type must be one of class java.util.Date, class java.sql.Timestamp, or class java.sql.Date but was null
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Date> class0 = Date.class;
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-52);
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-67);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, dateFormat0, (DateFormat) null);
      String string0 = "com.google.gson.internal.bind.TypeAdapters$8";
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<java.util.Date> class0 = java.util.Date.class;
      String string0 = "";
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      jsonNull0.deepCopy();
      int int0 = 608;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, 608);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 608
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      String string0 = "0 1";
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "0 1");
      defaultDateTypeAdapter0.toString();
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      jsonNull0.deepCopy();
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.toString();
      JsonObject jsonObject0 = new JsonObject();
      StringReader stringReader0 = new StringReader("\"K[j(AmEoW");
      stringReader0.markSupported();
      try { 
        defaultDateTypeAdapter0.fromJson((Reader) stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 11 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(65);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      JsonWriter jsonWriter0 = new JsonWriter(charArrayWriter1);
      JsonWriter jsonWriter1 = jsonWriter0.value("");
      MockDate mockDate0 = new MockDate((-150), 0, 0, (-150), 40);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write(jsonWriter1, (java.util.Date) mockDate0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JSON must have only one top-level value.
         //
         verifyException("com.google.gson.stream.JsonWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Date> class0 = Date.class;
      System.setCurrentTimeMillis((-45L));
      JsonWriter jsonWriter0 = null;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, (DateFormat) null, (DateFormat) null);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (java.util.Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      JsonObject jsonObject0 = new JsonObject();
      jsonObject0.deepCopy();
      int int0 = (-2379);
      defaultDateTypeAdapter0.nullSafe();
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(41, (-2379));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -2379
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      MockDate mockDate0 = new MockDate(4834, 0, 4834, (-492), (-3141));
      MockDate mockDate1 = new MockDate(1341, (-492), 1341, 0, 0);
      MockDate mockDate2 = new MockDate(2322L);
      mockDate0.before(mockDate2);
      defaultDateTypeAdapter0.toJsonTree((java.util.Date) null);
      String string0 = defaultDateTypeAdapter0.toString();
      assertEquals("DefaultDateTypeAdapter(MockSimpleDateFormat)", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      Class<Timestamp> class1 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Date date0 = new Date(0L);
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.write((JsonWriter) null, (java.util.Date) date0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      System.setCurrentTimeMillis(4051L);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      JsonObject jsonObject0 = new JsonObject();
      JsonObject jsonObject1 = jsonObject0.deepCopy();
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.fromJsonTree(jsonObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The date should be a string value
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(0, 0);
      Instant instant0 = MockInstant.ofEpochSecond((long) 0, (long) 0);
      java.util.Date date0 = java.util.Date.from(instant0);
      defaultDateTypeAdapter0.toJsonTree(date0);
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, (-147), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -147
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      DefaultDateTypeAdapter defaultDateTypeAdapter1 = null;
      try {
        defaultDateTypeAdapter1 = new DefaultDateTypeAdapter(class0, "YYQ$_sZ ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'Q'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      String string0 = ",MWmm";
      StringReader stringReader0 = new StringReader(",MWmm");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, "");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      char char0 = '\\';
      pipedWriter0.append('\\');
      try { 
        pipedReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reset() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(0, 0);
      Instant instant0 = MockInstant.ofEpochSecond((long) 0, (long) 0);
      java.util.Date date0 = java.util.Date.from(instant0);
      defaultDateTypeAdapter0.toJsonTree(date0);
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      int int0 = 0;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0);
      MockFile mockFile0 = new MockFile(")GT");
      String string0 = ", ";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, ", ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // , 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
      StringReader stringReader0 = new StringReader("");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        defaultDateTypeAdapter0.read(jsonReader0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, 0, 0);
      defaultDateTypeAdapter0.toString();
      defaultDateTypeAdapter0.toString();
      JsonReader jsonReader0 = null;
      // Undeclared exception!
      try { 
        defaultDateTypeAdapter0.read((JsonReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.DefaultDateTypeAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Date> class0 = Date.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0);
      defaultDateTypeAdapter0.toString();
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }
}
