* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 15887
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 2552954663
* Starting evolution
* Initial Number of Goals in DynaMOSA = 419 / 1539
* Search finished after 303s and 304 generations, 163118 statements, best individual has fitness: 74.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 216
* Number of covered goals: 215
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 193
* Number of covered goals: 185
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 20
* Number of covered goals: 20
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 787
* Number of covered goals: 760
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 91%
* Total number of goals: 80
* Number of covered goals: 73
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 94%
* Total number of goals: 193
* Number of covered goals: 182
* Generated 105 tests with total length 292
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:42:47.602 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6719333333333334% of time used, but only 24/105 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 24%
* Compiling and checking tests
[MASTER] 03:43:16.375 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<13> but was:<12>
[MASTER] 03:43:16.376 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[7];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(7, byteArray0.length);
assertEquals(14, byteArray1.length);
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);

byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertEquals(7, byteArray0.length);
assertEquals(14, byteArray1.length);
assertEquals(13, byteArray2.length);
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);


[MASTER] 03:43:16.850 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:43:16.851 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[7];
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(7, byteArray0.length);
assertEquals(14, byteArray1.length);
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);

boolean boolean0 = Base64.isBase64(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(7, byteArray0.length);
assertEquals(14, byteArray1.length);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);


[MASTER] 03:43:23.021 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<34> but was:<13>
[MASTER] 03:43:23.021 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte)34, (byte)10}, byteArray0);

byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 6);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(2, byteArray0.length);
assertEquals(4, byteArray1.length);
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte)34, (byte)10}, byteArray0);
assertArrayEquals(new byte[] {(byte)73, (byte)103, (byte)111, (byte)61}, byteArray1);


[MASTER] 03:43:26.958 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<34> but was:<13>
[MASTER] 03:43:26.958 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[4];
byteArray0[3] = (byte)38;
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, (int) (byte)38);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(4, byteArray0.length);
assertEquals(10, byteArray1.length);
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)38}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)74, (byte)103, (byte)61, (byte)61, (byte)34, (byte)10}, byteArray1);

BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals((byte)38, bigInteger0.byteValue());
assertEquals((short)38, bigInteger0.shortValue());
assertEquals(4, byteArray0.length);
assertEquals(10, byteArray1.length);
assertNotNull(bigInteger0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)38}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)74, (byte)103, (byte)61, (byte)61, (byte)34, (byte)10}, byteArray1);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/BBC-F0/tests/14
* Done!

* Computation finished
