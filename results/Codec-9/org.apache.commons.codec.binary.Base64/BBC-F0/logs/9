* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 19767
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 2296816303
* Starting evolution
* Initial Number of Goals in DynaMOSA = 419 / 1539
* Search finished after 302s and 127 generations, 86787 statements, best individual has fitness: 85.0
* Minimizing test suite
[MASTER] 03:42:10.958 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 216
* Number of covered goals: 215
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 95%
* Total number of goals: 193
* Number of covered goals: 184
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 28
* Number of covered goals: 28
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 787
* Number of covered goals: 759
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 90%
* Total number of goals: 80
* Number of covered goals: 72
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 193
* Number of covered goals: 180
* Generated 109 tests with total length 1759
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:42:53.153 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.66935% of time used, but only 33/109 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 26%
* Compiling and checking tests
[MASTER] 03:43:17.994 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:17.994 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);

[MASTER] 03:43:18.687 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:18.687 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)1;
byteArray0[2] = (byte) (-1);
byteArray0[3] = (byte)1;
byteArray0[4] = (byte)0;
byteArray0[5] = (byte)0;
byteArray0[6] = (byte)0;
byteArray0[7] = (byte) (-39);
Base64.decodeInteger(byteArray0);

[MASTER] 03:43:18.978 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:18.978 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[9];
byteArray0[0] = (byte)65;
byteArray0[1] = (byte)118;
byteArray0[2] = (byte) (-117);
byteArray0[3] = (byte)49;
byteArray0[4] = (byte)45;
byteArray0[5] = (byte)0;
byteArray0[6] = (byte) (-1);
byteArray0[7] = (byte)92;
byteArray0[8] = (byte) (-46);
Base64.encodeBase64(byteArray0, true, true);

[MASTER] 03:43:19.303 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:19.305 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(false);

[MASTER] 03:43:19.783 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:19.783 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[0];
Base64.decodeBase64(byteArray0);

[MASTER] 03:43:20.044 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:20.045 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);

[MASTER] 03:43:20.781 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:20.781 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = (-4779);
Base64 base64_0 = new Base64((-4779));

[MASTER] 03:43:21.197 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:21.198 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte) (-29);
byteArray0[1] = (byte)0;
byteArray0[2] = (byte)1;
Base64.encodeBase64URLSafeString(byteArray0);

[MASTER] 03:43:21.988 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:21.988 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();

[MASTER] 03:43:22.278 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:22.278 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte)24;
byteArray0[1] = (byte) (-84);
byteArray0[2] = (byte)0;
Base64.decodeBase64(byteArray0);

[MASTER] 03:43:22.583 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:22.583 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();

[MASTER] 03:43:22.872 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:22.873 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte)1;
byteArray0[1] = (byte)6;
byteArray0[2] = (byte)0;
Base64 base64_0 = new Base64(4, byteArray0);
Base64.encodeBase64(byteArray0, false);

[MASTER] 03:43:23.208 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:23.208 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(false);

[MASTER] 03:43:23.521 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:23.522 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
byte byte0 = (byte)59;
byteArray0[0] = (byte)59;
byte byte1 = (byte) (-1);
byteArray0[1] = (byte) (-1);
Base64.encodeBase64(byteArray0, true, true, (int) (byte)59);

[MASTER] 03:43:23.787 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:23.788 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(false);

[MASTER] 03:43:24.016 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:24.016 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(false);

[MASTER] 03:43:24.459 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:24.459 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 0;
byte[] byteArray0 = new byte[0];
Base64 base64_0 = new Base64(0, byteArray0);
Base64.decodeInteger(byteArray0);

[MASTER] 03:43:24.656 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:24.657 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[7];
byteArray0[0] = (byte)75;
byteArray0[1] = (byte) (-60);
byteArray0[2] = (byte)0;
byteArray0[3] = (byte)0;
byteArray0[4] = (byte) (-12);
byteArray0[5] = (byte)72;
byteArray0[6] = (byte)0;
Base64.encodeBase64(byteArray0, true, false);

[MASTER] 03:43:24.880 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:24.880 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[1];
byte byte0 = (byte) (-1);
byteArray0[0] = (byte) (-1);
Base64.isBase64(byteArray0);
Base64.encodeBase64(byteArray0, false);

[MASTER] 03:43:25.157 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:25.157 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();

[MASTER] 03:43:25.361 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:25.362 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);

[MASTER] 03:43:25.812 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:25.812 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);

[MASTER] 03:43:26.208 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:26.208 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(false);

[MASTER] 03:43:26.304 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:26.304 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64.decodeBase64("org.apache.commons.codec.binary.Base64");

[MASTER] 03:43:26.465 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:26.465 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = null;
Base64.decodeBase64((byte[]) null);

[MASTER] 03:43:26.663 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:26.663 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();

[MASTER] 03:43:26.873 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:26.873 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte)24;
byteArray0[1] = (byte) (-84);
byteArray0[2] = (byte)0;
Base64.decodeBase64(byteArray0);

[MASTER] 03:43:27.018 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:27.019 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)1;
byteArray0[2] = (byte)94;
byteArray0[3] = (byte)31;
Base64.encodeBase64(byteArray0);

[MASTER] 03:43:27.344 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:27.344 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);

[MASTER] 03:43:27.563 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:27.564 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte)24;
byteArray0[1] = (byte) (-84);
byteArray0[2] = (byte)0;
Base64.decodeBase64(byteArray0);

[MASTER] 03:43:27.809 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:27.809 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(false);

[MASTER] 03:43:28.119 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:28.119 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);

[MASTER] 03:43:28.396 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:28.397 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(false);

[MASTER] 03:43:28.537 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:28.537 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
Base64 base64_0 = new Base64(true);

[MASTER] 03:43:28.698 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:28.698 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte)1;
byteArray0[1] = (byte)6;
byteArray0[2] = (byte) (-31);
Base64 base64_0 = new Base64(4, byteArray0);
assertArrayEquals(new byte[] {(byte)1, (byte)6, (byte) (-31)}, byteArray0);
assertEquals(3, byteArray0.length);
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());

Base64.encodeBase64(byteArray0, false);

[MASTER] 03:43:29.044 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:29.046 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.ONE;
assertNotNull(bigInteger0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());

BigInteger bigInteger1 = BigInteger.ONE;
assertSame(bigInteger1, bigInteger0);
assertNotNull(bigInteger1);
assertEquals((short)1, bigInteger1.shortValue());
assertEquals((byte)1, bigInteger1.byteValue());

boolean boolean0 = bigInteger1.equals(bigInteger0);
assertSame(bigInteger0, bigInteger1);
assertSame(bigInteger1, bigInteger0);
assertTrue(boolean0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger1.shortValue());
assertEquals((byte)1, bigInteger1.byteValue());

boolean boolean1 = bigInteger1.testBit(1387);
assertSame(bigInteger1, bigInteger0);
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);
assertEquals((short)1, bigInteger1.shortValue());
assertEquals((byte)1, bigInteger1.byteValue());

BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
assertSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger1, bigInteger2);
assertSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger1);
assertTrue(bigInteger2.equals((Object)bigInteger1));
assertTrue(bigInteger2.equals((Object)bigInteger0));
assertNotNull(bigInteger2);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger1.shortValue());
assertEquals((byte)1, bigInteger1.byteValue());
assertEquals((short)1, bigInteger2.shortValue());
assertEquals((byte)1, bigInteger2.byteValue());

byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
assertSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertArrayEquals(new byte[] {(byte)1}, byteArray0);
assertEquals(1, byteArray0.length);
assertTrue(bigInteger0.equals((Object)bigInteger2));
assertNotNull(byteArray0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());

Base64 base64_0 = new Base64(1, byteArray0, true);
assertArrayEquals(new byte[] {(byte)1}, byteArray0);
assertEquals(1, byteArray0.length);
assertTrue(bigInteger0.equals((Object)bigInteger2));
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertTrue(base64_0.isUrlSafe());

boolean boolean2 = base64_0.hasData();
assertSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertArrayEquals(new byte[] {(byte)1}, byteArray0);
assertFalse(boolean2);
assertEquals(1, byteArray0.length);
assertTrue(bigInteger0.equals((Object)bigInteger2));
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertTrue(base64_0.isUrlSafe());

int int0 = base64_0.avail();
assertSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertArrayEquals(new byte[] {(byte)1}, byteArray0);
assertEquals(0, int0);
assertEquals(1, byteArray0.length);
assertTrue(bigInteger0.equals((Object)bigInteger2));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertTrue(base64_0.isUrlSafe());

Base64.encodeInteger(bigInteger0);

[MASTER] 03:43:29.446 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:29.448 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
boolean boolean0 = true;
Base64 base64_0 = new Base64(true);

[MASTER] 03:43:29.630 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:29.631 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
BigInteger bigInteger0 = BigInteger.ZERO;
assertNotNull(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());

BigInteger bigInteger1 = new BigInteger(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertEquals(2, byteArray0.length);
assertTrue(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());

int int0 = bigInteger0.compareTo(bigInteger1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertEquals(0, int0);
assertEquals(2, byteArray0.length);
assertTrue(bigInteger0.equals((Object)bigInteger1));
assertTrue(bigInteger1.equals((Object)bigInteger0));
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());

BigInteger bigInteger2 = new BigInteger(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertEquals(2, byteArray0.length);
assertTrue(bigInteger2.equals((Object)bigInteger0));
assertTrue(bigInteger2.equals((Object)bigInteger1));
assertNotNull(bigInteger2);
assertEquals((short)0, bigInteger2.shortValue());
assertEquals((byte)0, bigInteger2.byteValue());

Base64.decodeInteger(byteArray0);

[MASTER] 03:43:30.017 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:30.017 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);

[MASTER] 03:43:30.315 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:30.315 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(false);

[MASTER] 03:43:30.500 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:30.500 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
Base64 base64_0 = new Base64(0);

[MASTER] 03:43:30.686 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:30.686 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte) (-1);
boolean boolean0 = Base64.isBase64(byteArray0);
assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
assertFalse(boolean0);
assertEquals(1, byteArray0.length);

Base64.encodeBase64(byteArray0, false);

[MASTER] 03:43:30.860 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:30.860 [logback-1] WARN  JUnitAnalyzer - Failing test:
 String string0 = "org.apache.commons.codec.binary.Base64";
Base64.decodeBase64("org.apache.commons.codec.binary.Base64");

[MASTER] 03:43:31.011 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:31.012 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
Base64 base64_0 = new Base64(true);

[MASTER] 03:43:31.136 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:31.137 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);

[MASTER] 03:43:31.343 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:31.344 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
Base64 base64_0 = new Base64(false);

[MASTER] 03:43:31.544 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:31.545 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(false);

[MASTER] 03:43:31.737 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:31.737 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);

[MASTER] 03:43:31.913 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:31.914 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64.decodeBase64("org.apache.commons.codec.binary.Base64");

[MASTER] 03:43:32.091 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:32.091 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64((-2712), (byte[]) null, true);

[MASTER] 03:43:32.304 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:32.304 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte) (-1);
boolean boolean0 = Base64.isBase64(byteArray0);
assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
assertFalse(boolean0);
assertEquals(1, byteArray0.length);

Base64.encodeBase64(byteArray0, false);

[MASTER] 03:43:32.488 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:32.488 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();

[MASTER] 03:43:32.644 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:32.644 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[1];
byte byte0 = (byte) (-1);
byteArray0[0] = (byte) (-1);
boolean boolean0 = Base64.isBase64(byteArray0);
assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
assertFalse(boolean0);
assertEquals(1, byteArray0.length);

Base64 base64_0 = new Base64(248);

[MASTER] 03:43:32.769 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:32.769 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[9];
byteArray0[0] = (byte) (-1);
byteArray0[1] = (byte)0;
byteArray0[2] = (byte) (-63);
byteArray0[3] = (byte) (-77);
byteArray0[4] = (byte)10;
byteArray0[5] = (byte)16;
byteArray0[6] = (byte) (-110);
byteArray0[7] = (byte)62;
byteArray0[8] = (byte) (-119);
Base64.encodeBase64(byteArray0, true, true, (int) (byte)16);

[MASTER] 03:43:32.969 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:32.969 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64.decodeBase64("org.apache.commons.codec.binary.Base64");

[MASTER] 03:43:33.139 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:33.140 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);

[MASTER] 03:43:33.255 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:33.256 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[9];
byteArray0[0] = (byte) (-1);
byteArray0[1] = (byte)0;
byteArray0[2] = (byte) (-63);
byteArray0[3] = (byte) (-77);
byteArray0[4] = (byte)10;
byteArray0[5] = (byte)16;
byteArray0[6] = (byte) (-110);
byteArray0[7] = (byte)62;
byteArray0[8] = (byte) (-119);
Base64.encodeBase64(byteArray0, true, true, (int) (byte)16);

[MASTER] 03:43:33.435 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:33.436 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64.decodeBase64("}rg.apache%commons.codec.binary.Base64");

[MASTER] 03:43:33.676 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:33.677 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.ONE;
assertNotNull(bigInteger0);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());

BigInteger bigInteger1 = BigInteger.ONE;
assertSame(bigInteger1, bigInteger0);
assertNotNull(bigInteger1);
assertEquals((short)1, bigInteger1.shortValue());
assertEquals((byte)1, bigInteger1.byteValue());

boolean boolean0 = bigInteger1.equals(bigInteger0);
assertSame(bigInteger0, bigInteger1);
assertSame(bigInteger1, bigInteger0);
assertTrue(boolean0);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((short)1, bigInteger1.shortValue());
assertEquals((byte)1, bigInteger1.byteValue());

Base64 base64_0 = new Base64(44);

[MASTER] 03:43:33.920 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:33.920 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = null;
BigInteger bigInteger0 = BigInteger.ONE;
assertNotNull(bigInteger0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());

Base64 base64_0 = new Base64(538, (byte[]) null, true);

[MASTER] 03:43:34.082 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:34.082 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
Base64 base64_0 = new Base64(false);

[MASTER] 03:43:34.425 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:34.425 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(false);

[MASTER] 03:43:34.568 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:34.568 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
Base64 base64_0 = new Base64(0);

[MASTER] 03:43:34.889 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:34.890 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
Base64 base64_0 = new Base64(0);

[MASTER] 03:43:35.114 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:35.114 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = null;
byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false);
assertNull(byteArray1);

Base64 base64_0 = new Base64(923);

[MASTER] 03:43:35.238 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:35.238 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertEquals(2, byteArray0.length);
assertNotNull(bigInteger0);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());

BigInteger bigInteger1 = BigInteger.ZERO;
assertNotSame(bigInteger1, bigInteger0);
assertTrue(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());

int int0 = bigInteger0.compareTo(bigInteger1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertEquals(0, int0);
assertEquals(2, byteArray0.length);
assertTrue(bigInteger0.equals((Object)bigInteger1));
assertTrue(bigInteger1.equals((Object)bigInteger0));
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());

byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray1);
assertEquals(2, byteArray0.length);
assertEquals(0, byteArray1.length);
assertTrue(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());

Base64 base64_0 = new Base64();

[MASTER] 03:43:35.437 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:35.438 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();

[MASTER] 03:43:35.636 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:35.636 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
Base64 base64_0 = new Base64(false);

[MASTER] 03:43:35.818 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:35.818 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
Base64.encodeBase64(byteArray0, true);

[MASTER] 03:43:36.011 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:36.011 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();

[MASTER] 03:43:36.288 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:36.289 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();

[MASTER] 03:43:36.426 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:36.426 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
Base64 base64_0 = new Base64(false);

[MASTER] 03:43:36.600 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:36.600 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64.decodeBase64("org.apache.commons.codec.binary.Base64");

[MASTER] 03:43:36.769 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:36.770 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
Base64.encodeBase64(byteArray0, true);

[MASTER] 03:43:36.924 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:36.924 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();

[MASTER] 03:43:37.053 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<52> but was:<13>
[MASTER] 03:43:37.054 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.TEN;
assertNotNull(bigInteger0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());

BigInteger bigInteger1 = bigInteger0.pow(123);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());

int int0 = bigInteger1.compareTo(bigInteger0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(1, int0);
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());

BigInteger bigInteger2 = bigInteger1.max(bigInteger0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertNotNull(bigInteger2);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((short)0, bigInteger2.shortValue());
assertEquals((byte)0, bigInteger2.byteValue());

byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertArrayEquals(new byte[] {(byte)52, (byte) (-11)}, byteArray0);
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);

Base64.encodeInteger(bigInteger1);

[MASTER] 03:43:37.250 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:37.250 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(0);

[MASTER] 03:43:37.426 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:37.426 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64.decodeBase64("org.apache.commons.codec.binary.Base64");

[MASTER] 03:43:37.661 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:37.661 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(928);

[MASTER] 03:43:37.775 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:37.775 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
boolean boolean0 = Base64.isBase64(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertFalse(boolean0);
assertEquals(2, byteArray0.length);

Base64 base64_0 = new Base64(false);

[MASTER] 03:43:37.985 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<52> but was:<13>
[MASTER] 03:43:37.985 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.TEN;
assertNotNull(bigInteger0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());

BigInteger bigInteger1 = bigInteger0.pow(123);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());

int int0 = bigInteger1.compareTo(bigInteger0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(1, int0);
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());

BigInteger bigInteger2 = bigInteger1.max(bigInteger0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertSame(bigInteger1, bigInteger2);
assertSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertNotNull(bigInteger2);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger2.shortValue());
assertEquals((byte)0, bigInteger2.byteValue());

byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertArrayEquals(new byte[] {(byte)52, (byte) (-11)}, byteArray0);
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);

Base64.encodeInteger(bigInteger1);

[MASTER] 03:43:38.252 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<52> but was:<13>
[MASTER] 03:43:38.253 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.TEN;
assertNotNull(bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());

BigInteger bigInteger1 = bigInteger0.pow(123);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());

int int0 = bigInteger1.compareTo(bigInteger0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(1, int0);
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());

BigInteger bigInteger2 = bigInteger1.max(bigInteger0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertNotNull(bigInteger2);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((short)0, bigInteger2.shortValue());
assertEquals((byte)0, bigInteger2.byteValue());

byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertArrayEquals(new byte[] {(byte)52, (byte) (-11)}, byteArray0);
assertEquals(2, byteArray0.length);
assertNotNull(byteArray0);

byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte)10}, byteArray1);
assertEquals(1, byteArray1.length);
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());

Base64 base64_0 = new Base64(97);

[MASTER] 03:43:38.402 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:38.402 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.TEN;
assertNotNull(bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());

byte[] byteArray0 = new byte[9];
byteArray0[0] = (byte) (-24);
byteArray0[1] = (byte)57;
byteArray0[2] = (byte)9;
byteArray0[3] = (byte)10;
byteArray0[4] = (byte)12;
byteArray0[5] = (byte)1;
byteArray0[6] = (byte)0;
byteArray0[7] = (byte)74;
byteArray0[8] = (byte)43;
boolean boolean0 = Base64.isBase64(byteArray0);
assertArrayEquals(new byte[] {(byte) (-24), (byte)57, (byte)9, (byte)10, (byte)12, (byte)1, (byte)0, (byte)74, (byte)43}, byteArray0);
assertFalse(boolean0);
assertEquals(9, byteArray0.length);

Base64 base64_0 = new Base64(false);

[MASTER] 03:43:38.570 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:38.570 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(0);

[MASTER] 03:43:38.724 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:38.724 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64.decodeBase64("org.apache.commons.codec.binary.Base64");

[MASTER] 03:43:38.918 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:38.918 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[11];
byteArray0[0] = (byte) (-68);
byteArray0[1] = (byte)93;
byteArray0[3] = (byte)93;
byteArray0[4] = (byte)93;
byteArray0[5] = (byte)48;
byteArray0[6] = (byte)96;
byteArray0[7] = (byte) (-68);
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals(11, byteArray0.length);
assertNotNull(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());

BigInteger bigInteger1 = bigInteger0.pow(430);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(11, byteArray0.length);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());

Base64.encodeInteger(bigInteger1);

[MASTER] 03:43:39.099 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:39.099 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[11];
byteArray0[0] = (byte) (-68);
byteArray0[1] = (byte)93;
byteArray0[3] = (byte)93;
byteArray0[4] = (byte)93;
byte byte0 = (byte)48;
byteArray0[5] = (byte)48;
byteArray0[6] = (byte)96;
byteArray0[7] = (byte) (-68);
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals(11, byteArray0.length);
assertNotNull(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());

BigInteger bigInteger1 = bigInteger0.pow(430);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(11, byteArray0.length);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());

Base64.encodeInteger(bigInteger1);

[MASTER] 03:43:39.318 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:39.319 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[11];
byteArray0[0] = (byte) (-68);
byteArray0[1] = (byte)93;
byteArray0[3] = (byte)93;
byteArray0[4] = (byte)93;
byteArray0[5] = (byte)48;
byteArray0[6] = (byte)96;
byteArray0[7] = (byte) (-68);
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals(11, byteArray0.length);
assertNotNull(bigInteger0);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());

BigInteger bigInteger1 = bigInteger0.pow(430);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(11, byteArray0.length);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());

Base64.encodeInteger(bigInteger1);

[MASTER] 03:43:39.489 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:39.489 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[11];
byteArray0[1] = (byte)93;
byteArray0[3] = (byte)93;
byteArray0[4] = (byte)93;
byteArray0[5] = (byte)48;
byteArray0[7] = (byte)0;
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals(11, byteArray0.length);
assertNotNull(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());

byte[] byteArray1 = new byte[7];
assertFalse(byteArray1.equals((Object)byteArray0));

byteArray1[0] = (byte)96;
byteArray1[1] = (byte)93;
byteArray1[2] = (byte)48;
byteArray1[3] = (byte)93;
byteArray1[4] = (byte)48;
byteArray1[5] = (byte)93;
byteArray1[6] = (byte)96;
BigInteger bigInteger1 = new BigInteger(byteArray1);
assertArrayEquals(new byte[] {(byte)96, (byte)93, (byte)48, (byte)93, (byte)48, (byte)93, (byte)96}, byteArray1);
assertEquals(7, byteArray1.length);
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte)96, bigInteger1.byteValue());
assertEquals((short)23904, bigInteger1.shortValue());

BigInteger bigInteger2 = BigInteger.TEN;
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertNotNull(bigInteger2);
assertEquals((byte)10, bigInteger2.byteValue());
assertEquals((short)10, bigInteger2.shortValue());

BigInteger bigInteger3 = bigInteger0.pow(430);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger3, bigInteger1);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger3);
assertEquals(11, byteArray0.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertNotNull(bigInteger3);
assertEquals((byte)0, bigInteger3.byteValue());
assertEquals((short)0, bigInteger3.shortValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());

Base64.encodeInteger(bigInteger3);

[MASTER] 03:43:39.706 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:39.707 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[11];
byteArray0[1] = (byte)93;
byteArray0[3] = (byte)93;
byteArray0[5] = (byte)48;
byteArray0[6] = (byte)0;
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals(11, byteArray0.length);
assertNotNull(bigInteger0);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());

byte[] byteArray1 = new byte[7];
assertFalse(byteArray1.equals((Object)byteArray0));

byteArray1[1] = (byte)93;
byteArray1[3] = (byte)93;
byteArray1[5] = (byte)93;
byteArray1[6] = (byte)107;
BigInteger bigInteger1 = new BigInteger(byteArray1);
assertArrayEquals(new byte[] {(byte)0, (byte)93, (byte)0, (byte)93, (byte)0, (byte)93, (byte)107}, byteArray1);
assertEquals(7, byteArray1.length);
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte)107, bigInteger1.byteValue());
assertEquals((short)23915, bigInteger1.shortValue());

BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertArrayEquals(new byte[] {(byte)0, (byte)93, (byte)0, (byte)93, (byte)0, (byte)93, (byte)107}, byteArray1);
assertEquals(11, byteArray0.length);
assertEquals(7, byteArray1.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertNotNull(bigInteger2);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)107, bigInteger1.byteValue());
assertEquals((short)23915, bigInteger1.shortValue());
assertEquals((short)31399, bigInteger2.shortValue());
assertEquals((byte) (-89), bigInteger2.byteValue());

BigInteger bigInteger3 = bigInteger0.pow(430);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger1);
assertEquals(11, byteArray0.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertNotNull(bigInteger3);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((short)0, bigInteger3.shortValue());
assertEquals((byte)0, bigInteger3.byteValue());

Base64.encodeInteger(bigInteger3);

[MASTER] 03:43:39.896 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:39.896 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[11];
byteArray0[0] = (byte) (-68);
byteArray0[1] = (byte)93;
byteArray0[3] = (byte)93;
byteArray0[4] = (byte)93;
byteArray0[5] = (byte)48;
byteArray0[6] = (byte) (-68);
byteArray0[7] = (byte)93;
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals(11, byteArray0.length);
assertNotNull(bigInteger0);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());

BigInteger bigInteger1 = bigInteger0.pow(430);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(11, byteArray0.length);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());

Base64.encodeInteger(bigInteger1);

[MASTER] 03:43:40.096 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:40.097 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[11];
byteArray0[1] = (byte)93;
byteArray0[3] = (byte)93;
byteArray0[5] = (byte)48;
byteArray0[6] = (byte)0;
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals(11, byteArray0.length);
assertNotNull(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());

byte[] byteArray1 = new byte[7];
assertFalse(byteArray1.equals((Object)byteArray0));

byteArray1[0] = (byte)107;
byteArray1[1] = (byte)93;
byteArray1[3] = (byte)93;
byteArray1[5] = (byte)93;
byteArray1[6] = (byte)107;
BigInteger bigInteger1 = new BigInteger(byteArray1);
assertArrayEquals(new byte[] {(byte)107, (byte)93, (byte)0, (byte)93, (byte)0, (byte)93, (byte)107}, byteArray1);
assertEquals(7, byteArray1.length);
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((short)23915, bigInteger1.shortValue());
assertEquals((byte)107, bigInteger1.byteValue());

BigInteger[] bigIntegerArray0 = bigInteger1.divideAndRemainder(bigInteger0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(bigInteger1, bigInteger0);
assertArrayEquals(new byte[] {(byte)107, (byte)93, (byte)0, (byte)93, (byte)0, (byte)93, (byte)107}, byteArray1);
assertEquals(11, byteArray0.length);
assertEquals(7, byteArray1.length);
assertEquals(2, bigIntegerArray0.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigIntegerArray0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)23915, bigInteger1.shortValue());
assertEquals((byte)107, bigInteger1.byteValue());

BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger1);
assertArrayEquals(new byte[] {(byte)107, (byte)93, (byte)0, (byte)93, (byte)0, (byte)93, (byte)107}, byteArray1);
assertEquals(11, byteArray0.length);
assertEquals(7, byteArray1.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertNotNull(bigInteger2);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)23915, bigInteger1.shortValue());
assertEquals((byte)107, bigInteger1.byteValue());
assertEquals((byte)18, bigInteger2.byteValue());
assertEquals((short) (-5614), bigInteger2.shortValue());

BigInteger bigInteger3 = bigInteger0.pow(430);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger1);
assertNotSame(bigInteger3, bigInteger2);
assertEquals(11, byteArray0.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertNotNull(bigInteger3);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger3.shortValue());
assertEquals((byte)0, bigInteger3.byteValue());

Base64.encodeInteger(bigInteger3);

[MASTER] 03:43:40.319 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:40.319 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[11];
byteArray0[0] = (byte) (-68);
byteArray0[1] = (byte)93;
byteArray0[3] = (byte)93;
byteArray0[4] = (byte)93;
byteArray0[5] = (byte)48;
byteArray0[6] = (byte) (-68);
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals(11, byteArray0.length);
assertNotNull(bigInteger0);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());

BigInteger bigInteger1 = bigInteger0.pow(430);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(11, byteArray0.length);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());

Base64.encodeInteger(bigInteger1);

[MASTER] 03:43:40.543 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:40.543 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[11];
byteArray0[1] = (byte)93;
byteArray0[3] = (byte)93;
byteArray0[4] = (byte)93;
byteArray0[5] = (byte)48;
byteArray0[6] = (byte)0;
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals(11, byteArray0.length);
assertNotNull(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());

BigInteger bigInteger1 = bigInteger0.modPow(bigInteger0, bigInteger0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(11, byteArray0.length);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());

BigInteger bigInteger2 = bigInteger0.pow(430);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertEquals(11, byteArray0.length);
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertNotNull(bigInteger2);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger2.byteValue());
assertEquals((short)0, bigInteger2.shortValue());

Base64.encodeInteger(bigInteger2);

[MASTER] 03:43:40.755 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:40.756 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[11];
byteArray0[1] = (byte)93;
byteArray0[3] = (byte)93;
byteArray0[5] = (byte)93;
byteArray0[6] = (byte)0;
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals(11, byteArray0.length);
assertNotNull(bigInteger0);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());

byte[] byteArray1 = new byte[7];
assertFalse(byteArray1.equals((Object)byteArray0));

byteArray1[0] = (byte)107;
byteArray1[1] = (byte)93;
byteArray1[3] = (byte)93;
byteArray1[5] = (byte)93;
byteArray1[6] = (byte)107;
BigInteger bigInteger1 = new BigInteger(byteArray1);
assertArrayEquals(new byte[] {(byte)107, (byte)93, (byte)0, (byte)93, (byte)0, (byte)93, (byte)107}, byteArray1);
assertEquals(7, byteArray1.length);
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte)107, bigInteger1.byteValue());
assertEquals((short)23915, bigInteger1.shortValue());

int int0 = bigInteger1.bitCount();
assertNotSame(byteArray1, byteArray0);
assertNotSame(bigInteger1, bigInteger0);
assertArrayEquals(new byte[] {(byte)107, (byte)93, (byte)0, (byte)93, (byte)0, (byte)93, (byte)107}, byteArray1);
assertEquals(25, int0);
assertEquals(7, byteArray1.length);
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals((byte)107, bigInteger1.byteValue());
assertEquals((short)23915, bigInteger1.shortValue());

BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger1);
assertArrayEquals(new byte[] {(byte)107, (byte)93, (byte)0, (byte)93, (byte)0, (byte)93, (byte)107}, byteArray1);
assertEquals(11, byteArray0.length);
assertEquals(7, byteArray1.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertNotNull(bigInteger2);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)107, bigInteger1.byteValue());
assertEquals((short)23915, bigInteger1.shortValue());
assertEquals((byte)79, bigInteger2.byteValue());
assertEquals((short)30543, bigInteger2.shortValue());

BigInteger bigInteger3 = bigInteger0.pow(430);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger1);
assertEquals(11, byteArray0.length);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertNotNull(bigInteger3);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((short)0, bigInteger3.shortValue());
assertEquals((byte)0, bigInteger3.byteValue());

Base64.encodeInteger(bigInteger3);

[MASTER] 03:43:41.056 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:41.056 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[11];
byteArray0[1] = (byte)93;
byteArray0[3] = (byte)93;
byteArray0[4] = (byte)93;
byteArray0[5] = (byte)48;
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals(11, byteArray0.length);
assertNotNull(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());

BigInteger bigInteger1 = bigInteger0.pow(430);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(11, byteArray0.length);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());

Base64.encodeInteger(bigInteger1);

[MASTER] 03:43:41.238 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 03:43:41.238 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[11];
byteArray0[3] = (byte)0;
byteArray0[4] = (byte)93;
byteArray0[5] = (byte)48;
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals(11, byteArray0.length);
assertNotNull(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());

BigInteger bigInteger1 = bigInteger0.pow(430);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(11, byteArray0.length);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());

Base64.encodeInteger(bigInteger1);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 8
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/BBC-F0/tests/9
* Done!

* Computation finished
