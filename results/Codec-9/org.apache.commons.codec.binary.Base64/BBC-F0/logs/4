* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 14510
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 1142777409
* Starting evolution
* Initial Number of Goals in DynaMOSA = 419 / 1539
* Search finished after 302s and 170 generations, 102750 statements, best individual has fitness: 74.0
* Minimizing test suite
[MASTER] 03:40:39.453 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 216
* Number of covered goals: 215
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 193
* Number of covered goals: 186
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 97%
* Total number of goals: 787
* Number of covered goals: 762
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 91%
* Total number of goals: 80
* Number of covered goals: 73
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 94%
* Total number of goals: 193
* Number of covered goals: 182
* Generated 96 tests with total length 1593
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:41:24.073 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7254666666666667% of time used, but only 39/96 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 42%
* Compiling and checking tests
[MASTER] 03:42:10.638 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<QmVzaVFB[kAA]=> but was:<QmVzaVFB[DQo]=>
[MASTER] 03:42:10.639 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte)5;
byteArray0[1] = (byte) (-21);
byteArray0[2] = (byte)34;
byteArray0[3] = (byte)64;
Base64 base64_0 = new Base64(1, byteArray0);
base64_0.encode(byteArray0, 87, 0);
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
boolean boolean0 = base64_0.hasData();
assertFalse(boolean0);

String string0 = Base64.encodeBase64String(byteArray1);
assertEquals("QmVzaVFBkAA=", string0);


[MASTER] 03:42:10.822 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: array lengths differed, expected.length=10 actual.length=8; arrays first differed at element [8]; expected:<-112> but was:<end of array>
[MASTER] 03:42:10.823 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[6];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)7;
byteArray0[2] = (byte)9;
byteArray0[3] = (byte)0;
byteArray0[4] = (byte)91;
byteArray0[5] = (byte)0;
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
Base64.isArrayByteBase64(byteArray0);
Base64 base64_0 = new Base64(true);
Base64.encodeBase64String(byteArray0);
String string0 = Base64.encodeBase64URLSafeString(byteArray0);
assertEquals("AAcJAFsA", string0);

byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 87);
Base64.encodeBase64(byteArray0, false, true, 87);
byte[] byteArray3 = base64_0.decode("AAcJAFsA");
BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
assertArrayEquals(new byte[] {(byte)0, (byte)7, (byte)9, (byte)0, (byte)91, (byte)0}, byteArray3);

base64_0.decode(byteArray0, 87, (-2412));
base64_0.encode(byteArray0);
byte[] byteArray4 = base64_0.encode(byteArray0);
byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
assertNotSame(byteArray5, byteArray4);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)99, (byte)74, (byte)65, (byte)70, (byte)115, (byte)65, (byte) (-112), (byte)0}, byteArray5);

boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
assertTrue(boolean0);

Base64.isBase64((byte)7);
BigInteger bigInteger1 = BigInteger.ZERO;
byte[] byteArray6 = Base64.encodeInteger(bigInteger1);
assertEquals(0, byteArray6.length);
assertTrue(bigInteger1.equals((Object)bigInteger0));

byte[] byteArray7 = Base64.encodeBase64URLSafe(byteArray2);
assertEquals(22, byteArray7.length);


[MASTER] 03:42:13.173 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<QmVzaVFB[kAA]=> but was:<QmVzaVFB[DQo]=>
[MASTER] 03:42:13.173 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte)5;
byteArray0[1] = (byte) (-21);
byteArray0[2] = (byte)34;
byteArray0[3] = (byte)64;
Base64 base64_0 = new Base64(1, byteArray0);
base64_0.encode(byteArray0, 87, 0);
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
boolean boolean0 = base64_0.hasData();
assertFalse(boolean0);

String string0 = Base64.encodeBase64String(byteArray1);
assertEquals("QmVzaVFBkAA=", string0);

Base64.decodeBase64(byteArray0);
byte[] byteArray2 = Base64.decodeBase64(byteArray1);
assertArrayEquals(new byte[] {(byte)5, (byte) (-21), (byte)34, (byte)64}, byteArray2);
assertEquals(4, byteArray2.length);


[MASTER] 03:42:13.414 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<107> but was:<68>
[MASTER] 03:42:13.414 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[6];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)7;
byteArray0[2] = (byte)9;
byteArray0[3] = (byte)0;
byteArray0[4] = (byte)91;
byteArray0[5] = (byte)0;
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertEquals(10, byteArray1.length);

Base64.isArrayByteBase64(byteArray0);
Base64 base64_0 = new Base64(true);
Base64.encodeBase64String(byteArray0);
Base64.encodeBase64URLSafeString(byteArray0);
byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
Base64.encodeBase64(byteArray0, false, true, 87);
base64_0.decode("AAcJAFsA");
BigInteger bigInteger0 = BigInteger.ONE;
base64_0.decode(byteArray0, 87, (-2412));
base64_0.encode(byteArray0);
byte[] byteArray3 = Base64.decodeBase64("AAcJAFsA");
byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
assertEquals(5, byteArray4.length);
assertArrayEquals(new byte[] {(byte)0, (byte)7, (byte)0, (byte)91, (byte)0}, byteArray4);

Base64.isArrayByteBase64(byteArray2);
Base64.isBase64((byte)7);
BigInteger bigInteger1 = BigInteger.ZERO;
byte[] byteArray5 = Base64.encodeInteger(bigInteger1);
assertEquals(0, byteArray5.length);

byte[] byteArray6 = Base64.encodeBase64URLSafe(byteArray2);
assertArrayEquals(new byte[] {(byte)107, (byte)65, (byte)65}, byteArray6);


[MASTER] 03:42:14.084 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:42:14.086 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.ONE;
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertNotNull(bigInteger0);

String string0 = bigInteger0.toString(1);
assertEquals("1", string0);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertNotNull(string0);

byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
assertArrayEquals(new byte[] {(byte)1}, byteArray0);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertNotNull(byteArray0);
assertEquals(1, byteArray0.length);

byte[] byteArray1 = new byte[9];
assertFalse(byteArray1.equals((Object)byteArray0));

byteArray1[0] = (byte) (-49);
byteArray1[1] = (byte)0;
byteArray1[2] = (byte)0;
byteArray1[3] = (byte) (-119);
byteArray1[4] = (byte) (-79);
byteArray1[5] = (byte)80;
byteArray1[6] = (byte)114;
byteArray1[7] = (byte) (-21);
byteArray1[8] = (byte)40;
byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte) (-49), (byte)0, (byte)0, (byte) (-119), (byte) (-79), (byte)80, (byte)114, (byte) (-21), (byte)40}, byteArray1);
assertNotNull(byteArray2);
assertEquals(9, byteArray1.length);
assertEquals(14, byteArray2.length);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

byte[] byteArray3 = new byte[6];
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));

byteArray3[0] = (byte)53;
byteArray3[1] = (byte) (-21);
byteArray3[2] = (byte) (-49);
byteArray3[3] = (byte)114;
byteArray3[4] = (byte)0;
byteArray3[5] = (byte) (-21);
boolean boolean0 = Base64.isBase64(byteArray3);
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte)53, (byte) (-21), (byte) (-49), (byte)114, (byte)0, (byte) (-21)}, byteArray3);
assertEquals(6, byteArray3.length);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);

boolean boolean1 = Base64.isBase64(byteArray2);
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertTrue(boolean1 == boolean0);
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(boolean1);
assertArrayEquals(new byte[] {(byte) (-49), (byte)0, (byte)0, (byte) (-119), (byte) (-79), (byte)80, (byte)114, (byte) (-21), (byte)40}, byteArray1);
assertEquals(9, byteArray1.length);
assertEquals(14, byteArray2.length);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte) (-49), (byte)0, (byte)0, (byte) (-119), (byte) (-79), (byte)80, (byte)114, (byte) (-21), (byte)40}, byteArray1);
assertNotNull(byteArray4);
assertEquals(9, byteArray1.length);
assertEquals(22, byteArray4.length);
assertEquals(14, byteArray2.length);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray4);

Base64.encodeBase64(byteArray1, true, false, (int) (byte)0);

[MASTER] 03:42:15.157 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<-112> but was:<13>
[MASTER] 03:42:15.158 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[6];
byteArray0[0] = (byte)0;
byte byte0 = (byte)7;
byteArray0[1] = (byte)7;
byteArray0[2] = (byte)9;
byteArray0[3] = (byte)0;
byteArray0[4] = (byte)91;
byteArray0[5] = (byte)0;
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)0, (byte)7, (byte)9, (byte)0, (byte)91, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)99, (byte)74, (byte)65, (byte)70, (byte)115, (byte)65, (byte) (-112), (byte)0}, byteArray1);
assertNotNull(byteArray1);
assertEquals(6, byteArray0.length);
assertEquals(10, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte)0, (byte)7, (byte)9, (byte)0, (byte)91, (byte)0}, byteArray0);
assertEquals(6, byteArray0.length);
assertNotSame(byteArray0, byteArray1);

Base64 base64_0 = new Base64(true);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertTrue(base64_0.isUrlSafe());
assertNotNull(base64_0);

int int0 = 87;
String string0 = Base64.encodeBase64String(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals("AAcJAFsA", string0);
assertArrayEquals(new byte[] {(byte)0, (byte)7, (byte)9, (byte)0, (byte)91, (byte)0}, byteArray0);
assertNotNull(string0);
assertEquals(6, byteArray0.length);
assertNotSame(byteArray0, byteArray1);

base64_0.encode(byteArray1, (int) (byte)7, (int) (byte)7);

[MASTER] 03:42:16.621 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<-112> but was:<13>
[MASTER] 03:42:16.622 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte) (-112), (byte)0}, byteArray1);
assertNotNull(byteArray1);
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

boolean boolean0 = Base64.isBase64((byte) (-15));
assertFalse(boolean0);

Base64 base64_0 = new Base64(false);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);

String string0 = Base64.encodeBase64String(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals("AAA=", string0);
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertNotNull(string0);
assertEquals(2, byteArray0.length);
assertNotSame(byteArray0, byteArray1);

base64_0.encode(byteArray1, (int) (byte)91, (int) (byte) (-15));
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte) (-112), (byte)0}, byteArray1);
assertFalse(base64_0.isUrlSafe());
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

base64_0.readResults(byteArray1, (byte)91, (byte)91);

[MASTER] 03:42:16.971 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<-112> but was:<13>
[MASTER] 03:42:17.012 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
byteArray0[0] = (byte) (-18);
byteArray0[1] = (byte)127;
Base64 base64_0 = new Base64(41, byteArray0, true);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertTrue(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(2, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertArrayEquals(new byte[] {(byte)55, (byte)110, (byte)56}, byteArray1);
assertNotNull(byteArray1);
assertEquals(2, byteArray0.length);
assertEquals(3, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertArrayEquals(new byte[] {(byte)55, (byte)110, (byte)56}, byteArray1);
assertArrayEquals(new byte[] {(byte)78, (byte)50, (byte)52, (byte)52, (byte) (-112), (byte)0}, byteArray2);
assertNotNull(byteArray2);
assertEquals(2, byteArray0.length);
assertEquals(3, byteArray1.length);
assertEquals(6, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);

byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertArrayEquals(new byte[] {(byte)55, (byte)110, (byte)56}, byteArray3);
assertNotNull(byteArray3);
assertEquals(2, byteArray0.length);
assertEquals(3, byteArray3.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);

base64_0.encode(byteArray0, 139, (-1));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertTrue(base64_0.isUrlSafe());
assertEquals(2, byteArray0.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);

Object object0 = base64_0.decode((Object) "pLfr>w{");
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertTrue(base64_0.isUrlSafe());
assertNotNull(object0);
assertEquals(2, byteArray0.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, object0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);

byte[] byteArray4 = Base64.decodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)object0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)object0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)object0));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertArrayEquals(new byte[] {(byte)55, (byte)110, (byte)56}, byteArray1);
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray4);
assertNotNull(byteArray4);
assertEquals(2, byteArray0.length);
assertEquals(3, byteArray1.length);
assertEquals(2, byteArray4.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, object0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, object0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray4, object0);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);

Object object1 = base64_0.decode(object0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)object0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(object1.equals((Object)object0));
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertTrue(base64_0.isUrlSafe());
assertNotNull(object1);
assertEquals(2, byteArray0.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, object1);
assertNotSame(byteArray0, object0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(object0, object1);
assertNotSame(object1, object0);

byte[] byteArray5 = base64_0.encode(byteArray0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)object1));
assertFalse(byteArray0.equals((Object)object0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)object0));
assertFalse(byteArray5.equals((Object)object1));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray4));
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertArrayEquals(new byte[] {(byte)55, (byte)110, (byte)56, (byte) (-18), (byte)127}, byteArray5);
assertTrue(base64_0.isUrlSafe());
assertNotNull(byteArray5);
assertEquals(2, byteArray0.length);
assertEquals(5, byteArray5.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, object1);
assertNotSame(byteArray0, object0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray5, object0);
assertNotSame(byteArray5, object1);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray4);

int int0 = base64_0.readResults(byteArray0, (byte)127, (byte)127);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)object1));
assertFalse(byteArray0.equals((Object)object0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray5));
assertEquals((-1), int0);
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertTrue(base64_0.isUrlSafe());
assertEquals(2, byteArray0.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, object1);
assertNotSame(byteArray0, object0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray5);

byte[] byteArray6 = Base64.discardWhitespace(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)object1));
assertFalse(byteArray0.equals((Object)object0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)object0));
assertFalse(byteArray6.equals((Object)object1));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray2));
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray6);
assertNotNull(byteArray6);
assertEquals(2, byteArray0.length);
assertEquals(2, byteArray6.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, object1);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, object0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, object0);
assertNotSame(byteArray6, object1);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray2);

BigInteger bigInteger0 = BigInteger.TEN;
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertNotNull(bigInteger0);

byte[] byteArray7 = bigInteger0.toByteArray();
assertFalse(byteArray7.equals((Object)byteArray3));
assertFalse(byteArray7.equals((Object)object0));
assertFalse(byteArray7.equals((Object)byteArray6));
assertFalse(byteArray7.equals((Object)byteArray4));
assertFalse(byteArray7.equals((Object)byteArray1));
assertFalse(byteArray7.equals((Object)byteArray2));
assertFalse(byteArray7.equals((Object)object1));
assertFalse(byteArray7.equals((Object)byteArray5));
assertFalse(byteArray7.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)10}, byteArray7);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertNotNull(byteArray7);
assertEquals(1, byteArray7.length);
assertNotSame(byteArray7, byteArray3);
assertNotSame(byteArray7, object0);
assertNotSame(byteArray7, byteArray6);
assertNotSame(byteArray7, byteArray4);
assertNotSame(byteArray7, byteArray1);
assertNotSame(byteArray7, byteArray2);
assertNotSame(byteArray7, object1);
assertNotSame(byteArray7, byteArray5);
assertNotSame(byteArray7, byteArray0);

long long0 = bigInteger0.longValueExact();
assertEquals(10L, long0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());

byte[] byteArray8 = Base64.encodeInteger(bigInteger0);
assertFalse(byteArray8.equals((Object)byteArray5));
assertFalse(byteArray8.equals((Object)object0));
assertFalse(byteArray8.equals((Object)byteArray3));
assertFalse(byteArray8.equals((Object)byteArray1));
assertFalse(byteArray8.equals((Object)byteArray6));
assertFalse(byteArray8.equals((Object)byteArray0));
assertFalse(byteArray8.equals((Object)byteArray4));
assertFalse(byteArray8.equals((Object)object1));
assertFalse(byteArray8.equals((Object)byteArray7));
assertFalse(byteArray8.equals((Object)byteArray2));
assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray8);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertNotNull(byteArray8);
assertEquals(4, byteArray8.length);
assertNotSame(byteArray8, byteArray5);
assertNotSame(byteArray8, object0);
assertNotSame(byteArray8, byteArray3);
assertNotSame(byteArray8, byteArray1);
assertNotSame(byteArray8, byteArray6);
assertNotSame(byteArray8, byteArray0);
assertNotSame(byteArray8, byteArray4);
assertNotSame(byteArray8, object1);
assertNotSame(byteArray8, byteArray7);
assertNotSame(byteArray8, byteArray2);

BigInteger bigInteger1 = BigInteger.ONE;
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals((byte)1, bigInteger1.byteValue());
assertEquals((short)1, bigInteger1.shortValue());
assertNotNull(bigInteger1);
assertNotSame(bigInteger1, bigInteger0);

BigInteger[] bigIntegerArray0 = bigInteger1.divideAndRemainder(bigInteger0);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertEquals((byte)1, bigInteger1.byteValue());
assertEquals((short)1, bigInteger1.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertNotNull(bigIntegerArray0);
assertEquals(2, bigIntegerArray0.length);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger0, bigInteger1);

String string0 = bigInteger1.toString((-3018));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals("1", string0);
assertEquals((byte)1, bigInteger1.byteValue());
assertEquals((short)1, bigInteger1.shortValue());
assertNotNull(string0);
assertNotSame(bigInteger1, bigInteger0);

byte[] byteArray9 = Base64.encodeInteger(bigInteger1);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray9.equals((Object)object0));
assertFalse(byteArray9.equals((Object)byteArray5));
assertFalse(byteArray9.equals((Object)byteArray3));
assertFalse(byteArray9.equals((Object)byteArray6));
assertFalse(byteArray9.equals((Object)byteArray0));
assertFalse(byteArray9.equals((Object)byteArray4));
assertFalse(byteArray9.equals((Object)byteArray2));
assertFalse(byteArray9.equals((Object)byteArray1));
assertFalse(byteArray9.equals((Object)object1));
assertFalse(byteArray9.equals((Object)byteArray8));
assertFalse(byteArray9.equals((Object)byteArray7));
assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray9);
assertEquals((byte)1, bigInteger1.byteValue());
assertEquals((short)1, bigInteger1.shortValue());
assertNotNull(byteArray9);
assertEquals(4, byteArray9.length);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray9, object0);
assertNotSame(byteArray9, byteArray5);
assertNotSame(byteArray9, byteArray3);
assertNotSame(byteArray9, byteArray6);
assertNotSame(byteArray9, byteArray0);
assertNotSame(byteArray9, byteArray4);
assertNotSame(byteArray9, byteArray2);
assertNotSame(byteArray9, byteArray1);
assertNotSame(byteArray9, object1);
assertNotSame(byteArray9, byteArray8);
assertNotSame(byteArray9, byteArray7);

boolean boolean0 = Base64.isBase64(byteArray6);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)object1));
assertFalse(byteArray0.equals((Object)byteArray8));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)object0));
assertFalse(byteArray0.equals((Object)byteArray9));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)object0));
assertFalse(byteArray6.equals((Object)object1));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray9));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray8));
assertFalse(byteArray6.equals((Object)byteArray7));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray6);
assertEquals(2, byteArray0.length);
assertEquals(2, byteArray6.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, object1);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, object0);
assertNotSame(byteArray0, byteArray9);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, object0);
assertNotSame(byteArray6, object1);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray9);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray8);
assertNotSame(byteArray6, byteArray7);
assertNotSame(byteArray6, byteArray2);

String string1 = base64_0.encodeToString(byteArray4);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)object1));
assertFalse(byteArray0.equals((Object)byteArray8));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)object0));
assertFalse(byteArray0.equals((Object)byteArray9));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray9));
assertFalse(byteArray1.equals((Object)object0));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)object1));
assertFalse(byteArray1.equals((Object)byteArray7));
assertFalse(byteArray1.equals((Object)byteArray8));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(string1.equals((Object)string0));
assertFalse(byteArray4.equals((Object)object0));
assertFalse(byteArray4.equals((Object)byteArray9));
assertFalse(byteArray4.equals((Object)byteArray6));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray8));
assertFalse(byteArray4.equals((Object)byteArray7));
assertFalse(byteArray4.equals((Object)object1));
assertFalse(byteArray4.equals((Object)byteArray5));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertEquals("7n8\uFFFD", string1);
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertArrayEquals(new byte[] {(byte)55, (byte)110, (byte)56}, byteArray1);
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray4);
assertTrue(base64_0.isUrlSafe());
assertNotNull(string1);
assertEquals(2, byteArray0.length);
assertEquals(3, byteArray1.length);
assertEquals(2, byteArray4.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, object1);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, object0);
assertNotSame(byteArray0, byteArray9);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray1, byteArray9);
assertNotSame(byteArray1, object0);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, object1);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray1, byteArray8);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray4, object0);
assertNotSame(byteArray4, byteArray9);
assertNotSame(byteArray4, byteArray6);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray8);
assertNotSame(byteArray4, byteArray7);
assertNotSame(byteArray4, object1);
assertNotSame(byteArray4, byteArray5);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);

boolean boolean1 = Base64.isBase64(byteArray4);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)object1));
assertFalse(byteArray0.equals((Object)byteArray8));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)object0));
assertFalse(byteArray0.equals((Object)byteArray9));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray9));
assertFalse(byteArray1.equals((Object)object0));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)object1));
assertFalse(byteArray1.equals((Object)byteArray7));
assertFalse(byteArray1.equals((Object)byteArray8));
assertFalse(byteArray1.equals((Object)byteArray6));
assertTrue(boolean1 == boolean0);
assertFalse(byteArray4.equals((Object)object0));
assertFalse(byteArray4.equals((Object)byteArray9));
assertFalse(byteArray4.equals((Object)byteArray6));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray8));
assertFalse(byteArray4.equals((Object)byteArray7));
assertFalse(byteArray4.equals((Object)object1));
assertFalse(byteArray4.equals((Object)byteArray5));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(boolean1);
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertArrayEquals(new byte[] {(byte)55, (byte)110, (byte)56}, byteArray1);
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray4);
assertEquals(2, byteArray0.length);
assertEquals(3, byteArray1.length);
assertEquals(2, byteArray4.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, object1);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, object0);
assertNotSame(byteArray0, byteArray9);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray1, byteArray9);
assertNotSame(byteArray1, object0);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, object1);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray1, byteArray8);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray4, object0);
assertNotSame(byteArray4, byteArray9);
assertNotSame(byteArray4, byteArray6);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray8);
assertNotSame(byteArray4, byteArray7);
assertNotSame(byteArray4, object1);
assertNotSame(byteArray4, byteArray5);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);

byte[] byteArray10 = base64_0.encode(byteArray6);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)object1));
assertFalse(byteArray0.equals((Object)byteArray8));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)object0));
assertFalse(byteArray0.equals((Object)byteArray9));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray10.equals((Object)byteArray0));
assertFalse(byteArray10.equals((Object)object1));
assertFalse(byteArray10.equals((Object)byteArray8));
assertFalse(byteArray10.equals((Object)byteArray4));
assertFalse(byteArray10.equals((Object)byteArray5));
assertFalse(byteArray10.equals((Object)byteArray1));
assertFalse(byteArray10.equals((Object)byteArray3));
assertFalse(byteArray10.equals((Object)byteArray9));
assertFalse(byteArray10.equals((Object)object0));
assertFalse(byteArray10.equals((Object)byteArray6));
assertFalse(byteArray10.equals((Object)byteArray7));
assertFalse(byteArray10.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)object0));
assertFalse(byteArray6.equals((Object)object1));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray9));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray8));
assertFalse(byteArray6.equals((Object)byteArray7));
assertFalse(byteArray6.equals((Object)byteArray2));
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertArrayEquals(new byte[] {(byte)55, (byte)110, (byte)56, (byte) (-18), (byte)127}, byteArray10);
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray6);
assertTrue(base64_0.isUrlSafe());
assertNotNull(byteArray10);
assertEquals(2, byteArray0.length);
assertEquals(5, byteArray10.length);
assertEquals(2, byteArray6.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, object1);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray10);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray9);
assertNotSame(byteArray0, object0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray10, byteArray0);
assertNotSame(byteArray10, object1);
assertNotSame(byteArray10, byteArray8);
assertNotSame(byteArray10, byteArray4);
assertNotSame(byteArray10, byteArray5);
assertNotSame(byteArray10, byteArray1);
assertNotSame(byteArray10, byteArray3);
assertNotSame(byteArray10, byteArray9);
assertNotSame(byteArray10, object0);
assertNotSame(byteArray10, byteArray6);
assertNotSame(byteArray10, byteArray7);
assertNotSame(byteArray10, byteArray2);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, object0);
assertNotSame(byteArray6, object1);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray9);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray8);
assertNotSame(byteArray6, byteArray7);
assertNotSame(byteArray6, byteArray10);
assertNotSame(byteArray6, byteArray2);

boolean boolean2 = Base64.isBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)object1));
assertFalse(byteArray0.equals((Object)byteArray8));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray10));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray9));
assertFalse(byteArray0.equals((Object)object0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray9));
assertFalse(byteArray1.equals((Object)object0));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)object1));
assertFalse(byteArray1.equals((Object)byteArray7));
assertFalse(byteArray1.equals((Object)byteArray8));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray10));
assertFalse(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertTrue(boolean2);
assertArrayEquals(new byte[] {(byte) (-18), (byte)127}, byteArray0);
assertArrayEquals(new byte[] {(byte)55, (byte)110, (byte)56}, byteArray1);
assertEquals(2, byteArray0.length);
assertEquals(3, byteArray1.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, object1);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray10);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray9);
assertNotSame(byteArray0, object0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray1, byteArray9);
assertNotSame(byteArray1, object0);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, object1);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray1, byteArray8);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray10);


[MASTER] 03:42:17.734 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<QUxNSUFBQUFBQUE9[? ]> but was:<QUxNSUFBQUFBQUE9[
]>
[MASTER] 03:42:17.883 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[8];
byteArray0[1] = (byte) (-77);
byteArray0[2] = (byte)8;
byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)0, (byte) (-77), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertNotNull(byteArray1);
assertEquals(8, byteArray0.length);
assertEquals(12, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

byte[] byteArray2 = Base64.decodeBase64(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)0, (byte) (-77), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray2);
assertNotNull(byteArray2);
assertEquals(8, byteArray0.length);
assertEquals(0, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false, 123);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)0, (byte) (-77), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertNotNull(byteArray3);
assertEquals(8, byteArray0.length);
assertEquals(12, byteArray3.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);

Base64 base64_0 = new Base64((byte)46);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);

byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)0, (byte) (-77), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertNotNull(byteArray4);
assertEquals(8, byteArray0.length);
assertEquals(12, byteArray3.length);
assertEquals(16, byteArray4.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);

String string0 = base64_0.encodeToString(byteArray1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals("QUxNSUFBQUFBQUE9\uFFFD\u0000", string0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-77), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertNotNull(string0);
assertEquals(8, byteArray0.length);
assertEquals(12, byteArray1.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);

byte[] byteArray5 = base64_0.decode("c|IHaK}J+~uL(qwNE");
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertArrayEquals(new byte[] {(byte)112, (byte) (-127), (byte) (-38), (byte)40, (byte) (-97), (byte) (-82), (byte)46, (byte) (-84), (byte)13}, byteArray5);
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray5);
assertEquals(9, byteArray5.length);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray2);

BigInteger bigInteger0 = BigInteger.ONE;
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertNotNull(bigInteger0);

byte[] byteArray6 = base64_0.encode(byteArray0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray2));
assertArrayEquals(new byte[] {(byte)0, (byte) (-77), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray6);
assertEquals(8, byteArray0.length);
assertEquals(14, byteArray6.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray2);

byte[] byteArray7 = Base64.toIntegerBytes(bigInteger0);
assertFalse(byteArray7.equals((Object)byteArray2));
assertFalse(byteArray7.equals((Object)byteArray5));
assertFalse(byteArray7.equals((Object)byteArray1));
assertFalse(byteArray7.equals((Object)byteArray3));
assertFalse(byteArray7.equals((Object)byteArray0));
assertFalse(byteArray7.equals((Object)byteArray6));
assertFalse(byteArray7.equals((Object)byteArray4));
assertArrayEquals(new byte[] {(byte)1}, byteArray7);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertNotNull(byteArray7);
assertEquals(1, byteArray7.length);
assertNotSame(byteArray7, byteArray2);
assertNotSame(byteArray7, byteArray5);
assertNotSame(byteArray7, byteArray1);
assertNotSame(byteArray7, byteArray3);
assertNotSame(byteArray7, byteArray0);
assertNotSame(byteArray7, byteArray6);
assertNotSame(byteArray7, byteArray4);

byte[] byteArray8 = Base64.discardWhitespace(byteArray7);
assertFalse(byteArray7.equals((Object)byteArray2));
assertFalse(byteArray7.equals((Object)byteArray5));
assertFalse(byteArray7.equals((Object)byteArray1));
assertFalse(byteArray7.equals((Object)byteArray3));
assertFalse(byteArray7.equals((Object)byteArray0));
assertFalse(byteArray7.equals((Object)byteArray6));
assertFalse(byteArray7.equals((Object)byteArray4));
assertFalse(byteArray8.equals((Object)byteArray2));
assertFalse(byteArray8.equals((Object)byteArray5));
assertFalse(byteArray8.equals((Object)byteArray4));
assertFalse(byteArray8.equals((Object)byteArray1));
assertFalse(byteArray8.equals((Object)byteArray3));
assertFalse(byteArray8.equals((Object)byteArray6));
assertFalse(byteArray8.equals((Object)byteArray7));
assertFalse(byteArray8.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)1}, byteArray7);
assertArrayEquals(new byte[] {(byte)1}, byteArray8);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertNotNull(byteArray8);
assertEquals(1, byteArray7.length);
assertEquals(1, byteArray8.length);
assertNotSame(byteArray7, byteArray2);
assertNotSame(byteArray7, byteArray5);
assertNotSame(byteArray7, byteArray8);
assertNotSame(byteArray7, byteArray1);
assertNotSame(byteArray7, byteArray3);
assertNotSame(byteArray7, byteArray0);
assertNotSame(byteArray7, byteArray6);
assertNotSame(byteArray7, byteArray4);
assertNotSame(byteArray8, byteArray2);
assertNotSame(byteArray8, byteArray5);
assertNotSame(byteArray8, byteArray4);
assertNotSame(byteArray8, byteArray1);
assertNotSame(byteArray8, byteArray3);
assertNotSame(byteArray8, byteArray6);
assertNotSame(byteArray8, byteArray7);
assertNotSame(byteArray8, byteArray0);

boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray8));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray8));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray7));
assertFalse(byteArray1.equals((Object)byteArray0));
assertTrue(boolean0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-77), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertEquals(8, byteArray0.length);
assertEquals(12, byteArray1.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray8);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray1, byteArray0);

boolean boolean1 = Base64.isBase64((byte) (-5));
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);

BigInteger bigInteger1 = BigInteger.ZERO;
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertNotNull(bigInteger1);
assertNotSame(bigInteger1, bigInteger0);

String string1 = bigInteger1.toString();
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(string1.equals((Object)string0));
assertEquals("0", string1);
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertNotNull(string1);
assertNotSame(bigInteger1, bigInteger0);

BigInteger bigInteger2 = bigInteger0.flipBit(63);
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertEquals((byte)1, bigInteger2.byteValue());
assertEquals((short)1, bigInteger2.shortValue());
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertNotNull(bigInteger2);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);

byte[] byteArray9 = Base64.encodeInteger(bigInteger2);
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(byteArray9.equals((Object)byteArray2));
assertFalse(byteArray9.equals((Object)byteArray5));
assertFalse(byteArray9.equals((Object)byteArray1));
assertFalse(byteArray9.equals((Object)byteArray3));
assertFalse(byteArray9.equals((Object)byteArray7));
assertFalse(byteArray9.equals((Object)byteArray0));
assertFalse(byteArray9.equals((Object)byteArray4));
assertFalse(byteArray9.equals((Object)byteArray8));
assertFalse(byteArray9.equals((Object)byteArray6));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertEquals((byte)1, bigInteger2.byteValue());
assertEquals((short)1, bigInteger2.shortValue());
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertNotNull(byteArray9);
assertEquals(12, byteArray9.length);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(byteArray9, byteArray2);
assertNotSame(byteArray9, byteArray5);
assertNotSame(byteArray9, byteArray1);
assertNotSame(byteArray9, byteArray3);
assertNotSame(byteArray9, byteArray7);
assertNotSame(byteArray9, byteArray0);
assertNotSame(byteArray9, byteArray4);
assertNotSame(byteArray9, byteArray8);
assertNotSame(byteArray9, byteArray6);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);

byte[] byteArray10 = Base64.encodeBase64URLSafe(byteArray4);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray8));
assertFalse(byteArray0.equals((Object)byteArray9));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray10.equals((Object)byteArray9));
assertFalse(byteArray10.equals((Object)byteArray6));
assertFalse(byteArray10.equals((Object)byteArray1));
assertFalse(byteArray10.equals((Object)byteArray7));
assertFalse(byteArray10.equals((Object)byteArray2));
assertFalse(byteArray10.equals((Object)byteArray0));
assertFalse(byteArray10.equals((Object)byteArray4));
assertFalse(byteArray10.equals((Object)byteArray8));
assertFalse(byteArray10.equals((Object)byteArray3));
assertFalse(byteArray10.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray8));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray9));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray7));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray7));
assertFalse(byteArray4.equals((Object)byteArray8));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray6));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray9));
assertFalse(byteArray4.equals((Object)byteArray5));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)0, (byte) (-77), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertNotNull(byteArray10);
assertEquals(8, byteArray0.length);
assertEquals(22, byteArray10.length);
assertEquals(12, byteArray3.length);
assertEquals(16, byteArray4.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray10);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray9);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray10, byteArray9);
assertNotSame(byteArray10, byteArray6);
assertNotSame(byteArray10, byteArray1);
assertNotSame(byteArray10, byteArray7);
assertNotSame(byteArray10, byteArray2);
assertNotSame(byteArray10, byteArray0);
assertNotSame(byteArray10, byteArray4);
assertNotSame(byteArray10, byteArray8);
assertNotSame(byteArray10, byteArray3);
assertNotSame(byteArray10, byteArray5);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray8);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray9);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray10);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray7);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray4, byteArray7);
assertNotSame(byteArray4, byteArray8);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray6);
assertNotSame(byteArray4, byteArray10);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray9);
assertNotSame(byteArray4, byteArray5);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);

byte[] byteArray11 = Base64.toIntegerBytes(bigInteger1);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(byteArray11.equals((Object)byteArray4));
assertFalse(byteArray11.equals((Object)byteArray5));
assertFalse(byteArray11.equals((Object)byteArray7));
assertFalse(byteArray11.equals((Object)byteArray2));
assertFalse(byteArray11.equals((Object)byteArray10));
assertFalse(byteArray11.equals((Object)byteArray8));
assertFalse(byteArray11.equals((Object)byteArray9));
assertFalse(byteArray11.equals((Object)byteArray0));
assertFalse(byteArray11.equals((Object)byteArray6));
assertFalse(byteArray11.equals((Object)byteArray1));
assertFalse(byteArray11.equals((Object)byteArray3));
assertArrayEquals(new byte[] {}, byteArray11);
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertNotNull(byteArray11);
assertEquals(0, byteArray11.length);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(byteArray11, byteArray4);
assertNotSame(byteArray11, byteArray5);
assertNotSame(byteArray11, byteArray7);
assertNotSame(byteArray11, byteArray2);
assertNotSame(byteArray11, byteArray10);
assertNotSame(byteArray11, byteArray8);
assertNotSame(byteArray11, byteArray9);
assertNotSame(byteArray11, byteArray0);
assertNotSame(byteArray11, byteArray6);
assertNotSame(byteArray11, byteArray1);
assertNotSame(byteArray11, byteArray3);

byte[] byteArray12 = Base64.encodeBase64(byteArray3, true, true, 1070);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray10));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray11));
assertFalse(byteArray0.equals((Object)byteArray8));
assertFalse(byteArray0.equals((Object)byteArray9));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray8));
assertFalse(byteArray3.equals((Object)byteArray11));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray9));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray10));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray7));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray12.equals((Object)byteArray7));
assertFalse(byteArray12.equals((Object)byteArray3));
assertFalse(byteArray12.equals((Object)byteArray1));
assertFalse(byteArray12.equals((Object)byteArray8));
assertFalse(byteArray12.equals((Object)byteArray5));
assertFalse(byteArray12.equals((Object)byteArray9));
assertFalse(byteArray12.equals((Object)byteArray11));
assertFalse(byteArray12.equals((Object)byteArray2));
assertFalse(byteArray12.equals((Object)byteArray10));
assertFalse(byteArray12.equals((Object)byteArray0));
assertFalse(byteArray12.equals((Object)byteArray6));
assertFalse(byteArray12.equals((Object)byteArray4));
assertArrayEquals(new byte[] {(byte)0, (byte) (-77), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertNotNull(byteArray12);
assertEquals(8, byteArray0.length);
assertEquals(12, byteArray3.length);
assertEquals(18, byteArray12.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray10);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray11);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray9);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray12);
assertNotSame(byteArray3, byteArray8);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray12);
assertNotSame(byteArray3, byteArray11);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray9);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray10);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray7);
assertNotSame(byteArray12, byteArray7);
assertNotSame(byteArray12, byteArray3);
assertNotSame(byteArray12, byteArray1);
assertNotSame(byteArray12, byteArray8);
assertNotSame(byteArray12, byteArray5);
assertNotSame(byteArray12, byteArray9);
assertNotSame(byteArray12, byteArray11);
assertNotSame(byteArray12, byteArray2);
assertNotSame(byteArray12, byteArray10);
assertNotSame(byteArray12, byteArray0);
assertNotSame(byteArray12, byteArray6);
assertNotSame(byteArray12, byteArray4);


[MASTER] 03:42:18.981 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<-112> but was:<13>
[MASTER] 03:42:18.990 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.TEN;
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertNotNull(bigInteger0);

byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertNotNull(byteArray0);
assertEquals(4, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray1);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertNotNull(byteArray1);
assertEquals(4, byteArray0.length);
assertEquals(10, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

Base64 base64_0 = new Base64((-1));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);

byte[] byteArray2 = base64_0.decode("@N(.`>t+-\")c ");
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)54, (byte) (-33), (byte) (-66)}, byteArray2);
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray2);
assertEquals(3, byteArray2.length);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

base64_0.encode(byteArray2, 1236, (-1));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)54, (byte) (-33), (byte) (-66)}, byteArray2);
assertFalse(base64_0.isUrlSafe());
assertEquals(3, byteArray2.length);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

BigInteger bigInteger1 = BigInteger.ZERO;
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertNotNull(bigInteger1);
assertNotSame(bigInteger1, bigInteger0);

BigInteger bigInteger2 = bigInteger1.subtract(bigInteger0);
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((byte) (-10), bigInteger2.byteValue());
assertEquals((short) (-10), bigInteger2.shortValue());
assertNotNull(bigInteger2);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);

boolean boolean0 = Base64.isBase64((byte)0);
assertFalse(boolean0);

BigInteger bigInteger3 = new BigInteger(byteArray1);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray1);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger3.byteValue());
assertEquals((short) (-28672), bigInteger3.shortValue());
assertNotNull(bigInteger3);
assertEquals(4, byteArray0.length);
assertEquals(10, byteArray1.length);

int int0 = bigInteger0.intValue();
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger3));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertEquals(10, int0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger1);

byte[] byteArray3 = Base64.decodeBase64("");
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertArrayEquals(new byte[] {}, byteArray3);
assertNotNull(byteArray3);
assertEquals(0, byteArray3.length);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);

byte[] byteArray4 = Base64.encodeInteger(bigInteger3);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger3));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray1);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger3.byteValue());
assertEquals((short) (-28672), bigInteger3.shortValue());
assertNotNull(byteArray4);
assertEquals(4, byteArray0.length);
assertEquals(10, byteArray1.length);
assertEquals(16, byteArray4.length);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(bigInteger3, bigInteger1);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray0);

int int1 = base64_0.avail();
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(int1 == int0);
assertEquals(0, int1);
assertFalse(base64_0.isUrlSafe());

boolean boolean1 = Base64.isBase64("@N(.`>t+-\")c ");
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

byte[] byteArray5 = base64_0.encode(byteArray3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray0));
assertArrayEquals(new byte[] {}, byteArray3);
assertArrayEquals(new byte[] {}, byteArray5);
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray5);
assertEquals(0, byteArray3.length);
assertEquals(0, byteArray5.length);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray4);
assertSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray0);

byte[] byteArray6 = new byte[8];
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray0));

byteArray6[0] = (byte)0;
byteArray6[1] = (byte)0;
byteArray6[2] = (byte)60;
byteArray6[3] = (byte)60;
byteArray6[4] = (byte) (-115);
byteArray6[5] = (byte)60;
byteArray6[6] = (byte)80;
byteArray6[7] = (byte)0;
boolean boolean2 = Base64.isBase64(byteArray6);
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)60, (byte)60, (byte) (-115), (byte)60, (byte)80, (byte)0}, byteArray6);
assertEquals(8, byteArray6.length);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray0);

base64_0.encode(byteArray0, (int) (byte)80, (int) (byte)60);

[MASTER] 03:42:19.235 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [7]; expected:<-112> but was:<13>
[MASTER] 03:42:19.240 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(false);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);

byte[] byteArray0 = new byte[18];
byteArray0[0] = (byte)9;
base64_0.decode(byteArray0, (int) (byte)9, (int) (byte)9);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals(18, byteArray0.length);

boolean boolean0 = Base64.isBase64((byte)9);
assertFalse(boolean0);

BigInteger bigInteger0 = new BigInteger(byteArray0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertNotNull(bigInteger0);
assertEquals(18, byteArray0.length);

int int0 = bigInteger0.intValue();
assertEquals(0, int0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals(18, byteArray0.length);

byte[] byteArray1 = Base64.decodeBase64("");
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {}, byteArray1);
assertNotNull(byteArray1);
assertEquals(0, byteArray1.length);
assertNotSame(byteArray1, byteArray0);

byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertNotNull(byteArray2);
assertEquals(18, byteArray0.length);
assertEquals(24, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);

byte[] byteArray3 = new byte[5];
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));

byteArray3[0] = (byte)9;
byteArray3[1] = (byte)9;
byteArray3[2] = (byte)9;
byteArray3[3] = (byte)9;
byteArray3[4] = (byte)9;
Base64 base64_1 = new Base64((-493), byteArray3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(base64_1.equals((Object)base64_0));
assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9, (byte)9}, byteArray3);
assertFalse(base64_1.isUrlSafe());
assertNotNull(base64_1);
assertEquals(5, byteArray3.length);

Base64 base64_2 = new Base64(115, byteArray1, true);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_2.equals((Object)base64_0));
assertFalse(base64_2.equals((Object)base64_1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertArrayEquals(new byte[] {}, byteArray1);
assertTrue(base64_2.isUrlSafe());
assertNotNull(base64_2);
assertEquals(0, byteArray1.length);

byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, true);
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)67, (byte)81, (byte)107, (byte)74, (byte)67, (byte)81, (byte)107, (byte) (-112), (byte)0}, byteArray4);
assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9, (byte)9}, byteArray3);
assertNotNull(byteArray4);
assertEquals(9, byteArray4.length);
assertEquals(5, byteArray3.length);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);

int int1 = base64_2.avail();
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_2.equals((Object)base64_0));
assertFalse(base64_2.equals((Object)base64_1));
assertTrue(int1 == int0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray2));
assertEquals(0, int1);
assertArrayEquals(new byte[] {}, byteArray1);
assertTrue(base64_2.isUrlSafe());
assertEquals(0, byteArray1.length);
assertNotSame(base64_2, base64_0);
assertNotSame(base64_2, base64_1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray2);

boolean boolean1 = Base64.isBase64("");
assertFalse(boolean1 == boolean0);
assertTrue(boolean1);

byte[] byteArray5 = base64_0.encode(byteArray3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(base64_0.equals((Object)base64_2));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)67, (byte)81, (byte)107, (byte)74, (byte)67, (byte)81, (byte)107, (byte)61, (byte) (-112), (byte)0}, byteArray5);
assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9, (byte)9}, byteArray3);
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray5);
assertEquals(10, byteArray5.length);
assertEquals(5, byteArray3.length);
assertNotSame(base64_0, base64_1);
assertNotSame(base64_0, base64_2);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray5);

boolean boolean2 = Base64.isBase64(byteArray3);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray5));
assertTrue(boolean2);
assertArrayEquals(new byte[] {(byte)9, (byte)9, (byte)9, (byte)9, (byte)9}, byteArray3);
assertEquals(5, byteArray3.length);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray5);

int int2 = base64_2.avail();
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_2.equals((Object)base64_0));
assertFalse(base64_2.equals((Object)base64_1));
assertTrue(int2 == int1);
assertTrue(int2 == int0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray2));
assertEquals(0, int2);
assertArrayEquals(new byte[] {}, byteArray1);
assertTrue(base64_2.isUrlSafe());
assertEquals(0, byteArray1.length);
assertNotSame(base64_2, base64_0);
assertNotSame(base64_2, base64_1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray2);


[MASTER] 03:42:19.537 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<-112> but was:<13>
[MASTER] 03:42:19.541 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("jA({Yp@t]W");
assertArrayEquals(new byte[] {(byte) (-116), (byte)6, (byte)41, (byte) (-75)}, byteArray0);
assertNotNull(byteArray0);
assertEquals(4, byteArray0.length);

boolean boolean0 = Base64.isBase64("jA({Yp@t]W");
assertFalse(boolean0);

Base64 base64_0 = new Base64((byte)23);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);

String string0 = Base64.encodeBase64URLSafeString(byteArray0);
assertEquals("jAYptQ", string0);
assertArrayEquals(new byte[] {(byte) (-116), (byte)6, (byte)41, (byte) (-75)}, byteArray0);
assertNotNull(string0);
assertEquals(4, byteArray0.length);

byte[] byteArray1 = new byte[8];
assertFalse(byteArray1.equals((Object)byteArray0));

byteArray1[0] = (byte)23;
byteArray1[1] = (byte)23;
byteArray1[2] = (byte)23;
byteArray1[3] = (byte)23;
byteArray1[4] = (byte)23;
byteArray1[5] = (byte)23;
byteArray1[6] = (byte)32;
byteArray1[7] = (byte)23;
byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)23, (byte)23, (byte)23, (byte)23, (byte)23, (byte)23, (byte)32, (byte)23}, byteArray1);
assertArrayEquals(new byte[] {(byte)23, (byte)23, (byte)23, (byte)23, (byte)23, (byte)23, (byte)23}, byteArray2);
assertNotNull(byteArray2);
assertEquals(8, byteArray1.length);
assertEquals(7, byteArray2.length);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);

byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte) (-116), (byte)6, (byte)41, (byte) (-75)}, byteArray0);
assertArrayEquals(new byte[] {(byte)106, (byte)65, (byte)89, (byte)112, (byte)116, (byte)81, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray3);
assertNotNull(byteArray3);
assertEquals(4, byteArray0.length);
assertEquals(10, byteArray3.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);

byte[] byteArray4 = new byte[8];
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));

byteArray4[0] = (byte)36;
byteArray4[1] = (byte)32;
byteArray4[2] = (byte)23;
byteArray4[3] = (byte)23;
byteArray4[4] = (byte)55;
byteArray4[5] = (byte)32;
byteArray4[6] = (byte)32;
byteArray4[7] = (byte)23;
byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertArrayEquals(new byte[] {(byte)36, (byte)23, (byte)23, (byte)55, (byte)23}, byteArray5);
assertArrayEquals(new byte[] {(byte)36, (byte)32, (byte)23, (byte)23, (byte)55, (byte)32, (byte)32, (byte)23}, byteArray4);
assertNotNull(byteArray5);
assertEquals(5, byteArray5.length);
assertEquals(8, byteArray4.length);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray5);
assertNotSame(byteArray4, byteArray2);

byte[] byteArray6 = Base64.encodeBase64(byteArray5, true, true, (int) (byte)32);
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray5));
assertFalse(byteArray4.equals((Object)byteArray2));
assertArrayEquals(new byte[] {(byte)36, (byte)23, (byte)23, (byte)55, (byte)23}, byteArray5);
assertArrayEquals(new byte[] {(byte)74, (byte)66, (byte)99, (byte)88, (byte)78, (byte)120, (byte)99, (byte) (-112), (byte)0}, byteArray6);
assertArrayEquals(new byte[] {(byte)36, (byte)32, (byte)23, (byte)23, (byte)55, (byte)32, (byte)32, (byte)23}, byteArray4);
assertNotNull(byteArray6);
assertEquals(5, byteArray5.length);
assertEquals(9, byteArray6.length);
assertEquals(8, byteArray4.length);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray6);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray5);
assertNotSame(byteArray4, byteArray2);


[MASTER] 03:42:21.004 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<-112> but was:<13>
[MASTER] 03:42:21.011 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Random.setNextRandom(17);
byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte)60;
Base64 base64_0 = new Base64(17, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(1, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray1);
assertNotNull(byteArray1);
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertNotNull(bigInteger0);
assertEquals(1, byteArray0.length);
assertNotSame(byteArray0, byteArray1);

byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65}, byteArray2);
assertNotNull(byteArray2);
assertEquals(1, byteArray0.length);
assertEquals(2, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);

int int0 = base64_0.readResults(byteArray2, 17, 55);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertEquals(0, int0);
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65}, byteArray2);
assertFalse(base64_0.isUrlSafe());
assertEquals(1, byteArray0.length);
assertEquals(2, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);

String string0 = base64_0.encodeToString(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals("UEE9PZAA<", string0);
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray1);
assertFalse(base64_0.isUrlSafe());
assertNotNull(string0);
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);

boolean boolean0 = Base64.isBase64("");
assertTrue(boolean0);

String string1 = Base64.encodeBase64URLSafeString(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(string1.equals((Object)string0));
assertEquals("UEE", string1);
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65}, byteArray2);
assertNotNull(string1);
assertEquals(1, byteArray0.length);
assertEquals(2, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertTrue(bigInteger1.equals((Object)bigInteger0));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertNotNull(bigInteger1);
assertEquals(1, byteArray0.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger1, bigInteger0);

boolean boolean1 = Base64.isBase64("UEE9PQ0K<");
assertFalse(boolean1 == boolean0);
assertFalse(boolean1);

int int1 = base64_0.readResults(byteArray0, 55, 689);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(int1 == int0);
assertEquals((-1), int1);
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(1, byteArray0.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);

byte[] byteArray3 = Base64.encodeBase64(byteArray1, true);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray1);
assertArrayEquals(new byte[] {(byte)85, (byte)69, (byte)69, (byte)57, (byte)80, (byte)90, (byte)65, (byte)65, (byte) (-112), (byte)0}, byteArray3);
assertNotNull(byteArray3);
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(10, byteArray3.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);

Base64 base64_1 = new Base64(3185);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(base64_1.isUrlSafe());
assertNotNull(base64_1);

base64_1.decode(byteArray1, 0, 3185);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(base64_1.equals((Object)base64_0));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray1);
assertFalse(base64_1.isUrlSafe());
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(base64_1, base64_0);

byte[] byteArray4 = base64_0.decode(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertArrayEquals(new byte[] {(byte)60}, byteArray4);
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray1);
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray4);
assertEquals(1, byteArray4.length);
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(base64_0, base64_1);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);

base64_1.decode(byteArray2, 0, 2636);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(base64_1.equals((Object)base64_0));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65}, byteArray2);
assertFalse(base64_1.isUrlSafe());
assertEquals(1, byteArray0.length);
assertEquals(2, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray4);
assertNotSame(base64_1, base64_0);

byte[] byteArray5 = base64_0.decode(byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(base64_0.equals((Object)base64_1));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray5);
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray5);
assertEquals(1, byteArray0.length);
assertEquals(0, byteArray5.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray4);
assertNotSame(base64_0, base64_1);

byte[] byteArray6 = base64_0.encode(byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)61, (byte)61, (byte)60}, byteArray6);
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray6);
assertEquals(1, byteArray0.length);
assertEquals(5, byteArray6.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(base64_0, base64_1);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray0);


[MASTER] 03:42:21.321 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<-112> but was:<13>
[MASTER] 03:42:21.328 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Random.setNextRandom(17);
byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte)60;
Base64 base64_0 = new Base64(17, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(1, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray1);
assertNotNull(byteArray1);
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertNotNull(bigInteger0);
assertEquals(1, byteArray0.length);
assertNotSame(byteArray0, byteArray1);

byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65}, byteArray2);
assertNotNull(byteArray2);
assertEquals(1, byteArray0.length);
assertEquals(2, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

int int0 = base64_0.readResults(byteArray2, 17, 55);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertEquals(0, int0);
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65}, byteArray2);
assertFalse(base64_0.isUrlSafe());
assertEquals(1, byteArray0.length);
assertEquals(2, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

Base64 base64_1 = new Base64(0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(base64_1.isUrlSafe());
assertNotNull(base64_1);

String string0 = base64_1.encodeToString(byteArray0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(base64_1.equals((Object)base64_0));
assertEquals("PA==", string0);
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertFalse(base64_1.isUrlSafe());
assertNotNull(string0);
assertEquals(1, byteArray0.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(base64_1, base64_0);

boolean boolean0 = Base64.isBase64("UTF-16");
assertTrue(boolean0);

String string1 = Base64.encodeBase64URLSafeString(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(string1.equals((Object)string0));
assertEquals("PA", string1);
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertNotNull(string1);
assertEquals(1, byteArray0.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray1);
assertEquals((byte)60, bigInteger1.byteValue());
assertEquals((short)60, bigInteger1.shortValue());
assertNotNull(bigInteger1);
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(bigInteger1, bigInteger0);

boolean boolean1 = Base64.isBase64("UTF-16");
assertTrue(boolean1 == boolean0);
assertTrue(boolean1);

int int1 = base64_1.readResults(byteArray0, 1, (byte)60);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(int1 == int0);
assertEquals((-1), int1);
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertFalse(base64_1.isUrlSafe());
assertEquals(1, byteArray0.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(base64_1, base64_0);

byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray3);
assertNotNull(byteArray3);
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray3.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);

base64_0.decode(byteArray3, 1, 17);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray3);
assertFalse(base64_0.isUrlSafe());
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray3.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(base64_0, base64_1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);

byte[] byteArray4 = base64_0.decode(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertArrayEquals(new byte[] {(byte)60}, byteArray4);
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray1);
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray4);
assertEquals(1, byteArray4.length);
assertEquals(1, byteArray0.length);
assertEquals(6, byteArray1.length);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(base64_0, base64_1);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);

base64_0.decode(byteArray0, 0, 0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(base64_0.equals((Object)base64_1));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(1, byteArray0.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(base64_0, base64_1);

byte[] byteArray5 = base64_0.decode(byteArray3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)60}, byteArray5);
assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)61, (byte)61, (byte) (-112), (byte)0}, byteArray3);
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray5);
assertEquals(1, byteArray0.length);
assertEquals(1, byteArray5.length);
assertEquals(6, byteArray3.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray1);
assertNotSame(base64_0, base64_1);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);

byte[] byteArray6 = base64_1.encode(byteArray2);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray5));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(base64_1.equals((Object)base64_0));
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)85, (byte)69, (byte)69, (byte)61}, byteArray6);
assertArrayEquals(new byte[] {(byte)80, (byte)65}, byteArray2);
assertFalse(base64_1.isUrlSafe());
assertNotNull(byteArray6);
assertEquals(1, byteArray0.length);
assertEquals(4, byteArray6.length);
assertEquals(2, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray2, byteArray6);
assertNotSame(byteArray2, byteArray4);
assertNotSame(base64_1, base64_0);

boolean boolean2 = Base64.isBase64(byteArray6);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray5));
assertFalse(byteArray2.equals((Object)byteArray6));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(base64_1.equals((Object)base64_0));
assertTrue(boolean2);
assertArrayEquals(new byte[] {(byte)60}, byteArray0);
assertArrayEquals(new byte[] {(byte)85, (byte)69, (byte)69, (byte)61}, byteArray6);
assertArrayEquals(new byte[] {(byte)80, (byte)65}, byteArray2);
assertFalse(base64_1.isUrlSafe());
assertEquals(1, byteArray0.length);
assertEquals(4, byteArray6.length);
assertEquals(2, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray2, byteArray6);
assertNotSame(byteArray2, byteArray4);
assertNotSame(base64_1, base64_0);

boolean boolean3 = Base64.isBase64((byte)1);
assertFalse(boolean3 == boolean1);
assertFalse(boolean3 == boolean0);
assertFalse(boolean3 == boolean2);
assertFalse(boolean3);


[MASTER] 03:42:22.815 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...RkJRVUZCUVVGQlFVRkJQ[WkFB]> but was:<...RkJRVUZCUVVGQlFVRkJQ[UTBL]>
[MASTER] 03:42:22.838 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Random.setNextRandom(17);
byte[] byteArray0 = new byte[38];
Base64 base64_0 = new Base64(17, byteArray0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(38, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertNotNull(bigInteger0);
assertEquals(38, byteArray0.length);
assertNotSame(byteArray0, byteArray1);

byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(byteArray2);
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertEquals(72, byteArray2.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

String string0 = Base64.encodeBase64URLSafeString(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertEquals("UVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJQWkFB", string0);
assertNotNull(string0);
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertEquals(72, byteArray2.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

int int0 = base64_0.readResults(byteArray1, (-1103), (-1));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertEquals(0, int0);
assertFalse(base64_0.isUrlSafe());
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);

String string1 = base64_0.encodeToString(byteArray0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(string1.equals((Object)string0));
assertEquals("AAAAAAAAAAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAAAAAAAAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAAAAAAAAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAA=\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
assertFalse(base64_0.isUrlSafe());
assertNotNull(string1);
assertEquals(38, byteArray0.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);

boolean boolean0 = Base64.isBase64((byte)60);
assertFalse(boolean0);

String string2 = base64_0.encodeToString(byteArray1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(string2.equals((Object)string0));
assertFalse(string2.equals((Object)string1));
assertEquals("QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBPZAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
assertFalse(base64_0.isUrlSafe());
assertNotNull(string2);
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);

String string3 = Base64.encodeBase64URLSafeString(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(string3.equals((Object)string1));
assertTrue(string3.equals((Object)string0));
assertFalse(string3.equals((Object)string2));
assertEquals("UVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJQWkFB", string3);
assertNotNull(string3);
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertEquals(72, byteArray2.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

String string4 = Base64.encodeBase64URLSafeString(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(string4.equals((Object)string2));
assertFalse(string4.equals((Object)string1));
assertFalse(string4.equals((Object)string3));
assertFalse(string4.equals((Object)string0));
assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string4);
assertNotNull(string4);
assertEquals(38, byteArray0.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertTrue(bigInteger1.equals((Object)bigInteger0));
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertNotNull(bigInteger1);
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(bigInteger1, bigInteger0);

boolean boolean1 = Base64.isBase64("UVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJQUTBL");
assertFalse(boolean1 == boolean0);
assertTrue(boolean1);

byte[] byteArray3 = base64_0.encode(byteArray2);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray3);
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertEquals(72, byteArray2.length);
assertEquals(324, byteArray3.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);

base64_0.encode(byteArray1, 0, (-494));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(base64_0.isUrlSafe());
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);

byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertNotNull(byteArray4);
assertEquals(54, byteArray4.length);
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);

byte[] byteArray5 = new byte[7];
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray4));

byteArray5[0] = (byte)60;
byteArray5[1] = (byte)60;
byteArray5[2] = (byte)60;
byteArray5[3] = (byte)60;
byteArray5[4] = (byte)60;
byteArray5[5] = (byte)60;
byteArray5[6] = (byte)60;
byte[] byteArray6 = base64_0.decode(byteArray5);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)60, (byte)60, (byte)60, (byte)60, (byte)60}, byteArray5);
assertArrayEquals(new byte[] {}, byteArray6);
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray6);
assertEquals(38, byteArray0.length);
assertEquals(7, byteArray5.length);
assertEquals(0, byteArray6.length);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray1);

byte[] byteArray7 = base64_0.encode(byteArray3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray6));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray5));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray7.equals((Object)byteArray1));
assertFalse(byteArray7.equals((Object)byteArray4));
assertFalse(byteArray7.equals((Object)byteArray3));
assertFalse(byteArray7.equals((Object)byteArray5));
assertFalse(byteArray7.equals((Object)byteArray6));
assertFalse(byteArray7.equals((Object)byteArray2));
assertFalse(byteArray7.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray7);
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertEquals(72, byteArray2.length);
assertEquals(1458, byteArray7.length);
assertEquals(324, byteArray3.length);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray2, byteArray6);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray7);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray7, byteArray1);
assertNotSame(byteArray7, byteArray4);
assertNotSame(byteArray7, byteArray3);
assertNotSame(byteArray7, byteArray5);
assertNotSame(byteArray7, byteArray6);
assertNotSame(byteArray7, byteArray2);
assertNotSame(byteArray7, byteArray0);
assertNotSame(byteArray3, byteArray7);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray0);


[MASTER] 03:42:23.394 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<-112> but was:<13>
[MASTER] 03:42:23.396 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Random.setNextRandom(19);
byte[] byteArray0 = new byte[38];
Base64 base64_0 = new Base64(19, byteArray0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(38, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

byte[] byteArray2 = Base64.decodeBase64("0d)Sozc2\"m[8{");
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte) (-47), (byte) (-44), (byte) (-88), (byte) (-51), (byte) (-51), (byte) (-90)}, byteArray2);
assertNotNull(byteArray2);
assertEquals(6, byteArray2.length);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);

byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertNotNull(byteArray3);
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertEquals(72, byteArray3.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);

Base64 base64_1 = new Base64();
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(base64_1.isUrlSafe());
assertNotNull(base64_1);

byte[] byteArray4 = Base64.encodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray2));
assertNotNull(byteArray4);
assertEquals(38, byteArray0.length);
assertEquals(54, byteArray1.length);
assertEquals(72, byteArray4.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray2);

int int0 = base64_0.avail();
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(base64_0.equals((Object)base64_1));
assertEquals(0, int0);
assertFalse(base64_0.isUrlSafe());
assertEquals(38, byteArray0.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(base64_0, base64_1);

byte[] byteArray5 = Base64.CHUNK_SEPARATOR;
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray4));
assertArrayEquals(new byte[] {(byte) (-112), (byte)0}, byteArray5);
assertNotNull(byteArray5);
assertEquals(2, byteArray5.length);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray4);

base64_0.decode(byteArray2, 0, 76);

[MASTER] 03:42:23.715 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<AmT4[? ]> but was:<AmT4[
]>
[MASTER] 03:42:23.717 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[0];
Base64 base64_0 = new Base64((-1), byteArray0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {}, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(0, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertArrayEquals(new byte[] {}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray1);
assertNotNull(byteArray1);
assertEquals(0, byteArray0.length);
assertEquals(0, byteArray1.length);
assertSame(byteArray0, byteArray1);
assertSame(byteArray1, byteArray0);

byte[] byteArray2 = Base64.decodeBase64("`");
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertArrayEquals(new byte[] {}, byteArray2);
assertNotNull(byteArray2);
assertEquals(0, byteArray2.length);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertArrayEquals(new byte[] {}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray1);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertNotNull(bigInteger0);
assertEquals(0, byteArray0.length);
assertEquals(0, byteArray1.length);
assertSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertSame(byteArray1, byteArray0);

byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertArrayEquals(new byte[] {}, byteArray2);
assertArrayEquals(new byte[] {}, byteArray3);
assertNotNull(byteArray3);
assertEquals(0, byteArray2.length);
assertEquals(0, byteArray3.length);
assertSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);

String string0 = Base64.encodeBase64URLSafeString(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertEquals("", string0);
assertArrayEquals(new byte[] {}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray1);
assertNotNull(string0);
assertEquals(0, byteArray0.length);
assertEquals(0, byteArray1.length);
assertSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);

int int0 = base64_0.readResults(byteArray3, 22, 82);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertEquals(0, int0);
assertArrayEquals(new byte[] {}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray2);
assertArrayEquals(new byte[] {}, byteArray3);
assertFalse(base64_0.isUrlSafe());
assertEquals(0, byteArray0.length);
assertEquals(0, byteArray2.length);
assertEquals(0, byteArray3.length);
assertSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);

Base64 base64_1 = new Base64(false);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(base64_1.isUrlSafe());
assertNotNull(base64_1);

byte[] byteArray4 = new byte[3];
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));

byteArray4[0] = (byte)2;
byteArray4[1] = (byte)100;
byteArray4[2] = (byte) (-8);
String string1 = base64_1.encodeToString(byteArray4);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(string1.equals((Object)string0));
assertEquals("AmT4\uFFFD\u0000", string1);
assertArrayEquals(new byte[] {(byte)2, (byte)100, (byte) (-8)}, byteArray4);
assertFalse(base64_1.isUrlSafe());
assertNotNull(string1);
assertEquals(3, byteArray4.length);
assertNotSame(base64_1, base64_0);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);

base64_0.encodeToString(byteArray4);

[MASTER] 03:42:27.365 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...               QUFBP[ZAA]                    ...> but was:<...               QUFBP[Q0K]                    ...>
[MASTER] 03:42:27.600 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[56];
Base64 base64_0 = new Base64(17, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(56, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertNotNull(bigInteger0);
assertEquals(56, byteArray0.length);
assertNotSame(byteArray0, byteArray1);

String string0 = base64_0.encodeToString(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals("QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBPZAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
assertFalse(base64_0.isUrlSafe());
assertNotNull(string0);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertArrayEquals(new byte[] {}, byteArray2);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertNotNull(byteArray2);
assertEquals(56, byteArray0.length);
assertEquals(0, byteArray2.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

String string1 = base64_0.encodeToString(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertTrue(string1.equals((Object)string0));
assertEquals("QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBPZAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
assertFalse(base64_0.isUrlSafe());
assertNotNull(string1);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);

String string2 = Base64.encodeBase64URLSafeString(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(string2.equals((Object)string0));
assertFalse(string2.equals((Object)string1));
assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string2);
assertNotNull(string2);
assertEquals(56, byteArray0.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertTrue(bigInteger1.equals((Object)bigInteger0));
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertNotNull(bigInteger1);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(bigInteger1, bigInteger0);

byte[] byteArray3 = base64_0.encode(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray3);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(496, byteArray3.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);

base64_0.encode(byteArray0, 17, (-82));
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(base64_0.isUrlSafe());
assertEquals(56, byteArray0.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);

byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray4);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(496, byteArray3.length);
assertEquals(496, byteArray4.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);

String string3 = Base64.encodeBase64String(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(string3.equals((Object)string2));
assertFalse(string3.equals((Object)string0));
assertFalse(string3.equals((Object)string1));
assertEquals("QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPZAA", string3);
assertNotNull(string3);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);

byte[] byteArray5 = base64_0.encode(byteArray3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray5);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(496, byteArray3.length);
assertEquals(3016, byteArray5.length);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);

byte[] byteArray6 = base64_0.encode(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray6);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(496, byteArray6.length);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray1);

BigInteger bigInteger2 = Base64.decodeInteger(byteArray5);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray6));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(base64_0.isUrlSafe());
assertEquals((short)0, bigInteger2.shortValue());
assertEquals((byte)0, bigInteger2.byteValue());
assertNotNull(bigInteger2);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(496, byteArray3.length);
assertEquals(3016, byteArray5.length);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger1);

byte[] byteArray7 = base64_0.encode(byteArray5);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray7.equals((Object)byteArray0));
assertFalse(byteArray7.equals((Object)byteArray4));
assertFalse(byteArray7.equals((Object)byteArray1));
assertFalse(byteArray7.equals((Object)byteArray2));
assertFalse(byteArray7.equals((Object)byteArray3));
assertFalse(byteArray7.equals((Object)byteArray6));
assertFalse(byteArray7.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray6));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray7);
assertEquals(18136, byteArray7.length);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(496, byteArray3.length);
assertEquals(3016, byteArray5.length);
assertNotSame(byteArray7, byteArray0);
assertNotSame(byteArray7, byteArray4);
assertNotSame(byteArray7, byteArray1);
assertNotSame(byteArray7, byteArray2);
assertNotSame(byteArray7, byteArray3);
assertNotSame(byteArray7, byteArray6);
assertNotSame(byteArray7, byteArray5);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray7);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray5, byteArray7);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);

String string4 = Base64.encodeBase64String(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(string4.equals((Object)string1));
assertFalse(string4.equals((Object)string2));
assertFalse(string4.equals((Object)string0));
assertFalse(string4.equals((Object)string3));
assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=", string4);
assertNotNull(string4);
assertEquals(56, byteArray0.length);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray2);

byte[] byteArray8 = base64_0.encode(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray8.equals((Object)byteArray2));
assertFalse(byteArray8.equals((Object)byteArray6));
assertFalse(byteArray8.equals((Object)byteArray7));
assertFalse(byteArray8.equals((Object)byteArray0));
assertFalse(byteArray8.equals((Object)byteArray3));
assertFalse(byteArray8.equals((Object)byteArray1));
assertFalse(byteArray8.equals((Object)byteArray5));
assertFalse(byteArray8.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray7));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray8);
assertEquals(56, byteArray0.length);
assertEquals(496, byteArray8.length);
assertEquals(78, byteArray1.length);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray8, byteArray2);
assertNotSame(byteArray8, byteArray6);
assertNotSame(byteArray8, byteArray7);
assertNotSame(byteArray8, byteArray0);
assertNotSame(byteArray8, byteArray3);
assertNotSame(byteArray8, byteArray1);
assertNotSame(byteArray8, byteArray5);
assertNotSame(byteArray8, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray8);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray5);

BigInteger bigInteger3 = Base64.decodeInteger(byteArray5);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray8));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray7));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray8));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray5));
assertTrue(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray7));
assertFalse(byteArray3.equals((Object)byteArray8));
assertFalse(byteArray5.equals((Object)byteArray6));
assertFalse(byteArray5.equals((Object)byteArray7));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray8));
assertFalse(base64_0.isUrlSafe());
assertEquals((short)0, bigInteger3.shortValue());
assertEquals((byte)0, bigInteger3.byteValue());
assertNotNull(bigInteger3);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(496, byteArray3.length);
assertEquals(3016, byteArray5.length);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray8);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray5);
assertNotSame(bigInteger3, bigInteger1);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray7);
assertNotSame(byteArray3, byteArray8);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray5, byteArray7);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray8);

base64_0.decode(byteArray2, 3035, 17);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray8));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray2));
assertTrue(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger0.equals((Object)bigInteger3));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray7));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray6));
assertFalse(byteArray2.equals((Object)byteArray8));
assertFalse(byteArray2.equals((Object)byteArray5));
assertArrayEquals(new byte[] {}, byteArray2);
assertFalse(base64_0.isUrlSafe());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals(56, byteArray0.length);
assertEquals(0, byteArray2.length);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray7);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray6);
assertNotSame(byteArray2, byteArray8);
assertNotSame(byteArray2, byteArray5);

byte[] byteArray9 = base64_0.decode(byteArray5);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray8));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray7));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray8));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray9.equals((Object)byteArray0));
assertFalse(byteArray9.equals((Object)byteArray3));
assertFalse(byteArray9.equals((Object)byteArray6));
assertFalse(byteArray9.equals((Object)byteArray5));
assertFalse(byteArray9.equals((Object)byteArray4));
assertFalse(byteArray9.equals((Object)byteArray2));
assertFalse(byteArray9.equals((Object)byteArray1));
assertFalse(byteArray9.equals((Object)byteArray7));
assertFalse(byteArray9.equals((Object)byteArray8));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray7));
assertFalse(byteArray3.equals((Object)byteArray8));
assertFalse(byteArray5.equals((Object)byteArray6));
assertFalse(byteArray5.equals((Object)byteArray7));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray8));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray9);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(496, byteArray9.length);
assertEquals(496, byteArray3.length);
assertEquals(3016, byteArray5.length);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray9);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray8);
assertNotSame(byteArray1, byteArray9);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray9, byteArray0);
assertNotSame(byteArray9, byteArray3);
assertNotSame(byteArray9, byteArray6);
assertNotSame(byteArray9, byteArray5);
assertNotSame(byteArray9, byteArray4);
assertNotSame(byteArray9, byteArray2);
assertNotSame(byteArray9, byteArray1);
assertNotSame(byteArray9, byteArray7);
assertNotSame(byteArray9, byteArray8);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray7);
assertNotSame(byteArray3, byteArray8);
assertNotSame(byteArray3, byteArray9);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray5, byteArray7);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray9);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray8);


[MASTER] 03:42:30.663 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...               QUFBP[ZAA]                    ...> but was:<...               QUFBP[Q0K]                    ...>
[MASTER] 03:42:30.678 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 17;
byte[] byteArray0 = new byte[56];
Base64 base64_0 = new Base64(17, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(56, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertNotNull(bigInteger0);
assertEquals(56, byteArray0.length);
assertNotSame(byteArray0, byteArray1);

String string0 = base64_0.encodeToString(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals("QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBPZAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
assertFalse(base64_0.isUrlSafe());
assertNotNull(string0);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertArrayEquals(new byte[] {}, byteArray2);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertNotNull(byteArray2);
assertEquals(56, byteArray0.length);
assertEquals(0, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

String string1 = base64_0.encodeToString(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertTrue(string1.equals((Object)string0));
assertEquals("QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBPZAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
assertFalse(base64_0.isUrlSafe());
assertNotNull(string1);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);

String string2 = Base64.encodeBase64URLSafeString(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(string2.equals((Object)string1));
assertFalse(string2.equals((Object)string0));
assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string2);
assertNotNull(string2);
assertEquals(56, byteArray0.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertTrue(bigInteger1.equals((Object)bigInteger0));
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertNotNull(bigInteger1);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(bigInteger1, bigInteger0);

byte[] byteArray3 = base64_0.encode(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray3);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(496, byteArray3.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);

int int1 = (-82);
base64_0.encode(byteArray0, 17, (-82));
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(base64_0.isUrlSafe());
assertEquals(56, byteArray0.length);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);

byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray4);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(496, byteArray3.length);
assertEquals(496, byteArray4.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray2);

String string3 = Base64.encodeBase64String(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(string3.equals((Object)string1));
assertFalse(string3.equals((Object)string2));
assertFalse(string3.equals((Object)string0));
assertEquals("QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPZAA", string3);
assertNotNull(string3);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);

byte[] byteArray5 = base64_0.encode(byteArray3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray5);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(496, byteArray3.length);
assertEquals(3016, byteArray5.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray0);

byte[] byteArray6 = base64_0.encode(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray6);
assertEquals(496, byteArray6.length);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);

BigInteger bigInteger2 = Base64.decodeInteger(byteArray5);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray6));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray0));
assertEquals((byte)0, bigInteger2.byteValue());
assertEquals((short)0, bigInteger2.shortValue());
assertFalse(base64_0.isUrlSafe());
assertNotNull(bigInteger2);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(496, byteArray3.length);
assertEquals(3016, byteArray5.length);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray0);

byte[] byteArray7 = base64_0.encode(byteArray5);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray7.equals((Object)byteArray6));
assertFalse(byteArray7.equals((Object)byteArray2));
assertFalse(byteArray7.equals((Object)byteArray3));
assertFalse(byteArray7.equals((Object)byteArray1));
assertFalse(byteArray7.equals((Object)byteArray5));
assertFalse(byteArray7.equals((Object)byteArray4));
assertFalse(byteArray7.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray6));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray7);
assertEquals(56, byteArray0.length);
assertEquals(18136, byteArray7.length);
assertEquals(78, byteArray1.length);
assertEquals(496, byteArray3.length);
assertEquals(3016, byteArray5.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray7, byteArray6);
assertNotSame(byteArray7, byteArray2);
assertNotSame(byteArray7, byteArray3);
assertNotSame(byteArray7, byteArray1);
assertNotSame(byteArray7, byteArray5);
assertNotSame(byteArray7, byteArray4);
assertNotSame(byteArray7, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray7);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray7);
assertNotSame(byteArray5, byteArray0);

Base64.encodeBase64String(byteArray4);
base64_0.encode(byteArray1);
Base64.decodeInteger(byteArray7);

[MASTER] 03:42:34.387 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...               QUFBQ[ZAAQUFBQZAA]                    ...> but was:<...               QUFBQ[Q0KQUFBQQ0K]                    ...>
[MASTER] 03:42:34.512 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[60];
Base64 base64_0 = new Base64(17, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(60, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertEquals(60, byteArray0.length);
assertEquals(84, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertNotNull(bigInteger0);
assertEquals(60, byteArray0.length);
assertNotSame(byteArray0, byteArray1);

String string0 = base64_0.encodeToString(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals("QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQZAAQUFBQZAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
assertFalse(base64_0.isUrlSafe());
assertNotNull(string0);
assertEquals(60, byteArray0.length);
assertEquals(84, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertArrayEquals(new byte[] {}, byteArray2);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertNotNull(byteArray2);
assertEquals(60, byteArray0.length);
assertEquals(0, byteArray2.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

String string1 = base64_0.encodeToString(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertTrue(string1.equals((Object)string0));
assertEquals("QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQZAAQUFBQZAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
assertFalse(base64_0.isUrlSafe());
assertNotNull(string1);
assertEquals(60, byteArray0.length);
assertEquals(84, byteArray1.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);

String string2 = Base64.encodeBase64URLSafeString(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(string2.equals((Object)string0));
assertFalse(string2.equals((Object)string1));
assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string2);
assertNotNull(string2);
assertEquals(60, byteArray0.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertTrue(bigInteger1.equals((Object)bigInteger0));
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertNotNull(bigInteger1);
assertEquals(60, byteArray0.length);
assertEquals(84, byteArray1.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(bigInteger1, bigInteger0);

byte[] byteArray3 = base64_0.encode(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray3);
assertEquals(60, byteArray0.length);
assertEquals(84, byteArray1.length);
assertEquals(532, byteArray3.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);

base64_0.encode(byteArray0, 17, (-82));
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(base64_0.isUrlSafe());
assertEquals(60, byteArray0.length);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);

byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray4);
assertEquals(60, byteArray0.length);
assertEquals(84, byteArray1.length);
assertEquals(532, byteArray3.length);
assertEquals(532, byteArray4.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);

String string3 = Base64.encodeBase64String(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(string3.equals((Object)string1));
assertFalse(string3.equals((Object)string0));
assertFalse(string3.equals((Object)string2));
assertEquals("QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQZAAQUFBQZAA", string3);
assertNotNull(string3);
assertEquals(60, byteArray0.length);
assertEquals(84, byteArray1.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);

byte[] byteArray5 = base64_0.encode(byteArray3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray5);
assertEquals(60, byteArray0.length);
assertEquals(84, byteArray1.length);
assertEquals(532, byteArray3.length);
assertEquals(3412, byteArray5.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray2);

byte[] byteArray6 = base64_0.encode(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray6);
assertEquals(60, byteArray0.length);
assertEquals(84, byteArray1.length);
assertEquals(532, byteArray6.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray3);

BigInteger bigInteger2 = Base64.decodeInteger(byteArray5);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray6));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(base64_0.isUrlSafe());
assertEquals((short)0, bigInteger2.shortValue());
assertEquals((byte)0, bigInteger2.byteValue());
assertNotNull(bigInteger2);
assertEquals(60, byteArray0.length);
assertEquals(84, byteArray1.length);
assertEquals(532, byteArray3.length);
assertEquals(3412, byteArray5.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray2);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);

byte[] byteArray7 = base64_0.encode(byteArray5);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray7.equals((Object)byteArray1));
assertFalse(byteArray7.equals((Object)byteArray5));
assertFalse(byteArray7.equals((Object)byteArray4));
assertFalse(byteArray7.equals((Object)byteArray2));
assertFalse(byteArray7.equals((Object)byteArray3));
assertFalse(byteArray7.equals((Object)byteArray6));
assertFalse(byteArray7.equals((Object)byteArray0));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray6));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray7);
assertEquals(21652, byteArray7.length);
assertEquals(60, byteArray0.length);
assertEquals(84, byteArray1.length);
assertEquals(532, byteArray3.length);
assertEquals(3412, byteArray5.length);
assertNotSame(byteArray7, byteArray1);
assertNotSame(byteArray7, byteArray5);
assertNotSame(byteArray7, byteArray4);
assertNotSame(byteArray7, byteArray2);
assertNotSame(byteArray7, byteArray3);
assertNotSame(byteArray7, byteArray6);
assertNotSame(byteArray7, byteArray0);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray3, byteArray7);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray5, byteArray7);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray2);

byte[] byteArray8 = base64_0.encode(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray8.equals((Object)byteArray3));
assertFalse(byteArray8.equals((Object)byteArray4));
assertFalse(byteArray8.equals((Object)byteArray2));
assertFalse(byteArray8.equals((Object)byteArray5));
assertFalse(byteArray8.equals((Object)byteArray0));
assertFalse(byteArray8.equals((Object)byteArray6));
assertFalse(byteArray8.equals((Object)byteArray7));
assertFalse(byteArray8.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray7));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray8);
assertEquals(60, byteArray0.length);
assertEquals(532, byteArray8.length);
assertEquals(84, byteArray1.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray8, byteArray3);
assertNotSame(byteArray8, byteArray4);
assertNotSame(byteArray8, byteArray2);
assertNotSame(byteArray8, byteArray5);
assertNotSame(byteArray8, byteArray0);
assertNotSame(byteArray8, byteArray6);
assertNotSame(byteArray8, byteArray7);
assertNotSame(byteArray8, byteArray1);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray1, byteArray8);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);

BigInteger bigInteger3 = Base64.decodeInteger(byteArray5);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray8));
assertFalse(byteArray0.equals((Object)byteArray1));
assertTrue(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray7));
assertFalse(byteArray1.equals((Object)byteArray8));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray7));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray8));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray6));
assertFalse(byteArray5.equals((Object)byteArray8));
assertFalse(byteArray5.equals((Object)byteArray7));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(base64_0.isUrlSafe());
assertEquals((byte)0, bigInteger3.byteValue());
assertEquals((short)0, bigInteger3.shortValue());
assertNotNull(bigInteger3);
assertEquals(60, byteArray0.length);
assertEquals(84, byteArray1.length);
assertEquals(532, byteArray3.length);
assertEquals(3412, byteArray5.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger1);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray1, byteArray8);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray3, byteArray7);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray8);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray5, byteArray8);
assertNotSame(byteArray5, byteArray7);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray2);

base64_0.decode(byteArray2, 64, 17);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray7));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray8));
assertFalse(byteArray0.equals((Object)byteArray1));
assertTrue(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger0.equals((Object)bigInteger3));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray5));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray6));
assertFalse(byteArray2.equals((Object)byteArray8));
assertFalse(byteArray2.equals((Object)byteArray7));
assertArrayEquals(new byte[] {}, byteArray2);
assertFalse(base64_0.isUrlSafe());
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals(60, byteArray0.length);
assertEquals(0, byteArray2.length);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray8);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray6);
assertNotSame(byteArray2, byteArray8);
assertNotSame(byteArray2, byteArray7);

base64_0.decode(byteArray5);

[MASTER] 03:42:34.753 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<-112> but was:<13>
[MASTER] 03:42:34.753 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertArrayEquals(new byte[] {(byte) (-112), (byte)0}, byteArray0);
assertNotNull(byteArray0);
assertEquals(2, byteArray0.length);

Base64 base64_0 = new Base64((-104), byteArray0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertArrayEquals(new byte[] {(byte) (-112), (byte)0}, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(2, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 6);
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte) (-112), (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)107, (byte)65, (byte)65, (byte) (-112), (byte)0}, byteArray1);
assertNotNull(byteArray1);
assertEquals(2, byteArray0.length);
assertEquals(5, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

byte[] byteArray2 = base64_0.encode(byteArray0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte) (-112), (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)107, (byte)65, (byte)65, (byte)61}, byteArray2);
assertFalse(base64_0.isUrlSafe());
assertNotNull(byteArray2);
assertEquals(2, byteArray0.length);
assertEquals(4, byteArray2.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);

boolean boolean0 = Base64.isBase64(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte) (-112), (byte)0}, byteArray0);
assertEquals(2, byteArray0.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);


[MASTER] 03:42:34.942 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...VVGQlFVRkJRVUZCUVVGQ[pAAUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUFpBQZAA]> but was:<...VVGQlFVRkJRVUZCUVVGQ[g0KUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUFEwSw0K]>
[MASTER] 03:42:34.946 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[56];
Base64 base64_0 = new Base64(17, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertNotNull(base64_0);
assertEquals(56, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);

BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertNotNull(bigInteger0);
assertEquals(56, byteArray0.length);
assertNotSame(byteArray0, byteArray1);

byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(byteArray2);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(108, byteArray2.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);

byte[] byteArray3 = new byte[1];
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));

byte byte0 = (byte)103;
byteArray3[0] = (byte)103;
BigInteger bigInteger1 = Base64.decodeInteger(byteArray3);
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertTrue(bigInteger1.equals((Object)bigInteger0));
assertArrayEquals(new byte[] {(byte)103}, byteArray3);
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertNotNull(bigInteger1);
assertEquals(1, byteArray3.length);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(bigInteger1, bigInteger0);

byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertNotNull(byteArray4);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(108, byteArray2.length);
assertEquals(144, byteArray4.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);

base64_0.encode(byteArray4, 0, (int) (byte)103);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(base64_0.isUrlSafe());
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(108, byteArray2.length);
assertEquals(144, byteArray4.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);

byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray1));
assertNotNull(byteArray5);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(108, byteArray2.length);
assertEquals(144, byteArray4.length);
assertEquals(144, byteArray5.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray5);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray1);

String string0 = Base64.encodeBase64URLSafeString(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray5));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray4));
assertEquals("UVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQpAAUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUFpBQZAA", string0);
assertNotNull(string0);
assertEquals(56, byteArray0.length);
assertEquals(78, byteArray1.length);
assertEquals(108, byteArray2.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray4);

String string1 = Base64.encodeBase64URLSafeString(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(string1.equals((Object)string0));
assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string1);
assertNotNull(string1);
assertEquals(56, byteArray0.length);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray5);

byte[] byteArray6 = null;
base64_0.readResults((byte[]) null, 17, 420);

[MASTER] 03:42:35.778 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/BBC-F0/tests/4
* Done!

* Computation finished
