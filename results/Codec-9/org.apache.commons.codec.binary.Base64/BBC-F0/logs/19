* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 2232
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 4274785740
* Starting evolution
* Initial Number of Goals in DynaMOSA = 419 / 1539
[MASTER] 03:41:04.987 [logback-1] WARN  ExecutionTrace - Popping method encode([B)[B because we were looking for encode([BII)V
[MASTER] 03:41:04.989 [logback-1] WARN  ExecutionTrace - Current stack: [org.apache.commons.codec.binary.Base64:encode([B)[B
Branches:  78 79
True Distances:  1.0 0.0
False Distances:  0.0 584.0
, org.apache.commons.codec.binary.Base64:encodeBase64([BZZI)[B
Branches:  62 63 64 65
True Distances:  1.0 0.0 0.0 0.0
False Distances:  0.0 584.0 2.147483646E9 1.0
, org.apache.commons.codec.binary.Base64:encodeBase64([BZZ)[B
Branches: 
True Distances: 
False Distances: 
, org.apache.commons.codec.binary.Base64:encodeBase64([BZ)[B
Branches: 
True Distances: 
False Distances: 
, org.apache.commons.codec.binary.Base64:encodeInteger(Ljava/math/BigInteger;)[B
Branches:  84
True Distances:  0.0
False Distances:  1.0
, :
Branches: 
True Distances: 
False Distances: 
]
[MASTER] 03:41:04.989 [logback-1] WARN  ExecutionTrace - Popping method encodeBase64([BZZI)[B because we were looking for encode([BII)V
[MASTER] 03:41:04.989 [logback-1] WARN  ExecutionTrace - Current stack: [org.apache.commons.codec.binary.Base64:encodeBase64([BZZI)[B
Branches:  62 63 64 65
True Distances:  1.0 0.0 0.0 0.0
False Distances:  0.0 584.0 2.147483646E9 1.0
, org.apache.commons.codec.binary.Base64:encodeBase64([BZZ)[B
Branches: 
True Distances: 
False Distances: 
, org.apache.commons.codec.binary.Base64:encodeBase64([BZ)[B
Branches: 
True Distances: 
False Distances: 
, org.apache.commons.codec.binary.Base64:encodeInteger(Ljava/math/BigInteger;)[B
Branches:  84
True Distances:  0.0
False Distances:  1.0
, :
Branches: 
True Distances: 
False Distances: 
]
* Search finished after 302s and 140 generations, 84582 statements, best individual has fitness: 86.0
* Minimizing test suite
[MASTER] 03:43:25.142 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 216
* Number of covered goals: 215
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 193
* Number of covered goals: 185
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 787
* Number of covered goals: 759
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 90%
* Total number of goals: 80
* Number of covered goals: 72
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 193
* Number of covered goals: 172
* Generated 99 tests with total length 1600
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:44:07.427 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6755333333333333% of time used, but only 31/99 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
[MASTER] 03:44:45.777 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 03:44:45.779 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

int int0 = base64_0.avail();
assertEquals(0, int0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte)119;
int int1 = (-1502);
base64_0.encode(byteArray0, (-1502), (-1502));
assertArrayEquals(new byte[] {(byte)119}, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(1, byteArray0.length);

String string0 = "";
byte[] byteArray1 = Base64.decodeBase64("");
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {}, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(0, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {(byte)119}, byteArray0);
assertArrayEquals(new byte[] {(byte)100, (byte)119}, byteArray2);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(1, byteArray0.length);
assertEquals(2, byteArray2.length);

Base64 base64_1 = new Base64();
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(base64_1);
assertFalse(base64_1.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {(byte)119}, byteArray0);
assertArrayEquals(new byte[] {(byte)100, (byte)119}, byteArray2);
assertArrayEquals(new byte[] {(byte)90, (byte)72, (byte)99, (byte)61, (byte)0, (byte) (-125)}, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertEquals(1, byteArray0.length);
assertEquals(2, byteArray2.length);
assertEquals(6, byteArray3.length);

base64_0.readResults(byteArray3, (-2462), (-1));

[MASTER] 03:44:46.037 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:44:46.039 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

byte[] byteArray0 = new byte[8];
byteArray0[0] = (byte) (-51);
base64_0.encode(byteArray0, (int) (byte) (-51), (int) (byte) (-51));
assertArrayEquals(new byte[] {(byte) (-51), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(8, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte) (-51), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(8, byteArray0.length);
assertEquals(12, byteArray1.length);

byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(2, byteArray2.length);

byteArray0[1] = (byte) (-51);
byte[] byteArray3 = base64_0.decode(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {(byte) (-51), (byte) (-51), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray3);
assertFalse(base64_0.isUrlSafe());
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(8, byteArray0.length);
assertEquals(0, byteArray3.length);

byte[] byteArray4 = Base64.encodeBase64(byteArray3);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertNotNull(byteArray4);
assertArrayEquals(new byte[] {(byte) (-51), (byte) (-51), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray3);
assertArrayEquals(new byte[] {}, byteArray4);
assertFalse(base64_0.isUrlSafe());
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertSame(byteArray3, byteArray4);
assertNotSame(byteArray4, byteArray1);
assertSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(8, byteArray0.length);
assertEquals(0, byteArray3.length);
assertEquals(0, byteArray4.length);

byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray2);
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray3));
assertNotNull(byteArray5);
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray2);
assertArrayEquals(new byte[] {(byte)65, (byte)73, (byte)77}, byteArray5);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray3);
assertEquals(2, byteArray2.length);
assertEquals(3, byteArray5.length);

String string0 = base64_0.encodeToString(byteArray3);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertNotNull(string0);
assertArrayEquals(new byte[] {(byte) (-51), (byte) (-51), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray3);
assertEquals("", string0);
assertFalse(base64_0.isUrlSafe());
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertSame(byteArray3, byteArray4);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(8, byteArray0.length);
assertEquals(0, byteArray3.length);

Object object0 = new Object();
assertNotNull(object0);

base64_0.encode(object0);

[MASTER] 03:44:46.341 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 03:44:46.342 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

int int0 = base64_0.avail();
assertEquals(0, int0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte)119;
base64_0.encode(byteArray0, (-1502), (-1502));
assertArrayEquals(new byte[] {(byte)119}, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(1, byteArray0.length);

byte[] byteArray1 = Base64.decodeBase64("");
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {}, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(0, byteArray1.length);

byte[] byteArray2 = base64_0.decode((byte[]) null);
assertNull(byteArray2);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

BigInteger bigInteger0 = new BigInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertNotNull(bigInteger0);
assertArrayEquals(new byte[] {(byte)119}, byteArray0);
assertEquals((byte)119, bigInteger0.byteValue());
assertEquals((short)119, bigInteger0.shortValue());
assertEquals(1, byteArray0.length);

byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {(byte)119}, byteArray0);
assertArrayEquals(new byte[] {(byte)119}, byteArray3);
assertEquals((byte)119, bigInteger0.byteValue());
assertEquals((short)119, bigInteger0.shortValue());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertEquals(1, byteArray0.length);
assertEquals(1, byteArray3.length);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertArrayEquals(new byte[] {(byte)119}, byteArray0);
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(1, byteArray0.length);

boolean boolean0 = base64_0.hasData();
assertFalse(boolean0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray4 = new byte[1];
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));

byteArray4[0] = (byte)119;
byte[] byteArray5 = Base64.encodeBase64(byteArray4, true, false);
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray4));
assertNotNull(byteArray5);
assertArrayEquals(new byte[] {(byte)119}, byteArray4);
assertArrayEquals(new byte[] {(byte)100, (byte)119, (byte)61, (byte)61, (byte)0, (byte) (-125)}, byteArray5);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray5);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray4);
assertEquals(1, byteArray4.length);
assertEquals(6, byteArray5.length);

base64_0.decode(byteArray3, 0, (int) (byte)119);

[MASTER] 03:44:47.063 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<sqyst7c=[ ?]> but was:<sqyst7c=[
]>
[MASTER] 03:44:47.064 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(false);
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

byte[] byteArray0 = new byte[5];
byteArray0[0] = (byte) (-78);
byteArray0[1] = (byte) (-84);
byteArray0[2] = (byte) (-84);
byteArray0[3] = (byte) (-73);
byteArray0[4] = (byte) (-73);
BigInteger bigInteger0 = new BigInteger(byteArray0);
assertNotNull(bigInteger0);
assertArrayEquals(new byte[] {(byte) (-78), (byte) (-84), (byte) (-84), (byte) (-73), (byte) (-73)}, byteArray0);
assertEquals((byte) (-73), bigInteger0.byteValue());
assertEquals((short) (-18505), bigInteger0.shortValue());
assertEquals(5, byteArray0.length);

byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte) (-78), (byte) (-84), (byte) (-84), (byte) (-73), (byte) (-73)}, byteArray0);
assertArrayEquals(new byte[] {(byte) (-78), (byte) (-84), (byte) (-84), (byte) (-73), (byte) (-73)}, byteArray1);
assertEquals((byte) (-73), bigInteger0.byteValue());
assertEquals((short) (-18505), bigInteger0.shortValue());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(5, byteArray0.length);
assertEquals(5, byteArray1.length);

BigInteger bigInteger1 = BigInteger.ZERO;
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertNotSame(bigInteger1, bigInteger0);

Base64 base64_1 = new Base64((byte) (-73), byteArray1, true);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(base64_1);
assertArrayEquals(new byte[] {(byte) (-78), (byte) (-84), (byte) (-84), (byte) (-73), (byte) (-73)}, byteArray0);
assertArrayEquals(new byte[] {(byte) (-78), (byte) (-84), (byte) (-84), (byte) (-73), (byte) (-73)}, byteArray1);
assertEquals((byte) (-73), bigInteger0.byteValue());
assertEquals((short) (-18505), bigInteger0.shortValue());
assertTrue(base64_1.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(5, byteArray0.length);
assertEquals(5, byteArray1.length);

String string0 = base64_0.encodeToString(byteArray0);
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(byteArray0.equals((Object)byteArray1));
assertNotNull(string0);
assertArrayEquals(new byte[] {(byte) (-78), (byte) (-84), (byte) (-84), (byte) (-73), (byte) (-73)}, byteArray0);
assertEquals("sqyst7c=\u0000\uFFFD", string0);
assertFalse(base64_0.isUrlSafe());
assertNotSame(base64_0, base64_1);
assertNotSame(byteArray0, byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(5, byteArray0.length);

boolean boolean0 = Base64.isBase64((byte) (-78));
assertFalse(boolean0);


[MASTER] 03:44:48.645 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 03:44:48.647 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

int int0 = base64_0.avail();
assertEquals(0, int0);
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte)119;
base64_0.encode(byteArray0, (-1502), (-1502));
assertArrayEquals(new byte[] {(byte)119}, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(1, byteArray0.length);

byte[] byteArray1 = new byte[3];
assertFalse(byteArray1.equals((Object)byteArray0));

byteArray1[0] = (byte) (-71);
byteArray1[1] = (byte)1;
byteArray1[2] = (byte)119;
base64_0.encode(byteArray1, 38, 1630);
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte) (-71), (byte)1, (byte)119}, byteArray1);
assertFalse(base64_0.isUrlSafe());
assertNotSame(byteArray1, byteArray0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(3, byteArray1.length);

byte[] byteArray2 = Base64.decodeBase64("");
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {}, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(0, byteArray2.length);

byte[] byteArray3 = base64_0.decode(byteArray2);
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {}, byteArray2);
assertArrayEquals(new byte[] {}, byteArray3);
assertFalse(base64_0.isUrlSafe());
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertSame(byteArray2, byteArray3);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertSame(byteArray3, byteArray2);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(0, byteArray2.length);
assertEquals(0, byteArray3.length);

BigInteger bigInteger0 = new BigInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertNotNull(bigInteger0);
assertArrayEquals(new byte[] {(byte)119}, byteArray0);
assertEquals((byte)119, bigInteger0.byteValue());
assertEquals((short)119, bigInteger0.shortValue());
assertEquals(1, byteArray0.length);

byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertNotNull(byteArray4);
assertArrayEquals(new byte[] {(byte)119}, byteArray0);
assertArrayEquals(new byte[] {(byte)119}, byteArray4);
assertEquals((byte)119, bigInteger0.byteValue());
assertEquals((short)119, bigInteger0.shortValue());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertEquals(1, byteArray0.length);
assertEquals(1, byteArray4.length);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray3);
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertArrayEquals(new byte[] {}, byteArray2);
assertArrayEquals(new byte[] {}, byteArray3);
assertFalse(base64_0.isUrlSafe());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray4);
assertSame(byteArray2, byteArray3);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray4);
assertSame(byteArray3, byteArray2);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(0, byteArray2.length);
assertEquals(0, byteArray3.length);

boolean boolean0 = base64_0.hasData();
assertFalse(boolean0);
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

boolean boolean1 = true;
byte[] byteArray5 = Base64.encodeBase64(byteArray1, true, false);
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray5);
assertArrayEquals(new byte[] {(byte)117, (byte)81, (byte)70, (byte)51, (byte)0, (byte) (-125)}, byteArray5);
assertArrayEquals(new byte[] {(byte) (-71), (byte)1, (byte)119}, byteArray1);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray0);
assertEquals(6, byteArray5.length);
assertEquals(3, byteArray1.length);

base64_0.decode(byteArray5, (int) (byte)1, 1630);

[MASTER] 03:44:49.597 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<19773> but was:<28477>
[MASTER] 03:44:49.602 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertNotNull(byteArray0);
assertEquals(27, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray3 = Base64.decodeBase64("");
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {}, byteArray3);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertEquals(0, byteArray3.length);

BigInteger bigInteger0 = new BigInteger(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(bigInteger0);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertNotNull(byteArray4);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(52, byteArray4.length);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte) (-88), bigInteger1.byteValue());
assertEquals((short) (-10072), bigInteger1.shortValue());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

Base64 base64_0 = new Base64(13, byteArray3, true);
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertNotNull(base64_0);
assertArrayEquals(new byte[] {}, byteArray3);
assertTrue(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(0, byteArray3.length);

boolean boolean0 = base64_0.hasData();
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertArrayEquals(new byte[] {}, byteArray3);
assertFalse(boolean0);
assertTrue(base64_0.isUrlSafe());
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(0, byteArray3.length);

byte[] byteArray5 = Base64.encodeBase64(byteArray1, false, true);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray2));
assertNotNull(byteArray5);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray2);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(51, byteArray5.length);

Base64 base64_1 = new Base64(76);
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(base64_1);
assertFalse(base64_1.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

base64_1.decode(byteArray4, 1, 40);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray5));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray5));
assertFalse(base64_1.equals((Object)base64_0));
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertFalse(base64_1.isUrlSafe());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray5);
assertNotSame(base64_1, base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(52, byteArray4.length);

byte[] byteArray6 = Base64.encodeBase64(byteArray3, true);
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray0));
assertNotNull(byteArray6);
assertArrayEquals(new byte[] {}, byteArray3);
assertArrayEquals(new byte[] {}, byteArray6);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray0);
assertSame(byteArray6, byteArray3);
assertEquals(0, byteArray3.length);
assertEquals(0, byteArray6.length);


[MASTER] 03:44:50.242 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [6]; expected:<0> but was:<13>
[MASTER] 03:44:50.243 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte)117;
byteArray0[1] = (byte) (-1);
byteArray0[2] = (byte)1;
byteArray0[3] = (byte)4;
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 13);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte)117, (byte) (-1), (byte)1, (byte)4}, byteArray0);
assertArrayEquals(new byte[] {(byte)100, (byte)102, (byte)56, (byte)66, (byte)66, (byte)65, (byte)0, (byte) (-125)}, byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(4, byteArray0.length);
assertEquals(8, byteArray1.length);

Base64 base64_0 = new Base64(96, byteArray1, true);

[MASTER] 03:44:50.749 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<19773> but was:<28477>
[MASTER] 03:44:50.751 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertNotNull(byteArray0);
assertEquals(27, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray3 = Base64.decodeBase64("");
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {}, byteArray3);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertEquals(0, byteArray3.length);

BigInteger bigInteger0 = new BigInteger(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertNotNull(bigInteger0);
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertNotNull(byteArray4);
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((short)19773, bigInteger0.shortValue());
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(52, byteArray4.length);

byte[] byteArray5 = Base64.discardWhitespace(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray0));
assertNotNull(byteArray5);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(38, byteArray5.length);

BigInteger bigInteger1 = new BigInteger(byteArray3);

[MASTER] 03:44:50.889 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<19773> but was:<28477>
[MASTER] 03:44:50.893 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertNotNull(byteArray0);
assertEquals(27, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

BigInteger bigInteger0 = new BigInteger(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(bigInteger0);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

BigInteger bigInteger1 = new BigInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte) (-88), bigInteger1.byteValue());
assertEquals((short) (-10072), bigInteger1.shortValue());
assertEquals(27, byteArray0.length);

int int0 = bigInteger0.compareTo(bigInteger1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals(1, int0);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((byte) (-88), bigInteger1.byteValue());
assertEquals((short) (-10072), bigInteger1.shortValue());
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(boolean0);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

BigInteger bigInteger2 = bigInteger1.max(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertNotNull(bigInteger2);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((byte) (-88), bigInteger1.byteValue());
assertEquals((short) (-10072), bigInteger1.shortValue());
assertEquals((byte)61, bigInteger2.byteValue());
assertEquals((short)19773, bigInteger2.shortValue());
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(bigInteger0, bigInteger1);
assertSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger2, bigInteger1);
assertSame(bigInteger2, bigInteger0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

BigInteger bigInteger3 = BigInteger.TEN;
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertNotNull(bigInteger3);
assertEquals((byte)10, bigInteger3.byteValue());
assertEquals((short)10, bigInteger3.shortValue());
assertNotSame(bigInteger3, bigInteger1);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger2);

byte[] byteArray3 = Base64.encodeInteger(bigInteger3);
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray3);
assertEquals((byte)10, bigInteger3.byteValue());
assertEquals((short)10, bigInteger3.shortValue());
assertNotSame(bigInteger3, bigInteger1);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertEquals(4, byteArray3.length);

BigInteger bigInteger4 = BigInteger.ONE;
assertFalse(bigInteger4.equals((Object)bigInteger3));
assertFalse(bigInteger4.equals((Object)bigInteger0));
assertFalse(bigInteger4.equals((Object)bigInteger1));
assertFalse(bigInteger4.equals((Object)bigInteger2));
assertNotNull(bigInteger4);
assertEquals((byte)1, bigInteger4.byteValue());
assertEquals((short)1, bigInteger4.shortValue());
assertNotSame(bigInteger4, bigInteger3);
assertNotSame(bigInteger4, bigInteger0);
assertNotSame(bigInteger4, bigInteger1);
assertNotSame(bigInteger4, bigInteger2);

Base64 base64_0 = new Base64(1, byteArray1, false);

[MASTER] 03:44:51.126 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...MlJsY2tWNFkyVndkR2x2[QUlN]PQ> but was:<...MlJsY2tWNFkyVndkR2x2[RFFv]PQ>
[MASTER] 03:44:51.128 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertNotNull(byteArray0);
assertEquals(27, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

BigInteger bigInteger0 = BigInteger.ZERO;
assertNotNull(bigInteger0);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());

byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {}, byteArray3);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertEquals(0, byteArray3.length);

Base64 base64_0 = new Base64(1979);
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

base64_0.encode(byteArray1, (int) (byte)1, (int) (byte)1);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(base64_0.isUrlSafe());
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

int int0 = bigInteger0.bitLength();
assertEquals(0, int0);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());

String string0 = Base64.encodeBase64URLSafeString(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertNotNull(string0);
assertEquals("YjNKbllYQmhZMmhsWTI5dGJXOXVjMk52WkdWalJXNWpiMlJsY2tWNFkyVndkR2x2QUlNPQ", string0);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray3));
assertNotNull(byteArray4);
assertArrayEquals(new byte[] {}, byteArray4);
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, bigInteger0.shortValue());
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray3);
assertEquals(0, byteArray4.length);

boolean boolean0 = base64_0.hasData();
assertTrue(boolean0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);


[MASTER] 03:44:51.435 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<19773> but was:<28477>
[MASTER] 03:44:51.441 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertNotNull(byteArray0);
assertEquals(27, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

BigInteger bigInteger0 = new BigInteger(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(bigInteger0);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

BigInteger bigInteger1 = new BigInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte) (-88), bigInteger1.byteValue());
assertEquals((short) (-10072), bigInteger1.shortValue());
assertEquals(27, byteArray0.length);

int int0 = bigInteger0.compareTo(bigInteger1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals(1, int0);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((byte) (-88), bigInteger1.byteValue());
assertEquals((short) (-10072), bigInteger1.shortValue());
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(boolean0);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

BigInteger bigInteger2 = new BigInteger(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertTrue(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertNotNull(bigInteger2);
assertEquals((short) (-10072), bigInteger2.shortValue());
assertEquals((byte) (-88), bigInteger2.byteValue());
assertEquals(27, byteArray0.length);

BigInteger bigInteger3 = new BigInteger(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertNotNull(bigInteger3);
assertEquals((byte) (-125), bigInteger3.byteValue());
assertEquals((short)131, bigInteger3.shortValue());
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

BigInteger bigInteger4 = BigInteger.TEN;
assertFalse(bigInteger4.equals((Object)bigInteger2));
assertFalse(bigInteger4.equals((Object)bigInteger3));
assertFalse(bigInteger4.equals((Object)bigInteger0));
assertFalse(bigInteger4.equals((Object)bigInteger1));
assertNotNull(bigInteger4);
assertEquals((short)10, bigInteger4.shortValue());
assertEquals((byte)10, bigInteger4.byteValue());
assertNotSame(bigInteger4, bigInteger2);
assertNotSame(bigInteger4, bigInteger3);
assertNotSame(bigInteger4, bigInteger0);
assertNotSame(bigInteger4, bigInteger1);

int int1 = bigInteger4.compareTo(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(bigInteger0.equals((Object)bigInteger3));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger0.equals((Object)bigInteger4));
assertFalse(bigInteger4.equals((Object)bigInteger2));
assertFalse(bigInteger4.equals((Object)bigInteger3));
assertFalse(bigInteger4.equals((Object)bigInteger0));
assertFalse(bigInteger4.equals((Object)bigInteger1));
assertFalse(int1 == int0);
assertEquals((-1), int1);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((short)10, bigInteger4.shortValue());
assertEquals((byte)10, bigInteger4.byteValue());
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger4);
assertNotSame(bigInteger4, bigInteger2);
assertNotSame(bigInteger4, bigInteger3);
assertNotSame(bigInteger4, bigInteger0);
assertNotSame(bigInteger4, bigInteger1);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

boolean boolean1 = Base64.isArrayByteBase64(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(boolean1 == boolean0);
assertTrue(boolean1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

BigInteger bigInteger5 = bigInteger4.max(bigInteger1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertTrue(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger4));
assertFalse(bigInteger1.equals((Object)bigInteger3));
assertFalse(bigInteger4.equals((Object)bigInteger2));
assertFalse(bigInteger4.equals((Object)bigInteger3));
assertFalse(bigInteger4.equals((Object)bigInteger0));
assertFalse(bigInteger4.equals((Object)bigInteger1));
assertFalse(bigInteger5.equals((Object)bigInteger0));
assertFalse(bigInteger5.equals((Object)bigInteger2));
assertFalse(bigInteger5.equals((Object)bigInteger1));
assertFalse(bigInteger5.equals((Object)bigInteger3));
assertNotNull(bigInteger5);
assertEquals((byte) (-88), bigInteger1.byteValue());
assertEquals((short) (-10072), bigInteger1.shortValue());
assertEquals((short)10, bigInteger4.shortValue());
assertEquals((byte)10, bigInteger4.byteValue());
assertEquals((byte)10, bigInteger5.byteValue());
assertEquals((short)10, bigInteger5.shortValue());
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger4);
assertNotSame(bigInteger1, bigInteger5);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger3);
assertNotSame(bigInteger4, bigInteger2);
assertNotSame(bigInteger4, bigInteger3);
assertNotSame(bigInteger4, bigInteger0);
assertSame(bigInteger4, bigInteger5);
assertNotSame(bigInteger4, bigInteger1);
assertNotSame(bigInteger5, bigInteger0);
assertNotSame(bigInteger5, bigInteger2);
assertSame(bigInteger5, bigInteger4);
assertNotSame(bigInteger5, bigInteger1);
assertNotSame(bigInteger5, bigInteger3);
assertEquals(27, byteArray0.length);

byte[] byteArray3 = Base64.encodeInteger(bigInteger4);
assertFalse(bigInteger4.equals((Object)bigInteger2));
assertFalse(bigInteger4.equals((Object)bigInteger3));
assertFalse(bigInteger4.equals((Object)bigInteger0));
assertFalse(bigInteger4.equals((Object)bigInteger1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray3);
assertEquals((short)10, bigInteger4.shortValue());
assertEquals((byte)10, bigInteger4.byteValue());
assertNotSame(bigInteger4, bigInteger2);
assertNotSame(bigInteger4, bigInteger3);
assertNotSame(bigInteger4, bigInteger0);
assertSame(bigInteger4, bigInteger5);
assertNotSame(bigInteger4, bigInteger1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertEquals(4, byteArray3.length);

BigInteger bigInteger6 = BigInteger.ONE;
assertFalse(bigInteger6.equals((Object)bigInteger1));
assertFalse(bigInteger6.equals((Object)bigInteger0));
assertFalse(bigInteger6.equals((Object)bigInteger2));
assertFalse(bigInteger6.equals((Object)bigInteger3));
assertFalse(bigInteger6.equals((Object)bigInteger5));
assertFalse(bigInteger6.equals((Object)bigInteger4));
assertNotNull(bigInteger6);
assertEquals((short)1, bigInteger6.shortValue());
assertEquals((byte)1, bigInteger6.byteValue());
assertNotSame(bigInteger6, bigInteger1);
assertNotSame(bigInteger6, bigInteger0);
assertNotSame(bigInteger6, bigInteger2);
assertNotSame(bigInteger6, bigInteger3);
assertNotSame(bigInteger6, bigInteger5);
assertNotSame(bigInteger6, bigInteger4);

Base64 base64_0 = new Base64((-1036), byteArray1, true);

[MASTER] 03:44:52.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<19773> but was:<28477>
[MASTER] 03:44:52.172 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertNotNull(byteArray0);
assertEquals(27, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

BigInteger bigInteger0 = BigInteger.ONE;
assertNotNull(bigInteger0);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());

int int0 = bigInteger0.bitLength();
assertEquals(1, int0);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());

BigInteger bigInteger1 = BigInteger.ONE;
assertNotNull(bigInteger1);
assertEquals((short)1, bigInteger1.shortValue());
assertEquals((byte)1, bigInteger1.byteValue());
assertSame(bigInteger1, bigInteger0);

int int1 = bigInteger0.compareTo(bigInteger1);
assertFalse(int1 == int0);
assertEquals(0, int1);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((short)1, bigInteger1.shortValue());
assertEquals((byte)1, bigInteger1.byteValue());
assertSame(bigInteger0, bigInteger1);
assertSame(bigInteger1, bigInteger0);

BigInteger bigInteger2 = bigInteger0.flipBit(1);
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertNotNull(bigInteger2);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)3, bigInteger2.byteValue());
assertEquals((short)3, bigInteger2.shortValue());
assertSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);

Base64 base64_0 = new Base64(false);
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

base64_0.encode(byteArray0, (-140), (-121));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(base64_0.isUrlSafe());
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(27, byteArray0.length);

int int2 = bigInteger2.bitLength();
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(int2 == int1);
assertFalse(int2 == int0);
assertEquals(2, int2);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)3, bigInteger2.byteValue());
assertEquals((short)3, bigInteger2.shortValue());
assertSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);

byte[] byteArray3 = new byte[9];
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));

byteArray3[0] = (byte) (-8);
byteArray3[1] = (byte) (-8);
byteArray3[2] = (byte) (-8);
byteArray3[3] = (byte) (-8);
byteArray3[4] = (byte) (-8);
byteArray3[5] = (byte) (-8);
byteArray3[6] = (byte) (-8);
byteArray3[7] = (byte) (-58);
byteArray3[8] = (byte)21;
String string0 = Base64.encodeBase64URLSafeString(byteArray3);
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertNotNull(string0);
assertArrayEquals(new byte[] {(byte) (-8), (byte) (-8), (byte) (-8), (byte) (-8), (byte) (-8), (byte) (-8), (byte) (-8), (byte) (-58), (byte)21}, byteArray3);
assertEquals("-Pj4-Pj4-MYV", string0);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertEquals(9, byteArray3.length);

BigInteger bigInteger3 = new BigInteger(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(bigInteger3);
assertEquals((short)19773, bigInteger3.shortValue());
assertEquals((byte)61, bigInteger3.byteValue());
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray4 = Base64.encodeInteger(bigInteger2);
assertFalse(bigInteger0.equals((Object)bigInteger3));
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger2.equals((Object)bigInteger3));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertNotNull(byteArray4);
assertArrayEquals(new byte[] {(byte)65, (byte)119, (byte)61, (byte)61}, byteArray4);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)3, bigInteger2.byteValue());
assertEquals((short)3, bigInteger2.shortValue());
assertSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger2, bigInteger3);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray0);
assertEquals(4, byteArray4.length);


[MASTER] 03:44:52.813 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<19773> but was:<28477>
[MASTER] 03:44:52.817 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertNotNull(byteArray0);
assertEquals(27, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray3 = Base64.decodeBase64("");
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {}, byteArray3);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertEquals(0, byteArray3.length);

BigInteger bigInteger0 = new BigInteger(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertNotNull(bigInteger0);
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertNotNull(byteArray4);
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((short)19773, bigInteger0.shortValue());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(52, byteArray4.length);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((short) (-10072), bigInteger1.shortValue());
assertEquals((byte) (-88), bigInteger1.byteValue());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

Base64 base64_0 = new Base64(13, byteArray3, true);
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertNotNull(base64_0);
assertArrayEquals(new byte[] {}, byteArray3);
assertTrue(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(0, byteArray3.length);

BigInteger bigInteger2 = new BigInteger(byteArray4);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertTrue(bigInteger2.equals((Object)bigInteger0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertNotNull(bigInteger2);
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger2.byteValue());
assertEquals((short)19773, bigInteger2.shortValue());
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(52, byteArray4.length);

Base64 base64_1 = new Base64(false);
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(base64_1);
assertFalse(base64_1.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

base64_0.encode(byteArray0, 0, 13);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(base64_0.equals((Object)base64_1));
assertArrayEquals(new byte[] {}, byteArray3);
assertTrue(base64_0.isUrlSafe());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(base64_0, base64_1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(27, byteArray0.length);
assertEquals(0, byteArray3.length);

byte[] byteArray5 = Base64.encodeInteger(bigInteger1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertNotNull(byteArray5);
assertEquals((short) (-10072), bigInteger1.shortValue());
assertEquals((byte) (-88), bigInteger1.byteValue());
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(36, byteArray5.length);


[MASTER] 03:44:52.969 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:44:52.970 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte)119;
byte[] byteArray1 = new byte[1];
assertFalse(byteArray1.equals((Object)byteArray0));

base64_0.encode(byteArray1, (-1502), (-1502));
assertFalse(byteArray1.equals((Object)byteArray0));
assertArrayEquals(new byte[] {(byte)0}, byteArray1);
assertFalse(base64_0.isUrlSafe());
assertNotSame(byteArray1, byteArray0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(1, byteArray1.length);

byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(2, byteArray2.length);

byte[] byteArray3 = new byte[4];
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));

byteArray3[0] = (byte)119;
byteArray3[1] = (byte)119;
byteArray3[2] = (byte)119;
byteArray3[3] = (byte)119;
byte[] byteArray4 = Base64.encodeBase64(byteArray3);
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertNotNull(byteArray4);
assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)119, (byte)119}, byteArray3);
assertArrayEquals(new byte[] {(byte)100, (byte)51, (byte)100, (byte)51, (byte)100, (byte)119, (byte)61, (byte)61}, byteArray4);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertEquals(4, byteArray3.length);
assertEquals(8, byteArray4.length);

byte[] byteArray5 = base64_0.decode((byte[]) null);
assertNull(byteArray5);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

boolean boolean0 = Base64.isBase64((byte)119);
assertTrue(boolean0);

String string0 = base64_0.encodeToString((byte[]) null);
assertNull(string0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);


[MASTER] 03:44:53.133 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<19773> but was:<28477>
[MASTER] 03:44:53.136 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertNotNull(byteArray0);
assertEquals(27, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray3 = Base64.decodeBase64("");
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {}, byteArray3);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertEquals(0, byteArray3.length);

BigInteger bigInteger0 = new BigInteger(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(bigInteger0);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertNotNull(byteArray4);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray3);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(52, byteArray4.length);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((short) (-10072), bigInteger1.shortValue());
assertEquals((byte) (-88), bigInteger1.byteValue());
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

Base64 base64_0 = new Base64(13, byteArray3, true);
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray1));
assertNotNull(base64_0);
assertArrayEquals(new byte[] {}, byteArray3);
assertTrue(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(0, byteArray3.length);

boolean boolean0 = base64_0.hasData();
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray1));
assertArrayEquals(new byte[] {}, byteArray3);
assertFalse(boolean0);
assertTrue(base64_0.isUrlSafe());
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(0, byteArray3.length);

base64_0.encodeToString(byteArray4);

[MASTER] 03:44:53.545 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:44:53.546 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray0);
assertEquals(2, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)73, (byte)77, (byte)61, (byte)0, (byte) (-125)}, byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);

boolean boolean0 = Base64.isBase64(byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray0);
assertFalse(boolean0);
assertNotSame(byteArray0, byteArray1);
assertEquals(2, byteArray0.length);

byte[] byteArray2 = new byte[3];
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));

byteArray2[0] = (byte)9;
byteArray2[1] = (byte)39;
byteArray2[2] = (byte)34;
String string0 = Base64.encodeBase64String(byteArray2);
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(string0);
assertArrayEquals(new byte[] {(byte)9, (byte)39, (byte)34}, byteArray2);
assertEquals("CSci", string0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(3, byteArray2.length);


[MASTER] 03:44:54.251 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<19773> but was:<28477>
[MASTER] 03:44:54.263 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertNotNull(byteArray0);
assertEquals(27, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray3 = Base64.decodeBase64("");
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {}, byteArray3);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertEquals(0, byteArray3.length);

BigInteger bigInteger0 = new BigInteger(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(bigInteger0);
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray2));
assertNotNull(byteArray4);
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((short)19773, bigInteger0.shortValue());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray2);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(52, byteArray4.length);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((short) (-10072), bigInteger1.shortValue());
assertEquals((byte) (-88), bigInteger1.byteValue());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

Base64 base64_0 = new Base64(13, byteArray3, true);
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray4));
assertNotNull(base64_0);
assertArrayEquals(new byte[] {}, byteArray3);
assertTrue(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(0, byteArray3.length);

boolean boolean0 = base64_0.hasData();
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray4));
assertArrayEquals(new byte[] {}, byteArray3);
assertFalse(boolean0);
assertTrue(base64_0.isUrlSafe());
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray4);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(0, byteArray3.length);

byte[] byteArray5 = Base64.encodeBase64(byteArray1, false, true);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray2));
assertNotNull(byteArray5);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray2);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(51, byteArray5.length);

Base64 base64_1 = new Base64(76);
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(base64_1);
assertFalse(base64_1.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

base64_1.decode(byteArray4, 1, 76);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray5));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray5));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(base64_1.equals((Object)base64_0));
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((short)19773, bigInteger0.shortValue());
assertFalse(base64_1.isUrlSafe());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray5);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray2);
assertNotSame(base64_1, base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(52, byteArray4.length);

byte[] byteArray6 = Base64.encodeBase64(byteArray3, true);
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray2));
assertNotNull(byteArray6);
assertArrayEquals(new byte[] {}, byteArray3);
assertArrayEquals(new byte[] {}, byteArray6);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray4);
assertSame(byteArray3, byteArray6);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray2);
assertSame(byteArray6, byteArray3);
assertEquals(0, byteArray3.length);
assertEquals(0, byteArray6.length);


[MASTER] 03:44:54.662 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<0> but was:<13>
[MASTER] 03:44:54.663 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.ZERO;
assertNotNull(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());

BigInteger bigInteger1 = BigInteger.ZERO;
assertNotNull(bigInteger1);
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertSame(bigInteger1, bigInteger0);

int int0 = bigInteger0.compareTo(bigInteger1);
assertEquals(0, int0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertSame(bigInteger0, bigInteger1);
assertSame(bigInteger1, bigInteger0);

byte[] byteArray0 = new byte[7];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte) (-98);
byteArray0[2] = (byte)32;
byteArray0[3] = (byte) (-66);
byteArray0[4] = (byte)122;
byteArray0[5] = (byte)18;
byteArray0[6] = (byte)84;
byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {(byte)0, (byte) (-98), (byte)32, (byte) (-66), (byte)122, (byte)18, (byte)84}, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-98), (byte) (-66), (byte)122, (byte)18, (byte)84}, byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(7, byteArray0.length);
assertEquals(6, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, (int) (byte)18);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {(byte)0, (byte) (-98), (byte)32, (byte) (-66), (byte)122, (byte)18, (byte)84}, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-98), (byte) (-66), (byte)122, (byte)18, (byte)84}, byteArray1);
assertArrayEquals(new byte[] {(byte)65, (byte)74, (byte)54, (byte)45, (byte)101, (byte)104, (byte)74, (byte)85, (byte)0, (byte) (-125)}, byteArray2);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals(7, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(10, byteArray2.length);


[MASTER] 03:44:55.081 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<19773> but was:<28477>
[MASTER] 03:44:55.085 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertNotNull(byteArray0);
assertEquals(27, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray3 = Base64.decodeBase64("");
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {}, byteArray3);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertEquals(0, byteArray3.length);

BigInteger bigInteger0 = new BigInteger(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(bigInteger0);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertNotNull(byteArray4);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(52, byteArray4.length);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte) (-88), bigInteger1.byteValue());
assertEquals((short) (-10072), bigInteger1.shortValue());
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

Base64 base64_0 = new Base64(13, byteArray3, true);
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertNotNull(base64_0);
assertArrayEquals(new byte[] {}, byteArray3);
assertTrue(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(0, byteArray3.length);

boolean boolean0 = base64_0.hasData();
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertArrayEquals(new byte[] {}, byteArray3);
assertFalse(boolean0);
assertTrue(base64_0.isUrlSafe());
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(0, byteArray3.length);

String string0 = base64_0.encodeToString(byteArray3);
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertNotNull(string0);
assertArrayEquals(new byte[] {}, byteArray3);
assertEquals("", string0);
assertTrue(base64_0.isUrlSafe());
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(0, byteArray3.length);

base64_0.decode(byteArray4, 1, 40);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertArrayEquals(new byte[] {}, byteArray3);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertTrue(base64_0.isUrlSafe());
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(0, byteArray3.length);
assertEquals(52, byteArray4.length);

byte[] byteArray5 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertNotNull(byteArray5);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertEquals(27, byteArray5.length);

base64_0.encode(byteArray2);

[MASTER] 03:44:55.501 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:44:55.502 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertNotNull(byteArray0);
assertEquals(27, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals(2, byteArray2.length);

Base64 base64_0 = new Base64(true);
assertNotNull(base64_0);
assertTrue(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

base64_0.decode(byteArray0, 0, 69);

[MASTER] 03:44:55.657 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:44:55.661 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray0);
assertEquals(2, byteArray0.length);

int int0 = Base64.PEM_CHUNK_SIZE;
assertEquals(64, int0);

BigInteger bigInteger0 = BigInteger.ZERO;
assertNotNull(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());

BigInteger bigInteger1 = bigInteger0.flipBit(64);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);

byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertArrayEquals(new byte[] {}, byteArray1);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(byteArray1, byteArray0);
assertEquals(0, byteArray1.length);

int int1 = bigInteger1.compareTo(bigInteger0);
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(int1 == int0);
assertEquals(1, int1);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);

boolean boolean0 = Base64.isBase64((byte)61);
assertTrue(boolean0);

BigInteger bigInteger2 = BigInteger.TEN;
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertNotNull(bigInteger2);
assertEquals((short)10, bigInteger2.shortValue());
assertEquals((byte)10, bigInteger2.byteValue());
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);

byte[] byteArray2 = Base64.encodeInteger(bigInteger2);
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
assertEquals((short)10, bigInteger2.shortValue());
assertEquals((byte)10, bigInteger2.byteValue());
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals(4, byteArray2.length);

BigInteger bigInteger3 = bigInteger1.max(bigInteger0);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertNotNull(bigInteger3);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((short)0, bigInteger3.shortValue());
assertEquals((byte)0, bigInteger3.byteValue());
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger1);
assertSame(bigInteger1, bigInteger3);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger0);
assertSame(bigInteger3, bigInteger1);

String string0 = Base64.encodeBase64URLSafeString(byteArray2);
assertFalse(bigInteger2.equals((Object)bigInteger3));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(string0);
assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
assertEquals("Q2c9PQ", string0);
assertEquals((short)10, bigInteger2.shortValue());
assertEquals((byte)10, bigInteger2.byteValue());
assertNotSame(bigInteger2, bigInteger3);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals(4, byteArray2.length);

byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
assertFalse(bigInteger0.equals((Object)bigInteger2));
assertFalse(bigInteger0.equals((Object)bigInteger3));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertNotNull(byteArray3);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger1);
assertSame(bigInteger1, bigInteger3);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertEquals(12, byteArray3.length);

Base64 base64_0 = new Base64((-2840));
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

base64_0.decode(byteArray1, (-2840), 49);

[MASTER] 03:44:56.799 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:44:56.829 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertNotNull(byteArray0);
assertEquals(27, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray3);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertEquals(2, byteArray3.length);

BigInteger bigInteger0 = new BigInteger(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(bigInteger0);
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray0));
assertNotNull(byteArray4);
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((short)19773, bigInteger0.shortValue());
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(52, byteArray4.length);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte) (-88), bigInteger1.byteValue());
assertEquals((short) (-10072), bigInteger1.shortValue());
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(bigInteger1, bigInteger0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

Base64 base64_0 = new Base64();
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

boolean boolean0 = base64_0.hasData();
assertFalse(boolean0);
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

byte[] byteArray5 = Base64.encodeBase64(byteArray1, false, true);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray0));
assertNotNull(byteArray5);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(51, byteArray5.length);

Base64 base64_1 = new Base64(76);
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(base64_1);
assertFalse(base64_1.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

base64_1.decode(byteArray4, 1, 76);
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray5));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray5));
assertFalse(base64_1.equals((Object)base64_0));
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((short)19773, bigInteger0.shortValue());
assertFalse(base64_1.isUrlSafe());
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray5);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray5);
assertNotSame(base64_1, base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(52, byteArray4.length);

byte[] byteArray6 = Base64.encodeBase64(byteArray1, false);
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray2));
assertNotNull(byteArray6);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray2);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray6.length);

byte[] byteArray7 = base64_0.encode(byteArray4);
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray6));
assertFalse(byteArray2.equals((Object)byteArray5));
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray6));
assertFalse(byteArray4.equals((Object)byteArray5));
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(byteArray7.equals((Object)byteArray5));
assertFalse(byteArray7.equals((Object)byteArray3));
assertFalse(byteArray7.equals((Object)byteArray0));
assertFalse(byteArray7.equals((Object)byteArray1));
assertFalse(byteArray7.equals((Object)byteArray6));
assertFalse(byteArray7.equals((Object)byteArray2));
assertFalse(byteArray7.equals((Object)byteArray4));
assertNotNull(byteArray7);
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals((short)19773, bigInteger0.shortValue());
assertFalse(base64_0.isUrlSafe());
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray6);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray7);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray7);
assertNotSame(byteArray2, byteArray7);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray6);
assertNotSame(byteArray2, byteArray5);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(byteArray4, byteArray7);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray6);
assertNotSame(byteArray4, byteArray5);
assertNotSame(base64_0, base64_1);
assertNotSame(byteArray7, byteArray5);
assertNotSame(byteArray7, byteArray3);
assertNotSame(byteArray7, byteArray0);
assertNotSame(byteArray7, byteArray1);
assertNotSame(byteArray7, byteArray6);
assertNotSame(byteArray7, byteArray2);
assertNotSame(byteArray7, byteArray4);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(52, byteArray4.length);
assertEquals(72, byteArray7.length);

int int0 = base64_1.avail();
assertFalse(base64_1.equals((Object)base64_0));
assertEquals(37, int0);
assertFalse(base64_1.isUrlSafe());
assertNotSame(base64_1, base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);


[MASTER] 03:44:57.685 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:44:57.691 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
assertNotNull(byteArray0);
assertEquals(27, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray3);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertEquals(2, byteArray3.length);

BigInteger bigInteger0 = new BigInteger(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertNotNull(bigInteger0);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);

byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertNotNull(byteArray4);
assertEquals((short)19773, bigInteger0.shortValue());
assertEquals((byte)61, bigInteger0.byteValue());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(52, byteArray2.length);
assertEquals(52, byteArray4.length);

Base64 base64_0 = new Base64();
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

boolean boolean0 = base64_0.hasData();
assertFalse(boolean0);
assertFalse(base64_0.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

byte[] byteArray5 = Base64.encodeBase64(byteArray1, false, true);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray4));
assertNotNull(byteArray5);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray4);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);
assertEquals(51, byteArray5.length);

byte[] byteArray6 = Base64.encodeBase64((byte[]) null, false, false);
assertNull(byteArray6);

Base64 base64_1 = new Base64(76);
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(base64_1);
assertFalse(base64_1.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

int int0 = base64_1.readResults((byte[]) null, 16, (-95));
assertFalse(base64_1.equals((Object)base64_0));
assertEquals(0, int0);
assertFalse(base64_1.isUrlSafe());
assertNotSame(base64_1, base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

base64_0.decode(byteArray1, 1, (-1396));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(base64_0.isUrlSafe());
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(base64_0, base64_1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(27, byteArray0.length);
assertEquals(38, byteArray1.length);


[MASTER] 03:44:57.873 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:44:57.875 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.decodeBase64(") than the specified maxium size of ");
assertNotNull(byteArray0);
assertEquals(21, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertFalse(byteArray1.equals((Object)byteArray0));
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals(21, byteArray0.length);
assertEquals(30, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals(21, byteArray0.length);
assertEquals(30, byteArray1.length);
assertEquals(40, byteArray2.length);

byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray3);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertEquals(2, byteArray3.length);

BigInteger bigInteger0 = new BigInteger(byteArray2);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertNotNull(bigInteger0);
assertEquals((byte)68, bigInteger0.byteValue());
assertEquals((short)17220, bigInteger0.shortValue());
assertEquals(21, byteArray0.length);
assertEquals(30, byteArray1.length);
assertEquals(40, byteArray2.length);

byte[] byteArray4 = Base64.decodeBase64(") than the specified maxium size of ");
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray3));
assertNotNull(byteArray4);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray3);
assertEquals(21, byteArray4.length);

Base64 base64_0 = new Base64();
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

Base64 base64_1 = new Base64(76);
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(base64_1);
assertFalse(base64_1.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

base64_1.decode(byteArray4, 1, 76);

[MASTER] 03:44:58.025 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:44:58.027 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[0];
byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
assertNull(byteArray1);

byte[] byteArray2 = Base64.encodeBase64(byteArray0);
assertNotNull(byteArray2);
assertArrayEquals(new byte[] {}, byteArray0);
assertArrayEquals(new byte[] {}, byteArray2);
assertSame(byteArray0, byteArray2);
assertSame(byteArray2, byteArray0);
assertEquals(0, byteArray0.length);
assertEquals(0, byteArray2.length);

byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertNotNull(byteArray3);
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray3);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertEquals(2, byteArray3.length);

BigInteger bigInteger0 = new BigInteger(byteArray3);
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertNotNull(bigInteger0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray3);
assertEquals((byte) (-125), bigInteger0.byteValue());
assertEquals((short)131, bigInteger0.shortValue());
assertEquals(2, byteArray3.length);

BigInteger bigInteger1 = BigInteger.ZERO;
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertNotNull(bigInteger1);
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertNotSame(bigInteger1, bigInteger0);

byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertNotNull(byteArray4);
assertArrayEquals(new byte[] {}, byteArray4);
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertEquals(0, byteArray4.length);

Base64 base64_0 = new Base64();
assertNotNull(base64_0);
assertFalse(base64_0.isUrlSafe());
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);

Base64 base64_1 = new Base64(64);
assertFalse(base64_1.equals((Object)base64_0));
assertNotNull(base64_1);
assertFalse(base64_1.isUrlSafe());
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);

boolean boolean0 = Base64.isBase64("org.apache.commons.codec.binary.Base64");
assertFalse(boolean0);

base64_1.decode(byteArray0, 76, 0);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(base64_1.equals((Object)base64_0));
assertArrayEquals(new byte[] {}, byteArray0);
assertFalse(base64_1.isUrlSafe());
assertSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray4);
assertNotSame(base64_1, base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(0, byteArray0.length);

byte[] byteArray5 = new byte[3];
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray4));

byteArray5[0] = (byte) (-55);
byteArray5[1] = (byte) (-1);
byteArray5[2] = (byte)9;
byte[] byteArray6 = Base64.discardWhitespace(byteArray5);
assertFalse(byteArray5.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray4));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray5));
assertNotNull(byteArray6);
assertArrayEquals(new byte[] {(byte) (-55), (byte) (-1), (byte)9}, byteArray5);
assertArrayEquals(new byte[] {(byte) (-55), (byte) (-1)}, byteArray6);
assertNotSame(byteArray5, byteArray2);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray6);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray4);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray6, byteArray5);
assertEquals(3, byteArray5.length);
assertEquals(2, byteArray6.length);


[MASTER] 03:44:58.303 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 03:44:58.304 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-125)}, byteArray0);
assertEquals(2, byteArray0.length);

Base64.isArrayByteBase64((byte[]) null);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/BBC-F0/tests/19
* Done!

* Computation finished
