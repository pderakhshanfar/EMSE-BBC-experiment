/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 03:51:50 GMT 2020
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[2] = (byte)59;
      Base64 base64_0 = new Base64((byte)59);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.or(bigInteger0);
      bigInteger1.byteValueExact();
      bigInteger0.divideAndRemainder(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.pow(638);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-50);
      byteArray0[2] = (byte)59;
      byteArray0[1] = (byte) (-50);
      Base64 base64_0 = new Base64((byte)7, byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte) (-93);
      byteArray1[2] = (byte) (-50);
      byteArray1[3] = (byte) (-93);
      byteArray1[4] = (byte)94;
      byteArray1[5] = (byte) (-93);
      byteArray1[6] = (byte)59;
      base64_0.encode(byteArray1, 4, 3);
      base64_0.encode(byteArray0, 3153, (int) (byte) (-93));
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      bigInteger0.pow((byte)59);
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1), byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte) (-71);
      byteArray1[2] = (byte) (-30);
      byteArray1[3] = (byte) (-103);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte)59;
      byteArray0[1] = (byte) (-50);
      Base64 base64_0 = new Base64((byte)7, byteArray0, false);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow((byte)59);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64 base64_1 = new Base64(64);
      Base64.decodeInteger(byteArray3);
      base64_1.decode(byteArray0);
      Base64.discardWhitespace(byteArray1);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-50);
      byteArray0[2] = (byte)59;
      byteArray0[1] = (byte) (-50);
      Base64 base64_0 = new Base64((byte)7, byteArray0, false);
      base64_0.encode(byteArray0, 3153, (int) (byte) (-93));
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow((byte)59);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64 base64_1 = new Base64(64);
      base64_1.decode(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64.decodeInteger(byteArray3);
      base64_0.encode(byteArray3);
      // Undeclared exception!
      base64_1.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-80);
      byteArray0[2] = (byte)59;
      byteArray0[1] = (byte) (-80);
      Base64 base64_0 = new Base64((byte)7, byteArray0, false);
      base64_0.encode(byteArray0, 3153, (int) (byte) (-93));
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow((byte)59);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64 base64_1 = new Base64(64);
      base64_1.decode(byteArray0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      Base64.decodeInteger(byteArray3);
      byte[] byteArray5 = base64_0.encode(byteArray3);
      base64_1.encode(byteArray4);
      // Undeclared exception!
      base64_0.decode(byteArray5);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)126;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 3081);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-93);
      Base64 base64_0 = new Base64((byte)7, byteArray0, true);
      base64_0.encode(byteArray0, 3153, (int) (byte) (-93));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (byte) (-84), 44);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)8;
      byte byte0 = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)32;
      byte byte1 = (byte) (-47);
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)20;
      byte byte2 = (byte)81;
      byteArray0[6] = (byte)81;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.discardWhitespace(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (-552));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -552
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-84);
      byteArray0[2] = (byte)59;
      Base64 base64_0 = new Base64(59, byteArray0, true);
      base64_0.encode(byteArray0, 620, (-95));
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(620);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      assertEquals(12236, byteArray1.length);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray3.length);
      
      Base64.discardWhitespace(byteArray2);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)110;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)84, (byte)80, (byte)47, (byte)85, (byte)82, (byte)82, (byte)117, (byte) (-84), (byte)7}, byteArray1);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)56;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(6, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-93);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1072);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[27];
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray1[5] = (byte)34;
      byteArray1[6] = (byte)34;
      byteArray1[7] = (byte)34;
      byteArray1[8] = (byte)34;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)34);
      Base64 base64_0 = new Base64((byte)34, byteArray2, false);
      Base64.decodeBase64(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 1183);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)118);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)118);
      Base64 base64_1 = new Base64((-1));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)118;
      base64_1.decode(byteArray0, 0, 76);
      Base64.isBase64((byte)30);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-93);
      Base64 base64_0 = new Base64(1072, byteArray0, true);
      base64_0.encode(byteArray0, 3153, (int) (byte) (-93));
      base64_0.hasData();
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(46);
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (byte)59, 1073741824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((byte) (-9), byteArray0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte) (-9);
      byteArray1[2] = (byte) (-9);
      byteArray1[1] = (byte) (-9);
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64(849);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64((byte)123);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)14;
      Base64 base64_0 = new Base64((byte)14);
      base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)118);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 2683);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64(59);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 1, 4407);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(1285);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      base64_0.decode(object1);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      base64_1.encode(byteArray0, 1285, (-241));
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-53);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)46;
      base64_0.encode(byteArray1);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-53);
      byteArray2[1] = (byte)46;
      byteArray2[2] = (byte)46;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-53);
      byteArray2[5] = (byte)46;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((byte)0, byteArray0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64();
      base64_0.readResults((byte[]) null, 0, 0);
      base64_0.decode((String) null);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.testBit(1816);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.isBase64((byte)96);
      bigInteger0.toByteArray();
      base64_0.readResults((byte[]) null, (byte)96, (byte)96);
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 1816, (int) (byte)96);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      try { 
        base64_0.encode((Object) ": ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-1);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 1);
      base64_0.avail();
      Base64.isBase64(byteArray0);
      Base64 base64_1 = new Base64(false);
      Base64 base64_2 = new Base64((byte) (-1), byteArray0);
      Base64.decodeBase64("^s?B2j7glnb~>&|gM");
      base64_1.isUrlSafe();
      Base64.isBase64((byte) (-47));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-108);
      Base64 base64_0 = new Base64(119, byteArray0);
      Base64 base64_1 = new Base64(8, byteArray0, true);
      base64_1.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)1, (-1913));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shiftRight((byte)40);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      Base64.encodeBase64(byteArray0, false, true, 6);
      Base64 base64_0 = new Base64(false);
      boolean boolean0 = Base64.isBase64((byte) (-8));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte) (-109), (byte)46}, byteArray1);
      
      Base64 base64_2 = new Base64((-2299), byteArray0);
      boolean boolean1 = base64_2.isUrlSafe();
      //  // Unstable assertion: assertFalse(boolean1);
      
      boolean boolean2 = Base64.isBase64((byte)61);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(3, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      Base64.decodeInteger(byteArray1);
      base64_0.avail();
      Base64.encodeBase64String(byteArray1);
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)81, (byte)61, (byte)61, (byte) (-109), (byte)46}, byteArray2);
      
      Base64 base64_2 = new Base64(76, byteArray1);
      base64_0.isUrlSafe();
      boolean boolean1 = Base64.isBase64((byte) (-3));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-109);
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-27);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte) (-27));
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)46);
      Base64 base64_0 = new Base64((byte)46, byteArray1, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      Base64.decodeBase64("mN3%kwi}rw");
      int int0 = 0;
      base64_0.decode(byteArray2, 636, 0);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-97);
      Base64 base64_0 = new Base64((-674), byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, true, 76);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.isBase64(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64(byteArray3, true);
      base64_0.avail();
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64.encodeBase64(byteArray5, true, true, (int) (byte)94);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.isBase64(byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)126;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_1 = new Base64((byte) (-1), byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 8192);
      base64_1.isUrlSafe();
      Base64.isBase64((byte)115);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-97);
      Base64 base64_0 = new Base64((-674), byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, true, 368);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.avail();
      Base64.isBase64(byteArray3);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64(byteArray3, true);
      base64_0.avail();
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray3);
      bigInteger0.longValue();
      bigInteger0.pow((byte)39);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray4 = new byte[0];
      Base64.encodeBase64(byteArray4, true, true);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      Base64.isBase64((byte)6);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)116;
      Base64 base64_0 = new Base64((byte) (-120));
      base64_0.avail();
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)126;
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64((byte) (-1), byteArray0);
      Base64.isBase64("=*I&Jx");
      base64_1.decode("e");
      base64_1.isUrlSafe();
      Base64.isBase64((byte)115);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-97);
      Base64 base64_0 = new Base64((-674), byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)40;
      byteArray3[1] = (byte)40;
      byteArray3[2] = (byte) (-97);
      Base64.decodeBase64(byteArray3);
      Base64.isBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray2);
      Base64 base64_1 = new Base64();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(89, byteArray0, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encodeToString(byteArray1);
      int int0 = 4;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.negate();
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger(64, byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-97);
      Base64 base64_0 = new Base64((-674), byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray0, false, true, 364);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray2, false, true, 64);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 260, (int) (byte) (-84));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ZERO;
      bigInteger0.isProbablePrime((-1206));
      bigInteger0.mod(bigInteger2);
      Base64.encodeInteger(bigInteger1);
      Base64.isBase64("");
      Base64 base64_1 = new Base64((-261), byteArray2);
      base64_1.avail();
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64();
      base64_0.readResults((byte[]) null, 0, 0);
      base64_0.decode((String) null);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.testBit(1816);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte byte0 = (byte)96;
      Base64.isBase64((byte)96);
      base64_0.hasData();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 1816, (int) (byte)96);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 1328);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, 19, 0);
      byte[] byteArray1 = base64_0.decode("");
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.testBit(0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64((byte) (-21));
      bigInteger0.toByteArray();
      base64_0.readResults(byteArray0, 1816, 1816);
      Base64.encodeBase64(byteArray2, false);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger1.max(bigInteger0);
      BigInteger bigInteger3 = BigInteger.ONE;
      BigInteger bigInteger4 = BigInteger.TEN;
      bigInteger4.mod(bigInteger3);
      Base64.encodeInteger(bigInteger2);
      Base64.isBase64("{$K#X!j-");
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null, true, true, 0);
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1);
      base64_0.decode(byteArray1, (-1165), (int) (byte) (-106));
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte) (-4));
      byte[] byteArray3 = bigInteger0.toByteArray();
      base64_0.readResults(byteArray3, 28, 21);
      Base64.encodeBase64(byteArray2, true);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.max(bigInteger0);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.mod(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("");
      base64_0.avail();
      base64_0.readResults(byteArray3, 18, (-1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64();
      base64_0.readResults((byte[]) null, 0, 0);
      base64_0.decode((String) null);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.testBit(1816);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.avail();
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(101, byteArray0, false);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      String string0 = "P";
      byte[] byteArray0 = Base64.decodeBase64("P");
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = new byte[1];
      Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64(64, byteArray0);
      Base64.decodeBase64(byteArray1);
      boolean boolean0 = false;
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)113;
      byteArray4[1] = (byte)5;
      byteArray4[2] = (byte)113;
      byteArray4[3] = (byte)5;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)113;
      Base64.encodeBase64(byteArray4, false);
      Base64.encodeBase64(byteArray2, true);
      Base64.decodeInteger(byteArray3);
      try { 
        base64_0.encode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-93);
      Base64 base64_0 = new Base64(1072, byteArray0, true);
      base64_0.encode(byteArray0, 3153, (int) (byte) (-93));
      base64_0.hasData();
      Base64.discardWhitespace(byteArray0);
      base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(46);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((byte[]) null, 0, 0);
      byte[] byteArray0 = new byte[9];
      Base64.encodeBase64(byteArray0, false, false, 32);
      int int0 = 116;
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)63;
      byteArray1[0] = (byte)63;
      Base64 base64_1 = new Base64(116, byteArray1);
      Base64.isBase64(") than the specified maxium size of ");
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = 90;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 90);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(90, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAAAAAAA\uFFFD\u0007]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1);
      base64_0.decode(byteArray1, (-1165), (int) (byte) (-106));
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      bigInteger0.max(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger3);
      Base64.isBase64("}to_,7mofM0Bmogd");
      int int0 = Base64.MIME_CHUNK_SIZE;
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64("P");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)95;
      base64_0.encode(byteArray2, (int) (byte)95, 0);
      base64_0.hasData();
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-127);
      Base64.discardWhitespace(byteArray3);
      byte[] byteArray4 = base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      bigInteger0.bitLength();
      bigInteger0.pow(76);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray2);
      base64_0.encodeToString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-701), 1328);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -701
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      bigInteger0.max(bigInteger1);
      bigInteger1.mod(bigInteger0);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(89, byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      
      Base64.encodeBase64Chunked(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0007;\uFFFD\u0000}+\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((byte[]) null, 0, 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)22;
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode("jA==");
      Base64.decodeBase64((byte[]) null);
      Base64.decodeBase64("jA==");
      base64_0.encode((byte[]) null, (int) (byte) (-116), 746);
      Base64.encodeBase64((byte[]) null, true, false);
      Base64.decodeBase64((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      base64_0.decode("+_mK%z#4^gT[");
      byte[] byteArray2 = base64_0.decode("jA==");
      Base64.isArrayByteBase64(byteArray2);
      Base64.decodeBase64("jA==");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      base64_0.avail();
      base64_0.decode((byte[]) null);
      Base64.encodeBase64(byteArray1, false, true, 62);
      base64_0.avail();
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-1853));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1853
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64(121, (byte[]) null);
      base64_0.encode((byte[]) null, (-370), (-1));
      base64_0.decode("vS*");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.bitLength();
      bigInteger1.clearBit(76);
      bigInteger0.divide(bigInteger1);
      bigInteger0.floatValue();
      Base64.encodeInteger(bigInteger0);
      base64_0.decode((byte[]) null, 1, 121);
      base64_0.decode("");
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64((-608), byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0, 0, (-608));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      Object object0 = base64_0.decode((Object) ") than the specified maxium size of ");
      Object object1 = base64_0.decode(object0);
      Object object2 = base64_0.decode(object1);
      base64_0.decode(object2);
      base64_0.decode((Object) "e1PEzj^?R2k$;JAHc");
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(89, byteArray0, false);
      boolean boolean0 = base64_0.isUrlSafe();
      boolean boolean1 = Base64.isBase64((byte)76);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "ZQY?{!5xgkLiVGpbK";
      byte[] byteArray0 = Base64.decodeBase64("ZQY?{!5xgkLiVGpbK");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1050, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [ZQY5xgkLiVGpbA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-97);
      Base64 base64_0 = new Base64((-674), byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, true, 368);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.avail();
      Base64.isBase64(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64(byteArray3, true);
      base64_0.avail();
      Base64.encodeBase64URLSafeString(byteArray4);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray5, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (18) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)26;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.toString(92);
      bigInteger1.not();
      bigInteger0.min(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray3 = new byte[0];
      Base64.decodeBase64(byteArray3);
      bigInteger0.intValueExact();
      base64_0.encode(byteArray1);
      base64_0.hasData();
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray2);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64(1272);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)69;
      base64_0.encode(byteArray0, (int) (byte)82, (-1270));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)98;
      byteArray1[3] = (byte) (-80);
      byteArray1[4] = (byte) (-65);
      byteArray1[5] = (byte) (-80);
      byteArray1[6] = (byte)111;
      byteArray1[7] = (byte)20;
      byteArray1[8] = (byte)0;
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64(28, (byte[]) null, false);
      base64_0.hasData();
      Base64.encodeBase64((byte[]) null, false, true);
      base64_0.encode((byte[]) null);
      Base64.isBase64("");
      byte[] byteArray0 = Base64.decodeBase64("");
      base64_0.readResults(byteArray0, 28, 28);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
      base64_0.readResults(byteArray0, (byte)0, 1157);
      Base64.decodeBase64((String) null);
      byteArray0[1] = (byte)115;
      Base64.isBase64("Vq[WCRiB");
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      base64_0.decode(byteArray1);
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
      Base64.decodeBase64("g'p.tDl]2#+");
      base64_0.decode("org.apache.commons.codec.binary.Base64");
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      Base64.isBase64((byte)88);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64((byte[]) null, true, true);
      byte[] byteArray1 = new byte[6];
      byte byte0 = (byte)98;
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)88;
      base64_0.decode((Object) "e]/B A");
      byteArray1[2] = (byte)88;
      byteArray1[3] = (byte)88;
      base64_0.decode(byteArray1, (int) (byte)88, 46);
      byteArray1[4] = (byte)88;
      byteArray1[5] = (byte)88;
      Base64.encodeBase64(byteArray1);
      Base64.decodeBase64("e]/B A");
      base64_0.encode((byte[]) null, (int) (byte)88, (int) (byte)88);
      String string0 = "(fwJyMP8X4";
      try { 
        base64_0.encode((Object) "(fwJyMP8X4");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64("P");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)95;
      base64_0.encode(byteArray2, (int) (byte)95, 0);
      base64_0.hasData();
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-127);
      Base64.discardWhitespace(byteArray3);
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      bigInteger0.pow(76);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64.decodeBase64("]");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-76);
      byteArray1[7] = (byte)0;
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64();
      base64_0.readResults((byte[]) null, 0, 0);
      base64_0.decode((String) null);
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.testBit(1816);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.isBase64((byte)96);
      bigInteger0.toByteArray();
      base64_0.readResults((byte[]) null, (byte)96, (byte)96);
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 1816, (int) (byte)96);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1816
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)1;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(120, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDt_\u0000\uFFFD\u0004\uFFFD\u0001]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)0, 0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom(4L);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte)0, 1791, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.signum();
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte) (-1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-95);
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-66);
      byteArray1[6] = (byte)60;
      Base64 base64_0 = new Base64((byte)114, byteArray1);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-25);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AEwA9uc]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("nQ==", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)85;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertArrayEquals(new byte[] {(byte)82, (byte)81, (byte)72, (byte)81, (byte)54, (byte)122, (byte)116, (byte)86}, byteArray1);
      assertEquals(8, byteArray1.length);
  }
}
