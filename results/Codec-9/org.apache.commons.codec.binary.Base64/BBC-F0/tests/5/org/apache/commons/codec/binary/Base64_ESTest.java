/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 03:42:52 GMT 2020
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      Base64 base64_0 = new Base64((byte)15, byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)15;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)15;
      BigInteger bigInteger1 = new BigInteger(byteArray3);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray6 = base64_0.encode(byteArray5);
      base64_0.encode(byteArray1, (-1), (int) (byte)15);
      Base64 base64_1 = new Base64();
      base64_0.decode(byteArray6);
      base64_1.decode(byteArray3, 2457, (-4598));
      // Undeclared exception!
      base64_0.decode(byteArray6);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      Base64 base64_0 = new Base64((byte)8, byteArray0);
      Object object0 = new Object();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      base64_0.decode(byteArray2);
      base64_0.encodeToString(byteArray2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64("r/JK0Bscv~wyH2v");
      byte[] byteArray4 = base64_0.decode(byteArray3);
      base64_0.encode(byteArray4, (int) (byte)8, (int) (byte)8);
      byte[] byteArray5 = new byte[4];
      byteArray5[0] = (byte)8;
      byteArray5[1] = (byte)8;
      byteArray5[2] = (byte)8;
      byteArray5[3] = (byte)8;
      Base64.discardWhitespace(byteArray5);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      Base64 base64_0 = new Base64((byte)8, byteArray0);
      Object object0 = new Object();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertEquals(236, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64("r/JK0Bscv~wyH2v");
      byte[] byteArray5 = base64_0.decode(byteArray4);
      assertEquals(1596, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)3;
      int int0 = 919;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 919);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1, 1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)115;
      Base64.encodeBase64(byteArray0);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)27;
      base64_0.encode(byteArray1, 1, 1);
      base64_0.encode(byteArray0, 1, (-185));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-4);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)115;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)27;
      base64_0.encode(byteArray1, 1, 1);
      base64_0.encode(byteArray0, 1, (-185));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (byte)13, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 1, 1);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-4);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)115;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)27;
      base64_0.encode(byteArray2, 1, 1);
      base64_0.encode(byteArray0, 1, (-185));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte) (-35);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Base64 base64_0 = new Base64(25);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(5, byteArray2.length);
      
      base64_0.decode(byteArray1, (int) (byte)0, 42);
      assertArrayEquals(new byte[] {(byte)87, (byte)119, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      
      int int0 = base64_0.avail();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      assertEquals(30, byteArray0.length);
      
      byte[] byteArray1 = new byte[32];
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64((byte)26, byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafe(byteArray2);
      int int0 = base64_0.readResults(byteArray2, 1, (-2632));
      assertEquals(108, byteArray2.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[26];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      base64_0.decode(byteArray2, (int) (byte)26, (int) (byte)26);
      assertEquals(36, byteArray2.length);
      assertEquals(36, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Base64 base64_0 = new Base64(5);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)51;
      byteArray0[5] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Base64 base64_0 = new Base64(25);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(5, byteArray2.length);
      
      base64_0.decode(byteArray1, (int) (byte)0, 42);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)87, (byte)49, (byte)115, (byte)65, (byte)77, (byte)119, (byte)65, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray1, 64, (-919));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Base64 base64_0 = new Base64(25);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)116;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      assertEquals(7, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      
      byteArray2[2] = (byte)0;
      base64_0.encode(byteArray2, 41, (int) (byte)0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      assertEquals(3, byteArray4.length);
      
      byte[] byteArray5 = new byte[9];
      byteArray5[0] = (byte)99;
      byteArray5[1] = (byte)91;
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte)116;
      byteArray5[5] = (byte)116;
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)116);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.avail();
      base64_0.encode(byteArray1, (-1555), (-938));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)3, (byte)6}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte)11;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-113), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\b\uFFFD~\uFFFD{\u0011\uFFFDl\u000B]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)122;
      byteArray0[8] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)3, (byte)6, (byte)53, (byte)47, (byte)108, (byte)74, (byte)1, (byte)122}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((byte)7, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.isBase64(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)7, (int) (byte)7);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Base64 base64_0 = new Base64((-2236));
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byteArray0[1] = (byte)32;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)32);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64((byte)0, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 6);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray2, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-115);
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte) (-115);
      byteArray1[4] = (byte) (-115);
      byteArray1[5] = (byte)47;
      byteArray1[6] = (byte) (-115);
      byteArray1[7] = (byte) (-115);
      byteArray1[8] = (byte)47;
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray1, 2137, (int) (byte) (-115));
      base64_0.decode((Object) "zZ}IqelK^0thV");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Base64 base64_0 = new Base64((-2236));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-120);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byteArray1[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64URLSafe(byteArray2);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray2, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64.isBase64((byte)127);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)127;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[0];
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)127);
      Base64 base64_0 = new Base64(485, byteArray0, false);
      base64_0.readResults((byte[]) null, (byte)127, (byte)127);
      base64_0.decode(byteArray0);
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger1.add(bigInteger2);
      bigInteger0.max(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.abs();
      Base64 base64_0 = new Base64((-279), (byte[]) null, true);
      Base64 base64_1 = new Base64(26, byteArray0);
      base64_1.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger1.add(bigInteger2);
      bigInteger0.max(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.abs();
      Base64 base64_0 = new Base64(26);
      BigInteger bigInteger3 = BigInteger.ZERO;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-19);
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)44;
      byteArray1[4] = (byte)95;
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger3);
      BigInteger bigInteger4 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger4);
      Base64.isBase64((byte)113);
      Base64.decodeInteger(byteArray3);
      base64_0.encode(byteArray2, (-1609), (-1175));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte)113, (-1609));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      byte[] byteArray1 = new byte[20];
      byteArray1[0] = (byte)26;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      base64_0.encode(byteArray1, (int) (byte)26, (int) (byte)26);
      Base64.isBase64((byte)34);
      Base64.isBase64((byte)22);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64((byte)26, byteArray1);
      base64_1.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)60;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 32);
      Base64 base64_0 = new Base64((byte)0, (byte[]) null, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, (int) (byte)60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger1.add(bigInteger2);
      bigInteger0.max(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.abs();
      Base64 base64_0 = new Base64((-1173));
      base64_0.readResults(byteArray0, 1237, (-1575));
      Base64.isBase64(byteArray0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte) (-115);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, (int) (byte)15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((String) null);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_1 = new Base64(2545);
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 2545, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)22;
      byte byte0 = (byte)36;
      byteArray0[2] = (byte)36;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 52);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 25);
      Base64.discardWhitespace(byteArray2);
      Random.setNextRandom(52);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-212), (byte[]) null);
      base64_0.avail();
      base64_0.readResults((byte[]) null, 1, 48);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((String) null);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(4);
      MockRandom mockRandom0 = new MockRandom((-920L));
      BigInteger bigInteger0 = new BigInteger(64, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte)104);
      Base64.decodeBase64((String) null);
      base64_0.hasData();
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.compareTo(bigInteger0);
      bigInteger0.remainder(bigInteger1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-46);
      Base64 base64_1 = new Base64((byte) (-46), byteArray0);
      base64_1.encode(byteArray0, 1948, (int) (byte) (-46));
      base64_1.hasData();
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((String) null);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(4);
      Base64.isBase64((byte)104);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-88);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray1);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray1, Integer.MAX_VALUE, (byte) (-88));
      base64_0.decode((Object) "2Kg");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(255, byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray1);
      base64_0.encodeToString(byteArray2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.clearBit(255);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(123, byteArray3, false);
      Base64 base64_2 = new Base64(false);
      Base64.encodeInteger(bigInteger1);
      base64_2.decode(byteArray0);
      byte[] byteArray4 = null;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-501));
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, (int) (byte)0, 929);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)119;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)119;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-83);
      byteArray1[7] = (byte)119;
      byteArray1[8] = (byte)119;
      base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(false);
      base64_0.encode(byteArray1, (int) (byte)0, 743);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_1.decode(byteArray0, 2, (-88));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte byte0 = (byte)48;
      byte byte1 = (byte)26;
      byte byte2 = (byte)1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)1;
      byte byte3 = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_1 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, (int) (byte)1, 3967);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-67);
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.nextProbablePrime();
      bigInteger0.negate();
      bigInteger0.negate();
      Base64.encodeBase64(byteArray1, false, true, (int) (byte)40);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger2);
      Base64.isBase64((byte)40);
      base64_0.readResults(byteArray1, 48, 303);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)48;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64((byte)56);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      Base64.decodeBase64((String) null);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)48;
      Base64.encodeBase64(byteArray3, true, false, (int) (byte)48);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2623, byteArray2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [ww==\u0003\u0006]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64((-2236));
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)24;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      base64_0.encode(byteArray2, (int) (byte)24, 743);
      Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      int int0 = 255;
      Base64 base64_0 = new Base64(255, byteArray0);
      boolean boolean0 = false;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray2);
      base64_0.decode("<LPv3M\"?Mf@HR+#4/*");
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-80);
      byteArray3[1] = (byte)32;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64(1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64(25);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      String string0 = "Parameter supplied to Base64 decode is not a byte[] or a String";
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-95), byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [oQA=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      Base64 base64_0 = new Base64(69, byteArray0, true);
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger3 = bigInteger1.max(bigInteger2);
      Base64.toIntegerBytes(bigInteger3);
      Base64.isBase64("qAAAAAA\uFFFD\u0000\u0000\u0000\u0000");
      Object object0 = base64_0.decode((Object) "qAAAAAA\uFFFD\u0000\u0000\u0000\u0000");
      base64_0.encode(object0);
      base64_0.encode(object0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encode(byteArray0, 456, (-12));
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-88);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-88);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-39);
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(1647);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      Base64 base64_1 = new Base64((-2323), byteArray0, true);
      base64_1.encode(byteArray0, (int) (byte) (-1), (-102));
      Base64.encodeBase64String(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.isBase64((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.decodeBase64("ISO-8859-1");
      Base64 base64_0 = new Base64(92, byteArray0, true);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)79;
      byteArray2[1] = (byte)53;
      byteArray2[2] = (byte)97;
      Base64.encodeBase64String(byteArray2);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray2, 758, (-240));
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode(byteArray3, (int) (byte)1, 123);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64(1);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 1991, 1991);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)26, byteArray0, true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(") than the specified maxium size of ");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1218, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0016\uFFFD\uFFFD\u0017\uFFFD\uFFFD\uFFFD\"~'\uFFFD\uFFFD\uFFFDb\uFFFDk\"\uFFFD\uFFFD\u001F]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger1.negate();
      bigInteger3.xor(bigInteger0);
      Base64.encodeBase64(byteArray1);
      Base64.toIntegerBytes(bigInteger2);
      base64_0.hasData();
      Base64.discardWhitespace(byteArray1);
      base64_0.avail();
      Object object0 = new Object();
      try { 
        base64_0.decode((Object) bigInteger2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      int int0 = (-1104);
      Base64 base64_0 = new Base64((-1104), (byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(4628, (byte[]) null);
      byte[] byteArray1 = new byte[6];
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64((-3125));
      Base64.decodeBase64("fd{h)+'w[#OblQ|(");
      try { 
        base64_0.encode((Object) "AAAAAAAA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64(4628, (byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)35;
      Base64.isBase64((byte)16);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64((byte[]) null, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)17;
      byteArray1[2] = (byte) (-27);
      byteArray1[3] = (byte)16;
      byteArray1[4] = (byte)16;
      byteArray1[5] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte) (-27));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -27
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64(4628, (byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-27);
      Base64.encodeBase64((byte[]) null, true, true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-88);
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-88);
      byte byte1 = (byte) (-39);
      byteArray0[3] = (byte) (-39);
      byte byte2 = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)94);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.decodeBase64("qACo2QA");
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-39);
      byte byte3 = (byte) (-18);
      byteArray2[2] = (byte) (-18);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, true, (-187));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -187
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64(4628, (byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)35;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.decode("UTF-16");
      base64_0.avail();
      base64_0.decode("AAA");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 64);
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray1, false, false, 76);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray2, 699, 255);
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 4628;
      byte[] byteArray0 = null;
      byte byte0 = (byte)119;
      byte byte1 = (byte)1;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)1;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.decode("");
      base64_0.avail();
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)23);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false);
      Base64.encodeBase64(byteArray2, false, false, (int) (byte)1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray5 = Base64.decodeBase64(byteArray4);
      Base64.decodeBase64("");
      Base64.encodeBase64String(byteArray5);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 255, 794);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(4628, (byte[]) null);
      byte[] byteArray1 = new byte[6];
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-95);
      byteArray0[0] = (byte) (-95);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      int int0 = 3;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 3, 808);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      int int0 = 255;
      Base64 base64_0 = new Base64(255, byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64(1647);
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode("");
      Base64.encodeBase64(byteArray1, true, false);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64((-2236));
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)0;
      base64_0.decode(byteArray1);
      base64_0.decode(byteArray0, 0, 1);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("l");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-80);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = base64_0.decode("<LPv3M\"?Mf@HR+#4/*");
      byteArray0[6] = (byte)0;
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.decodeBase64("<LPv3M\"?Mf@HR+#4/*");
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      Base64.encodeBase64Chunked(byteArray4);
      Base64.encodeBase64(byteArray2, false);
      base64_0.hasData();
      Base64.discardWhitespace(byteArray4);
      Base64.isArrayByteBase64(byteArray2);
      base64_0.decode("");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64((-198));
      base64_0.encodeToString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger1.remainder(bigInteger0);
      BigInteger bigInteger2 = new BigInteger(byteArray1);
      bigInteger2.signum();
      bigInteger0.or(bigInteger2);
      Base64.decodeInteger(byteArray0);
      bigInteger0.isProbablePrime((-198));
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger3 = bigInteger0.min(bigInteger2);
      bigInteger0.testBit(10);
      base64_0.hasData();
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.avail();
      base64_0.isUrlSafe();
      String string0 = "]";
      Base64.isBase64("]");
      bigInteger1.divideAndRemainder(bigInteger3);
      bigInteger1.not();
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray2);
      try { 
        base64_0.encode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)1;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.decode("");
      base64_0.avail();
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)23);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false);
      Base64.encodeBase64(byteArray2, true, false, (int) (byte)1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray5 = Base64.decodeBase64(byteArray4);
      base64_0.decode(byteArray3);
      Base64.encodeBase64String(byteArray5);
      base64_0.encode(byteArray1, 255, 794);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)63;
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)91;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-49);
      base64_0.decode((String) null);
      byteArray1[2] = (byte)107;
      Base64.encodeBase64(byteArray1);
      base64_0.decode("");
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)100;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.testBit(0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(749, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [O\uFFFD'\u00001d]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode("org.apache.commons.codec.binary.Base64");
      base64_0.encode((byte[]) null, 3253, (-1));
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      boolean boolean1 = false;
      Base64.encodeBase64((byte[]) null, false, false, 0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("q:Pmgg2ir;,)");
      base64_0.hasData();
      base64_0.encode(byteArray1, 3253, 63);
      BigInteger bigInteger0 = BigInteger.valueOf(64);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      bigInteger1.shiftLeft(3253);
      bigInteger0.pow(0);
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger2, bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.compareTo(bigInteger0);
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-46);
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-1);
      base64_0.encodeToString(byteArray0);
      bigInteger0.max(bigInteger2);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("0v8\r\n");
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(28, byteArray1, true);
      String string0 = "j'dbwYki";
      base64_0.decode("j'dbwYki");
      byte[] byteArray3 = base64_0.decode("");
      byte[] byteArray4 = base64_0.encode(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray4);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.isBase64(") than the specified maxium size of ");
      byte[] byteArray0 = new byte[8];
      Base64.isBase64("");
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)13;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shortValueExact();
      bigInteger0.flipBit(2821);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)77;
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.decode("");
      base64_0.avail();
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64(byteArray1);
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.signum();
      bigInteger0.subtract(bigInteger1);
      bigInteger0.abs();
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) "_wDxAA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, false, 344);
      Base64 base64_0 = new Base64(75);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-11);
      base64_0.encodeToString(byteArray0);
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-1);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64(4628, (byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-27);
      base64_0.encode(byteArray0, 88, 0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)21;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1526, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [pk\u0000\uFFFDw\uFFFD\u0000\u0015]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = (-256);
      Base64 base64_0 = new Base64((-256));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)123;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[4];
      byte byte0 = (byte)109;
      try { 
        base64_0.encode((Object) "Input array too big, the output array would be bigger (");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)34;
      Base64.encodeBase64(byteArray0, true);
      Base64.decodeBase64("");
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64(1647);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64(byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)54;
      byteArray0[1] = (byte)54;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1869, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u00006]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)43;
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray1[1] = (byte)0;
      Base64.decodeBase64(byteArray0);
      byteArray1[2] = (byte) (-89);
      byteArray1[3] = (byte)0;
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      Base64.encodeBase64Chunked(byteArray1);
      Object object1 = base64_0.decode((Object) "]");
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)96;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(41);
      String string0 = null;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-308), 4844);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -308
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-23);
      byteArray0[0] = (byte) (-23);
      byte byte1 = (byte)40;
      byteArray0[1] = (byte)40;
      byte byte2 = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger0.negate();
      bigInteger0.xor(bigInteger1);
      bigInteger0.byteValueExact();
      Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      Base64.discardWhitespace(byteArray0);
      base64_0.avail();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 76);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)65, (byte)65, (byte)13, (byte)10}, byteArray1);
      
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "");
      byte[] byteArray0 = base64_0.decode("");
      base64_0.decode(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)98;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)66;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-115);
      byteArray1[7] = (byte)126;
      byteArray1[8] = (byte) (-128);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)108}, byteArray2);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)23;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-122);
      byteArray1[1] = (byte) (-122);
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-98);
      byteArray1[6] = (byte) (-98);
      byteArray1[7] = (byte)0;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(255, byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray1);
      base64_0.encodeToString(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.clearBit(76);
      bigInteger0.isProbablePrime(255);
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger2 = null;
      // Undeclared exception!
      try { 
        bigInteger1.compareTo((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
