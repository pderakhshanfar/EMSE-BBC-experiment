/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 03:41:01 GMT 2020
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8202, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
      mockRandom0.nextBytes(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(8202, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0001\u0001\u0000\u0000\u0002\u0001\u0000\u0000\u0003\u0001\u0000\u0000\u0004\u0001\u0000\u0000\u0005\u0001\u0000\u0000\u0006\u0001\u0000\u0000\u0007\u0001\u0000\u0000\b\u0001\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u000B\u0001\u0000\u0000\f\u0001\u0000\u0000\u0001\u0000\u0000\u000E\u0001\u0000\u0000\u000F\u0001\u0000\u0000\u0010\u0001\u0000\u0000\u0011\u0001\u0000\u0000\u0012\u0001\u0000\u0000\u0013\u0001\u0000\u0000\u0014\u0001\u0000\u0000\u0015\u0001\u0000\u0000\u0016\u0001\u0000\u0000\u0017\u0001\u0000\u0000\u0018\u0001\u0000\u0000\u0019\u0001\u0000\u0000\u001A\u0001\u0000\u0000\u001B\u0001\u0000\u0000\u001C\u0001\u0000\u0000\u001D\u0001\u0000\u0000\u001E\u0001\u0000\u0000\u001F\u0001\u0000\u0000\u0001\u0000\u0000!\u0001\u0000\u0000\"\u0001\u0000\u0000#\u0001\u0000\u0000$\u0001\u0000\u0000%\u0001\u0000\u0000&\u0001\u0000\u0000'\u0001\u0000\u0000(\u0001\u0000\u0000)\u0001\u0000\u0000*\u0001\u0000\u0000+\u0001\u0000\u0000,\u0001\u0000\u0000-\u0001\u0000\u0000.\u0001\u0000\u0000/\u0001\u0000\u00000\u0001\u0000\u00001\u0001\u0000\u00002\u0001\u0000\u00003\u0001\u0000\u00004\u0001\u0000\u00005\u0001\u0000\u00006\u0001\u0000\u00007\u0001\u0000\u00008\u0001\u0000\u00009\u0001\u0000\u0000:\u0001\u0000\u0000;\u0001\u0000\u0000<\u0001\u0000\u0000=\u0001\u0000\u0000>\u0001\u0000\u0000?\u0001\u0000\u0000@\u0001\u0000\u0000A\u0001\u0000\u0000B\u0001\u0000\u0000C\u0001\u0000\u0000D\u0001\u0000\u0000E\u0001\u0000\u0000F\u0001\u0000\u0000G\u0001\u0000\u0000H\u0001\u0000\u0000I\u0001\u0000\u0000J\u0001\u0000\u0000K\u0001\u0000\u0000L\u0001\u0000\u0000M\u0001\u0000\u0000N\u0001\u0000\u0000O\u0001\u0000\u0000P\u0001\u0000\u0000Q\u0001\u0000\u0000R\u0001\u0000\u0000S\u0001\u0000\u0000T\u0001\u0000\u0000U\u0001\u0000\u0000V\u0001\u0000\u0000W\u0001\u0000\u0000X\u0001\u0000\u0000Y\u0001\u0000\u0000Z\u0001\u0000\u0000[\u0001\u0000\u0000\\\u0001\u0000\u0000]\u0001\u0000\u0000^\u0001\u0000\u0000_\u0001\u0000\u0000`\u0001\u0000\u0000a\u0001\u0000\u0000b\u0001\u0000\u0000c\u0001\u0000\u0000d\u0001\u0000\u0000e\u0001\u0000\u0000f\u0001\u0000\u0000g\u0001\u0000\u0000h\u0001\u0000\u0000i\u0001\u0000\u0000j\u0001\u0000\u0000k\u0001\u0000\u0000l\u0001\u0000\u0000m\u0001\u0000\u0000n\u0001\u0000\u0000o\u0001\u0000\u0000p\u0001\u0000\u0000q\u0001\u0000\u0000r\u0001\u0000\u0000s\u0001\u0000\u0000t\u0001\u0000\u0000u\u0001\u0000\u0000v\u0001\u0000\u0000w\u0001\u0000\u0000x\u0001\u0000\u0000y\u0001\u0000\u0000z\u0001\u0000\u0000{\u0001\u0000\u0000|\u0001\u0000\u0000}\u0001\u0000\u0000~\u0001\u0000\u0000\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\uFFFD\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0001\u0002\u0000\u0000\u0002\u0002\u0000\u0000\u0003\u0002\u0000\u0000\u0004\u0002\u0000\u0000\u0005\u0002\u0000\u0000\u0006\u0002\u0000\u0000\u0007\u0002\u0000\u0000\b\u0002\u0000\u0000\u0002\u0000\u0000\u0002\u0000\u0000\u000B\u0002\u0000\u0000\f\u0002\u0000\u0000\u0002\u0000\u0000\u000E\u0002\u0000\u0000\u000F\u0002\u0000\u0000\u0010\u0002\u0000\u0000\u0011\u0002\u0000\u0000\u0012\u0002\u0000\u0000\u0013\u0002\u0000\u0000\u0014\u0002\u0000\u0000\u0015\u0002\u0000\u0000\u0016\u0002\u0000\u0000\u0017\u0002\u0000\u0000\u0018\u0002\u0000\u0000\u0019\u0002\u0000\u0000\u001A\u0002\u0000\u0000\u001B\u0002\u0000\u0000\u001C\u0002\u0000\u0000\u001D\u0002\u0000\u0000\u001E\u0002\u0000\u0000\u001F\u0002\u0000\u0000\u0002\u0000\u0000!\u0002\u0000\u0000\"\u0002\u0000\u0000#\u0002\u0000\u0000$\u0002\u0000\u0000%\u0002\u0000\u0000&\u0002\u0000\u0000'\u0002\u0000\u0000(\u0002\u0000\u0000)\u0002\u0000\u0000*\u0002\u0000\u0000+\u0002\u0000\u0000,\u0002\u0000\u0000-\u0002\u0000\u0000.\u0002\u0000\u0000/\u0002\u0000\u00000\u0002\u0000\u00001\u0002\u0000\u00002\u0002\u0000\u00003\u0002\u0000\u00004\u0002\u0000\u00005\u0002\u0000\u00006\u0002\u0000\u00007\u0002\u0000\u00008\u0002\u0000\u00009\u0002\u0000\u0000:\u0002\u0000\u0000;\u0002\u0000\u0000<\u0002\u0000\u0000=\u0002\u0000\u0000>\u0002\u0000\u0000?\u0002\u0000\u0000@\u0002\u0000\u0000A\u0002\u0000\u0000B\u0002\u0000\u0000C\u0002\u0000\u0000D\u0002\u0000\u0000E\u0002\u0000\u0000F\u0002\u0000\u0000G\u0002\u0000\u0000H\u0002\u0000\u0000I\u0002\u0000\u0000J\u0002\u0000\u0000K\u0002\u0000\u0000L\u0002\u0000\u0000M\u0002\u0000\u0000N\u0002\u0000\u0000O\u0002\u0000\u0000P\u0002\u0000\u0000Q\u0002\u0000\u0000R\u0002\u0000\u0000S\u0002\u0000\u0000T\u0002\u0000\u0000U\u0002\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(8278);
      BigInteger bigInteger0 = new BigInteger(8278, mockRandom1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      mockRandom1.doubles();
      mockRandom1.nextFloat();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)61, 85);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-3011), 1016);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3011
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1409, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[4];
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)102;
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.isArrayByteBase64(byteArray1);
      mockRandom0.longs((-722L), 54L);
      base64_0.avail();
      base64_0.decode(byteArray2, (int) (byte)0, 1409);
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1409, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)61;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte) (-123);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.isArrayByteBase64(byteArray1);
      mockRandom0.longs((-722L), 54L);
      base64_0.avail();
      Random.setNextRandom(64);
      base64_0.decode(byteArray2, (int) (byte)61, 1409);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1409, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8188, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)61;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte) (-123);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.avail();
      Random.setNextRandom(64);
      base64_0.decode(byteArray2, (int) (byte)61, 1409);
      assertEquals(1368, byteArray2.length);
      assertEquals(1368, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1409, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8188, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1409, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [DQAAAC4AAAAvAAAAMAAAADEAAAAyAAAAMwAAADQAAAA1AAAANgAAADcAAAA4AAAAOQAAADoAAAA7AAAAPAAAAD0AAAA+AAAAPwAAAEAAAABBAAAAQgAAAEMAAABEAAAARQAAAEYAAABHAAAASAAAAEkAAABKAAAASwAAAEwAAABNAAAATgAAAE8AAABQAAAAUQAAAFIAAABTAAAAVAAAAFUAAABWAAAAVwAAAFgAAABZAAAAWgAAAFsAAABcAAAAXQAAAF4AAABfAAAAYAAAAGEAAABiAAAAYwAAAGQAAABlAAAAZgAAAGcAAABoAAAAaQAAAGoAAABrAAAAbAAAAG0AAABuAAAAbwAAAHAAAABxAAAAcgAAAHMAAAB0AAAAdQAAAHYAAAB3AAAAeAAAAHkAAAB6AAAAewAAAHwAAAB9AAAAfgAAAH8AAACAAAAAgQAAAIIAAACDAAAAhAAAAIUAAACGAAAAhwAAAIgAAACJAAAAigAAAIsAAACMAAAAjQAAAI4AAACPAAAAkAAAAJEAAACSAAAAkwAAAJQAAACVAAAAlgAAAJcAAACYAAAAmQAAAJoAAACbAAAAnAAAAJ0AAACeAAAAnwAAAKAAAAChAAAAogAAAKMAAACkAAAApQAAAKYAAACnAAAAqAAAAKkAAACqAAAAqwAAAKwAAACtAAAArgAAAK8AAACwAAAAsQAAALIAAACzAAAAtAAAALUAAAC2AAAAtwAAALgAAAC5AAAAugAAALsAAAC8AAAAvQAAAL4AAAC/AAAAwAAAAMEAAADCAAAAwwAAAMQAAADFAAAAxgAAAMcAAADIAAAAyQAAAMoAAADLAAAAzAAAAM0AAADOAAAAzwAAANAAAADRAAAA0gAAANMAAADUAAAA1QAAANYAAADXAAAA2AAAANkAAADaAAAA2wAAANwAAADdAAAA3gAAAN8AAADgAAAA4QAAAOIAAADjAAAA5AAAAOUAAADmAAAA5wAAAOgAAADpAAAA6gAAAOsAAADsAAAA7QAAAO4AAADvAAAA8AAAAPEAAADyAAAA8wAAAPQAAAD1AAAA9gAAAPcAAAD4AAAA+QAAAPoAAAD7AAAA/AAAAP0AAAD+AAAA/wAAAAABAAABAQAAAgEAAAMBAAAEAQAABQEAAAYBAAAHAQAACAEAAAkBAAAKAQAACwEAAAwBAAANAQAADgEAAA8BAAAQAQAAEQEAABIBAAATAQAAFAEAABUBAAAWAQAAFwEAABgBAAAZAQAAGgEAABsBAAAcAQAAHQEAAB4BAAAfAQAAIAEAACEBAAAiAQAAIwEAACQBAAAlAQAAJgEAACcBAAAoAQAAKQEAACoBAAArAQAALAEAAA==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2551, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)58;
      byteArray1[3] = (byte)58;
      byteArray1[4] = (byte)58;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertEquals((short)0, bigInteger1.shortValue());
      
      Base64 base64_0 = new Base64(14, byteArray1);
      base64_0.decode(byteArray0, 83, (int) (byte)58);
      assertEquals(420, byteArray0.length);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte)58, (byte)58, (byte)58, (byte)58, (byte)58}, byteArray2);
      
      int int0 = base64_0.avail();
      assertEquals(42, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-108);
      Base64 base64_0 = new Base64((byte)1);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-48);
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-108);
      byteArray1[3] = (byte) (-48);
      base64_0.decode(byteArray1, (int) (byte)32, (-1108));
      byteArray1[4] = (byte)1;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)32;
      byteArray1[8] = (byte)1;
      base64_0.decode(byteArray1, (int) (byte) (-48), (int) (byte)1);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-48), (byte)1, (byte)14, (byte) (-108)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertEquals("QUE9PQAA", string0);
      
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64((String) null);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64(7, byteArray3);
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      
      String string1 = base64_1.encodeToString(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertEquals("QUE9\u0000PQAA\u0000", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("_@yu*>");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64(19, byteArray2);
      base64_0.decode((Object) "_@yu*>");
      Object object0 = base64_0.decode((Object) "_@yu*>");
      base64_0.decode(object0);
      Object object1 = base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      // Undeclared exception!
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((byte) (-53));
      BigInteger bigInteger0 = new BigInteger(1142, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(188, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("_@yu*>");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.encodeBase64(byteArray3);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray2, (-918), (-918));
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)49;
      byteArray4[1] = (byte)6;
      byteArray4[2] = (byte) (-42);
      byteArray4[3] = (byte)1;
      byteArray4[4] = (byte)41;
      byteArray4[5] = (byte)8;
      byteArray4[6] = (byte) (-16);
      byteArray4[7] = (byte)92;
      byteArray4[8] = (byte)95;
      Base64.isArrayByteBase64(byteArray4);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte)41, (byte)6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 1, 3653);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(123, byteArray0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-72);
      byteArray1[1] = (byte) (-78);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-35);
      byteArray2[1] = (byte) (-78);
      byteArray2[2] = (byte) (-72);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64(byteArray2);
      byteArray1[2] = (byte)67;
      byteArray1[3] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64((byte)6);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)6);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((-3467), byteArray0, true);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(8168, byteArray0);
      base64_0.encode(byteArray0, (int) (byte) (-14), (-2406));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      base64_0.hasData();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)59;
      Base64 base64_1 = new Base64(15, byteArray0, false);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_2 = new Base64();
      base64_2.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray1, false, true);
      Base64.isBase64((byte)108);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-110);
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)123;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(3, byteArray0, true);
      base64_0.avail();
      int int0 = 1706;
      int int1 = 83;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64.isBase64((byte)40);
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null);
      byte[] byteArray0 = null;
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2843), byteArray0, true);
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      Object object0 = base64_0.decode((Object) "o\"m");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(1, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-45);
      byteArray1[1] = (byte) (-45);
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte)25;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)1, (int) (byte)25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 66;
      Base64 base64_0 = new Base64(66);
      byte[] byteArray0 = null;
      base64_0.encode((byte[]) null);
      base64_0.decode((Object) "ISO-8859-1");
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      Base64 base64_0 = new Base64(1, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-53);
      byteArray1[1] = (byte)64;
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte)25;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)64;
      byteArray2[1] = (byte) (-53);
      byteArray2[2] = (byte) (-53);
      byteArray2[3] = (byte)64;
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64String(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte)25;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)25;
      byteArray3[5] = (byte)93;
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      byte[] byteArray5 = new byte[0];
      Base64.encodeBase64String(byteArray5);
      base64_0.encodeToString(byteArray5);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray4, (int) (byte)0, (int) (byte)64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64(1566);
      base64_0.hasData();
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.isBase64((byte) (-95));
      Base64.isBase64((byte)0);
      Base64.isBase64(byteArray2);
      Base64.isArrayByteBase64(byteArray2);
      base64_1.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)1;
      Base64 base64_0 = new Base64(1, byteArray0);
      Base64 base64_1 = new Base64((-509));
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte) (-10);
      byteArray1[2] = (byte)25;
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, 1, 91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)0;
      Base64.isBase64((byte)63);
      Base64.isBase64((byte)63);
      Base64.isBase64(byteArray0);
      Base64.isBase64("Di7$<=ZEX]xz+Xhu");
      Base64 base64_0 = new Base64((byte) (-33));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64.decodeBase64("encodeInteger called with null parameter");
      Base64.isBase64((byte)122);
      Base64.isBase64((byte)122);
      Base64.isBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      base64_0.decode(byteArray0, (-1), (-1));
      Base64.encodeBase64String(byteArray0);
      byte byte0 = (byte)53;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      base64_0.hasData();
      base64_0.avail();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)93;
      base64_0.encode(byteArray1, (int) (byte)0, 0);
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0, 110, (-3633));
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)33;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)111;
      byteArray2[4] = (byte)93;
      byteArray2[5] = (byte)53;
      byteArray2[6] = (byte)53;
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte)0;
      Base64.isArrayByteBase64(byteArray2);
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64(2095);
      base64_0.hasData();
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)53;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, (int) (byte)53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64(2095);
      base64_0.hasData();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)53;
      base64_0.avail();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-53);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      Base64.isBase64((byte) (-95));
      Base64.isBase64((byte)119);
      Base64.isBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray3);
      byte[] byteArray4 = new byte[5];
      byteArray4[1] = (byte)119;
      byteArray4[2] = (byte) (-95);
      byteArray4[3] = (byte) (-95);
      byteArray4[4] = (byte)119;
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte)63;
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((byte)63, byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, (-1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)59, byteArray1, true);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      base64_0.decode(object0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64String(byteArray3);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      Base64.encodeBase64(byteArray4);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64String(byteArray1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      Base64 base64_0 = new Base64((-1513));
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.isBase64((byte)93);
      Base64.isBase64((byte)126);
      Base64.isBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      Base64 base64_0 = new Base64(1, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte)64;
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte)25;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)1, (int) (byte)25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, false, true, (int) (byte)119);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(1764, byteArray0);
      byte[] byteArray1 = base64_1.decode(byteArray0);
      base64_1.encode(byteArray1);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_2 = new Base64(1764, byteArray1);
      // Undeclared exception!
      try { 
        base64_2.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[0] = (byte)32;
      Base64.encodeBase64URLSafe(byteArray0);
      Object object0 = base64_0.decode((Object) ") than the specified maxium size of ");
      base64_0.encode(object0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte) (-58);
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)32;
      byteArray1[5] = (byte)32;
      byteArray1[6] = (byte)32;
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.isBase64((byte)122);
      Base64.isBase64((byte) (-33));
      Base64.isBase64(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null);
      Base64.isBase64((byte) (-95));
      Base64.isBase64((byte) (-53));
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-2022), 631);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-29);
      Base64 base64_0 = new Base64((-2301), byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.decode((Object) "/z/0AOM=");
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-12);
      Base64.encodeBase64(byteArray1, false);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)63;
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte)63;
      byteArray2[5] = (byte) (-12);
      base64_0.decode(byteArray2);
      base64_0.encode(byteArray1, (-1829), (-2301));
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray3);
      Base64.isArrayByteBase64(byteArray3);
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byteArray0[0] = (byte)32;
      Base64.encodeBase64URLSafe(byteArray0);
      Object object0 = base64_0.decode((Object) ") than the specified maxium size of ");
      base64_0.encode(object0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[0];
      base64_0.decode(byteArray2, (-276), 4);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte) (-80);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-1);
      Base64.decodeInteger(byteArray2);
      Base64.isBase64(byteArray0);
      base64_0.encode(byteArray1);
      Base64.isBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.encode(byteArray2);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64String(byteArray3);
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)38;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.shiftLeft((byte) (-98));
      BigInteger.valueOf((byte)38);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.isProbablePrime(0);
      bigInteger2.longValue();
      bigInteger2.remainder(bigInteger1);
      bigInteger1.max(bigInteger2);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.decode((Object) "G^A");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, (int) (byte)38);
      Base64 base64_1 = new Base64(64, byteArray2);
      base64_1.isUrlSafe();
      base64_1.readResults(byteArray1, (-772), 76);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-29);
      Base64 base64_0 = new Base64((-2301), byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.decode((Object) "/z/0AOM=");
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encode(byteArray1, (-1829), (-2301));
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64String(byteArray1);
      Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-29);
      Base64 base64_0 = new Base64((-2301), byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.decode((Object) "/z/0AOM=");
      base64_0.decode((String) null);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode(byteArray0);
      base64_0.encode(byteArray1, (-1829), (-2301));
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)63;
      byteArray3[1] = (byte) (-29);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.encodeBase64String(byteArray4);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)38;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.shiftLeft((byte) (-98));
      BigInteger.valueOf((byte)38);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.isProbablePrime(0);
      bigInteger2.longValue();
      bigInteger2.remainder(bigInteger1);
      BigInteger bigInteger3 = BigInteger.ZERO;
      bigInteger1.intValueExact();
      bigInteger0.multiply(bigInteger1);
      bigInteger0.equals(base64_0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, (int) (byte)38);
      Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      Base64.decodeBase64((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(0);
      bigInteger1.modInverse(bigInteger0);
      bigInteger1.signum();
      base64_0.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true, 156);
      Base64 base64_1 = new Base64(8184, (byte[]) null, false);
      base64_1.readResults((byte[]) null, (-352), 1908);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_1.encode((byte[]) null, (-2580), (-722));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(false);
      base64_0.decode((Object) "");
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (int) (byte)0, (int) (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-29);
      Base64 base64_0 = new Base64((-2301), byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0, (-2301), (int) (byte) (-1));
      byte[] byteArray1 = new byte[0];
      base64_0.decode((Object) "/z/0AOM=");
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encode(byteArray1, (-1829), (-2301));
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64((byte[]) null, true);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64(byteArray3);
      Base64.encodeBase64URLSafe(byteArray4);
      Base64.encodeBase64String(byteArray4);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      Base64.decodeBase64((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(0);
      bigInteger1.modInverse(bigInteger0);
      bigInteger1.signum();
      Base64.decodeBase64("GMLF2w b!t");
      bigInteger1.bitLength();
      bigInteger1.floatValue();
      bigInteger0.add(bigInteger1);
      bigInteger0.byteValueExact();
      bigInteger0.not();
      bigInteger0.longValueExact();
      Base64.encodeInteger(bigInteger0);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      Base64.decodeBase64((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = bigInteger1.shiftLeft(76);
      BigInteger bigInteger4 = BigInteger.valueOf(76);
      BigInteger bigInteger5 = BigInteger.ZERO;
      bigInteger5.isProbablePrime(64);
      bigInteger1.longValue();
      BigInteger bigInteger6 = bigInteger0.remainder(bigInteger1);
      bigInteger3.max(bigInteger1);
      bigInteger5.intValueExact();
      BigInteger bigInteger7 = bigInteger6.multiply(bigInteger5);
      bigInteger7.equals((Object) null);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_1 = new Base64();
      base64_1.isUrlSafe();
      base64_0.isUrlSafe();
      Base64.encodeBase64((byte[]) null, true, true, 0);
      Base64.encodeInteger(bigInteger4);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      Base64.decodeBase64((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(0);
      bigInteger1.modInverse(bigInteger0);
      bigInteger1.signum();
      Base64.decodeBase64("GMLF2w b!t");
      bigInteger1.bitLength();
      bigInteger1.floatValue();
      bigInteger0.add(bigInteger1);
      bigInteger0.byteValueExact();
      bigInteger0.not();
      bigInteger0.longValueExact();
      Base64.encodeInteger(bigInteger0);
      base64_0.decode((byte[]) null);
      base64_0.decode("");
      base64_0.decode("");
      base64_0.decode((byte[]) null);
      base64_0.hasData();
      base64_0.readResults((byte[]) null, 660, 777);
      Base64.isBase64("");
      base64_0.avail();
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      base64_0.hasData();
      base64_0.avail();
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64.isBase64("qMoN+J");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = (-3046);
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-3046), byteArray0, false);
      base64_0.encode(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)38;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.shiftLeft((byte) (-98));
      BigInteger.valueOf((byte)38);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.isProbablePrime(0);
      bigInteger2.longValue();
      bigInteger2.remainder(bigInteger1);
      bigInteger1.max(bigInteger2);
      bigInteger1.intValueExact();
      bigInteger0.multiply(bigInteger1);
      bigInteger0.equals(base64_0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)53, (byte)52, (byte)109}, byteArray2);
      
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true, (int) (byte)38);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte) (-94), (byte)10}, byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)55;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)51}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode("|tnS<");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      boolean boolean0 = false;
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-79);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      Base64.encodeBase64String(byteArray1);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)12;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)95;
      byte[] byteArray3 = base64_0.decode(byteArray2);
      byteArray2[3] = (byte)63;
      byteArray2[4] = (byte) (-87);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      base64_0.decode("");
      base64_0.hasData();
      Base64.decodeBase64(byteArray3);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray4, (-404), 762);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -404
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte) (-62), (byte)0}, byteArray1);
      
      Base64 base64_0 = new Base64((byte)0, byteArray0, true);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object1, object0);
      
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte) (-62));
      assertTrue(base64_0.isUrlSafe());
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.valueOf(4L);
      bigInteger0.andNot(bigInteger1);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-29);
      Base64 base64_0 = new Base64((-2301), byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.decode((Object) "/z/0AOM=");
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encode(byteArray1, (-1829), (-2301));
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64(byteArray3);
      Base64.encodeBase64URLSafe(byteArray4);
      Base64.encodeBase64String(byteArray4);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      bigInteger0.intValueExact();
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = null;
      base64_0.decode((byte[]) null);
      Base64.isBase64((byte)80);
      Base64.isBase64((byte)25);
      Base64.isBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      base64_0.encode((byte[]) null);
      base64_0.decode((Object) "ejlp.[7/IePM1$|7");
      byte[] byteArray0 = base64_0.decode("ejlp.[7/IePM1$|7");
      base64_0.decode((Object) "ejlp.[7/IePM1$|7");
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)94;
      byteArray1[2] = (byte)28;
      byteArray1[3] = (byte)36;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)34;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)29;
      byteArray1[8] = (byte)0;
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64("^;M)>");
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, true, true);
      byteArray0[0] = (byte) (-76);
      base64_0.decode(byteArray0, 0, 0);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)75;
      byteArray0[0] = (byte)75;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [K]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-126);
      Base64 base64_0 = new Base64(93, byteArray0);
      base64_0.decode(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-126);
      byteArray2[1] = (byte) (-92);
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte) (-126);
      byteArray2[4] = (byte) (-96);
      byteArray2[5] = (byte) (-92);
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("gqQBgqCk\u0001\uFFFD\u0000\u0001\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64.isBase64((byte) (-31));
      Base64 base64_0 = new Base64((byte) (-31));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte) (-31);
      byteArray0[8] = (byte) (-31);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-31);
      byteArray1[1] = (byte) (-31);
      byteArray1[2] = (byte) (-31);
      byteArray1[3] = (byte) (-31);
      byteArray1[4] = (byte) (-31);
      byteArray1[5] = (byte) (-31);
      byteArray1[6] = (byte) (-31);
      byteArray1[7] = (byte) (-31);
      byteArray1[8] = (byte) (-31);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      base64_0.decode("2-1?");
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-31);
      base64_0.decode(byteArray3, (int) (byte) (-31), (int) (byte) (-31));
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.toString();
      Base64.toIntegerBytes(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (18) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)58;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(10, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)82, (byte)85, (byte)82, (byte)118, (byte)80, (byte)81, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray2);
      
      Base64.discardWhitespace(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((byte)58, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)39;
      base64_0.readResults(byteArray0, (-2074), (byte)0);
      base64_0.avail();
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64.decodeBase64("G|\"w=]|iiK^y");
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64(153);
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, false);
      byteArray0[0] = (byte)20;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)126;
      byteArray2[1] = (byte)20;
      Base64.encodeBase64(byteArray2, true);
      byteArray2[2] = (byte)20;
      byteArray2[3] = (byte)20;
      byteArray2[4] = (byte)20;
      byteArray2[5] = (byte)20;
      byteArray2[6] = (byte)20;
      byteArray2[7] = (byte)0;
      base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray2);
      base64_0.decode(byteArray0, 0, 0);
      Base64.isBase64((byte)0);
      Base64.decodeBase64((String) null);
      byte[] byteArray3 = Base64.decodeBase64((String) null);
      assertNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte) (-108);
      byteArray1[2] = (byte) (-108);
      byteArray1[3] = (byte) (-108);
      byteArray1[4] = (byte) (-108);
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("lJSUlJQ=", string0);
      
      byteArray0[0] = (byte) (-108);
      Base64.decodeInteger(byteArray0);
      byteArray0[1] = (byte)34;
      int int0 = base64_0.readResults(byteArray0, (byte)34, 1);
      assertEquals((-1), int0);
      
      Base64.isBase64((byte)0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64.isBase64((byte)22);
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)32;
      boolean boolean0 = false;
      boolean boolean1 = false;
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[0] = (byte)32;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 59, 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertArrayEquals(new byte[] {(byte)65, (byte)80, (byte)56, (byte)65, (byte)67, (byte)115, (byte)48, (byte)65, (byte)13, (byte)10}, byteArray1);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)1;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("pvgVAA", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.nextProbablePrime();
      bigInteger0.flipBit(0);
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)0;
      base64_0.encode(byteArray1);
      Base64.encodeBase64((byte[]) null, true, false, (int) (byte)0);
      Base64.isBase64(") than the specified maxium size of ");
      byte[] byteArray2 = Base64.decodeBase64("");
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("E1c%Or/K @Xxk` xY$");
      byte[] byteArray1 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64((-510));
      base64_0.decode(byteArray0, (-510), (-510));
      base64_0.encode((byte[]) null, (-510), 0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-116);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [ \uFFFD\u0000\u0000N\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)97;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)66, (byte)104}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      boolean boolean0 = false;
      String string0 = "d,?3('C.)0ll(\\=odZ";
      base64_0.decode((Object) "d,?3('C.)0ll(=odZ");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode((Object) "d,?3('C.)0ll(=odZ");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.remainder(bigInteger0);
      bigInteger0.floatValue();
      bigInteger1.bitCount();
      bigInteger1.bitCount();
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
