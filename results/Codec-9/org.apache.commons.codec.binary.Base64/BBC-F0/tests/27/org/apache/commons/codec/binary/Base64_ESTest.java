/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 03:50:59 GMT 2020
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[3] = (byte) (-113);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(23, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(23, byteArray0.length);
      assertEquals(28, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)124;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)124, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      Base64 base64_0 = new Base64(62, byteArray0, false);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)123}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)123}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("T79?gpf81t7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(62, byteArray0, false);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string0 = base64_0.encodeToString(byteArray1);
      assertNotNull(string0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode("");
      assertNotNull(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertNotNull(string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode("");
      assertNotNull(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, false);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode("");
      assertNotNull(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertNotNull(byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode("");
      assertNotNull(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-56);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-56), (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)77, (byte)103, (byte)65, (byte)64, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-56), (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)77, (byte)103, (byte)65, (byte)64, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals((short) (-14336), bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[42];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(42, byteArray0.length);
      assertEquals(56, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(42, byteArray0.length);
      assertEquals(56, byteArray1.length);
      assertEquals(78, byteArray2.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertNotNull(bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals((short)16705, bigInteger0.shortValue());
      assertEquals((byte)65, bigInteger0.byteValue());
      assertEquals(42, byteArray0.length);
      assertEquals(56, byteArray1.length);
      assertEquals(78, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(1567, 1567, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-75), bigInteger0.byteValue());
      assertEquals((short)181, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((byte) (-75), bigInteger0.byteValue());
      assertEquals((short)181, bigInteger0.shortValue());
      assertEquals(264, byteArray0.length);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertNotNull(bigInteger1);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte) (-75), bigInteger0.byteValue());
      assertEquals((short)181, bigInteger0.shortValue());
      assertEquals((short)181, bigInteger1.shortValue());
      assertEquals((byte) (-75), bigInteger1.byteValue());
      assertEquals(264, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64(30);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)86;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)88, (byte)86, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)93}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64(1577);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode((String) null);
      assertNull(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((-626), byteArray0);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = base64_0.decode("($/d3digxUld%^6");
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-35), (byte) (-35), (byte) (-118), (byte)12, (byte)84, (byte) (-107), (byte) (-34)}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(2, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)64, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray1, 0, 71);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)64, (byte)0}, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(1567, 1567, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-75), bigInteger0.byteValue());
      assertEquals((short)181, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((byte) (-75), bigInteger0.byteValue());
      assertEquals((short)181, bigInteger0.shortValue());
      assertEquals(264, byteArray0.length);
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      base64_0.decode(byteArray0, 227, 1567);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals((byte) (-75), bigInteger0.byteValue());
      assertEquals((short)181, bigInteger0.shortValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(264, byteArray0.length);
      
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 64, (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, byteArray1.length);
      
      Base64 base64_0 = new Base64((byte)0, byteArray1, false);
      assertNotNull(base64_0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray1.length);
      
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode("");
      assertNotNull(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      
      Base64 base64_1 = new Base64(64, byteArray0);
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)122;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000z\u0000\u0000\u0000\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[42];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(42, byteArray0.length);
      assertEquals(56, byteArray1.length);
      
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      assertNotNull(bigInteger0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals((short)16705, bigInteger0.shortValue());
      assertEquals((byte)65, bigInteger0.byteValue());
      assertEquals(42, byteArray0.length);
      assertEquals(56, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals((short)16705, bigInteger0.shortValue());
      assertEquals((byte)65, bigInteger0.byteValue());
      assertEquals(42, byteArray0.length);
      assertEquals(56, byteArray1.length);
      assertEquals(76, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(10, byteArray0.length);
      assertEquals(16, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(1577);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertNull(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)18);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)64, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 18);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertEquals(16, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode("");
      assertNotNull(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 64);
      assertNotNull(byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode("");
      assertNotNull(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)105);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertEquals(22, byteArray2.length);
      
      base64_0.decode(byteArray2, 0, (int) (byte)106);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertEquals(22, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode("");
      assertNotNull(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      
      base64_0.decode(byteArray0, 2406, (int) (byte)0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-97);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 4519);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[4];
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals("AAAAAA==@\u0000", string0);
      
      base64_0.decode(byteArray0, (int) (byte) (-97), 173);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64(1577);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 1556);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-32);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode("");
      assertNotNull(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = base64_0.decode("");
      assertNotNull(byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(base64_0.isUrlSafe());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      Object object0 = base64_0.decode((Object) "3?\u0003A..bg* z4");
      assertNotNull(object0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_0.isUrlSafe());
      
      Object object1 = base64_0.encode(object0);
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("encodeInteger called with null parameter");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)64, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)64, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1567, 1567, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(196, byteArray0.length);
      assertEquals(192, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, false, (-2082));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(62, byteArray0, false);
      try { 
        base64_0.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "3?\u0003A..bg* z4");
      Object object1 = base64_0.decode(object0);
      assertFalse(base64_0.isUrlSafe());
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-122);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)70;
      byteArray0[3] = (byte)114;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)90}, byteArray1);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, 1, 1026);
      assertEquals(18, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte) (-88);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64((byte)6);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-83);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AK0AAA", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (-3010), (-1205));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 3241, 3241);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[42];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(75, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 0, 71);
      base64_0.encode(byteArray1, (-2883), (int) (byte)114);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64(1577);
      byte[] byteArray0 = new byte[3];
      base64_0.decode(byteArray0, (int) (byte)69, (-2431));
      int int0 = base64_0.readResults((byte[]) null, 1, (byte)95);
      assertEquals((-1), int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64(1577);
      int int0 = base64_0.readResults((byte[]) null, 1, (byte)95);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((-626), byteArray0);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 4, (int) (byte) (-122));
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)114;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)34, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000r]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Base64 base64_0 = new Base64(1121, (byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 114, 114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals(18, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("vI4+xMIoRA_:5+%(Y~");
      assertArrayEquals(new byte[] {(byte) (-68), (byte) (-114), (byte)62, (byte) (-60), (byte) (-62), (byte)40, (byte)68, (byte)15, (byte) (-7), (byte) (-7)}, byteArray0);
      assertEquals(10, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Base64 base64_0 = new Base64(70);
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAA=", string0);
  }
}
