/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:07:01 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(7634);
      bigInteger1.equals(bigInteger0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64(false);
      bigInteger0.toString();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false, 7634);
      base64_0.decode(byteArray2, 64, 7634);
      base64_0.readResults(byteArray0, 1, 76);
      bigInteger1.testBit(1528);
      bigInteger0.doubleValue();
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray3, (-2129), 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(7657);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray1, 12, 13);
      base64_0.encode(byteArray1, 13, (-5272));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 7657;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(7657);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(false);
      int int1 = 1;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 1, 7657);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2402
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(7659);
      bigInteger1.isProbablePrime(7659);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2, 942, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 942
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(7659);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      // Undeclared exception!
      base64_0.encode(byteArray0, 0, 948);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(7656);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeInteger(byteArray4);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray4);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.getLowestSetBit();
      BigInteger bigInteger1 = bigInteger0.setBit(7656);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      bigInteger0.toString((-1));
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.setBit(1717986918);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger2);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(7634);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      // Undeclared exception!
      base64_0.encodeToString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(7634);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      bigInteger0.shortValueExact();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      base64_0.encodeToString(byteArray3);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Base64.isBase64((byte)60);
      Base64.isBase64((byte)61);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)60;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("C;2h>8D^obt7[\r");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 2489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Base64 base64_0 = new Base64();
      int int0 = 7634;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-1);
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger1 = bigInteger0.setBit(7634);
      bigInteger0.equals("My7v<;.lX");
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray4, false, true, 7634);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(7634);
      bigInteger1.equals(bigInteger0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64(false);
      bigInteger0.toString();
      bigInteger1.signum();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray2, true, false, 7634);
      base64_0.decode(byteArray2, 1, 7634);
      base64_0.readResults(byteArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(7634);
      bigInteger1.equals(bigInteger0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64(byteArray2, false, true, 7634);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)23;
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-99);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-80);
      byteArray0[8] = (byte)60;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(7634);
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      bigInteger1.equals(bigInteger0);
      bigInteger1.add(bigInteger2);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64(false);
      bigInteger1.signum();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 7634);
      base64_0.decode(byteArray1, 1, 7634);
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.setBit(7634);
      bigInteger1.equals(bigInteger0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, 76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (1310) than the specified maxium size of 76
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(2497, byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 2497);
      base64_0.decode(byteArray1, 0, 64);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(2489);
      bigInteger0.equals(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      bigInteger0.getLowestSetBit();
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(false);
      bigInteger1.compareTo(bigInteger0);
      base64_1.encode(byteArray1, 76, 64);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 76, 2489);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 416
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.setBit(2489);
      bigInteger0.equals(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray1, (-83), (-778));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 1610, 711);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(10);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(10, byteArray0);
      base64_0.encodeToString(byteArray1);
      base64_0.readResults(byteArray0, 9, 9);
      Base64.decodeBase64((byte[]) null);
      base64_0.encode(byteArray0, 0, (-1));
      boolean boolean0 = Base64.isBase64((byte)9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64(1184);
      Base64.isBase64("US-ASCII");
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)14);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.decodeBase64("Input array too big, the outpu array would be bigger (");
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)6;
      byteArray2[1] = (byte)73;
      byteArray2[2] = (byte) (-13);
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte)54;
      byteArray2[5] = (byte)104;
      byteArray2[6] = (byte) (-29);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("Inputarraytoobigtheoutpuarraywouldbebiggeg", string0);
      
      byteArray2[7] = (byte) (-124);
      base64_0.decode(byteArray2);
      Base64 base64_1 = new Base64();
      base64_0.decode(byteArray0, 0, 64);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertEquals(29, byteArray3.length);
      
      boolean boolean1 = Base64.isBase64((byte)55);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(869, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)18;
      byte byte0 = (byte) (-3);
      byteArray1[2] = (byte) (-3);
      byteArray1[2] = (byte)17;
      byteArray1[4] = (byte) (-107);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-42);
      byte byte0 = (byte)32;
      byteArray0[2] = (byte)32;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)123);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((byte)123, byteArray0, true);
      int int0 = 3085;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 8165, 3085);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8165
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(2489, byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 63);
      Base64 base64_1 = new Base64((-1355));
      base64_0.decode(byteArray1, 0, 15);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(2489, byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(15);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64URLSafe(byteArray0);
      bigInteger1.getLowestSetBit();
      Base64.toIntegerBytes(bigInteger1);
      base64_0.readResults(byteArray1, 15, (-2059));
      Base64.isBase64((byte)0);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-100);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)64;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte)0, 8165);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.decodeBase64("Ga'@Aa,?JY9d");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte) (-66);
      byteArray1[3] = (byte) (-70);
      byteArray1[5] = (byte)37;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((-185), byteArray1, true);
      base64_0.readResults(byteArray2, (byte) (-66), 40);
      Base64.encodeBase64URLSafeString(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 525);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64(1184);
      byte[] byteArray0 = null;
      base64_0.encode((byte[]) null, 1184, (-1));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-74), 3939);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(2489);
      bigInteger0.equals(bigInteger1);
      Base64.encodeInteger(bigInteger1);
      bigInteger0.getLowestSetBit();
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false, false, 22);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 1, 30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("");
      Base64.encodeBase64((byte[]) null, false, false, (-1684));
      Base64 base64_1 = new Base64((-1686), (byte[]) null, false);
      try { 
        base64_1.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false);
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64(1184);
      base64_0.encode((byte[]) null, 1184, (-1));
      Base64 base64_1 = new Base64(false);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("R3qx`{1");
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("p%AowP*");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64(13, byteArray0, true);
      Base64.isBase64(")O)&9AyR");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isBase64((byte) (-108));
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-108);
      byteArray2[1] = (byte) (-108);
      byteArray2[2] = (byte) (-108);
      byteArray2[3] = (byte) (-108);
      byteArray2[4] = (byte) (-108);
      byteArray2[5] = (byte) (-108);
      byteArray2[6] = (byte) (-108);
      byteArray2[7] = (byte) (-108);
      Base64.isBase64(byteArray2);
      Base64 base64_1 = new Base64();
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("]");
      Base64 base64_2 = new Base64(30);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      Base64 base64_3 = null;
      try {
        base64_3 = new Base64((byte) (-108), byteArray3, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [QUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000QUFBQUFB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-108);
      Base64 base64_0 = new Base64(3182, byteArray0, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte) (-108);
      byteArray1[3] = (byte) (-108);
      byteArray1[4] = (byte) (-108);
      byteArray1[5] = (byte) (-108);
      byteArray1[6] = (byte) (-108);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64((-1728), byteArray2);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-108);
      byteArray3[1] = (byte) (-108);
      byteArray3[2] = (byte) (-108);
      byteArray3[3] = (byte) (-108);
      byteArray3[4] = (byte) (-108);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("R3x`,1");
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = "tq/T=oFvo<";
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.decodeBase64("W\"vxb");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = Base64.decodeBase64("H22'a.^;QY.7lC\u0000Z");
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64.isBase64("VwDQXAwM>PEV");
      byte[] byteArray0 = null;
      byte byte0 = (byte)41;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      String string0 = "&+\"v}*'b";
      byte[] byteArray1 = Base64.decodeBase64("&+\"v}*'b");
      base64_0.isUrlSafe();
      base64_0.readResults(byteArray1, 8, 0);
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
      byte[] byteArray2 = Base64.decodeBase64("tq/T=oFvo<");
      Base64.discardWhitespace(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 3880, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = "tq/T=oFvo<";
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      int int0 = 0;
      int int1 = 8;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-86);
      base64_0.encode(byteArray0, (int) (byte) (-86), (int) (byte) (-86));
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      bigInteger0.bitCount();
      Base64.isBase64("US-ASCII");
      bigInteger0.toString(801);
      base64_0.readResults(byteArray1, 1708, 415);
      Base64.isBase64(byteArray0);
      Base64 base64_2 = new Base64((-2538), byteArray0, false);
      base64_2.encodeToString(byteArray1);
      base64_1.isUrlSafe();
      base64_2.isUrlSafe();
      Base64.decodeBase64(byteArray1);
      base64_1.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64.isBase64("VwDQXAwM>PEV");
      byte[] byteArray0 = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64((byte[]) null, false);
      Base64.isBase64("]");
      int int0 = 2;
      bigInteger0.toString(2);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.isBase64((byte)41);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte)41;
      byteArray1[3] = (byte)41;
      byteArray1[4] = (byte)41;
      Base64 base64_0 = new Base64((byte)41, byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.gcd(bigInteger1);
      Object object0 = new Object();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 103);
      Base64 base64_1 = new Base64(64);
      base64_1.isUrlSafe();
      Base64.isBase64(byteArray1);
      base64_0.isUrlSafe();
      byte[] byteArray2 = new byte[1];
      byte[] byteArray3 = base64_1.decode(byteArray2);
      byte[] byteArray4 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_1.isUrlSafe();
      Base64.decodeBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64.decodeBase64("OG%PUyW1E=-K");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)5;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(1);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray2);
      Base64 base64_2 = new Base64();
      Base64.encodeInteger(bigInteger0);
      base64_1.decode((String) null);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)98;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.isUrlSafe();
      Base64.isBase64(byteArray2);
      base64_0.isUrlSafe();
      Base64 base64_1 = new Base64(85);
      base64_1.decode(byteArray2);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.isUrlSafe();
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64.isBase64("VwDQXAwM>PEV");
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64((-382));
      base64_0.decode("org.apache.commons.codec.DecoderException");
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.DecoderException");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = base64_0.decode("");
      byteArray0[0] = (byte)63;
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)120;
      base64_0.decode("");
      byteArray0[3] = (byte)75;
      base64_0.encodeToString(byteArray1);
      base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)97;
      base64_0.encode(byteArray0, 55, (int) (byte) (-1));
      base64_0.encode(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64("v!X(iAZ<=LOn(B");
      byte byte0 = (byte) (-72);
      Base64.isBase64((byte)32);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)98;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)98, (int) (byte) (-21));
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true);
      Base64.isBase64("]");
      bigInteger0.toString(0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      Base64.isBase64(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray1);
      base64_0.decode(byteArray1, (int) (byte) (-21), (int) (byte)98);
      Base64.isBase64((byte)0);
      base64_0.readResults(byteArray2, (byte)98, 0);
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)98;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)98, (int) (byte) (-21));
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      bigInteger0.bitCount();
      Base64.isBase64(".Lq?9]%$F?Q9<0G#naf");
      bigInteger0.toString(64);
      base64_0.readResults(byteArray0, 11, 66);
      Base64.isBase64(byteArray2);
      base64_0.encodeToString(byteArray3);
      Base64.isBase64("62LPYg\r\n");
      base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray1);
      base64_0.decode(byteArray3, (int) (byte)98, (int) (byte)98);
      Base64.isBase64((byte)0);
      base64_0.readResults(byteArray3, (byte)0, 0);
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)98;
      byteArray4[1] = (byte)1;
      Base64.discardWhitespace(byteArray4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("&+\"v}*'b");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte byte0 = (byte) (-33);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      byteArray0[0] = (byte) (-33);
      byteArray0[0] = (byte) (-33);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray1, true, true);
      Base64.isBase64((byte) (-93));
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-93);
      byteArray2[1] = (byte) (-1);
      Base64.decodeInteger(byteArray2);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-1727), byteArray3);
      Base64 base64_1 = new Base64((byte) (-2), byteArray1);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("R3x`,1");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.gcd(bigInteger1);
      boolean boolean0 = false;
      base64_0.decode(byteArray0);
      boolean boolean1 = false;
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-39);
      byteArray2[1] = (byte)24;
      byteArray2[2] = (byte)7;
      byteArray2[3] = (byte)14;
      byteArray2[4] = (byte)52;
      byteArray2[5] = (byte)53;
      base64_0.decode(byteArray2, (int) (byte) (-39), (int) (byte) (-39));
      Base64.encodeBase64(byteArray0);
      base64_0.decode("");
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(" qg-3Cd*D&8H0Vr GEV");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shiftLeft(0);
      Base64.isBase64((byte)40);
      Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.isUrlSafe();
      base64_0.decode(byteArray0, 88, 0);
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-33);
      byte byte1 = (byte) (-93);
      byteArray0[3] = (byte) (-93);
      Base64.decodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64((byte) (-21));
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray3);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-21), byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AP7fow\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)19;
      Base64.encodeBase64String(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Object object0 = null;
      Base64 base64_0 = new Base64((byte)121, (byte[]) null);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-93);
      Base64.decodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64((byte) (-21));
      Base64.decodeInteger(byteArray1);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_0 = new Base64((byte)0, byteArray2);
      String string0 = "";
      Base64 base64_1 = new Base64((byte) (-33), byteArray2);
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)50;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, (int) (byte)50);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1619), byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [7QDiMg==\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      Base64.decodeInteger(byteArray0);
      BigInteger.valueOf((-1L));
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-16);
      byteArray0[0] = (byte) (-16);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-16);
      byte byte1 = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-16);
      byteArray2[3] = (byte) (-16);
      Base64.decodeBase64(byteArray0);
      byteArray2[4] = (byte) (-16);
      Base64.isBase64("OEE");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte) (-16), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64(byteArray0);
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeBase64((String) null);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      Base64.decodeBase64("");
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)87;
      Base64.encodeBase64(byteArray0, true);
      base64_0.avail();
      base64_0.readResults(byteArray1, (byte)0, (byte)0);
      Base64.isBase64((byte)91);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)47;
      byteArray0[0] = (byte)47;
      Base64.encodeBase64String(byteArray0);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-30);
      Base64.decodeInteger(byteArray0);
      String string0 = "";
      byte[] byteArray1 = base64_0.decode("");
      Base64.decodeBase64(byteArray1);
      Object object0 = base64_0.decode((Object) "M}b(py");
      base64_0.decode(object0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("", (-268));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-49);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("ACRVAM8", string0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)36;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)0;
      base64_0.decode(byteArray1);
      byte[] byteArray2 = base64_0.decode("");
      String string1 = Base64.encodeBase64String(byteArray1);
      assertEquals("ASRVAA==", string1);
      
      byte[] byteArray3 = base64_0.decode("");
      byte[] byteArray4 = base64_0.decode("ACRVAM8");
      Base64.isArrayByteBase64(byteArray3);
      Base64.isBase64((byte) (-49));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(4, byteArray5.length);
      
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.encode(byteArray4, 2323, (int) (byte)85);
      assertEquals(5, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)36, (byte)85, (byte)0, (byte) (-49)}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 0);
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      assertSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(2336, byteArray1, true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertEquals(0, byteArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-30);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)73, (byte)107, (byte)78, (byte)65, (byte)65, (byte)68, (byte)105, (byte)13, (byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(420, byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)47;
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray0);
      base64_0.decode("");
      base64_0.decode((String) null);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertSame(byteArray0, byteArray1);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      base64_0.decode("");
      byteArray0[0] = (byte)63;
      Base64.decodeBase64(byteArray0);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)120;
      base64_0.decode("");
      byteArray0[3] = (byte)75;
      base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)97;
      base64_0.encode(byteArray0, 55, (int) (byte) (-1));
      byte[] byteArray1 = Base64.decodeBase64("v!X(iAZ<=LOn(B");
      byte byte0 = (byte) (-72);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-40);
      byteArray0[0] = (byte) (-40);
      byte byte1 = (byte)47;
      byteArray0[1] = (byte)47;
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-40));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -40
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)94;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)98, (int) (byte) (-21));
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)54, (byte)50, (byte)76, (byte)80, (byte)88, (byte)103, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray3);
      
      boolean boolean0 = Base64.isBase64("]");
      bigInteger0.toString(0);
      base64_0.readResults(byteArray0, 121, (byte) (-49));
      Base64.isBase64(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("62LPXg\r\n", string0);
      
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      byte[] byteArray4 = base64_0.encode(byteArray1);
      assertEquals(10, byteArray4.length);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertEquals((short) (-12450), bigInteger1.shortValue());
      
      base64_0.decode(byteArray1, (int) (byte) (-21), (int) (byte)94);
      boolean boolean1 = Base64.isBase64((byte)0);
      assertTrue(boolean1 == boolean0);
      
      int int0 = base64_0.readResults(byteArray2, (byte)98, 0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      Base64 base64_0 = new Base64(25, byteArray0, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)21;
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)21;
      byteArray1[3] = (byte)21;
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("", string0);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("FQ", string1);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)70, (byte)81, (byte)61, (byte)61}, byteArray3);
      assertEquals(4, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.floatValue();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byteArray0[1] = (byte)0;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.subtract(bigInteger1);
      base64_0.encode(byteArray1, (-1643), (int) (byte)0);
      base64_0.readResults(byteArray0, 0, 2480);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray2.length);
      
      byteArray0[2] = (byte)0;
      base64_0.readResults(byteArray0, (byte)0, 0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false);
      boolean boolean0 = Base64.isBase64(byteArray3);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-7);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 1247);
      assertArrayEquals(new byte[] {(byte)65, (byte)78, (byte)89, (byte)65, (byte)45, (byte)81, (byte)13, (byte)10}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      Base64 base64_0 = new Base64(3182, byteArray0, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte) (-108);
      byteArray1[2] = (byte) (-108);
      byteArray1[3] = (byte) (-108);
      byteArray1[4] = (byte) (-108);
      byteArray1[5] = (byte) (-108);
      byteArray1[6] = (byte) (-108);
      byteArray1[7] = (byte) (-108);
      Base64.decodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 33, 3182);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)36;
      base64_0.encodeToString(byteArray0);
      base64_0.encode((byte[]) null);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64String(byteArray1);
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("lineSeperator must not contain base64 characters: [");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((-1191));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte) (-17);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-47)}, byteArray1);
      
      base64_0.avail();
      byte[] byteArray2 = base64_0.decode("%]L=GWG");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "a5='v(X,b");
      byte[] byteArray0 = base64_0.decode("a5='v(X,b");
      assertArrayEquals(new byte[] {(byte)107}, byteArray0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64(1160);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = Base64.decodeBase64("H22'a.^;QY.7lC\u0000Z");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)31, (byte)109, (byte) (-102), (byte)65, (byte) (-114), (byte) (-27)}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-752), byteArray0);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.shiftLeft((byte)114);
      Base64.isBase64((byte)114);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64(byteArray1, false);
      base64_0.isUrlSafe();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)114, 114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 114
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(0, (byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      base64_0.decode((byte[]) null);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(" qg-3Cd*D&8H0Vr GEV");
      Base64 base64_0 = new Base64(0);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      base64_0.isUrlSafe();
      byte[] byteArray1 = base64_0.decode("");
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)66;
      Base64.encodeBase64String(byteArray0);
      Base64.isArrayByteBase64(byteArray2);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("R3x`,1");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.gcd(bigInteger1);
      boolean boolean0 = false;
      boolean boolean1 = false;
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64((-2741));
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)56;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64.isBase64("VwDQXAwM>PEV");
      boolean boolean0 = Base64.isBase64("VwDQXAwM>PEV");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)100;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals((byte)71, bigInteger0.byteValue());
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = null;
      int int1 = 0;
      try { 
        base64_0.encode((Object) "+7HbAmeWH");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
