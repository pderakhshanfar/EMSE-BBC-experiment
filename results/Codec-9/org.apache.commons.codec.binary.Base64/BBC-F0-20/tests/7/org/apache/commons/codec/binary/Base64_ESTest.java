/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:05:37 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8305, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8305);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.encodeToString(byteArray1);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(76, byteArray2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [QVFBQUFBSUFBQUFEQUFBQUJBQUFBQVVBQUFBR0FBQUFCd0FBQUFnQUFBQUpBQUFBQ2dBQUFBc0FB\u0000\uFFFDQUFNQUFBQURRQUFBQTRBQUFBUEFBQUFFQUFBQUJFQUFBQVNBQUFBRXdBQUFCUUFBQUFWQUFBQUZn\u0000\uFFFDQUFBQmNBQUFBWUFBQUFHUUFBQUJvQUFBQWJBQUFBSEFBQUFCMEFBQUFlQUFBQUh3QUFBQ0FBQUFB\u0000\uFFFDaEFBQUFJZ0FBQUNNQUFBQWtBQUFBSlFBQUFDWUFBQUFuQUFBQUtBQUFBQ2tBQUFBcUFBQUFLd0FB\u0000\uFFFDQUN3QUFBQXRBQUFBTGdBQUFDOEFBQUF3QUFBQU1RQUFBRElBQUFBekFBQUFOQUFBQURVQUFBQTJB\u0000\uFFFDQUFBTndBQUFEZ0FBQUE1QUFBQU9nQUFBRHNBQUFBOEFBQUFQUUFBQUQ0QUFBQS9BQUFBUUFBQUFF\u0000\uFFFDRUFBQUJDQUFBQVF3QUFBRVFBQUFCRkFBQUFSZ0FBQUVjQUFBQklBQUFBU1FBQUFFb0FBQUJMQUFB\u0000\uFFFDQVRBQUFBRTBBQUFCT0FBQUFUd0FBQUZBQUFBQlJBQUFBVWdBQUFGTUFBQUJVQUFBQVZRQUFBRllB\u0000\uFFFDQUFCWEFBQUFXQUFBQUZrQUFBQmFBQUFBV3dBQUFGd0FBQUJkQUFBQVhnQUFBRjhBQUFCZ0FBQUFZ\u0000\uFFFDUUFBQUdJQUFBQmpBQUFBWkFBQUFHVUFBQUJtQUFBQVp3QUFBR2dBQUFCcEFBQUFhZ0FBQUdzQUFB\u0000\uFFFDQnNBQUFBYlFBQUFHNEFBQUJ2QUFBQWNBQUFBSEVBQUFCeUFBQUFjd0FBQUhRQUFBQjFBQUFBZGdB\u0000\uFFFDQUFIY0FBQUI0QUFBQWVRQUFBSG9BQUFCN0FBQUFmQUFBQUgwQUFBQitBQUFBZndBQUFJQUFBQUNC\u0000\uFFFDQUFBQWdnQUFBSU1BQUFDRUFBQUFoUUFBQUlZQUFBQ0hBQUFBaUFBQUFJa0FBQUNLQUFBQWl3QUFB\u0000\uFFFDSXdBQUFDTkFBQUFqZ0FBQUk4QUFBQ1FBQUFBa1FBQUFKSUFBQUNUQUFBQWxBQUFBSlVBQUFDV0FB\u0000\uFFFDQUFsd0FBQUpnQUFBQ1pBQUFBbWdBQUFKc0FBQUNjQUFBQW5RQUFBSjRBQUFDZkFBQUFvQUFBQUtF\u0000\uFFFDQUFBQ2lBQUFBb3dBQUFLUUFBQUNsQUFBQXBnQUFBS2NBQUFDb0FBQUFxUUFBQUtvQUFBQ3JBQUFB\u0000\uFFFDckFBQUFLMEFBQUN1QUFBQXJ3QUFBTEFBQUFDeEFBQUFzZ0FBQUxNQUFBQzBBQUFBdFFBQUFMWUFB\u0000\uFFFDQUMzQUFBQXVBQUFBTGtBQUFDNkFBQUF1d0FBQUx3QUFBQzlBQUFBdmdBQUFMOEFBQURBQUFBQXdR\u0000\uFFFDQUFBTUlBQUFEREFBQUF4QUFBQU1VQUFBREdBQUFBeHdBQUFNZ0FBQURKQUFBQXlnQUFBTXNBQUFE\u0000\uFFFDTUFBQUF6UUFBQU00QUFBRFBBQUFBMEFBQUFORUFBQURTQUFBQTB3QUFBTlFBQUFEVkFBQUExZ0FB\u0000\uFFFDQU5jQUFBRFlBQUFBMlFBQUFOb0FBQURiQUFBQTNBQUFBTjBBQUFEZUFBQUEzd0FBQU9BQUFBRGhB\u0000\uFFFDQUFBNGdBQUFPTUFBQURrQUFBQTVRQUFBT1lBQUFEbkFBQUE2QUFBQU9rQUFBRHFBQUFBNndBQUFP\u0000\uFFFDd0FBQUR0QUFBQTdnQUFBTzhBQUFEd0FBQUE4UUFBQVBJQUFBRHpBQUFBOUFBQUFQVUFBQUQyQUFB\u0000\uFFFDQTl3QUFBUGdBQUFENUFBQUErZ0FBQVBzQUFBRDhBQUFBL1FBQUFQNEFBQUQvQUFBQUFBRUFBQUVC\u0000\uFFFDQUFBQ0FRQUFBd0VBQUFRQkFBPT0\u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-78);
      Base64.decodeBase64(byteArray0);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte) (-95);
      byteArray0[8] = (byte)67;
      base64_0.encode(byteArray0, 0, 1);
      base64_0.encode(byteArray0, (int) (byte) (-124), (-2113));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8303, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.doubles();
      Base64 base64_0 = new Base64(6);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray3);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8303, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8303, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Random.setNextRandom(8303);
      bigInteger1.doubleValue();
      base64_0.readResults(byteArray1, 8303, 104);
      base64_0.encode(byteArray2, 76, 6);
      base64_0.encode(byteArray1, 130, (-2813));
      Base64.isBase64((byte)118);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8303, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      mockRandom0.doubles(0L, 0.0, 1440.7211);
      Base64 base64_0 = new Base64(6);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8303, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.toIntegerBytes(bigInteger0);
      mockRandom0.nextFloat();
      Random.setNextRandom(122);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      // Undeclared exception!
      base64_0.encodeToString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8303, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64(byteArray1);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8303, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8303, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      Random.setNextRandom(8303);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true, true);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8303, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(6);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)101;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-52);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray0);
      base64_1.decode(byteArray2, 8192, 2);
      Object object0 = new Object();
      try { 
        base64_1.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2147483646), byteArray0);
      Object object0 = base64_0.decode((Object) "US-ASCII");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs(6L, 10L);
      int int0 = Integer.MAX_VALUE;
      BigInteger bigInteger1 = new BigInteger(Integer.MAX_VALUE, mockRandom0);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, (int) (byte)6);
      assertArrayEquals(new byte[] {(byte)66, (byte)107, (byte)83, (byte)114}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)1;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8200, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8200);
      base64_0.decode(byteArray0, 21, 21);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray1, (-37), (-37));
      assertNotSame(byteArray1, byteArray0);
      
      int int0 = base64_0.readResults(byteArray0, 21, 13);
      assertEquals(13, int0);
      assertEquals(1364, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8200, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8200);
      base64_0.decode(byteArray0, 21, 21);
      assertEquals(1364, byteArray0.length);
      
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray1, (-37), (-37));
      Random.setNextRandom((-1534));
      int int0 = base64_0.avail();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8200, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 22, 22);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray2, (-37), (-37));
      base64_0.encode(byteArray2, 8200, 61);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must nt contain base64 characters: [");
      Base64.isBase64("lineSeperator must nt contain base64 characters: [");
      Base64 base64_0 = new Base64(false);
      base64_0.decode("");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 16, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(1392, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      mockRandom0.ints();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(170, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, false, 1392);
      assertEquals(312, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64((-2379), (byte[]) null);
      base64_0.readResults((byte[]) null, (-2379), 1256);
      base64_0.encode((byte[]) null, (-2379), (-2379));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 2762, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8160);
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8160, mockRandom0);
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(1392, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      String string0 = base64_1.encodeToString(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      assertEquals(228, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)79, (byte)77, (byte)61, (byte)0, (byte) (-29)}, byteArray1);
      
      MockRandom mockRandom0 = new MockRandom(2371L);
      BigInteger bigInteger0 = new BigInteger(1392, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals(228, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(110, byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-4);
      byteArray1[1] = (byte) (-2);
      byteArray1[2] = (byte) (-7);
      byteArray1[3] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.equals(base64_0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte) (-95);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)76;
      byteArray1[4] = (byte)83;
      byteArray1[5] = (byte)78;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertEquals(5, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-95), (byte) (-1), (byte)76, (byte)83, (byte)78}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)114;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-29), (byte) (-40), (byte) (-1), (byte)88, (byte) (-36), (byte)1, (byte)114}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray1);
      base64_0.decode(byteArray1, 14, 1415);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("US-ASCII");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64(false);
      base64_0.decode(byteArray1, (int) (byte)1, 76);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      Base64 base64_0 = new Base64(105, byteArray0);
      base64_0.encode((byte[]) null, 188, (int) (byte) (-103));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-97);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64((-2718), byteArray0);
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 188, 250);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(33);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray1);
      base64_0.decode(byteArray1, 0, 1415);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64.isBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 107, 1415);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(105, byteArray0);
      Base64.encodeBase64((byte[]) null, false, true);
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null);
      Base64 base64_1 = new Base64(28);
      base64_1.decode((byte[]) null);
      Base64.encodeBase64(byteArray0, true, true);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(6);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, true, true, 6);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64();
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, true, true, 76);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)33;
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-84);
      Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64 base64_0 = new Base64((-2379), (byte[]) null);
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      base64_0.encode((byte[]) null, (-2379), (-2379));
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-60);
      Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      String string0 = "org.apache.commons.codec.EncoderException";
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("wZK");
      int int0 = 90;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 2721);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)2;
      byteArray2[1] = (byte)2;
      byteArray2[2] = (byte)2;
      byteArray2[3] = (byte)2;
      byteArray2[4] = (byte)2;
      Base64.isBase64(byteArray2);
      Base64.decodeInteger(byteArray2);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (int) (byte)2, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)60;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_1 = new Base64(64, byteArray0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte)0;
      Base64.encodeBase64(byteArray1, true, false);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64(byteArray0, true, false);
      base64_1.isUrlSafe();
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-52);
      byteArray2[3] = (byte)120;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)120;
      byteArray2[7] = (byte)120;
      Base64.encodeBase64(byteArray2, false, true, (int) (byte)120);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-96);
      base64_0.decode(byteArray2, 90, (int) (byte) (-96));
      byte[] byteArray3 = base64_0.decode("org.apache.commons.codec.EncoderException");
      Base64 base64_1 = new Base64(17);
      base64_1.encode(byteArray3, 17, (int) (byte) (-96));
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false);
      Base64 base64_1 = new Base64(31);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 0, (-1810));
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.encodeToString(byteArray2);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      Base64.encodeBase64(byteArray1, false, false, 2114);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 76);
      base64_0.encode(byteArray0, (-2602), (-2602));
      base64_0.avail();
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(76, byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)62;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray2);
      
      boolean boolean0 = Base64.isBase64((byte)62);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null, (-1810), (-1810));
      Base64.encodeBase64String((byte[]) null);
      base64_0.decode((byte[]) null, (-3095), 124);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.decodeBase64((String) null);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray1 = new byte[1];
      base64_0.decode((String) null);
      byteArray1[0] = (byte) (-96);
      base64_0.decode(byteArray1, 90, (int) (byte)0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("UTF-16BE");
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)62;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)123);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte)62;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 1050);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 4873);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(false);
      Base64 base64_2 = new Base64();
      base64_2.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 0, (-1810));
      Base64.encodeBase64String(byteArray1);
      base64_0.decode(byteArray1, 0, 0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-96);
      byteArray0[0] = (byte) (-96);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(84, byteArray2, false);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte) (-74);
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64 base64_1 = new Base64(false);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      int int0 = 55;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.abs();
      bigInteger0.toString((-869));
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.add(bigInteger1);
      Base64 base64_0 = new Base64((-869), byteArray0, true);
      assertEquals(0, byteArray0.length);
      
      Base64.encodeBase64(byteArray0, true, false);
      base64_0.decode("");
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = base64_0.decode(byteArray1);
      assertSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte)116;
      Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)79);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_1 = new Base64(64, byteArray0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte)0;
      Base64.encodeBase64(byteArray1, true, false);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64(byteArray0, true, false);
      base64_1.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray0);
      base64_0.hasData();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      Object object0 = new Object();
      bigInteger0.equals("AAAA\u0000\u0000");
      bigInteger0.shortValueExact();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = new BigInteger(byteArray1);
      bigInteger0.subtract(bigInteger2);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      Base64.isBase64(byteArray2);
      base64_0.encode(byteArray2);
      base64_0.encode(byteArray2);
      Base64 base64_1 = new Base64(66);
      try { 
        base64_1.encode((Object) "AAAA\u0000\u0000");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = new byte[0];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("lineSeperatormustnotcontainbase64characters", string0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_1 = new Base64(1250, byteArray1, false);
      Base64.encodeBase64(byteArray0, false, true);
      String string1 = Base64.encodeBase64String(byteArray1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(72);
      boolean boolean0 = Base64.isBase64("C\".U'u$g{N<|TKu>o");
      assertFalse(boolean0);
      
      base64_0.decode(byteArray1, (-1810), (-1523));
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("WEFBPQ==", string0);
      
      base64_0.decode(byteArray0, (int) (byte) (-1), (-1290));
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-31);
      byteArray1[1] = (byte) (-37);
      byteArray1[2] = (byte) (-113);
      byteArray1[3] = (byte) (-37);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-37);
      byteArray1[6] = (byte) (-37);
      byteArray1[7] = (byte)54;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      base64_0.decode(byteArray2, 55, (int) (byte) (-37));
      base64_0.decode("org.apache.commons.codec.EncoderException");
      Base64 base64_1 = new Base64(8180);
      base64_1.encode(byteArray3, (int) (byte) (-37), (-3217));
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      assertEquals("4duP2wDb2zY", string0);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64((byte)0);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isArrayByteBase64(byteArray2);
      Base64 base64_1 = new Base64(true);
      base64_0.decode("x9C5Ub0");
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-107);
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)94;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte) (-107);
      byteArray3[7] = (byte)0;
      base64_0.encodeToString(byteArray3);
      base64_1.encodeToString(byteArray3);
      try { 
        base64_0.encode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-38);
      Base64 base64_0 = new Base64((byte) (-38), byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64(byteArray2);
      boolean boolean0 = Base64.isBase64((byte) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_1 = new Base64(false);
      String string0 = "ISO-8859-1";
      byte[] byteArray2 = base64_0.decode("ISO-8859-1");
      String string1 = "qt.vYNHS~1LF9'AB+_";
      base64_0.encodeToString(byteArray1);
      base64_1.encodeToString(byteArray2);
      try { 
        base64_0.encode((Object) "UTF-16BE");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      bigInteger2.longValue();
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      byte[] byteArray3 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-40);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)80;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64((byte) (-37));
      boolean boolean0 = Base64.isBase64("C\".U'u$g{N<|TKu>o");
      assertFalse(boolean0);
      
      base64_0.decode(byteArray1, (-1810), (int) (byte) (-98));
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)50, (byte)119, (byte)68, (byte)89, (byte)65, (byte)74, (byte)53, (byte)81}, byteArray1);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-37);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-10);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-98);
      byteArray2[5] = (byte)80;
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[3] = (byte) (-87);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)104, (int) (byte)62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 104
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)81;
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)107;
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)107;
      byteArray1[1] = (byte) (-61);
      byteArray1[2] = (byte)81;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)81, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [k\uFFFDQ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte) (-74);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.decode("x9C5Ub0");
      base64_0.encodeToString(byteArray2);
      base64_0.encodeToString(byteArray2);
      try { 
        base64_0.encode((Object) "qt.vYNHS~1LF9'AB+_");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("X,((j{GS,(o#");
      assertArrayEquals(new byte[] {(byte)94, (byte)49, (byte) (-110)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-84);
      byteArray1[3] = (byte) (-90);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)62;
      byteArray1[6] = (byte) (-67);
      byteArray1[7] = (byte) (-71);
      byteArray1[8] = (byte)1;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(14, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 76);
      base64_0.encode(byteArray0, (-2602), (-2602));
      base64_0.avail();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(76, byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-69);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger2.shortValueExact();
      bigInteger0.mod(bigInteger2);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)105;
      Base64.decodeBase64(byteArray0);
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-34);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)55;
      base64_0.encode(byteArray1, (int) (byte)84, (int) (byte) (-34));
      base64_0.readResults((byte[]) null, (-553), 0);
      Base64.decodeBase64("Z-L8qi8pUxYB");
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString(byteArray1);
      base64_0.hasData();
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray3);
      byte[] byteArray4 = new byte[5];
      Object object0 = new Object();
      bigInteger0.equals(object0);
      bigInteger0.shortValueExact();
      byteArray4[0] = (byte) (-128);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)24;
      byteArray4[3] = (byte)37;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.subtract(bigInteger1);
      byteArray4[4] = (byte)0;
      bigInteger0.longValue();
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64.encodeBase64(byteArray2, true);
      Base64.isBase64(byteArray2);
      base64_0.encode(byteArray3);
      base64_0.encode(byteArray4);
      try { 
        base64_0.encode((Object) "lineSeperator must not contain base64 characters: [");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)34;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)39;
      Base64.isBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.isBase64("ry3BAO");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte)39;
      byteArray1[3] = (byte) (-67);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)69;
      byteArray1[6] = (byte) (-67);
      byteArray1[7] = (byte)39;
      byteArray1[8] = (byte) (-67);
      base64_0.encodeToString(byteArray1);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray2, true, true);
      Base64.encodeBase64(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)62);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)24);
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)6;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals(16, byteArray2.length);
      
      byteArray0[5] = (byte)78;
      base64_0.encodeToString(byteArray0);
      byte[] byteArray3 = new byte[1];
      Base64.encodeBase64(byteArray0, true);
      byteArray3[0] = (byte)0;
      int int0 = base64_0.readResults(byteArray3, (byte)0, (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)111;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1879);
      assertArrayEquals(new byte[] {(byte)98, (byte)119, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.abs();
      bigInteger0.toString((-869));
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.add(bigInteger1);
      Base64 base64_0 = new Base64((-869), byteArray0, true);
      Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray1 = base64_0.decode("");
      base64_0.encodeToString(byteArray0);
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("", string0);
      
      int int0 = base64_0.readResults(byteArray1, 0, (-869));
      assertEquals(0, int0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertArrayEquals(new byte[] {(byte)88, (byte)80, (byte)56, (byte)61}, byteArray1);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray2.length);
      
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte)92;
      byteArray3[2] = (byte)123;
      byteArray3[3] = (byte)92;
      byteArray3[4] = (byte) (-1);
      base64_0.decode(byteArray3, 20, (int) (byte) (-1));
      byte[] byteArray4 = base64_0.decode("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray4.length);
      
      base64_0.encode(byteArray0, (int) (byte)92, (int) (byte)92);
      Base64.encodeBase64URLSafeString(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)17;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("QhE", string0);
      
      Base64 base64_0 = new Base64((byte)66);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(6, byteArray1.length);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)66;
      byteArray2[1] = (byte)17;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)17;
      Base64.encodeBase64(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, false);
      assertArrayEquals(new byte[] {(byte)85, (byte)87, (byte)104, (byte)70, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray4);
      
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray2);
      assertEquals(6, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)120;
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte) (-59);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)87;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)72;
      byteArray2[1] = (byte) (-124);
      byteArray2[2] = (byte)120;
      byteArray2[3] = (byte) (-124);
      byteArray2[4] = (byte)87;
      byteArray2[5] = (byte) (-59);
      Base64.decodeBase64(byteArray2);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-46), byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [x\u0484\uFFFDH\uFFFD\uFFFD\u0001W]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-15);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)122, (byte)74, (byte)104, (byte)56, (byte)81, (byte)61, (byte)61, (byte) (-87), (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(2241, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)111, (byte)65, (byte)61, (byte)61, (byte) (-96)}, byteArray1);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)120;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(3, byteArray1.length);
      
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)116;
      base64_0.encode(byteArray0, 0, (int) (byte)1);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-91);
      byteArray0[8] = (byte)61;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64(1503);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)112;
      byteArray0[8] = (byte)27;
      int int0 = base64_0.readResults(byteArray0, (byte)27, 0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte) (-4);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64((byte)0);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-87);
      byteArray0[0] = (byte) (-87);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.discardWhitespace(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)121;
      byteArray0[0] = (byte)121;
      byte byte1 = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-3721), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [y\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = new BigInteger(0, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64 base64_0 = new Base64((-949), (byte[]) null);
      byte[] byteArray0 = new byte[1];
      Base64.decodeBase64(byteArray0);
      byteArray0[0] = (byte) (-19);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode((byte[]) null, (-1), (-949));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-19);
      byteArray1[1] = (byte) (-19);
      byteArray1[2] = (byte) (-19);
      byteArray1[3] = (byte) (-19);
      byteArray1[4] = (byte) (-19);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-19);
      byteArray1[7] = (byte) (-19);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1330), byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)100;
      byteArray1[5] = (byte)68;
      byteArray1[6] = (byte)112;
      byteArray1[7] = (byte)0;
      base64_0.decode(byteArray1);
      Base64.isBase64("eR.0~6o=");
      byte[] byteArray2 = base64_0.decode("eR.0~6o=");
      base64_0.decode((Object) "");
      Base64.decodeBase64("eR.0~6o=");
      Base64.encodeBase64(byteArray2, true);
      base64_0.readResults(byteArray2, (-1330), (-1330));
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 720, 720);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 720
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      byte byte1 = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(110, byteArray0);
      base64_0.decode((Object) "");
      base64_0.encode(byteArray0, 0, (int) (byte)0);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.hasData();
      base64_0.decode(byteArray0, (-5590), (int) (byte)0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte) (-98));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -98
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
