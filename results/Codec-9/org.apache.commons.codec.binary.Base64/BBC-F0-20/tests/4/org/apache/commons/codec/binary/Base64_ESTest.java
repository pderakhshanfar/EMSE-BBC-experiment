/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:03:11 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 6);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)1;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4L);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)61);
      Base64 base64_0 = new Base64(1, byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte)91);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = BigInteger.probablePrime(2140, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger2.remainder(bigInteger1);
      mockRandom0.doubles();
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 1, 2140);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (-1484), (-1484));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 66, 54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2149, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      mockRandom0.ints();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      mockRandom0.doubles(0L);
      bigInteger1.bitLength();
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 0, 2149);
      Base64.isArrayByteBase64(byteArray1);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4L);
      MockRandom mockRandom1 = new MockRandom(4L);
      mockRandom1.setSeed(0L);
      BigInteger bigInteger0 = BigInteger.probablePrime(2140, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom1.ints();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      mockRandom0.doubles(845L);
      bigInteger0.bitLength();
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 0, 2368);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4L);
      MockRandom mockRandom1 = new MockRandom(4L);
      mockRandom1.setSeed(0L);
      BigInteger bigInteger0 = BigInteger.probablePrime(2140, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.ints();
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.bitLength();
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray1);
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, 76, 2140);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 360
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)1;
      base64_0.decode(byteArray0, 0, 18);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)18;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 1470);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(126L);
      BigInteger bigInteger0 = BigInteger.probablePrime(329, mockRandom0);
      mockRandom0.nextInt();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      mockRandom0.ints(2967L);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-59);
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte)65;
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte)65);
      byte[] byteArray2 = new byte[0];
      Base64 base64_0 = new Base64((-738), byteArray2, true);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      MockRandom mockRandom0 = new MockRandom((byte)35);
      mockRandom0.setSeed(76);
      BigInteger bigInteger0 = BigInteger.probablePrime(329, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      mockRandom0.ints((long) 76);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64String(byteArray2);
      Base64.isBase64("");
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray3 = base64_1.encode(byteArray0);
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      MockRandom mockRandom0 = new MockRandom((byte)35);
      mockRandom0.setSeed(76);
      BigInteger bigInteger0 = BigInteger.probablePrime(329, mockRandom0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      mockRandom0.ints((long) 76);
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64("");
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64("");
      Base64 base64_1 = new Base64(76, byteArray0);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 4, 1996);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      MockRandom mockRandom0 = new MockRandom((byte)35);
      mockRandom0.setSeed(76);
      BigInteger bigInteger0 = BigInteger.probablePrime(329, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      mockRandom0.ints((long) 76);
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64("");
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64("");
      Base64 base64_1 = new Base64(76, byteArray0);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 13, 1996);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      MockRandom mockRandom0 = new MockRandom((byte)35);
      mockRandom0.setSeed(76);
      BigInteger bigInteger0 = BigInteger.probablePrime(1563, mockRandom0);
      mockRandom0.ints((long) (byte)35, 3904, 1717986918);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64((byte)35, byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[1] = (byte)36;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)58;
      byteArray2[2] = (byte)58;
      Base64.isBase64("_BN7+^+GZzyV=7qj[u\"");
      byte[] byteArray3 = new byte[5];
      Base64.isBase64("");
      Base64.isBase64((byte)58);
      Base64.isArrayByteBase64(byteArray3);
      Base64.isBase64("ZAk`o#&.%sVF");
      Base64 base64_1 = new Base64((byte)58, byteArray1);
      byte[] byteArray4 = base64_1.decode("US-ASCII");
      byte[] byteArray5 = Base64.encodeBase64(byteArray4);
      base64_1.avail();
      byte[] byteArray6 = Base64.discardWhitespace(byteArray2);
      Base64.isArrayByteBase64(byteArray6);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(101L);
      BigInteger bigInteger0 = BigInteger.probablePrime(824, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      mockRandom0.ints();
      BigInteger bigInteger1 = bigInteger0.and(bigInteger0);
      bigInteger0.floatValue();
      bigInteger1.bitLength();
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.longValue();
      BigInteger bigInteger3 = new BigInteger(2684, 1908874353, mockRandom0);
      Base64.encodeInteger(bigInteger2);
      Base64.isBase64((byte)95);
      base64_0.decode("");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      MockRandom mockRandom0 = new MockRandom((byte)35);
      mockRandom0.setSeed(76);
      BigInteger bigInteger0 = BigInteger.probablePrime(329, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      mockRandom0.ints((long) 76);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.isBase64("");
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64("");
      Base64 base64_1 = new Base64(76, byteArray0);
      base64_1.decode("org.apache.commons.codec.binary.Base64");
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      base64_1.avail();
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      Base64.isArrayByteBase64(byteArray4);
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 1, 1);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      base64_0.hasData();
      base64_0.readResults(byteArray2, 1, 3140);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.avail();
      Base64.discardWhitespace(byteArray0);
      base64_0.encode(byteArray1, (-2122), (-1));
      Base64.isArrayByteBase64(byteArray1);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom(64);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.setSeed(64);
      BigInteger bigInteger0 = BigInteger.probablePrime(76, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom1.ints();
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.and(bigInteger1);
      bigInteger1.floatValue();
      bigInteger0.bitLength();
      boolean boolean0 = true;
      Base64 base64_1 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64String(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 3, 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-8);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, 48, (-334));
      base64_0.encodeToString(byteArray1);
      Base64.isBase64((byte)16);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      Base64.decodeBase64(byteArray0);
      base64_0.decode((String) null);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)58;
      byteArray1[4] = (byte)86;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte) (-1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte) (-1), 47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte byte0 = (byte) (-3);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byte[] byteArray1 = null;
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)111, (byte)47, (byte)56, (byte)83, (byte)13, (byte)10}, byteArray1);
      
      MockRandom mockRandom0 = new MockRandom((byte) (-1));
      mockRandom0.nextLong();
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte) (-1), 2126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)88;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)47;
      base64_0.readResults(byteArray2, (byte)0, 7);
      base64_0.decode((Object) "");
      Base64.encodeBase64(byteArray1, false);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      bigInteger0.negate();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode("UF");
      base64_0.avail();
      Base64.discardWhitespace(byteArray2);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(14);
      Base64.encodeBase64((byte[]) null, true, true);
      base64_0.decode((byte[]) null);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-3);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.isBase64((byte)40);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(76, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-3);
      byteArray1[0] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      byteArray1[3] = (byte)40;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 2168);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64("r7]WrH9vx'Vp");
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte) (-59);
      Base64 base64_0 = new Base64(2473, byteArray1);
      base64_0.avail();
      int int0 = 21;
      Base64 base64_1 = new Base64(21);
      base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigInteger0.pow((byte) (-20));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative exponent
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      MockRandom mockRandom0 = new MockRandom((byte)35);
      mockRandom0.setSeed(76);
      BigInteger bigInteger0 = BigInteger.probablePrime(1563, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      mockRandom0.ints((long) 76);
      Base64.discardWhitespace(byteArray1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.and(bigInteger1);
      bigInteger0.floatValue();
      bigInteger0.bitLength();
      Base64 base64_1 = new Base64((byte)35);
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray1, 46, (-2147483646));
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)35;
      byteArray2[1] = (byte)35;
      byteArray2[2] = (byte)35;
      byteArray2[3] = (byte)35;
      byteArray2[4] = (byte)35;
      byteArray2[5] = (byte)35;
      byteArray2[6] = (byte)35;
      mockRandom0.nextLong();
      byteArray2[7] = (byte)35;
      byteArray2[8] = (byte)35;
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      MockRandom mockRandom0 = new MockRandom((byte)35);
      mockRandom0.setSeed(76);
      BigInteger bigInteger0 = BigInteger.probablePrime(1563, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      mockRandom0.ints();
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.and(bigInteger1);
      bigInteger0.floatValue();
      bigInteger0.bitLength();
      Base64 base64_1 = new Base64();
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray1, 46, (-2147483646));
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)35;
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger2);
      byteArray3[1] = (byte)35;
      byteArray3[2] = (byte)35;
      byteArray3[3] = (byte)35;
      byteArray3[4] = (byte)35;
      Base64.encodeBase64(byteArray3);
      byteArray3[6] = (byte)35;
      byteArray3[7] = (byte)35;
      byteArray3[8] = (byte)35;
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray2);
      Base64.isArrayByteBase64(byteArray2);
      try { 
        base64_1.decode((Object) bigInteger3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-85);
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode((Object) "");
      byte[] byteArray1 = Base64.decodeBase64("");
      base64_0.decode((Object) "");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray1, (-2173), (int) (byte) (-53));
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      bigInteger0.toByteArray();
      Base64.encodeBase64((byte[]) null, false);
      base64_0.hasData();
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("]");
      base64_0.encodeToString(byteArray0);
      Base64.isBase64((byte) (-1));
      Base64.isArrayByteBase64(byteArray2);
      base64_0.readResults(byteArray2, (-554), (byte) (-53));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom(5);
      mockRandom0.setSeed(5);
      BigInteger bigInteger1 = BigInteger.ZERO;
      mockRandom0.ints((long) 5);
      bigInteger0.and(bigInteger1);
      bigInteger0.floatValue();
      bigInteger0.bitLength();
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "");
      BigInteger bigInteger2 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-1), 90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-85);
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode((Object) "");
      byte[] byteArray1 = Base64.decodeBase64("");
      base64_0.decode((Object) "");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray1, (-2173), (int) (byte)0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      bigInteger0.toByteArray();
      base64_0.hasData();
      Base64.toIntegerBytes(bigInteger0);
      boolean boolean0 = Base64.isBase64("]");
      base64_0.encodeToString(byteArray0);
      Base64.isBase64((byte) (-1));
      boolean boolean1 = Base64.isArrayByteBase64(byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, byteArray2.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte) (-31);
      byte byte1 = (byte)127;
      Base64 base64_0 = new Base64(27, byteArray0);
      Base64 base64_1 = new Base64(27, byteArray0);
      base64_1.avail();
      base64_1.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.pow(0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_1.decode(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 3033, 96);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3033
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte byte0 = (byte) (-11);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.toString((int) (byte)122);
      Base64.isBase64("0");
      Base64 base64_0 = new Base64(false);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("", string0);
      
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)122);
      assertTrue(boolean0);
      
      byte[] byteArray1 = base64_0.decode("ud0r~,kr>fFj");
      assertArrayEquals(new byte[] {(byte) (-71), (byte) (-35), (byte)43, (byte) (-110), (byte) (-73), (byte) (-59)}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-3);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("_f0", string0);
      
      boolean boolean1 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(boolean1);
      
      Base64.isBase64((byte) (-1));
      boolean boolean2 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean2 == boolean0);
      
      Base64 base64_0 = new Base64(1717986918, byteArray0);
      base64_0.encode(byteArray0, (int) (byte) (-1), (-1429));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64.isBase64((byte)1);
      Base64.isBase64("m_U:k%A7");
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)88;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)47;
      base64_0.readResults(byteArray3, (byte)0, 7);
      base64_0.decode((Object) "");
      base64_0.encode(byteArray3, 0, 0);
      Base64.encodeBase64(byteArray1, false);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("");
      byte[] byteArray4 = base64_0.decode("UY");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81}, byteArray4);
      
      base64_0.avail();
      byte[] byteArray5 = Base64.discardWhitespace(byteArray2);
      byte[] byteArray6 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray6);
      
      Object object0 = base64_0.decode((Object) "UY");
      base64_0.encode(object0);
      byte[] byteArray7 = base64_0.decode(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray5);
      //  // Unstable assertion: assertEquals(1, byteArray7.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)39;
      byteArray0[0] = (byte)39;
      byte byte1 = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-56);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)39, byteArray2, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: ['+\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.isBase64((byte)125);
      Base64.encodeBase64(byteArray1, false, true, (int) (byte)125);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64(12, byteArray2);
      Base64.encodeBase64(byteArray1);
      Base64.decodeBase64("qg1*-rxFMk[+{Vy(n");
      Base64.isBase64("");
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      Base64.isBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      MockRandom mockRandom0 = new MockRandom((byte)35);
      mockRandom0.setSeed(76);
      BigInteger bigInteger0 = BigInteger.probablePrime(1526, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      mockRandom0.ints((long) 76);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.and(bigInteger1);
      bigInteger0.floatValue();
      bigInteger0.bitLength();
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray1, 46, (-2147483646));
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)35;
      byteArray3[1] = (byte)35;
      byteArray3[2] = (byte)35;
      byteArray3[3] = (byte)35;
      byteArray3[4] = (byte)35;
      byteArray3[5] = (byte)35;
      byteArray3[6] = (byte)35;
      byteArray3[7] = (byte)35;
      byteArray3[8] = (byte)35;
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray4);
      Base64.isArrayByteBase64(byteArray2);
      try { 
        base64_1.decode((Object) bigInteger2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)10;
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-55);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((byte)10, byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.isBase64((byte)1);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64((-333), (byte[]) null);
      String string0 = "m_U:k%A7";
      Base64.encodeBase64((byte[]) null);
      try { 
        base64_0.encode((Object) "m_U:k%A7");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)8, (byte[]) null);
      base64_0.decode("z");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      Object object0 = base64_0.decode((Object) "Hy9Il.0&@K|w9UL");
      Object object1 = base64_0.decode(object0);
      Base64.decodeBase64(byteArray1);
      base64_0.decode(object1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray3, (int) (byte)0, 2);
      base64_0.avail();
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)10;
      byteArray4[4] = (byte)10;
      byteArray4[5] = (byte)10;
      byteArray4[6] = (byte)0;
      byteArray4[7] = (byte)1;
      byteArray4[8] = (byte)10;
      Base64.encodeBase64(byteArray4, true, true);
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray0, true, false, (int) (byte)18);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-11);
      byteArray0[0] = (byte) (-11);
      byte byte1 = (byte)86;
      byteArray0[1] = (byte)86;
      byte byte2 = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte) (-77), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -77
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64(28);
      Base64.encodeBase64((byte[]) null, true, true);
      base64_0.decode((byte[]) null);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.decodeBase64("y;O&2}au7A}<\"");
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray2);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.readResults(byteArray2, (byte)0, 302);
      base64_0.decode((Object) "y;O&2}au7A}<\"");
      base64_0.encode(byteArray1, 302, 302);
      Base64.encodeBase64(byteArray0, false);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("y;O&2}au7A}<\"");
      base64_0.decode("");
      base64_0.avail();
      Base64.discardWhitespace(byteArray1);
      Base64.encodeInteger(bigInteger0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("WZ!KZcG");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.decode("WZ!KZcG");
      base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray0, 2157, 2157);
      Base64.decodeBase64((String) null);
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0);
      base64_0.encode((byte[]) null);
      base64_0.encode(byteArray1);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      base64_0.decode("K-ME`@!XX7");
      byteArray0[0] = (byte) (-17);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-1);
      base64_0.decode((Object) "b`ZP8f^");
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)72;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray1);
      try { 
        base64_0.encode((Object) "b`ZP8f^");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.isBase64((byte) (-111));
      Base64.encodeBase64(byteArray1, false, true, (int) (byte) (-111));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)107;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte) (-67);
      Base64 base64_0 = new Base64((-3363), byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.decodeBase64((String) null);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger1);
      base64_0.encode((byte[]) null, 0, (int) (byte) (-21));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      Object object0 = base64_0.decode((Object) "Hy9Il.0&@K|w9UL");
      base64_0.decode(object0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)19;
      Base64.decodeBase64(byteArray1);
      byteArray1[1] = (byte)1;
      Base64.decodeBase64(byteArray1);
      byteArray1[2] = (byte)0;
      base64_0.decode(byteArray1, 1159, 1159);
      base64_0.avail();
      Base64.encodeBase64(byteArray1, false, false);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, false, 0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)68;
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2463, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0000\u0000D]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.isBase64((byte)1);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.readResults((byte[]) null, 1, 0);
      byte[] byteArray1 = base64_0.decode("");
      base64_0.encode((byte[]) null);
      Base64 base64_1 = new Base64(76, byteArray1);
      try { 
        base64_1.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)127;
      Base64 base64_0 = new Base64(76, byteArray0);
      base64_0.avail();
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray1, (int) (byte)39, 0);
      Base64.isBase64("");
      base64_0.encodeToString(byteArray0);
      Base64.isBase64((byte)127);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (-730));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -730
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)1;
      byte byte0 = (byte)0;
      byteArray0[6] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte) (-95), (int) (byte)0);
      byteArray0[7] = (byte)25;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[0];
      int int0 = 364;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)21;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAEBjwAV]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((-1), byteArray1, true);
      Base64 base64_1 = new Base64((-1), byteArray0);
      try { 
        base64_1.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-85);
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode((Object) "");
      byte[] byteArray1 = Base64.decodeBase64("");
      base64_0.decode((Object) "");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray1, (-2173), (int) (byte) (-53));
      Base64.encodeInteger(bigInteger0);
      bigInteger0.toByteArray();
      base64_0.hasData();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("]");
      Base64.encodeBase64String(byteArray2);
      Base64.decodeBase64("");
      Base64.isBase64("");
      base64_0.isUrlSafe();
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64((-5049));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)63;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[2] = (byte)0;
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, 0, (byte)0);
      byte[] byteArray3 = base64_0.decode("8Xn8|");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitLength();
      bigInteger0.pow(9);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(76, mockRandom0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray3);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64String(byteArray3);
      Base64.isBase64(byteArray2);
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.and(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.isBase64("");
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)17;
      byteArray2[1] = (byte)0;
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64.isBase64("i3_U~O");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 1051, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64.decodeBase64("ti--(/Bn;^M(");
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(714, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u0001h\uFFFD\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      base64_0.encode(byteArray0);
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)1;
      byte byte0 = (byte)0;
      Base64.encodeBase64Chunked(byteArray1);
      byteArray2[1] = (byte)0;
      byte byte1 = (byte)0;
      base64_0.readResults(byteArray2, (byte)0, 0);
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)1;
      try { 
        base64_0.encode((Object) ">Kd&KRmr1>6T*<3");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.shiftRight((-3905));
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = BigInteger.ZERO;
      bigInteger3.not();
      bigInteger3.equals(bigInteger0);
      bigInteger2.longValueExact();
      bigInteger2.max(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger2.modPow(bigInteger3, bigInteger3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1025), byteArray0);
      Base64.decodeBase64(byteArray0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = bigInteger0.abs();
      Base64 base64_0 = new Base64(0, byteArray0, false);
      String string0 = "";
      Base64.isBase64("");
      Base64.encodeInteger(bigInteger2);
      base64_0.decode((Object) "t");
      Base64 base64_1 = new Base64();
      try { 
        base64_1.encode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom(5);
      mockRandom0.setSeed(5);
      BigInteger bigInteger1 = BigInteger.probablePrime(5, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.ints((long) 5);
      Base64.discardWhitespace(byteArray0);
      bigInteger0.and(bigInteger1);
      bigInteger0.floatValue();
      bigInteger0.bitLength();
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 5, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
