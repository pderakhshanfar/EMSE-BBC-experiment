/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:06:35 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64(7, byteArray0);
      Base64.decodeBase64(">o@(n{!");
      Object object0 = base64_0.decode((Object) "lineSepeator mst nt cotain base64 characters: [");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      Object object3 = base64_0.encode(object2);
      base64_0.encode(object3);
      base64_0.encode(object2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[46];
      byte[] byteArray1 = new byte[60];
      Base64 base64_0 = new Base64(4, byteArray1, false);
      base64_0.encode(byteArray0, 16, 30);
      base64_0.readResults(byteArray1, 4, 16);
      base64_0.encode(byteArray1, 16, 39);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 4, 62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[52];
      byte[] byteArray1 = new byte[52];
      Base64 base64_0 = new Base64(22, byteArray1, false);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray0, 11, 22);
      base64_0.encode(byteArray2, (-1970), (-1970));
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[6] = (byte)0;
      Base64 base64_0 = new Base64(7);
      base64_0.encode(byteArray0, (int) (byte)0, 8);
      base64_0.encode(byteArray0, 0, 7);
      base64_0.encode(byteArray0, 7, (-1484));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      byte[] byteArray1 = new byte[52];
      Base64 base64_0 = new Base64(11, byteArray1, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      base64_0.encode(byteArray0, 11, 11);
      base64_0.encode(byteArray2, (-1970), (-1970));
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[43];
      byte[] byteArray1 = new byte[52];
      Base64 base64_0 = new Base64(4, byteArray1, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      base64_0.encode(byteArray0, 11, 4);
      base64_0.encode(byteArray1, 11, (-1176));
      base64_0.encode(byteArray0, 4, 64);
      Base64.encodeBase64String(byteArray2);
      try { 
        base64_0.encode((Object) "QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT09DQo=");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[6] = (byte)0;
      Base64 base64_0 = new Base64(7, byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, 8);
      base64_0.encode(byteArray0, 7, (-1484));
      Base64.encodeBase64String(byteArray0);
      Random.setNextRandom(1488);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      Base64 base64_0 = new Base64(11, byteArray0, true);
      base64_0.encode(byteArray0, 11, 11);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0);
      base64_0.avail();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(89);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte) (-53);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64(7, byteArray0);
      Object object0 = base64_0.decode((Object) "lineSeperator mst nt cotain base64 characters: [");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      Object object3 = base64_0.encode(object2);
      Object object4 = base64_0.encode(object3);
      Base64.decodeBase64("|2Na~$w%vMw7|\"bI");
      Base64.isBase64((byte)0);
      // Undeclared exception!
      base64_0.encode(object4);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64(7, byteArray0);
      Object object0 = base64_0.decode((Object) "lineSeperator must not contain base64 characters: [");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      Object object3 = base64_0.encode(object2);
      Object object4 = base64_0.encode(object3);
      base64_0.decode(object4);
      int int0 = Base64.PEM_CHUNK_SIZE;
      Base64.discardWhitespace(byteArray0);
      Object object5 = base64_0.encode(object2);
      // Undeclared exception!
      base64_0.decode(object5);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)98;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte)1;
      Base64 base64_0 = new Base64(7, byteArray0);
      Object object0 = base64_0.decode((Object) "org.apach.commons.codec.DecoderEception");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      Object object3 = base64_0.encode(object2);
      base64_0.decode(object3);
      Object object4 = base64_0.encode(object3);
      assertNotSame(object4, object1);
      
      byte[] byteArray1 = Base64.decodeBase64("org.apach.commons.codec.DecoderEception");
      assertEquals(26, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64(13, byteArray0);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      Base64.encodeBase64URLSafe(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      Base64 base64_0 = new Base64(7, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 399);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64(13, byteArray0);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.DecoderException");
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      base64_0.encode(object1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray0, 13, (int) (byte)0);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      bigInteger0.floatValue();
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(76, byteArray3.length);
      assertEquals(57, byteArray2.length);
      
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)31;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)31, (byte)31, (byte)38, (byte)31, (byte)31, (byte)31, (byte)31}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64(13, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, 1, 1122);
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertEquals(14, byteArray1.length);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)98;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertEquals(6, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)93, (byte) (-26), (byte) (-1), (byte)105, (byte)82, (byte)98}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)6;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)6;
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)6);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      Base64.isBase64("IA]{>ZY4p?+er");
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)0, 63);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(49, byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((byte) (-78), byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode("org.pache.commons.code.DeoderException");
      Object object0 = base64_0.decode((Object) "org.pache.commons.code.DeoderException");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64.isBase64(" zjTwzg");
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.decode("");
      Base64.encodeBase64((byte[]) null, false, false, (int) (byte)0);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.decode((byte[]) null);
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)76;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 891);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = (-2214);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)82;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      int int1 = 63;
      base64_0.decode(byteArray1, (int) (byte)0, 63);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray2, 2177, (-2254));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.longValueExact();
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(10, byteArray0);
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-1364), 8165);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1364
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, 4, (-1963));
      base64_0.encodeToString(byteArray0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-78);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-78);
      Base64 base64_0 = new Base64(13, byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode("org.apache.commons.codec.DecoderException");
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-83);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64("");
      Base64 base64_0 = new Base64(87, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-123);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64("hYWFhYU=");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, 0, (int) (byte) (-123));
      Object object0 = base64_0.decode((Object) "i]:I#RIYAE[&w");
      base64_0.encode(object0);
      Base64.isBase64("i]:I#RIYAE[&w");
      base64_0.encode((byte[]) null, (int) (byte) (-123), 819);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.negate();
      String string0 = "";
      Base64 base64_0 = new Base64((byte)123, byteArray0);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, (int) (byte)1, 2091);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64((-2185));
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)82;
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)82;
      Base64.encodeBase64Chunked((byte[]) null);
      int int0 = 48;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (int) (byte)0, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.shiftLeft(2593);
      bigInteger2.byteValueExact();
      bigInteger1.and(bigInteger2);
      bigInteger1.negate();
      String string0 = "";
      Base64 base64_0 = new Base64((-645), (byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-2405), 119);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      Base64 base64_0 = new Base64((-1886), (byte[]) null);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64.isBase64("7$Q-P%Q?|");
      Base64 base64_0 = new Base64((-1));
      Base64 base64_1 = new Base64(64, (byte[]) null, true);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64.isBase64("7$Q-P%Q?|");
      Base64 base64_0 = new Base64((-1));
      Base64 base64_1 = new Base64(64, (byte[]) null, true);
      Base64.encodeBase64String((byte[]) null);
      base64_0.decode((byte[]) null, 64, (-2203));
      Base64.encodeBase64((byte[]) null, true, true);
      try { 
        base64_0.encode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(4, byteArray0, false);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64.isBase64("7$Q-P%Q?|");
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-93);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64("+BBKPAAtow==");
      Base64.encodeBase64((byte[]) null, false, false, (-1));
      Base64 base64_1 = new Base64(false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)60;
      base64_0.decode(byteArray1, (int) (byte)60, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)21;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)123;
      byteArray1[5] = (byte)21;
      byteArray1[6] = (byte)21;
      Base64 base64_0 = new Base64((byte) (-78), byteArray1);
      base64_0.encode(byteArray1, (int) (byte)21, 0);
      base64_0.readResults(byteArray0, (-86), (byte)21);
      Base64.decodeBase64(",z:1f`}M");
      base64_0.decode((String) null);
      Base64.decodeBase64((String) null);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)63;
      byteArray0[0] = (byte)63;
      byte byte1 = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)7;
      Base64 base64_0 = new Base64(372, byteArray0, true);
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)63);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray0, 70, (byte) (-96));
      Base64.isArrayByteBase64(byteArray0);
      base64_0.readResults(byteArray1, (byte) (-96), 70);
      base64_0.decode(byteArray1, (int) (byte)63, (int) (byte) (-96));
      base64_0.avail();
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-123);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64("hYWFhYU=");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)58;
      byteArray0[4] = (byte) (-123);
      byteArray1[2] = (byte) (-123);
      byteArray1[3] = (byte) (-123);
      base64_0.decode(byteArray1);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)58;
      byteArray2[1] = (byte)58;
      byteArray2[2] = (byte)58;
      base64_0.encodeToString(byteArray2);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-123);
      Base64.encodeBase64String(byteArray0);
      String string0 = "Input array too big, the output array would be bigger (";
      Base64.isBase64("Input array too big, the output array would be bigger (");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte) (-123));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -123
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)84;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)84;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)84;
      byteArray4[6] = (byte)0;
      byteArray4[7] = (byte)84;
      byteArray4[8] = (byte)0;
      Base64.decodeBase64(byteArray4);
      byte[] byteArray5 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64(byteArray3, false, true);
      byte[] byteArray6 = new byte[8];
      byteArray6[0] = (byte)84;
      byteArray6[1] = (byte)0;
      byteArray6[2] = (byte)0;
      byteArray6[3] = (byte)71;
      byteArray6[4] = (byte)0;
      byteArray6[5] = (byte)0;
      byteArray6[6] = (byte)84;
      byteArray6[7] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1221), byteArray6, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [T\u0000\u0000G\u0000\u0000T\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.negate();
      Base64 base64_0 = new Base64((byte)1, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)1;
      base64_0.encode(byteArray1, (int) (byte)1, (-1329));
      base64_0.decode((String) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64((-2169), (byte[]) null, false);
      base64_0.encode((byte[]) null, (-2169), (-2317));
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte) (-99);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeBase64("Xj2v{bWaHlMT0");
      Base64 base64_0 = new Base64((byte) (-54), byteArray1, true);
      base64_0.decode("S}|^viYfT{Do7");
      byte[] byteArray2 = Base64.decodeBase64(" |%");
      base64_0.decode(byteArray1, (int) (byte)2, (int) (byte)1);
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((-193));
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64("AA==");
      Base64 base64_1 = new Base64(64);
      Base64 base64_2 = new Base64(true);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64 base64_3 = new Base64();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64.isBase64("7$Q-P%Q?|");
      Base64 base64_0 = new Base64((-1));
      base64_0.decode((Object) "7$Q-P%Q?|");
      Base64 base64_1 = new Base64();
      base64_1.encode((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_2 = new Base64();
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.isBase64("7$Q-P%Q?|");
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)127;
      byteArray1[3] = (byte)127;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-78);
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64((byte)123);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      int int0 = (-2579);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64((-2579), byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-2579), (-2579));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((-193));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-17);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      base64_0.encodeToString(byteArray1);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte)0;
      Base64.encodeBase64(byteArray2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_2 = new Base64(false);
      base64_2.encode(byteArray3, (-5027), (int) (byte)0);
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      Base64.encodeBase64Chunked(byteArray4);
      Base64.encodeBase64(byteArray4, false, false, 670);
      base64_2.hasData();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-78);
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64 base64_1 = new Base64(76, byteArray0, false);
      Base64 base64_2 = new Base64(false);
      base64_2.decode(byteArray0, (int) (byte) (-78), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-2429), byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode((Object) "");
      base64_0.encode(byteArray0);
      base64_0.decode("}MyVs)pk-9%g^|x>");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-120);
      byteArray1[5] = (byte) (-120);
      byteArray1[6] = (byte)0;
      base64_0.readResults(byteArray1, (byte)0, (byte) (-120));
      byte[] byteArray2 = null;
      base64_0.encodeToString((byte[]) null);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)123;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.negate();
      String string0 = "";
      Base64 base64_0 = new Base64(90, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)22;
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isBase64("7$Q-P%Q?|");
      Base64 base64_0 = new Base64((-1));
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray1, (int) (byte)127, (-2437));
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      int int0 = 687;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        base64_1.readResults((byte[]) null, 52, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64((-1));
      base64_0.encodeToString(byteArray0);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64 base64_2 = new Base64();
      Base64.encodeBase64((byte[]) null, false);
      base64_2.encode(byteArray0);
      base64_2.encodeToString(byteArray2);
      Base64.encodeBase64(byteArray0, false, false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)123;
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[5] = (byte)0;
      base64_0.decode("l");
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-3);
      base64_0.decode(byteArray0, 0, (int) (byte) (-3));
      base64_0.isUrlSafe();
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64 base64_0 = new Base64(6, byteArray0, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)62;
      base64_0.decode(byteArray1);
      base64_0.isUrlSafe();
      Base64 base64_1 = new Base64(415, byteArray0);
      base64_1.isUrlSafe();
      Base64.encodeBase64(byteArray0, true);
      String string0 = ",";
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64.isBase64((byte)105);
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray0, (int) (byte)107, (int) (byte)0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)30;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      Base64.encodeBase64(byteArray2);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.xor(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, true, 40);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray3);
      base64_0.isUrlSafe();
      base64_1.decode("");
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isBase64("7$Q-P%Q?|");
      Base64 base64_0 = new Base64((-1));
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray1, (int) (byte)127, (-2437));
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64 base64_2 = new Base64();
      base64_2.encodeToString(byteArray2);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-120);
      Base64 base64_1 = new Base64(77, byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode((Object) "}MyVs)pk-9%g^|x>");
      base64_1.encode(byteArray0);
      byte[] byteArray2 = base64_1.decode("");
      base64_1.readResults(byteArray2, (-2585), 77);
      base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) "C~<7SP*xtp2]`/GEo");
      base64_0.readResults(byteArray1, 76, 64);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.toByteArray();
      bigInteger0.or(bigInteger1);
      Base64 base64_0 = new Base64(6);
      bigInteger0.negate();
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      base64_0.decode(byteArray2);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-120);
      byteArray1[4] = (byte)116;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte)102;
      byteArray1[8] = (byte)89;
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray0, false, false, 64);
      Base64.isBase64("Q&jRc}oa");
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray1, (int) (byte)0, (-1427));
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray1, false, true);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)123;
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = base64_0.decode("l");
      byteArray0[6] = (byte)0;
      Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_1 = new Base64((byte)0, byteArray0, true);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte byte0 = (byte)105;
      Base64.isBase64((byte)105);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = base64_0.decode("aQ==");
      BigInteger bigInteger1 = BigInteger.valueOf(312L);
      base64_0.decode(byteArray1, (int) (byte)105, (int) (byte)105);
      Base64.encodeBase64String(byteArray0);
      bigInteger1.xor(bigInteger0);
      Base64.decodeBase64("aQ==");
      // Undeclared exception!
      try { 
        bigInteger0.pow((-1213));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative exponent
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64.isBase64((byte)105);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 1, (-422));
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-123);
      byteArray1[1] = (byte) (-123);
      byteArray1[2] = (byte)105;
      byteArray1[3] = (byte) (-123);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64("jg%7PSdz,.T+l1#l\u0003D");
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-123);
      byteArray2[1] = (byte) (-123);
      byteArray2[2] = (byte)105;
      byteArray2[3] = (byte)105;
      byteArray2[4] = (byte) (-123);
      byteArray2[5] = (byte) (-123);
      byteArray2[6] = (byte) (-123);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(48, byteArray2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFDii\uFFFD\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-78);
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.DecoderException");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(27, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((-193));
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults(byteArray0, 0, 0);
      bigInteger0.equals(base64_0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.gcd(bigInteger1);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode("'De?fu");
      Base64.isBase64((byte)0);
      base64_0.isUrlSafe();
      bigInteger0.shortValueExact();
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      Base64.isBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte)0);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray2, 43, 0);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)123;
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[5] = (byte)0;
      base64_0.decode("l");
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-3);
      base64_0.decode(byteArray0, 0, (int) (byte) (-3));
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0, true, false);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64((-4497));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      base64_0.encode(byteArray0);
      byte byte0 = (byte)0;
      base64_0.encodeToString(byteArray0);
      byteArray0[1] = (byte)0;
      base64_0.encodeToString(byteArray0);
      base64_0.decode(byteArray0, 0, 1);
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults(byteArray0, (-1308), 1);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64((byte)0, byteArray1);
      Object object0 = new Object();
      BigInteger bigInteger0 = null;
      base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray1, true, false, (-695));
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      int int0 = 0;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(0, (byte[]) null);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)2;
      Base64 base64_0 = new Base64((-5145), byteArray0, false);
      base64_0.decode(byteArray0, (int) (byte) (-85), (int) (byte) (-21));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      base64_0.decode("");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)48;
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)127;
      Base64 base64_0 = new Base64(2593, byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Object object0 = base64_0.decode((Object) "AH8");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(":aNX{,KUl$ 9%<%<J");
      base64_0.readResults(byteArray0, 2593, (-2585));
      base64_0.encodeToString(byteArray0);
      base64_0.decode(object0);
      base64_0.readResults(byteArray1, (byte)127, (-2286));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte) (-86), 82);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -86
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      String string0 = "org.apache.commons.codec.binary.Base64";
      Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      byte[] byteArray1 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64((-1009));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)0;
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64.isBase64((byte) (-102));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-102);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray3, false, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [mpqampqa]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64((-229));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)57;
      Base64.encodeBase64(byteArray0);
      base64_0.decode("X;:.sJoO:fo846r");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.toByteArray();
      bigInteger0.or(bigInteger1);
      Base64 base64_0 = new Base64(6);
      bigInteger0.negate();
      Base64.isBase64("");
      base64_0.encode(byteArray0, 0, (-1));
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-120);
      byteArray1[4] = (byte)116;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)70;
      byteArray1[7] = (byte)102;
      byteArray1[8] = (byte)89;
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, 64);
      Base64.isBase64("Q&jRc}oa");
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0, 0, 0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray2);
      byte[] byteArray3 = new byte[0];
      byte[] byteArray4 = base64_0.decode(byteArray3);
      base64_0.encodeToString(byteArray3);
      Base64.isBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)117;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(2, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-33), (byte)117}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("UwAAmgAAUgAA", string0);
      
      byte[] byteArray1 = Base64.decodeBase64("!5h6WXg");
      assertArrayEquals(new byte[] {(byte) (-26), (byte)30, (byte) (-106), (byte)94}, byteArray1);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = new byte[0];
      int int0 = base64_0.readResults(byteArray2, 0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.signum();
      Base64.encodeInteger(bigInteger0);
      bigInteger0.toByteArray();
      int int0 = 1061;
      bigInteger0.toString(1061);
      Base64 base64_0 = new Base64(false);
      bigInteger0.signum();
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)7;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)51, (byte)103, (byte)121, (byte)90, (byte)89, (byte)119, (byte)99, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      Base64.decodeInteger(byteArray0);
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 1526);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-67);
      byteArray0[0] = (byte) (-67);
      byte byte1 = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byte byte2 = (byte) (-88);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)97;
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\uFFFDa]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)70;
      byteArray0[0] = (byte)70;
      byte byte1 = (byte)119;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 1285);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "w3rHd";
      Base64.isBase64("w3rHd");
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "";
      Base64.isBase64("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)35;
      byte byte0 = (byte)44;
      byteArray0[1] = (byte)44;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray0);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte) (-75);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-76);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-28);
      byteArray2[7] = (byte)0;
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertEquals(12, byteArray3.length);
      
      int int0 = base64_0.readResults(byteArray0, (-438), (-1));
      assertEquals((-1), int0);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte byte0 = (byte)105;
      Base64.isBase64((byte)105);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.xor(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (-2680));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -2680
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      int int0 = base64_0.readResults(byteArray0, (-2834), (-677));
      assertEquals(0, int0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-12);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-26);
      Base64 base64_0 = new Base64((-492), byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-47);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("0QD/AP8A", string0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [w\u0000\u0006\uFFFD\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
