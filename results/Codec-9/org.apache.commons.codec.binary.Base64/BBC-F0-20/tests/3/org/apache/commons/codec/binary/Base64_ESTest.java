/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:03:02 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2885, mockRandom0);
      byte[] byteArray0 = bigInteger0.toByteArray();
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      mockRandom0.nextFloat();
      base64_0.decode(byteArray0, 0, 337);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(2736, mockRandom1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = bigInteger1.toByteArray();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(456, byteArray1.length);
      
      Base64 base64_1 = new Base64(45, byteArray0);
      base64_1.avail();
      mockRandom0.nextFloat();
      Base64 base64_2 = new Base64(true);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray2);
      assertTrue(bigInteger2.equals((Object)bigInteger1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2223), byteArray0, true);
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      BigInteger bigInteger0 = BigInteger.probablePrime(807, mockRandom0);
      bigInteger0.toByteArray();
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      base64_0.decode(byteArray0, 0, (-3033));
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.and(bigInteger0);
      bigInteger0.add(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-47);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(6);
      base64_0.decode("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(2233, byteArray0, true);
      base64_0.decode("2GVa$tVobw$BY8?%");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte) (-79);
      byteArray1[2] = (byte) (-90);
      byteArray1[3] = (byte)87;
      byteArray1[4] = (byte)32;
      byteArray1[5] = (byte) (-32);
      byteArray1[6] = (byte) (-45);
      byteArray1[7] = (byte) (-119);
      byteArray1[8] = (byte)79;
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64((String) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
      
      Base64.isBase64((byte) (-27));
      Base64 base64_0 = new Base64((byte)61);
      byte[] byteArray1 = base64_0.decode("D c=FRpz*+~Y C");
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)13}, byteArray1);
      
      int int0 = base64_0.readResults(byteArray0, (-1658), 112);
      assertEquals((-1), int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte)88;
      byteArray1[2] = (byte)88;
      byteArray1[4] = (byte)10;
      Base64 base64_0 = new Base64(2419);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)124;
      byteArray3[1] = (byte)10;
      byteArray3[2] = (byte)124;
      byteArray3[3] = (byte)10;
      Base64.encodeBase64URLSafeString(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, 0, (int) (byte)124);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte)103;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 10);
      assertArrayEquals(new byte[] {(byte)90, (byte)50, (byte)99, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 3, 3);
      base64_0.encode(byteArray0, 3, (-1230));
      int int0 = base64_0.avail();
      assertEquals(4, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(69);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode(byteArray2, 0, (int) (byte)88);
      base64_0.decode(byteArray1, 14, 1724);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      assertEquals(3, byteArray3.length);
      
      base64_0.readResults(byteArray2, 0, 0);
      assertEquals(8, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)81, (byte)81, (byte)61, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.signum();
      bigInteger0.abs();
      bigInteger0.not();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)7;
      byte byte0 = (byte)9;
      byteArray1[1] = (byte)9;
      byte byte1 = (byte)114;
      byteArray1[2] = (byte)114;
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-2207), (int) (byte)114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2207
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)1;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(95);
      base64_0.encode(byteArray0, 95, (-1143));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray2.length);
      
      base64_0.encode(byteArray0, (-1143), (-1));
      assertSame(byteArray0, byteArray1);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64 base64_0 = new Base64(95);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(69);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode(byteArray2, 0, (int) (byte)88);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)68;
      Base64 base64_0 = new Base64((byte)68);
      base64_0.encode(byteArray0, 3, 3);
      byte[] byteArray1 = new byte[5];
      byteArray1[2] = (byte)68;
      base64_0.encode(byteArray1, 3, (-1230));
      base64_0.encode(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-2908));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -2908
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = base64_0.decode(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray3.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean0);
      
      base64_0.encode(byteArray1, 8, 0);
      assertTrue(base64_0.isUrlSafe());
      assertSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(69);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode(byteArray2, 0, (int) (byte)88);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      assertEquals(12, byteArray2.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      assertEquals(6, byteArray3.length);
      assertNotSame(byteArray3, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64((-22));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("QUFBQUFBQUEBtQ==", string0);
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)88;
      byteArray2[2] = (byte)88;
      byteArray2[3] = (byte)88;
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)87, (byte)70, (byte)104, (byte)89}, byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)88;
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte)88);
      base64_0.encode(byteArray0, 3, 3);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (byte)88, (byte)88);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2126), byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_1 = new Base64(774);
      Base64.encodeBase64(byteArray1, false, true);
      String string0 = "org.apache.commons.codec.EncoderException";
      base64_1.decode(byteArray1, 64, (-886));
      base64_0.decode((String) null);
      base64_1.encodeToString(byteArray0);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Object object0 = base64_1.decode((Object) "encodeInteger called with null parameter");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64.isBase64((byte)1);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(3);
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("DD");
      base64_0.decode((Object) "C");
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)125);
      boolean boolean0 = Base64.isBase64((byte) (-36));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-64);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(10, byteArray1.length);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64(112);
      byte[] byteArray0 = new byte[2];
      Base64.decodeBase64((String) null);
      Base64.decodeInteger(byteArray0);
      byteArray0[0] = (byte)53;
      Object object0 = new Object();
      Base64.encodeBase64((byte[]) null, false);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64((-22));
      Base64.encodeBase64(byteArray0, false, true);
      base64_0.decode(byteArray0, 0, (-1997));
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)88);
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true, true);
      String string0 = "org.apache.commons.codec.EncoderException";
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 0, (int) (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      base64_0.encode(byteArray0, (int) (byte)0, 1);
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64((byte)4);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)4;
      byteArray2[1] = (byte)4;
      byteArray2[2] = (byte)4;
      byteArray2[3] = (byte)4;
      base64_0.encodeToString(byteArray2);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      int int0 = (-361);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, true, (-361));
      Base64 base64_1 = new Base64(880, byteArray4, true);
      base64_1.readResults(byteArray2, 229, 2817);
      Base64.encodeBase64URLSafe(byteArray3);
      byte[] byteArray5 = Base64.CHUNK_SEPARATOR;
      Base64.decodeInteger(byteArray1);
      byte[] byteArray6 = base64_1.decode(byteArray1);
      Base64.encodeBase64(byteArray6, true);
      try { 
        base64_1.encode((Object) "Ew[KDz8g&=; =$R=d1t");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64(2007);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_1 = new Base64();
      base64_0.encode(byteArray1);
      try { 
        base64_0.decode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1, byteArray0, false);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("", string0);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 78;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byte byte0 = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      Base64 base64_0 = new Base64(78, byteArray0, false);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      boolean boolean0 = false;
      boolean boolean1 = true;
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)1, 2403);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64(1665);
      base64_0.decode((Object) "");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((byte)0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger.valueOf(2618L);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64.isBase64((byte)1);
      Base64 base64_0 = new Base64((-3294));
      String string0 = "Q'$eA74Jxl";
      base64_0.decode((Object) "Q'$eA74Jxl");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger.valueOf(49L);
      BigInteger bigInteger2 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_2 = new Base64(false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, (int) (byte)1, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(8, byteArray0, false);
      Object object0 = base64_0.decode((Object) "?F//g{|\"l\"q#`E|");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object1, object0);
      
      Base64.encodeBase64(byteArray0, false, false, 17);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-47);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64((byte)0);
      Base64.encodeBase64((byte[]) null, true, false);
      base64_0.decode((byte[]) null, 61, (int) (byte) (-47));
      base64_0.decode("org.apache.commons.codec.EncoderException");
      base64_0.encodeToString((byte[]) null);
      Base64.isBase64("");
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-88);
      byteArray1[3] = (byte)0;
      Base64.encodeBase64(byteArray1, false);
      Base64 base64_0 = new Base64(15, byteArray0);
      Object object0 = base64_0.decode((Object) "H4V1i70[Y-M!*5[\rp");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)88;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-47);
      byteArray1[1] = (byte) (-47);
      byteArray1[2] = (byte)91;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray1, (int) (byte)0, (int) (byte) (-94));
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      boolean boolean0 = true;
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)0;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      base64_0.decode((byte[]) null);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      base64_0.readResults(byteArray1, (-1645), 1);
      base64_0.isUrlSafe();
      byteArray2[3] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64.isBase64((byte)1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)125;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)125;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)125;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)8;
      byteArray1[7] = (byte)125;
      Base64 base64_0 = new Base64((byte)8, byteArray1);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(447, byteArray0, false);
      byte[] byteArray1 = base64_0.decode("41(^6~Jh[-Mrt");
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)102;
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)36;
      byteArray3[6] = (byte) (-64);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      Base64.encodeBase64(byteArray0, true);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)24;
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 307, (int) (byte)0);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode("");
      Base64 base64_1 = new Base64();
      Base64.isBase64("");
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)49;
      byteArray1[2] = (byte)10;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64.encodeBase64(byteArray2, true, true, (int) (byte)49);
      Base64.isBase64((byte)10);
      base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray2, true, false, (int) (byte)49);
      base64_0.isUrlSafe();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-1177), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numBits must be non-negative
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-3);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64((-4521), byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64((byte)4);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)4;
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      int int0 = (-361);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, (-361));
      int int1 = 2817;
      Base64 base64_1 = new Base64(880, byteArray3, true);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64((-2956));
      Base64.encodeBase64(byteArray1, true, true);
      base64_0.encode(byteArray2, (-1706), (-1706));
      base64_0.decode(byteArray0, (int) (byte) (-88), (int) (byte)0);
      byte[] byteArray3 = base64_0.decode("org.apache.commons.codec.EncoderException");
      base64_0.encodeToString(byteArray3);
      Base64.isBase64("encodeInteger called with null parameter");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.intValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.subtract(bigInteger1);
      bigInteger0.isProbablePrime((byte)0);
      bigInteger0.intValue();
      byte[] byteArray1 = new byte[0];
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false);
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(88);
      base64_0.decode("0");
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64((byte[]) null);
      base64_0.decode((Object) "0");
      base64_0.encode((byte[]) null, 137, 2004);
      base64_0.decode("uE|xiF=a@P/");
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.shiftRight((-5359));
      bigInteger0.shiftRight((-5359));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.negate();
      bigInteger0.longValueExact();
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeInteger(bigInteger1);
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe((byte[]) null);
      Object object0 = base64_0.decode((Object) "]D{]Q");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-3);
      byteArray0[0] = (byte) (-3);
      Base64.encodeBase64(byteArray0);
      byteArray0[1] = (byte)117;
      base64_0.encode(object0);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte) (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64(2007);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)117;
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.hasData();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8189);
      Base64.isBase64((byte)85);
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)117);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64.isBase64((byte) (-28));
      Base64 base64_0 = new Base64(86);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false, 2276);
      Base64.decodeBase64("5A==\r\n");
      base64_0.readResults(byteArray0, 2819, 1293);
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.discardWhitespace(byteArray3);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode(byteArray3);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)36;
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      Base64 base64_0 = new Base64();
      base64_0.decode("S");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)72;
      Base64.encodeBase64String(byteArray0);
      base64_0.decode((Object) "");
      Base64 base64_1 = new Base64(16);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte)65;
      byteArray1[3] = (byte)101;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)101;
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 1, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-88);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 50, 1159);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 50
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.isBase64((byte)1);
      Base64 base64_0 = new Base64(86);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 2267);
      base64_0.encode(byteArray0);
      base64_0.readResults(byteArray0, 2819, 1293);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.discardWhitespace(byteArray1);
      base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray1, false);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray1, (byte)0, (byte)0);
      base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)0);
      base64_0.encode(byteArray1, (-326), (int) (byte)0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      Base64.encodeBase64(byteArray2);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode((Object) "M7<l[w");
      byte[] byteArray4 = base64_0.decode("GAJR1A^V");
      bigInteger0.intValue();
      base64_0.encodeToString(byteArray1);
      base64_0.encode(byteArray2, 0, 1);
      base64_0.hasData();
      Base64.encodeBase64(byteArray0, false, true, 739);
      Base64.isBase64((byte) (-82));
      base64_0.encode(byteArray3);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray4, true, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-47);
      byteArray1[1] = (byte) (-47);
      byteArray1[2] = (byte)91;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64((byte) (-47));
      Base64.encodeBase64(byteArray2, true, true);
      base64_0.decode(byteArray2, (int) (byte)88, (-799));
      base64_0.decode("org.apache.commons.codec.EncoderException");
      base64_0.encodeToString(byteArray1);
      Base64.isBase64("encodeInteger called with null parameter");
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.shiftRight((-5359));
      bigInteger0.shiftRight((-5359));
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.negate();
      bigInteger0.longValueExact();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-5359), byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, false, true, 0);
      int int0 = (-594);
      Base64 base64_0 = new Base64((-594), byteArray0, true);
      String string0 = "o[;rdNl='}>)Hj";
      base64_0.decode((Object) "o[;rdNl='}>)Hj");
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64(1665);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)115;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte) (-1);
      base64_0.encode(byteArray0);
      Base64.decodeBase64("");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)25;
      base64_0.encodeToString(byteArray1);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      base64_0.encode(byteArray1, (int) (byte)0, (int) (byte) (-1));
      Base64.encodeBase64(byteArray1, false, false, 64);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(3212, (byte[]) null, false);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      Base64.encodeBase64String(byteArray0);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-125);
      Base64.isBase64("&r~i5lh");
      byteArray0[4] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)121;
      base64_0.readResults(byteArray0, (byte) (-117), (-1));
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64.isBase64((byte)1);
      Base64 base64_0 = new Base64(86);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 2276);
      base64_0.encode(byteArray0);
      base64_0.readResults(byteArray0, 2819, 1293);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.discardWhitespace(byteArray1);
      base64_0.decode(byteArray1);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)4;
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)0);
      base64_0.encode(byteArray1, (-326), (int) (byte)0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 294;
      Base64 base64_0 = new Base64(294, (byte[]) null);
      base64_0.encode((byte[]) null);
      base64_0.decode((Object) ">E~>(6VLRya\"vpZ'>,?");
      base64_0.decode((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.decodeBase64(">E~>(6VLRya\"vpZ'>,?");
      base64_0.decode(">E~>(6VLRya\"vpZ'>,?");
      byte[] byteArray0 = Base64.decodeBase64(">E~>(6VLRya\"vpZ'>,?");
      base64_0.avail();
      Base64.isArrayByteBase64(byteArray0);
      try { 
        base64_0.encode((Object) ">E~>(6VLRya\"vpZ'>,?");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      boolean boolean0 = true;
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)0;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      base64_0.decode((byte[]) null);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)72;
      Base64.encodeBase64String(byteArray0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte)49;
      byteArray1[3] = (byte)84;
      byteArray1[4] = (byte)1;
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-18);
      byte byte0 = (byte) (-38);
      byteArray0[2] = (byte) (-38);
      Base64.encodeBase64URLSafe(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte) (-18), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numBits must be non-negative
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(1100, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.isBase64("3*]");
      base64_0.encode(byteArray1, (-2275), (-2275));
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(byteArray0);
      Base64.isBase64("AA==");
      base64_0.encode(byteArray0, (-1486), (-1394));
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.doubles(447L, (-383.4644873), (double) 0L);
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-1394), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      try { 
        base64_0.encode((Object) "`P#w(RYx35lpS(^");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)77;
      Base64.encodeBase64(byteArray0, true, true, 323);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte)112;
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-43);
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)73;
      byte byte1 = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)47;
      byte byte2 = (byte)13;
      byteArray0[5] = (byte)13;
      byte byte3 = (byte) (-86);
      byteArray0[6] = (byte) (-86);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDIA\u0000/\r\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)0;
      byte byte2 = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)1;
      byte byte3 = (byte) (-108);
      byteArray0[6] = (byte) (-108);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u001BC\u0000\uFFFD\u0001\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.decode(" o*iM#^;5q5no_");
      base64_0.decode(" o*iM#^;5q5no_");
      base64_0.decode((Object) " o*iM#^;5q5no_");
      base64_0.encodeToString(byteArray1);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "lineSeperator must not contain base64 characters: [");
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64((-881));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode((Object) "M7<l[w");
      base64_0.decode("GAJR1A^V");
      bigInteger0.intValue();
      base64_0.encodeToString(byteArray1);
      base64_0.encode(byteArray2, 0, 1);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte) (-6);
      byteArray3[7] = (byte)0;
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false);
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64(2007);
      Object object0 = base64_0.decode((Object) "]D{]Q");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      Base64.encodeBase64(byteArray0);
      byteArray0[1] = (byte)117;
      Base64.encodeBase64String(byteArray0);
      base64_0.encode(object0);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-92);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)101, (int) (byte)121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 101
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)28;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(734);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = null;
      String string0 = "r*\\*nN8OkUY";
      base64_0.decode((Object) "r**nN8OkUY");
      Base64.encodeBase64((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.negate();
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)119;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(708);
      base64_0.encodeToString(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)84;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)68, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, true, (-1676));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
  }
}
