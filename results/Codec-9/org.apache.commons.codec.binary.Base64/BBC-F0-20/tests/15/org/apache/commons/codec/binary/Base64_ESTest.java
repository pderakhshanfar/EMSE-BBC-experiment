/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:07:18 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(22);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 18, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2367, 2367, mockRandom0);
      mockRandom0.longs((long) 2367);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(2367);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray1, true, true, 76);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2367, 2367, mockRandom0);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 14, 2367);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2367, 2367, mockRandom0);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("UTF-6L/");
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(4, byteArray0, true);
      Object object0 = base64_0.decode((Object) "JQ;A|LT");
      Object object1 = base64_0.encode(object0);
      assertNotSame(object1, object0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSperator must not contain base64 characters: [");
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      base64_0.encode(byteArray0, 12, 12);
      base64_0.encode(byteArray0, 12, (-311));
      assertEquals(31, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("lineSperator must not contain base64 characters: [");
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(0);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(10, byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(62, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode(byteArray1, 0, 107);
      assertEquals(22, byteArray1.length);
      
      Base64.isBase64(byteArray0);
      int int0 = base64_0.avail();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte)116;
      byteArray1[3] = (byte)111;
      byteArray1[4] = (byte)32;
      byteArray1[5] = (byte)37;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("KTl0byU=", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte)95;
      byteArray2[2] = (byte)41;
      byteArray2[3] = (byte) (-114);
      byteArray2[4] = (byte)79;
      Base64.isBase64(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte) (-114));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -114
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-65);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("/78=", string0);
      
      Base64.encodeBase64(byteArray2, false, false, 282);
      Base64.decodeInteger(byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode(byteArray0, 0, 0);
      base64_0.decode(byteArray1, 0, 1908874353);
      boolean boolean0 = Base64.isBase64((byte)24);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1);
      Base64 base64_1 = new Base64((-27), byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-1);
      base64_0.decode(byteArray2);
      byteArray2[2] = (byte) (-97);
      byteArray2[3] = (byte)98;
      base64_0.decode(byteArray2, 0, (int) (byte)98);
      base64_0.encode(byteArray2, 0, 31);
      base64_0.decode(byteArray2);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64();
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      Base64.isBase64("{9<TOP=v2|Re]yVlQ");
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-106), (byte) (-14)}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 140);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-115);
      base64_0.encode(byteArray1, 0, 2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode(byteArray0, 0, 0);
      base64_0.decode(byteArray1, 0, 1908874353);
      base64_0.encode(byteArray1, (-1), 1908874353);
      assertEquals(18, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1);
      Base64 base64_1 = new Base64((-27), byteArray1);
      assertFalse(base64_1.isUrlSafe());
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)117;
      byteArray2[2] = (byte) (-97);
      byteArray2[3] = (byte)98;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)98;
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte)98;
      byteArray3[3] = (byte)117;
      byteArray3[4] = (byte)117;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      assertEquals((byte) (-82), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.avail();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte)0);
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false, true, 56);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-644);
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-644), (byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)62;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      boolean boolean0 = true;
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.isBase64((byte)124);
      base64_0.decode(byteArray1, 813, (-70));
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode(byteArray0, 0, 0);
      base64_0.decode(byteArray1, 0, 1908874353);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1);
      Base64 base64_1 = new Base64((-27), byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)117;
      byteArray2[2] = (byte) (-97);
      byteArray2[3] = (byte)98;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 0, (int) (byte)98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64.isBase64("Input array too big, the output array would be bigger (");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64(41, (byte[]) null, false);
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 41, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-106), (byte) (-14)}, byteArray1);
      
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode(byteArray0, 0, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray2.length);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 312);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      byte[] byteArray0 = null;
      Base64 base64_1 = new Base64(1728, (byte[]) null, true);
      base64_1.hasData();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 596, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64((-1421));
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.isProbablePrime(20);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)34;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte) (-125)}, byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)10);
      assertEquals(10, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64((-1421));
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      Base64 base64_1 = new Base64(true);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      int int0 = Base64.MIME_CHUNK_SIZE;
      byte[] byteArray2 = Base64.decodeBase64("");
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
      
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = base64_1.decode(byteArray2);
      assertSame(byteArray3, byteArray2);
      
      Base64 base64_2 = new Base64();
      base64_1.decode((Object) "");
      assertTrue(base64_1.isUrlSafe());
      
      byte[] byteArray4 = Base64.decodeBase64(":");
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1);
      byte[] byteArray2 = new byte[4];
      byte byte0 = (byte) (-11);
      byteArray2[0] = (byte) (-11);
      byte byte1 = (byte) (-70);
      byteArray2[1] = (byte) (-70);
      int int0 = (-132);
      base64_0.decode(byteArray2, 1, (-132));
      String string0 = "n";
      Object object0 = base64_0.decode((Object) "G4s'qJ5VQSml`\"");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.decodeBase64(";p!");
      Base64 base64_0 = new Base64(2643, byteArray0, false);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
      Object object0 = base64_0.decode((Object) "I=!]y}#@/tD>XnhJ2qM");
      byte[] byteArray0 = new byte[2];
      base64_0.encode(object0);
      base64_0.encodeToString(byteArray0);
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte byte1 = (byte)60;
      byteArray0[1] = (byte)60;
      base64_0.readResults(byteArray0, (byte)1, 40);
      Base64.encodeBase64String((byte[]) null);
      Base64.isBase64((byte) (-1));
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64((-1421));
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      base64_0.hasData();
      base64_0.encode(byteArray0, (-1421), (-1421));
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64((-1421));
      byte[] byteArray0 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      base64_0.hasData();
      base64_0.readResults(byteArray0, 35, 35);
      Base64.encodeBase64((byte[]) null, false, true, 8188);
      base64_0.decode((byte[]) null);
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false, false, 0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64.isBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(false);
      Base64.isBase64("");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)60;
      Base64.decodeBase64("");
      byteArray2[1] = (byte)1;
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray1, (-2015), (-2015));
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = base64_0.decode("i");
      Base64.discardWhitespace(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode(byteArray3);
      Base64.encodeBase64String(byteArray4);
      Object object0 = new Object();
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode(byteArray0, 0, (-1));
      base64_0.hasData();
      byte byte0 = (byte)72;
      Base64.isBase64((byte)72);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)72;
      byteArray2[1] = (byte) (-82);
      byteArray2[2] = (byte)72;
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64String(byteArray2);
      Object object0 = new Object();
      try { 
        base64_0.encode((Object) "SK5I");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-11);
      byteArray2[1] = (byte) (-70);
      byteArray2[3] = (byte)41;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (int) (byte)0, (int) (byte)41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-1), byteArray2, false);
      base64_0.encode(byteArray0, 13, (-1445));
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertTrue(boolean0);
      
      String string0 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertEquals("QUE9PfHy", string0);
      
      boolean boolean1 = Base64.isBase64("");
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-15);
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-14);
      Base64 base64_0 = new Base64(78, byteArray0, true);
      base64_0.avail();
      int int0 = 629;
      Base64.encodeBase64(byteArray0, true, false, 76);
      int int1 = 550;
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64((-1421));
      byte[] byteArray0 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertEquals(8, byteArray2.length);
      
      base64_0.encode(byteArray0, (-1421), (-1421));
      Base64.isBase64(byteArray0);
      Base64.isBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      assertEquals(44, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(46, byteArray4.length);
      
      base64_0.decode(byteArray1);
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(false);
      Base64.isBase64("");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64("RP;");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)92;
      Base64 base64_1 = new Base64(64, byteArray2);
      base64_1.hasData();
      boolean boolean1 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)68}, byteArray1);
      
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)92;
      byteArray3[1] = (byte)51;
      byteArray3[2] = (byte)51;
      byteArray3[3] = (byte)38;
      byteArray3[4] = (byte)92;
      byteArray3[5] = (byte)92;
      byteArray3[6] = (byte)51;
      byteArray3[7] = (byte)92;
      String string0 = base64_0.encodeToString(byteArray3);
      //  // Unstable assertion: assertEquals("XDMzJlxcM1w=\u0000\n", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64((-1421));
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      base64_0.hasData();
      base64_0.encode(byteArray0, (-1421), (-1421));
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertEquals(32, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)111, (byte)61, (byte)0, (byte)10}, byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(550, byteArray0, true);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      boolean boolean0 = Base64.isBase64("CL");
      assertTrue(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true, 2845);
      assertSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64.isBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(false);
      Base64.isBase64("");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(64);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      bigInteger1.longValue();
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.readResults(byteArray3, 870, 64);
      bigInteger0.andNot(bigInteger1);
      byte[] byteArray4 = base64_0.encode(byteArray1);
      Base64.isBase64("j8gtSP5t&-`Sga6");
      byte[] byteArray5 = Base64.decodeBase64(".Vish7].JQf)k");
      base64_0.decode((Object) "");
      Base64.isArrayByteBase64(byteArray2);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray4);
      Base64.decodeInteger(byteArray5);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 3325);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("CL");
      Base64.encodeBase64(byteArray0, true, true, 579);
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 67, 550);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64.isBase64("CL");
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("CL");
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64URLSafeString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 5254;
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)127;
      Base64.isBase64(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1, 115, 28);
      Base64.discardWhitespace(byteArray1);
      base64_0.avail();
      Base64.decodeBase64("AP8AAP9pAA==");
      Base64.encodeBase64(byteArray1, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.longValueExact();
      Base64.toIntegerBytes(bigInteger0);
      Object object0 = new Object();
      try { 
        base64_0.encode((Object) "0fzS~[H&{'HN8h2");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[5];
      base64_0.decode(byteArray0);
      base64_0.decode((Object) "'?fuV");
      byteArray0[1] = (byte)87;
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[2] = (byte)84;
      byte[] byteArray1 = base64_0.decode("");
      byteArray0[3] = (byte) (-83);
      base64_0.decode(byteArray0, (int) (byte)0, 1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      base64_0.avail();
      Base64.decodeBase64("");
      Base64.encodeBase64(byteArray2, true);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-1);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      assertEquals(18, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64("AP8AAP9n/w==");
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1 == boolean0);
      
      Base64.isBase64((byte)0);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AP8AAP9n/w==", string0);
      
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-1);
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte) (-1);
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte)0;
      byte[] byteArray4 = Base64.decodeBase64(byteArray1);
      assertEquals(7, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)0, (byte) (-1), (byte)103, (byte) (-1)}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-50);
      Base64 base64_0 = new Base64((byte) (-50), byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte) (-50), (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -50
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte) (-77);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)39;
      byteArray1[1] = (byte) (-48);
      Base64.encodeBase64String(byteArray1);
      Base64.decodeBase64((byte[]) null);
      boolean boolean0 = Base64.isBase64((byte) (-48));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)121;
      Base64.encodeBase64String(byteArray0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = new byte[4];
      base64_0.decode(byteArray0, (int) (byte)121, (int) (byte)0);
      assertTrue(base64_0.isUrlSafe());
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("AHkAAA==", string0);
      
      byteArray0[5] = (byte) (-40);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      base64_0.readResults(byteArray3, (-1), 78);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byteArray3[2] = (byte)0;
      base64_0.encodeToString(byteArray3);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      assertEquals(12, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64((-1421));
      byte[] byteArray0 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      boolean boolean0 = base64_0.hasData();
      base64_0.encode(byteArray0, (-1421), (-1421));
      Base64.isBase64(byteArray0);
      boolean boolean1 = Base64.isBase64(byteArray1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(32, byteArray0.length);
      assertEquals(46, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.multiply(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(2, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      base64_0.isUrlSafe();
      base64_0.hasData();
      Base64.isBase64((byte)0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-1);
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte) (-1);
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte)0;
      byteArray3[8] = (byte)0;
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      assertFalse(byteArray4.equals((Object)byteArray2));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64("");
      Base64.isBase64((byte) (-17));
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-17);
      byteArray2[1] = (byte) (-77);
      byteArray2[2] = (byte) (-17);
      byteArray2[3] = (byte) (-17);
      byteArray2[4] = (byte) (-17);
      byteArray2[5] = (byte)126;
      byteArray2[6] = (byte) (-17);
      byteArray2[7] = (byte) (-17);
      boolean boolean1 = Base64.isArrayByteBase64(byteArray2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[5];
      base64_0.decode(byteArray0);
      base64_0.decode((Object) "'?fuV");
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)87;
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[2] = (byte)84;
      String string0 = "";
      base64_0.decode("");
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)8;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)8, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = Base64.isBase64("9YSjlpS]\"");
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)109, (byte)81, (byte)67, (byte)78}, byteArray1);
      
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      assertFalse(base64_0.isUrlSafe());
      
      Base64.isBase64(byteArray0);
      boolean boolean2 = Base64.isBase64("~m$T!pii");
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)21;
      byteArray0[8] = (byte)20;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)76, (byte)87, (byte)99, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(770, byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.and(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true, true, 428);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64("\"g|Vz>ja@,#H[m");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-32);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((byte)62);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64((byte[]) null, true, true, 76);
      base64_0.encode((byte[]) null, 0, 0);
      base64_0.hasData();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAA=", string0);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 0);
      Base64 base64_0 = new Base64(0, byteArray1, false);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)71;
      Base64.decodeBase64(byteArray2);
      base64_0.decode((byte[]) null, 0, 0);
      byte[] byteArray3 = Base64.decodeBase64((String) null);
      assertNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, true);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte) (-41);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)36, (int) (byte)36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byte byte0 = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)74;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0001\uFFFDJ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte)112;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2297), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\uFFFD\u0000\uFFFD\uFFFDRp\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64.isBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(false);
      Base64.isBase64("");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.setBit(64);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray1, (-2015), (-2015));
      bigInteger1.longValue();
      Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 1244, 71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
      
      Base64 base64_1 = new Base64(1728, (byte[]) null, true);
      Object object0 = base64_1.decode((Object) "org.apache.commons.codec.DecoderException");
      Object object1 = base64_0.decode(object0);
      Object object2 = base64_0.decode(object1);
      Object object3 = base64_0.encode(object2);
      Object object4 = base64_0.encode(object3);
      assertNotSame(object4, object1);
      assertSame(object4, object3);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte) (-68);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      int int0 = 550;
      Base64 base64_0 = new Base64(550, byteArray0, true);
      Base64.isBase64("CL");
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true, true, 579);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("CL");
      Base64.encodeBase64String(byteArray1);
      base64_0.decode((Object) "CL");
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeBase64(byteArray2);
      base64_0.readResults(byteArray0, 550, 550);
      Base64.isBase64(byteArray1);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (-1), 550);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64((-3261));
      String string1 = "";
      Base64.isBase64("");
      Base64.encodeBase64URLSafeString(byteArray0);
      int int0 = 370;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-3261), 370);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3261
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)71;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeInteger(bigInteger0);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom();
      Base64.encodeBase64(byteArray1, true, true, 4135);
      BigInteger bigInteger0 = new BigInteger(0, mockRandom0);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64(byteArray1);
      Base64.decodeInteger(byteArray0);
      base64_0.decode((String) null);
      try { 
        base64_0.encode((Object) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-113);
      byte byte0 = (byte) (-25);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)0;
      Base64 base64_0 = new Base64(1076, byteArray0, true);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte) (-52);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 762);
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals(16, byteArray2.length);
      
      int int0 = base64_0.readResults(byteArray0, (-1330), (byte)0);
      assertEquals(0, int0);
      
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, true);
      assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray4);
      
      base64_0.decode((Object) "^wv^XP1> hY!~");
      base64_0.readResults(byteArray1, (byte)0, (-1));
      base64_0.hasData();
      byte[] byteArray5 = new byte[9];
      byteArray5[0] = (byte) (-52);
      byteArray5[1] = (byte)1;
      byteArray5[2] = (byte) (-31);
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte)1;
      byteArray5[6] = (byte)0;
      byteArray5[7] = (byte) (-50);
      byteArray5[8] = (byte) (-50);
      byte[] byteArray6 = Base64.discardWhitespace(byteArray5);
      assertArrayEquals(new byte[] {(byte) (-52), (byte)1, (byte) (-31), (byte)0, (byte)0, (byte)1, (byte)0, (byte) (-50), (byte) (-50)}, byteArray6);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)85;
      Base64.encodeBase64(byteArray0, true, false);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-122);
      Base64.decodeInteger(byteArray0);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-62);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(0, byteArray1, false);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode(byteArray2, 564, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)65, (byte)74, (byte)77, (byte)65, (byte)117, (byte)119, (byte)67, (byte)116, (byte)119, (byte)103}, byteArray2);
      assertEquals(10, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode(byteArray0, 0, (-1));
      try { 
        base64_0.encode((Object) "n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
