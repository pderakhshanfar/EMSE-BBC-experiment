* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-90
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 11064
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 216739461
* Starting evolution
bbc usage percentage is: 90%
* Initial Number of Goals in DynaMOSA = 419 / 1539
[MASTER] 20:44:36.572 [logback-1] WARN  ExecutionTrace - Popping method encode([B)[B because we were looking for encode([BII)V
[MASTER] 20:44:36.573 [logback-1] WARN  ExecutionTrace - Current stack: [org.apache.commons.codec.binary.Base64:encode([B)[B
Branches:  78 79
True Distances:  1.0 0.0
False Distances:  0.0 763.0
, org.apache.commons.codec.binary.Base64:encodeBase64([BZZI)[B
Branches:  62 63 64 65
True Distances:  1.0 0.0 0.0 0.0
False Distances:  0.0 763.0 2.147483646E9 1.0
, org.apache.commons.codec.binary.Base64:encodeBase64([BZZ)[B
Branches: 
True Distances: 
False Distances: 
, org.apache.commons.codec.binary.Base64:encodeBase64([BZ)[B
Branches: 
True Distances: 
False Distances: 
, org.apache.commons.codec.binary.Base64:encodeInteger(Ljava/math/BigInteger;)[B
Branches:  84
True Distances:  0.0
False Distances:  1.0
, :
Branches: 
True Distances: 
False Distances: 
]
[MASTER] 20:44:36.573 [logback-1] WARN  ExecutionTrace - Popping method encodeBase64([BZZI)[B because we were looking for encode([BII)V
[MASTER] 20:44:36.573 [logback-1] WARN  ExecutionTrace - Current stack: [org.apache.commons.codec.binary.Base64:encodeBase64([BZZI)[B
Branches:  62 63 64 65 26 27
True Distances:  1.0 0.0 0.0 0.0 1.0 0.0
False Distances:  0.0 763.0 2.147483646E9 1.0 0.0 7765.0
, org.apache.commons.codec.binary.Base64:encodeBase64([BZZ)[B
Branches: 
True Distances: 
False Distances: 
, org.apache.commons.codec.binary.Base64:encodeBase64([BZ)[B
Branches: 
True Distances: 
False Distances: 
, org.apache.commons.codec.binary.Base64:encodeInteger(Ljava/math/BigInteger;)[B
Branches:  84
True Distances:  0.0
False Distances:  1.0
, :
Branches: 
True Distances: 
False Distances: 
]
[MASTER] 20:44:36.573 [logback-1] WARN  ExecutionTrace - Popping method encodeBase64([BZZ)[B because we were looking for encode([BII)V
[MASTER] 20:44:36.573 [logback-1] WARN  ExecutionTrace - Current stack: [org.apache.commons.codec.binary.Base64:encodeBase64([BZZ)[B
Branches: 
True Distances: 
False Distances: 
, org.apache.commons.codec.binary.Base64:encodeBase64([BZ)[B
Branches: 
True Distances: 
False Distances: 
, org.apache.commons.codec.binary.Base64:encodeInteger(Ljava/math/BigInteger;)[B
Branches:  84
True Distances:  0.0
False Distances:  1.0
, :
Branches: 
True Distances: 
False Distances: 
]
[MASTER] 20:44:36.573 [logback-1] WARN  ExecutionTrace - Popping method encodeBase64([BZ)[B because we were looking for encode([BII)V
[MASTER] 20:44:36.573 [logback-1] WARN  ExecutionTrace - Current stack: [org.apache.commons.codec.binary.Base64:encodeBase64([BZ)[B
Branches: 
True Distances: 
False Distances: 
, org.apache.commons.codec.binary.Base64:encodeInteger(Ljava/math/BigInteger;)[B
Branches:  84
True Distances:  0.0
False Distances:  1.0
, :
Branches: 
True Distances: 
False Distances: 
]
[MASTER] 20:44:36.573 [logback-1] WARN  ExecutionTrace - Popping method encodeInteger(Ljava/math/BigInteger;)[B because we were looking for encode([BII)V
[MASTER] 20:44:36.573 [logback-1] WARN  ExecutionTrace - Current stack: [org.apache.commons.codec.binary.Base64:encodeInteger(Ljava/math/BigInteger;)[B
Branches:  84 28
True Distances:  0.0 0.0
False Distances:  1.0 1.0
, :
Branches: 
True Distances: 
False Distances: 
]
* Search finished after 602s and 450 generations, 228431 statements, best individual has fitness: 84.0
* Minimizing test suite
[MASTER] 20:48:36.414 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 216
* Number of covered goals: 215
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 193
* Number of covered goals: 185
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 787
* Number of covered goals: 759
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 90%
* Total number of goals: 80
* Number of covered goals: 72
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 93%
* Total number of goals: 193
* Number of covered goals: 180
* Generated 101 tests with total length 1438
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 20:49:27.936 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8473666666666667% of time used, but only 33/101 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 41%
* Compiling and checking tests
[MASTER] 20:49:52.079 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:52.355 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:52.568 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:52.755 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:52.762 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<-127> but was:<13>
[MASTER] 20:49:52.763 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
byteArray0[0] = (byte) (-114);
byteArray0[1] = (byte) (-112);
Base64 base64_0 = new Base64(0, byteArray0);
String string0 = Base64.encodeBase64URLSafeString(byteArray0);
assertEquals("jpA", string0);

boolean boolean0 = base64_0.hasData();
byte[] byteArray1 = base64_0.decode(byteArray0);
byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
BigInteger bigInteger0 = BigInteger.ONE;
BigInteger bigInteger1 = new BigInteger(byteArray0);
bigInteger0.gcd(bigInteger1);
Base64.isBase64("pZWC)poiK58&yy");
bigInteger0.bitLength();
bigInteger0.toString();
bigInteger0.byteValueExact();
byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
assertEquals(4, byteArray3.length);
assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray3);

base64_0.decode(byteArray0, (int) (byte) (-112), 3479);
base64_0.decode(byteArray2, 3479, 0);
byte[] byteArray4 = Base64.encodeBase64(byteArray2, false);
byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray0);
base64_0.hasData();
byte[] byteArray6 = Base64.encodeBase64Chunked(byteArray4);
assertEquals(10, byteArray6.length);
assertArrayEquals(new byte[] {(byte)89, (byte)87, (byte)53, (byte)67, (byte)81, (byte)103, (byte)61, (byte)61, (byte) (-127), (byte)10}, byteArray6);

boolean boolean1 = Base64.isArrayByteBase64(byteArray5);
assertFalse(boolean1 == boolean0);
assertNotSame(byteArray0, byteArray1);
assertTrue(boolean1);


[MASTER] 20:49:52.942 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:53.100 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:53.186 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:53.281 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:53.380 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:53.531 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:53.640 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:53.816 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:53.954 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:54.124 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:54.256 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:54.344 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:54.430 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:54.632 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:54.760 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:54.885 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:55.008 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:55.115 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:55.232 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:55.358 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:55.540 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:55.656 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:55.776 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:55.892 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:56.024 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:56.098 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:56.193 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:56.210 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 20:49:56.217 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
byteArray0[0] = (byte)4;
byteArray0[1] = (byte)64;
byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
Base64.encodeBase64Chunked(byteArray0);
Base64 base64_0 = new Base64((byte)4, byteArray1);
byte[] byteArray2 = base64_0.encode(byteArray1);
assertEquals(6, byteArray2.length);

Base64.encodeBase64(byteArray0, true, true);
byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
assertArrayEquals(new byte[] {(byte)66, (byte)69, (byte)65, (byte)61, (byte)0, (byte) (-61)}, byteArray3);

boolean boolean0 = Base64.isBase64("Input array too big, the output array would be bigger (");
assertFalse(boolean0);

byte[] byteArray4 = Base64.discardWhitespace(byteArray0);
assertEquals(2, byteArray4.length);


[MASTER] 20:49:56.366 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:56.493 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:56.648 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:56.721 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:56.855 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:56.961 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:57.068 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:57.156 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:57.292 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:57.377 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:57.382 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 20:49:57.383 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
byteArray0[0] = (byte)4;
byteArray0[1] = (byte)64;
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte)4, (byte)64}, byteArray0);
assertArrayEquals(new byte[] {(byte)66, (byte)69, (byte)65, (byte)61, (byte)0, (byte) (-61)}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);

Base64 base64_0 = new Base64((byte)4, byteArray0);
assertNotNull(base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertArrayEquals(new byte[] {(byte)4, (byte)64}, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals(2, byteArray0.length);

byte[] byteArray2 = base64_0.encode(byteArray0);
assertNotNull(byteArray2);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertFalse(base64_0.isUrlSafe());
assertArrayEquals(new byte[] {(byte)4, (byte)64}, byteArray0);
assertArrayEquals(new byte[] {(byte)66, (byte)69, (byte)65, (byte)61, (byte)4, (byte)64}, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray2.length);

byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true);
assertNotNull(byteArray3);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertArrayEquals(new byte[] {(byte)4, (byte)64}, byteArray0);
assertArrayEquals(new byte[] {(byte)66, (byte)69, (byte)65, (byte)0, (byte) (-61)}, byteArray3);
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertEquals(2, byteArray0.length);
assertEquals(5, byteArray3.length);

boolean boolean0 = Base64.isBase64((byte)74);
assertTrue(boolean0);

boolean boolean1 = Base64.isBase64((byte)61);
assertTrue(boolean1 == boolean0);
assertTrue(boolean1);


[MASTER] 20:49:57.483 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:57.627 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:57.778 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:57.871 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:58.075 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:58.218 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:58.220 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [7]; expected:<0> but was:<13>
[MASTER] 20:49:58.223 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
byteArray0[0] = (byte) (-58);
BigInteger bigInteger0 = BigInteger.ONE;
assertNotNull(bigInteger0);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());

BigInteger bigInteger1 = bigInteger0.shiftLeft(1469);
assertNotNull(bigInteger1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertFalse(bigInteger1.equals((Object)bigInteger0));

int int0 = bigInteger0.bitLength();
assertNotSame(bigInteger0, bigInteger1);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertEquals(1, int0);

byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
assertNotNull(byteArray1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray1, byteArray0);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(248, byteArray1.length);

Base64 base64_0 = new Base64();
assertNotNull(base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());

byte[] byteArray2 = base64_0.decode("7XL,P]Xc5");
assertNotNull(byteArray2);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertFalse(base64_0.isUrlSafe());
assertArrayEquals(new byte[] {(byte) (-19), (byte)114, (byte) (-49), (byte)93, (byte) (-50)}, byteArray2);
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertEquals(5, byteArray2.length);

String string0 = Base64.encodeBase64String(byteArray1);
assertNotNull(string0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(248, byteArray1.length);
assertEquals("SUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPT0=", string0);

byte[] byteArray3 = base64_0.encode(byteArray1);
assertNotNull(byteArray3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertEquals(248, byteArray1.length);
assertEquals(332, byteArray3.length);

byte[] byteArray4 = base64_0.encode(byteArray2);
assertNotNull(byteArray4);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertArrayEquals(new byte[] {(byte) (-19), (byte)114, (byte) (-49), (byte)93, (byte) (-50)}, byteArray2);
assertArrayEquals(new byte[] {(byte)55, (byte)88, (byte)76, (byte)80, (byte)88, (byte)99, (byte)52, (byte)61}, byteArray4);
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray0));
assertEquals(5, byteArray2.length);
assertEquals(8, byteArray4.length);

String string1 = Base64.encodeBase64String(byteArray4);
assertNotNull(string1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertArrayEquals(new byte[] {(byte) (-19), (byte)114, (byte) (-49), (byte)93, (byte) (-50)}, byteArray2);
assertArrayEquals(new byte[] {(byte)55, (byte)88, (byte)76, (byte)80, (byte)88, (byte)99, (byte)52, (byte)61}, byteArray4);
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(string1.equals((Object)string0));
assertEquals(5, byteArray2.length);
assertEquals(8, byteArray4.length);
assertEquals("N1hMUFhjND0=", string1);

byte[] byteArray5 = Base64.encodeBase64(byteArray3, true, false);
assertNotNull(byteArray5);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray4);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray3);
assertNotSame(byteArray5, byteArray2);
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray4));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray3));
assertFalse(byteArray5.equals((Object)byteArray2));
assertEquals(248, byteArray1.length);
assertEquals(332, byteArray3.length);
assertEquals(456, byteArray5.length);

boolean boolean0 = Base64.isBase64((byte)1);
assertFalse(boolean0);

byte[] byteArray6 = Base64.encodeBase64(byteArray2, true, true, 834);
assertNotNull(byteArray6);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray2, byteArray6);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray5);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray2);
assertNotSame(byteArray6, byteArray0);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray4);
assertFalse(base64_0.isUrlSafe());
assertArrayEquals(new byte[] {(byte) (-19), (byte)114, (byte) (-49), (byte)93, (byte) (-50)}, byteArray2);
assertArrayEquals(new byte[] {(byte)55, (byte)88, (byte)76, (byte)80, (byte)88, (byte)99, (byte)52, (byte)0, (byte) (-61)}, byteArray6);
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray2));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray4));
assertEquals(5, byteArray2.length);
assertEquals(9, byteArray6.length);


[MASTER] 20:49:58.321 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:58.409 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:58.411 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 20:49:58.412 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
byteArray0[0] = (byte)4;
byteArray0[1] = (byte)64;
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte)4, (byte)64}, byteArray0);
assertArrayEquals(new byte[] {(byte)66, (byte)69, (byte)65, (byte)61, (byte)0, (byte) (-61)}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);

Base64 base64_0 = new Base64((byte)4, byteArray0);
assertNotNull(base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertArrayEquals(new byte[] {(byte)4, (byte)64}, byteArray0);
assertFalse(byteArray0.equals((Object)byteArray1));
assertEquals(2, byteArray0.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertArrayEquals(new byte[] {(byte)4, (byte)64}, byteArray0);
assertArrayEquals(new byte[] {(byte)66, (byte)69, (byte)65, (byte)0, (byte) (-61)}, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertEquals(2, byteArray0.length);
assertEquals(5, byteArray2.length);

boolean boolean0 = Base64.isBase64((byte)74);
assertTrue(boolean0);

byte[] byteArray3 = base64_0.encode(byteArray1);
assertNotNull(byteArray3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertFalse(base64_0.isUrlSafe());
assertArrayEquals(new byte[] {(byte)4, (byte)64}, byteArray0);
assertArrayEquals(new byte[] {(byte)66, (byte)69, (byte)65, (byte)61, (byte)0, (byte) (-61)}, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(12, byteArray3.length);

base64_0.decode(byteArray1, (-1396), 146);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertArrayEquals(new byte[] {(byte)4, (byte)64}, byteArray0);
assertArrayEquals(new byte[] {(byte)66, (byte)69, (byte)65, (byte)61, (byte)0, (byte) (-61)}, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);


[MASTER] 20:49:58.557 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:58.572 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 20:49:58.573 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[2];
byteArray0[1] = (byte)64;
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)64}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)69, (byte)65, (byte)61, (byte)0, (byte) (-61)}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);

BigInteger bigInteger0 = BigInteger.ONE;
assertNotNull(bigInteger0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());

byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
assertNotNull(byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertEquals(4, byteArray2.length);

byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true);
assertNotNull(byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertArrayEquals(new byte[] {(byte)0, (byte)64}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)69, (byte)65, (byte)61, (byte)0, (byte) (-61)}, byteArray1);
assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)86, (byte)66, (byte)80, (byte)81, (byte)68, (byte)68, (byte)0, (byte) (-61)}, byteArray3);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(10, byteArray3.length);

boolean boolean0 = Base64.isBase64("UTF-16LE");
assertTrue(boolean0);

byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
assertNotNull(byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertArrayEquals(new byte[] {(byte)0, (byte)64}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)69, (byte)65, (byte)61, (byte)0, (byte) (-61)}, byteArray1);
assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)86, (byte)66, (byte)80, (byte)81, (byte)68, (byte)68, (byte)0, (byte) (-61)}, byteArray3);
assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)86, (byte)66, (byte)80, (byte)81, (byte)68, (byte)68, (byte)0, (byte) (-61)}, byteArray4);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertEquals(2, byteArray0.length);
assertEquals(6, byteArray1.length);
assertEquals(10, byteArray3.length);
assertEquals(10, byteArray4.length);


[MASTER] 20:49:58.652 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:58.653 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<0> but was:<13>
[MASTER] 20:49:58.654 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[3];
BigInteger bigInteger0 = BigInteger.ZERO;
assertNotNull(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());

String string0 = bigInteger0.toString();
assertNotNull(string0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals("0", string0);

Base64 base64_0 = new Base64(true);
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertTrue(base64_0.isUrlSafe());

int int0 = base64_0.avail();
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertTrue(base64_0.isUrlSafe());
assertEquals(0, int0);

byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(3, byteArray0.length);
assertEquals(3, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray0);
assertNotNull(byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray2);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertEquals(3, byteArray0.length);
assertEquals(4, byteArray2.length);

short short0 = bigInteger0.shortValueExact();
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertEquals((short)0, short0);

byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
assertNotNull(byteArray3);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte) (-61)}, byteArray3);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray3.length);

int int1 = base64_0.avail();
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertTrue(base64_0.isUrlSafe());
assertTrue(int1 == int0);
assertEquals(0, int1);

boolean boolean0 = Base64.isBase64(byteArray3);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte) (-61)}, byteArray3);
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertEquals(3, byteArray0.length);
assertEquals(6, byteArray3.length);
assertFalse(boolean0);

base64_0.decode((Object) bigInteger0);

[MASTER] 20:49:58.731 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:58.790 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:58.878 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:58.975 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:59.088 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:59.180 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:59.311 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:59.389 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:59.423 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:59.491 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:49:59.582 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:00.540 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:00.732 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:00.824 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:00.912 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:01.016 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:01.123 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:01.196 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:01.203 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 20:50:01.204 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
assertEquals(2, byteArray0.length);

BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
assertNotNull(bigInteger0);
assertEquals((short)0, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger0.byteValue());
assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
assertEquals(2, byteArray0.length);

byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)77, (byte)77, (byte)61}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(2, byteArray0.length);
assertEquals(4, byteArray1.length);

Base64 base64_0 = new Base64(false);
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());

int int0 = base64_0.avail();
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertEquals(0, int0);

BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
assertNotNull(bigInteger1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((short)195, bigInteger1.shortValue());
assertEquals((byte) (-61), bigInteger1.byteValue());
assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
assertArrayEquals(new byte[] {(byte)65, (byte)77, (byte)77, (byte)61}, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals(2, byteArray0.length);
assertEquals(4, byteArray1.length);

byte[] byteArray2 = new byte[4];
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));

byteArray2[0] = (byte)19;
byteArray2[1] = (byte) (-4);
byteArray2[2] = (byte)76;
byteArray2[3] = (byte)2;
base64_0.decode(byteArray2, 0, (int) (byte)2);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertArrayEquals(new byte[] {(byte)19, (byte) (-4), (byte)76, (byte)2}, byteArray2);
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertEquals(4, byteArray2.length);


[MASTER] 20:50:01.416 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:01.417 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 20:50:01.428 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.ONE;
assertNotNull(bigInteger0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());

BigInteger bigInteger1 = bigInteger0.shiftLeft(1469);
assertNotNull(bigInteger1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(bigInteger1.equals((Object)bigInteger0));

byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
assertNotNull(byteArray0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals(248, byteArray0.length);

Base64 base64_0 = new Base64();
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());

String string0 = Base64.encodeBase64String(byteArray0);
assertNotNull(string0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals(248, byteArray0.length);
assertEquals("SUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPT0=", string0);

Base64 base64_1 = new Base64(false);
assertNotNull(base64_1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_1.isUrlSafe());
assertFalse(base64_1.equals((Object)base64_0));

byte[] byteArray1 = base64_1.encode(byteArray0);
assertNotNull(byteArray1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(base64_1, base64_0);
assertNotSame(byteArray1, byteArray0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_1.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(248, byteArray0.length);
assertEquals(342, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
assertNotNull(byteArray2);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(base64_1, base64_0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_1.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertEquals(248, byteArray0.length);
assertEquals(342, byteArray1.length);
assertEquals(456, byteArray2.length);

int int0 = Base64.PEM_CHUNK_SIZE;
assertEquals(64, int0);

boolean boolean0 = Base64.isBase64(byteArray1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(base64_1, base64_0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_1.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(248, byteArray0.length);
assertEquals(342, byteArray1.length);
assertFalse(boolean0);

byte[] byteArray3 = base64_1.decode(byteArray0);
assertNotNull(byteArray3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(base64_1, base64_0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_1.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertEquals(248, byteArray0.length);
assertEquals(184, byteArray3.length);

base64_0.decode(byteArray0, 52, (-1088));
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray3);
assertNotSame(base64_0, base64_1);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(base64_0.equals((Object)base64_1));
assertEquals(248, byteArray0.length);


[MASTER] 20:50:01.512 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:01.580 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:01.664 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:01.767 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:01.843 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:01.939 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:01.943 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [0]; expected:<0> but was:<13>
[MASTER] 20:50:01.944 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
assertNotNull(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
assertEquals(2, byteArray0.length);

BigInteger bigInteger0 = BigInteger.ONE;
assertNotNull(bigInteger0);
assertEquals((short)1, bigInteger0.shortValue());
assertEquals((byte)1, bigInteger0.byteValue());

BigInteger bigInteger1 = BigInteger.ZERO;
assertNotNull(bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(bigInteger1.equals((Object)bigInteger0));

boolean boolean0 = Base64.isBase64(byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
assertEquals(2, byteArray0.length);
assertFalse(boolean0);

byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
assertNotNull(byteArray1);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray1);
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(2, byteArray0.length);
assertEquals(2, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64((byte[]) null, true, true, 90);
assertNull(byteArray2);

Base64 base64_0 = new Base64(90, byteArray1, false);
assertNotNull(base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());
assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(2, byteArray0.length);
assertEquals(2, byteArray1.length);

String string0 = base64_0.encodeToString(byteArray0);
assertNotNull(string0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertFalse(base64_0.isUrlSafe());
assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray1);
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(2, byteArray0.length);
assertEquals(2, byteArray1.length);
assertEquals("AMM=\u0000\uFFFD", string0);


[MASTER] 20:50:02.020 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:02.148 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:02.267 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:02.327 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:02.419 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:02.471 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:02.543 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:02.602 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:02.686 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:02.749 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:02.818 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:04.515 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:04.597 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:04.666 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:04.751 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:04.838 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:05.082 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:06.127 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:06.127 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<195> but was:<3338>
[MASTER] 20:50:06.131 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.TEN;
assertNotNull(bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());

BigInteger bigInteger1 = bigInteger0.shiftLeft(6102);
assertNotNull(bigInteger1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(bigInteger1.equals((Object)bigInteger0));

byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
assertNotNull(byteArray0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals(1020, byteArray0.length);

Base64 base64_0 = new Base64(11);
assertNotNull(base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());

byte[] byteArray1 = base64_0.encode(byteArray0);
assertNotNull(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64((byte[]) null, true, true);
assertNull(byteArray2);

BigInteger bigInteger2 = BigInteger.TEN;
assertNotNull(bigInteger2);
assertNotSame(bigInteger2, bigInteger1);
assertSame(bigInteger2, bigInteger0);
assertEquals((short)10, bigInteger2.shortValue());
assertEquals((byte)10, bigInteger2.byteValue());
assertFalse(bigInteger2.equals((Object)bigInteger1));

byte[] byteArray3 = base64_0.encode(byteArray1);
assertNotNull(byteArray3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);
assertEquals(2836, byteArray3.length);

byte[] byteArray4 = base64_0.encode((byte[]) null);
assertNull(byteArray4);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());

Base64 base64_1 = new Base64(64);
assertNotNull(base64_1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_1.isUrlSafe());
assertFalse(base64_1.equals((Object)base64_0));

byte[] byteArray5 = base64_1.decode(byteArray0);
assertNotNull(byteArray5);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(base64_1, base64_0);
assertNotSame(byteArray5, byteArray1);
assertNotSame(byteArray5, byteArray0);
assertNotSame(byteArray5, byteArray3);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_1.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(base64_1.equals((Object)base64_0));
assertFalse(byteArray5.equals((Object)byteArray1));
assertFalse(byteArray5.equals((Object)byteArray0));
assertFalse(byteArray5.equals((Object)byteArray3));
assertEquals(1020, byteArray0.length);
assertEquals(764, byteArray5.length);

byte[] byteArray6 = base64_0.encode(byteArray3);
assertNotNull(byteArray6);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray6);
assertNotSame(base64_0, base64_1);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray0));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);
assertEquals(2836, byteArray3.length);
assertEquals(4730, byteArray6.length);

BigInteger bigInteger3 = Base64.decodeInteger(byteArray6);
assertNotNull(bigInteger3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger3);
assertSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger3);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray5);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray6);
assertNotSame(base64_0, base64_1);
assertNotSame(byteArray1, byteArray6);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray5);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray3, byteArray6);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray5);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray6, byteArray5);
assertNotSame(byteArray6, byteArray1);
assertNotSame(byteArray6, byteArray3);
assertNotSame(byteArray6, byteArray0);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger1);
assertNotSame(bigInteger3, bigInteger2);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertEquals((short)195, bigInteger3.shortValue());
assertEquals((byte) (-61), bigInteger3.byteValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray5));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray6));
assertFalse(base64_0.equals((Object)base64_1));
assertFalse(byteArray1.equals((Object)byteArray6));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray5));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray6));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray5));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray6.equals((Object)byteArray5));
assertFalse(byteArray6.equals((Object)byteArray1));
assertFalse(byteArray6.equals((Object)byteArray3));
assertFalse(byteArray6.equals((Object)byteArray0));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);
assertEquals(2836, byteArray3.length);
assertEquals(4730, byteArray6.length);

base64_0.decode(byteArray6);

[MASTER] 20:50:06.485 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:07.241 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:07.259 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-61> but was:<10>
[MASTER] 20:50:07.262 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.TEN;
assertNotNull(bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());

BigInteger bigInteger1 = bigInteger0.shiftLeft(6102);
assertNotNull(bigInteger1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(bigInteger1.equals((Object)bigInteger0));

byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
assertNotNull(byteArray0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals(1020, byteArray0.length);

Base64 base64_0 = new Base64(11);
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());

BigInteger bigInteger2 = BigInteger.TEN;
assertNotNull(bigInteger2);
assertNotSame(bigInteger2, bigInteger1);
assertSame(bigInteger2, bigInteger0);
assertEquals((byte)10, bigInteger2.byteValue());
assertEquals((short)10, bigInteger2.shortValue());
assertFalse(bigInteger2.equals((Object)bigInteger1));

byte[] byteArray1 = base64_0.encode(byteArray0);
assertNotNull(byteArray1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);

byte[] byteArray2 = base64_0.encode(byteArray1);
assertNotNull(byteArray2);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);
assertEquals(2836, byteArray2.length);

byte[] byteArray3 = base64_0.encode(byteArray2);
assertNotNull(byteArray3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);
assertEquals(2836, byteArray2.length);
assertEquals(4730, byteArray3.length);

BigInteger bigInteger3 = Base64.decodeInteger(byteArray3);
assertNotNull(bigInteger3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger3);
assertNotSame(bigInteger0, bigInteger1);
assertSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger1, bigInteger3);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger1);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertEquals((byte) (-61), bigInteger3.byteValue());
assertEquals((short)195, bigInteger3.shortValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);
assertEquals(2836, byteArray2.length);
assertEquals(4730, byteArray3.length);

Random.setNextRandom(1163);
byte[] byteArray4 = new byte[1];
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray0));

byteArray4[0] = (byte) (-7);
Base64.encodeBase64(byteArray4, false, false, (-2500));

[MASTER] 20:50:07.824 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:07.825 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-61> but was:<10>
[MASTER] 20:50:07.827 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.TEN;
assertNotNull(bigInteger0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());

BigInteger bigInteger1 = bigInteger0.shiftLeft(6102);
assertNotNull(bigInteger1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertFalse(bigInteger1.equals((Object)bigInteger0));

byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
assertNotNull(byteArray0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals(1020, byteArray0.length);

Base64 base64_0 = new Base64(11);
assertNotNull(base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());

BigInteger bigInteger2 = BigInteger.TEN;
assertNotNull(bigInteger2);
assertSame(bigInteger2, bigInteger0);
assertNotSame(bigInteger2, bigInteger1);
assertEquals((short)10, bigInteger2.shortValue());
assertEquals((byte)10, bigInteger2.byteValue());
assertFalse(bigInteger2.equals((Object)bigInteger1));

byte[] byteArray1 = base64_0.encode(byteArray0);
assertNotNull(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);

byte[] byteArray2 = base64_0.encode(byteArray1);
assertNotNull(byteArray2);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);
assertEquals(2836, byteArray2.length);

byte[] byteArray3 = base64_0.encode(byteArray2);
assertNotNull(byteArray3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);
assertEquals(2836, byteArray2.length);
assertEquals(4730, byteArray3.length);

BigInteger bigInteger3 = Base64.decodeInteger(byteArray3);
assertNotNull(bigInteger3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger3);
assertSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger3);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray2);
assertNotSame(bigInteger3, bigInteger2);
assertNotSame(bigInteger3, bigInteger0);
assertNotSame(bigInteger3, bigInteger1);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertFalse(base64_0.isUrlSafe());
assertEquals((byte) (-61), bigInteger3.byteValue());
assertEquals((short)195, bigInteger3.shortValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(bigInteger1.equals((Object)bigInteger2));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(bigInteger3.equals((Object)bigInteger2));
assertFalse(bigInteger3.equals((Object)bigInteger0));
assertFalse(bigInteger3.equals((Object)bigInteger1));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);
assertEquals(2836, byteArray2.length);
assertEquals(4730, byteArray3.length);

int int0 = 1163;
Random.setNextRandom(1163);
Base64.encodeBase64(byteArray3, true);

[MASTER] 20:50:08.779 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:08.779 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<-61> but was:<10>
[MASTER] 20:50:08.783 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.TEN;
assertNotNull(bigInteger0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());

BigInteger bigInteger1 = bigInteger0.shiftLeft(6102);
assertNotNull(bigInteger1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(bigInteger1.equals((Object)bigInteger0));

byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
assertNotNull(byteArray0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals(1020, byteArray0.length);

Base64 base64_0 = new Base64(11);
assertNotNull(base64_0);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());

byte[] byteArray1 = base64_0.encode(byteArray0);
assertNotNull(byteArray1);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);

byte[] byteArray2 = base64_0.encode(byteArray1);
assertNotNull(byteArray2);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);
assertEquals(2836, byteArray2.length);

byte[] byteArray3 = base64_0.encode(byteArray2);
assertNotNull(byteArray3);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);
assertEquals(2836, byteArray2.length);
assertEquals(4730, byteArray3.length);

byte[] byteArray4 = base64_0.decode(byteArray3);
assertNotNull(byteArray4);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray0));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);
assertEquals(2836, byteArray2.length);
assertEquals(4730, byteArray3.length);
assertEquals(2836, byteArray4.length);

BigInteger bigInteger2 = Base64.decodeInteger(byteArray3);
assertNotNull(bigInteger2);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(bigInteger1, bigInteger2);
assertNotSame(byteArray0, byteArray4);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray0, byteArray2);
assertNotSame(byteArray0, byteArray3);
assertNotSame(byteArray1, byteArray0);
assertNotSame(byteArray1, byteArray2);
assertNotSame(byteArray1, byteArray3);
assertNotSame(byteArray1, byteArray4);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray0);
assertNotSame(bigInteger2, bigInteger1);
assertNotSame(bigInteger2, bigInteger0);
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertEquals((byte) (-61), bigInteger2.byteValue());
assertEquals((short)195, bigInteger2.shortValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray0.equals((Object)byteArray4));
assertFalse(byteArray0.equals((Object)byteArray1));
assertFalse(byteArray0.equals((Object)byteArray2));
assertFalse(byteArray0.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray0));
assertFalse(byteArray1.equals((Object)byteArray2));
assertFalse(byteArray1.equals((Object)byteArray3));
assertFalse(byteArray1.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(bigInteger2.equals((Object)bigInteger1));
assertFalse(bigInteger2.equals((Object)bigInteger0));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);
assertEquals(2836, byteArray2.length);
assertEquals(4730, byteArray3.length);

Base64.decodeInteger(byteArray0);

[MASTER] 20:50:09.105 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:09.107 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 20:50:09.109 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BigInteger bigInteger0 = BigInteger.TEN;
assertNotNull(bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());

BigInteger bigInteger1 = bigInteger0.shiftLeft(6102);
assertNotNull(bigInteger1);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(bigInteger1.equals((Object)bigInteger0));

byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
assertNotNull(byteArray0);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertEquals(1020, byteArray0.length);

Base64 base64_0 = new Base64(11);
assertNotNull(base64_0);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertFalse(base64_0.isUrlSafe());

byte[] byteArray1 = base64_0.encode(byteArray0);
assertNotNull(byteArray1);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray0, byteArray1);
assertNotSame(byteArray1, byteArray0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray1.equals((Object)byteArray0));
assertEquals(1020, byteArray0.length);
assertEquals(1700, byteArray1.length);

byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
assertNotNull(byteArray2);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertEquals(764, byteArray2.length);

byte[] byteArray3 = base64_0.encode(byteArray2);
assertNotNull(byteArray3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertEquals(764, byteArray2.length);
assertEquals(1276, byteArray3.length);

byte[] byteArray4 = base64_0.decode(byteArray3);
assertNotNull(byteArray4);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray4);
assertNotSame(byteArray4, byteArray2);
assertNotSame(byteArray4, byteArray1);
assertNotSame(byteArray4, byteArray0);
assertNotSame(byteArray4, byteArray3);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray2));
assertFalse(byteArray4.equals((Object)byteArray1));
assertFalse(byteArray4.equals((Object)byteArray0));
assertFalse(byteArray4.equals((Object)byteArray3));
assertEquals(764, byteArray2.length);
assertEquals(1276, byteArray3.length);
assertEquals(764, byteArray4.length);

boolean boolean0 = Base64.isBase64(byteArray3);
assertEquals(64, Base64.PEM_CHUNK_SIZE);
assertEquals(76, Base64.MIME_CHUNK_SIZE);
assertNotSame(bigInteger0, bigInteger1);
assertNotSame(bigInteger1, bigInteger0);
assertNotSame(byteArray2, byteArray1);
assertNotSame(byteArray2, byteArray0);
assertNotSame(byteArray2, byteArray3);
assertNotSame(byteArray2, byteArray4);
assertNotSame(byteArray3, byteArray0);
assertNotSame(byteArray3, byteArray1);
assertNotSame(byteArray3, byteArray2);
assertNotSame(byteArray3, byteArray4);
assertEquals((short)10, bigInteger0.shortValue());
assertEquals((byte)10, bigInteger0.byteValue());
assertEquals((short)0, bigInteger1.shortValue());
assertEquals((byte)0, bigInteger1.byteValue());
assertFalse(base64_0.isUrlSafe());
assertFalse(bigInteger0.equals((Object)bigInteger1));
assertFalse(bigInteger1.equals((Object)bigInteger0));
assertFalse(byteArray2.equals((Object)byteArray1));
assertFalse(byteArray2.equals((Object)byteArray0));
assertFalse(byteArray2.equals((Object)byteArray3));
assertFalse(byteArray2.equals((Object)byteArray4));
assertFalse(byteArray3.equals((Object)byteArray0));
assertFalse(byteArray3.equals((Object)byteArray1));
assertFalse(byteArray3.equals((Object)byteArray2));
assertFalse(byteArray3.equals((Object)byteArray4));
assertEquals(764, byteArray2.length);
assertEquals(1276, byteArray3.length);
assertFalse(boolean0);


[MASTER] 20:50:09.225 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:09.685 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:18.922 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 20:50:18.922 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test075 -> class java.lang.ArrayIndexOutOfBoundsException: -1
[MASTER] 20:50:18.923 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
//  // Unstable assertion: assertNotNull(byteArray0);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
//  // Unstable assertion: assertEquals(2, byteArray0.length);

BigInteger bigInteger0 = BigInteger.ONE;
//  // Unstable assertion: assertNotNull(bigInteger0);
//  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
//  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());

BigInteger bigInteger1 = BigInteger.ZERO;
//  // Unstable assertion: assertNotNull(bigInteger1);
//  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
//  // Unstable assertion: assertEquals((short)0, bigInteger1.shortValue());
//  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
//  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));

boolean boolean0 = Base64.isBase64(byteArray0);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
//  // Unstable assertion: assertEquals(2, byteArray0.length);
//  // Unstable assertion: assertFalse(boolean0);

byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
//  // Unstable assertion: assertNotNull(byteArray1);
//  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
//  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray1);
//  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
//  // Unstable assertion: assertEquals(2, byteArray0.length);
//  // Unstable assertion: assertEquals(2, byteArray1.length);

byte[] byteArray2 = Base64.encodeBase64((byte[]) null, true, true, 90);
//  // Unstable assertion: assertNull(byteArray2);

Base64 base64_0 = new Base64(90, byteArray1, false);
//  // Unstable assertion: assertNotNull(base64_0);
//  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
//  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
//  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray1);
//  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
//  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
//  // Unstable assertion: assertEquals(2, byteArray0.length);
//  // Unstable assertion: assertEquals(2, byteArray1.length);

String string0 = base64_0.encodeToString(byteArray0);
//  // Unstable assertion: assertNotNull(string0);
//  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
//  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
//  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
//  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
//  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray0);
//  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-61)}, byteArray1);
//  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
//  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
//  // Unstable assertion: assertEquals(2, byteArray0.length);
//  // Unstable assertion: assertEquals(2, byteArray1.length);
//  // Unstable assertion: assertEquals("AMM=\u0000\uFFFD", string0);


* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/BBC-F0-opt-90/tests/5
* Done!

* Computation finished
