/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:41:21 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)117;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3320, 17, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      mockRandom0.nextBytes(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray4);
      Base64 base64_1 = new Base64(16, byteArray0);
      base64_1.encode(byteArray5, 76, 530);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(3320, 17, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, 397, 3320);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 17);
      BigInteger bigInteger0 = new BigInteger(109, 99, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.decodeInteger(byteArray1);
      base64_0.decode(byteArray0, 17, 756);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(3320, 17, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger2 = BigInteger.ZERO;
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray1);
      assertEquals((short)15677, bigInteger3.shortValue());
      
      base64_0.decode(byteArray0, 1, 3320);
      assertEquals(556, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1156, byteArray1, false);
      Base64.encodeBase64URLSafe(byteArray0);
      Object object0 = base64_0.decode((Object) "3*T`%EhQYU|*^,)");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)60);
      assertFalse(boolean0);
      
      Random.setNextRandom(4);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)60;
      byteArray0[8] = (byte)60;
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(39, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)60;
      base64_0.encode(byteArray0, (int) (byte)60, (-2375));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-1), (byte)60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom(4L);
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(1360, (-2976), mockRandom0);
      bigInteger0.nextProbablePrime();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 1360, 1360);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1360
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64(14);
      byte[] byteArray0 = new byte[9];
      base64_0.readResults(byteArray0, (-1), (-3036));
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64((-2536));
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger called with null parameter");
      assertEquals(27, byteArray0.length);
      
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(64, (-1470), mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)34;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      base64_0.decode(byteArray0, (int) (byte)0, 2);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 2, 2);
      base64_0.decode(byteArray0, 2, 2);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 103);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)69, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte) (-1), (byte) (-67)}, byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertTrue(bigInteger0.equals((Object)bigInteger1));
      
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)122;
      byteArray2[1] = (byte)12;
      byteArray2[2] = (byte)21;
      byteArray2[3] = (byte) (-8);
      byteArray2[4] = (byte) (-108);
      byteArray2[5] = (byte) (-22);
      byteArray2[6] = (byte) (-10);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger called with null parameter");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 38);
      assertEquals(38, byteArray1.length);
      
      base64_0.decode("encodeInteger called with null parameter");
      base64_0.decode(byteArray0, 15, 38);
      assertEquals(27, byteArray0.length);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)60, (byte)60, (byte)60}, byteArray1);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger called with null parameter");
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 15, 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte) (-46);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-67), (byte) (-29), (byte)101, (byte) (-46)}, byteArray1);
      
      boolean boolean0 = Base64.isBase64((byte)9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, (-2532));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -2532
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-127);
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64("SrC9-e75cz.{,zU<");
      Base64.isBase64("J{[I<r=_v9NHO");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-88);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, 123);
      Base64.isBase64((byte) (-88));
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.getLowestSetBit();
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64("SrC9-e75cz.{,zU<");
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_2 = new Base64(true);
      base64_0.decode((String) null);
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = new byte[2];
      Base64 base64_0 = new Base64(0);
      base64_0.decode((byte[]) null);
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)85;
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, 0);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = "";
      Base64 base64_1 = new Base64();
      Base64 base64_2 = new Base64();
      // Undeclared exception!
      try { 
        base64_2.decode((byte[]) null, 3335, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64(21);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-15);
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte) (-20);
      byteArray1[4] = (byte) (-44);
      byteArray1[5] = (byte)19;
      byteArray1[6] = (byte)106;
      byteArray1[7] = (byte)0;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-44);
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.isBase64("0=-3");
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 123);
      Base64.isBase64((byte)112);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.clearBit((byte)112);
      bigInteger0.getLowestSetBit();
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray2);
      Random.setNextRandom((byte)112);
      Base64.encodeBase64(byteArray3, true);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64.isBase64("eG8W>ggiEsn#/*vmC");
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(8168);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte)20;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byteArray0[8] = (byte)24;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)86);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      Object object1 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      Object object2 = base64_0.encode(object1);
      Object object3 = base64_0.encode(object2);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_1.encode(object3);
      base64_1.decode(object1);
      Base64 base64_2 = new Base64();
      Object object4 = base64_2.encode(object3);
      base64_0.encode(object4);
      try { 
        base64_0.decode((Object) base64_2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.decodeBase64((String) null);
      Base64.isBase64("0=-3");
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true, 123);
      byte byte0 = (byte)112;
      Base64.isBase64((byte)112);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.mod(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64(21);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 973);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.isBase64((byte) (-5));
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64 base64_0 = new Base64((byte) (-5), byteArray3);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-2057), 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)126;
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64(1, byteArray0, false);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte)10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64("Qg==");
      Base64.isBase64("ypb ^H=S\")]\"!Mp");
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte) (-93);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)4;
      byteArray3[1] = (byte)4;
      byteArray3[2] = (byte) (-59);
      byte[] byteArray4 = base64_0.decode(byteArray3);
      base64_0.decode(byteArray2);
      Base64.decodeBase64("Qg==");
      base64_0.encode(byteArray3);
      Base64.decodeInteger(byteArray4);
      Base64.encodeBase64(byteArray0, true, false);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte byte0 = (byte)66;
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 76);
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-4);
      BigInteger bigInteger0 = BigInteger.valueOf(22L);
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-1);
      base64_0.readResults(byteArray0, 1215, 2091);
      base64_0.encodeToString((byte[]) null);
      base64_0.encode(byteArray1, 2091, (int) (byte) (-1));
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("");
      Base64 base64_1 = new Base64((-3120), byteArray0, false);
      byte[] byteArray1 = base64_1.decode(byteArray0);
      base64_1.decode(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("wQWt xFaLS%i5%3Tz");
      base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64((byte[]) null, false, true);
      base64_1.decode("RP{v=R5");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64.isBase64("eG8W>ggiEsn#/*vmC");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("");
      Base64.isBase64("");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false, 64);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      Base64.decodeInteger(byteArray4);
      Base64.decodeBase64((String) null);
      Base64.isBase64((byte)59);
      bigInteger0.getLowestSetBit();
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64(byteArray3);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64(byteArray0, false, false, 64);
      Base64.encodeBase64URLSafeString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = true;
      Base64 base64_1 = new Base64(122, byteArray1, true);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64(byteArray1);
      base64_0.avail();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.isBase64("AAAAAAAA");
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray3 = new byte[1];
      byte byte0 = (byte) (-109);
      byteArray3[0] = (byte) (-109);
      // Undeclared exception!
      try { 
        base64_1.encodeToString(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)81;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[6];
      base64_0.decode((Object) "");
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_1 = new Base64(true);
      Object object0 = new Object();
      try { 
        base64_1.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64((-422));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)22;
      Base64.isBase64((byte)46);
      Base64 base64_1 = new Base64(true);
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[0];
      Base64 base64_1 = new Base64(122, byteArray1, true);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = base64_1.decode("x.1i%qHd;8-9o&@");
      byte[] byteArray3 = base64_1.decode(byteArray2);
      byte[] byteArray4 = base64_1.decode(byteArray0);
      Base64.decodeBase64("{8JECet`4[g|&at[(_E");
      base64_0.encode(byteArray4);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray3, true, true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.readResults((byte[]) null, 12, 2723);
      Base64.encodeBase64((byte[]) null, true, true);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64.isBase64("eG8W>ggiEsn#/*vmC");
      Base64 base64_0 = new Base64((-422));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byte[] byteArray1 = null;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)46;
      byteArray2[1] = (byte)22;
      Base64 base64_1 = new Base64((byte)22, byteArray2);
      base64_1.encode((byte[]) null);
      Base64.isBase64((byte)67);
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      Object object1 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      Object object2 = base64_0.encode(object1);
      base64_0.encode(object2);
      Object object3 = base64_0.decode((Object) "UTF-8");
      Object object4 = base64_0.encode(object3);
      base64_0.decode(object4);
      base64_0.decode((Object) "UTF-8");
      Object object5 = base64_0.decode((Object) "UTF-8");
      base64_0.encode(object5);
      base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)51;
      byteArray2[1] = (byte)0;
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("jM%Dq&d]Mv,~qIq!/");
      Base64 base64_0 = new Base64(false);
      int int0 = 971;
      base64_0.readResults(byteArray0, 971, 1509);
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_1 = new Base64(false);
      Object object0 = new Object();
      base64_1.decode((Object) "jM%Dq&d]Mv,~qIq!/");
      try { 
        base64_0.decode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte) (-77), 0);
      byteArray0[3] = (byte) (-77);
      base64_0.readResults(byteArray0, (byte)0, 1523);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)34;
      base64_0.decode(byteArray0, 0, (-2065));
      base64_0.decode("WMdzW");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      base64_0.decode(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.gcd((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[0];
      Base64 base64_1 = new Base64(122, byteArray1, true);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64(byteArray1);
      base64_1.decode(byteArray0, 64, (-4270));
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64 base64_2 = new Base64((-188), byteArray2);
      // Undeclared exception!
      try { 
        base64_2.encode(byteArray0, 4, 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-21);
      base64_0.encode(byteArray0, (-2015), (int) (byte) (-21));
      base64_0.decode(byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "YlGAMF";
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      Base64.decodeBase64("YlGAMF");
      Base64.discardWhitespace(byteArray0);
      int int0 = 125;
      Base64 base64_0 = new Base64(125);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 125, 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 125
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64.isBase64("eG8W>ggiEsn#/*vmC");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(") than the specified maxium size of ");
      base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64(byteArray1, false, false);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "YlGAMF";
      byte[] byteArray0 = Base64.decodeBase64("YlGAMF");
      Base64.isBase64(byteArray0);
      Base64.decodeBase64("YlGAMF");
      Base64.discardWhitespace(byteArray0);
      int int0 = 125;
      Base64 base64_0 = new Base64(125);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 125, 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 125
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("yQ6c4yz'.");
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      Base64.decodeInteger(byteArray3);
      Base64.encodeBase64(byteArray0, true, true);
      bigInteger0.toString(0);
      bigInteger0.toByteArray();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray2, false);
      // Undeclared exception!
      try { 
        bigInteger0.testBit((byte) (-87));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray0, 90, 102);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.avail();
      base64_0.hasData();
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)95;
      byteArray2[1] = (byte)11;
      byteArray2[2] = (byte)31;
      byteArray2[3] = (byte) (-72);
      byteArray2[4] = (byte) (-65);
      byteArray2[5] = (byte)49;
      byteArray2[6] = (byte)75;
      byteArray2[7] = (byte) (-118);
      byteArray2[8] = (byte)1;
      Base64.encodeBase64(byteArray2, true);
      base64_0.isUrlSafe();
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64Chunked(byteArray3);
      base64_0.readResults(byteArray1, (-1159), 2517);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      int int0 = (-429);
      Base64 base64_0 = new Base64((-429), byteArray1, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode("yn|eL\"W0L");
      base64_0.encode(byteArray0, (-57), (-57));
      Base64.decodeBase64((String) null);
      String string0 = "";
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.avail();
      base64_0.readResults(byteArray1, (byte)0, 1);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.isBase64((byte)109);
      Base64.isBase64((byte)109);
      int int0 = (-997);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)109;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-997), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [mm]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-3);
      Base64.isBase64(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(Integer.MAX_VALUE, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000V+\u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      base64_0.readResults(byteArray0, (byte) (-99), (byte) (-99));
      byteArray0[1] = (byte)101;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 46, 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(92, byteArray0);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.decodeBase64(byteArray1);
      base64_0.readResults(byteArray1, (-398), (-557));
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)0;
      base64_0.encode(byteArray2);
      base64_0.hasData();
      Base64.isBase64(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      base64_0.readResults(byteArray1, (byte)0, (-1063));
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray3);
      bigInteger1.not();
      bigInteger0.multiply(bigInteger1);
      base64_0.decode(byteArray1, (-1063), 85);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray2.length);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(0, (byte[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte) (-17);
      byteArray0[8] = (byte) (-78);
      base64_0.encode(byteArray0, 0, (-591));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("Qg==", string0);
      
      Base64.isBase64((byte) (-59));
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.doubleValue();
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      Base64.encodeBase64(byteArray2);
      Base64.isBase64("Qg==");
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray2, true, false, 64);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertEquals((byte)66, bigInteger1.byteValue());
      
      byte[] byteArray5 = Base64.decodeBase64("n!");
      Base64.isBase64((byte)0);
      bigInteger0.getLowestSetBit();
      Base64.encodeBase64URLSafe(byteArray4);
      Base64.encodeBase64(byteArray4);
      assertEquals(6, byteArray3.length);
      
      byte[] byteArray6 = Base64.decodeBase64(byteArray5);
      assertSame(byteArray6, byteArray5);
      
      byte[] byteArray7 = Base64.encodeBase64(byteArray2, false, false, 1405);
      String string1 = Base64.encodeBase64URLSafeString(byteArray7);
      assertEquals("QVE9PQ", string1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)50;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAQEgyMg==", string0);
      
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.modPow(bigInteger1, bigInteger2);
      bigInteger0.shortValueExact();
      bigInteger0.shortValueExact();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.decode("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)73;
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("WWJJ\uFFFD\n", string0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-113);
      byteArray1[1] = (byte)102;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)22;
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      byteArray2[1] = (byte)52;
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      byteArray2[2] = (byte)1;
      byte[] byteArray5 = base64_0.decode(byteArray2);
      boolean boolean0 = base64_0.hasData();
      Base64.isArrayByteBase64(byteArray1);
      String string1 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("j2Y=\uFFFD\n", string1);
      
      byte[] byteArray6 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.decode(byteArray2);
      boolean boolean1 = Base64.isBase64(byteArray6);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      Base64.isBase64((byte) (-97));
      int int0 = base64_0.readResults(byteArray5, (byte) (-113), (byte)1);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-45);
      byteArray0[1] = (byte) (-45);
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(2082, byteArray0, false);
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, (int) (byte) (-45));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -45
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)41;
      Base64.isBase64(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)120, (byte)53, (byte)69, (byte)109, (byte)47, (byte)89, (byte)112, (byte) (-63), (byte)10}, byteArray1);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte) (-2);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(13, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)105;
      byteArray1[2] = (byte) (-41);
      Base64.decodeInteger(byteArray1);
      base64_0.encodeToString(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.decodeBase64("]'I%z$FvU");
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.flipBit(113);
      bigInteger0.shiftRight(0);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (38) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-127);
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64(byteArray0, true);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64((-990), (byte[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-110);
      byte byte0 = (byte)0;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
      
      Base64 base64_0 = new Base64((-13), byteArray0);
      bigInteger0.clearBit(76);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)62;
      byteArray2[4] = (byte) (-126);
      byteArray2[5] = (byte) (-81);
      byteArray2[6] = (byte)96;
      byteArray2[7] = (byte)119;
      byte[] byteArray3 = base64_0.decode(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false);
      assertEquals(0, byteArray3.length);
      assertFalse(base64_0.isUrlSafe());
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray4, byteArray3);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = (-1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)100;
      byteArray0[1] = (byte)100;
      byte byte1 = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)12;
      byte byte2 = (byte)4;
      byteArray0[4] = (byte)4;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000d'\f\u0004]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDr\u0000\uFFFD\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64(38);
      byte[] byteArray0 = new byte[9];
      base64_0.decode("\fv#8XKlW");
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-1);
      base64_0.decode(byteArray0);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)63;
      base64_0.decode(byteArray0);
      Base64.decodeBase64("\fv#8XKlW");
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2464, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD!\u0000\\lA\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-77);
      base64_0.readResults(byteArray0, (byte)0, 1523);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)34;
      base64_0.decode(byteArray0, 0, (-2065));
      base64_0.decode("WMdzW");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      // Undeclared exception!
      try { 
        bigInteger0.gcd((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64(7);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("AAA=\uFFFD\n", string0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)71;
      byte[] byteArray2 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      Base64.encodeBase64(byteArray2, true, true, (-1));
      base64_0.decode(byteArray1, 1909, (int) (byte)0);
      byte[] byteArray3 = new byte[0];
      base64_0.decode(byteArray3);
      Base64.encodeBase64Chunked(byteArray3);
      base64_0.isUrlSafe();
      byte[] byteArray4 = Base64.decodeBase64("Gd+Vc");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)25, (byte) (-33), (byte) (-107)}, byteArray4);
      //  // Unstable assertion: assertEquals(3, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64(688);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)24;
      Base64.encodeBase64(byteArray0, false, false);
      String string0 = "";
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("wQWt xFaLS%i5%3Tz");
      Base64.isBase64((byte) (-94));
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte) (-100), (byte)14}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)0;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = "jM%Dq&d]Mv,~qIq!/";
      byte[] byteArray0 = Base64.decodeBase64("jM%Dq&d]Mv,~qIq!/");
      int int0 = 1893;
      boolean boolean0 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1893, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\uFFFDt\uFFFD\uFFFD\"\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
