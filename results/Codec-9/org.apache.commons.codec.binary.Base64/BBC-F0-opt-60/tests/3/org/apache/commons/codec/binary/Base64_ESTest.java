/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:13:52 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7477, mockRandom0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(16);
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray0, 76, 16);
      base64_1.encode(byteArray0, 16, (-2975));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7502, mockRandom0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, 7502, 1);
      String string0 = base64_0.encodeToString(byteArray1);
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7472);
      BigInteger bigInteger0 = new BigInteger(7472, mockRandom0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8);
      base64_0.encode(byteArray0, 64, 8);
      base64_0.encode(byteArray0, 8, (-1372));
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray0, 16, 8);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7472);
      BigInteger bigInteger0 = new BigInteger(7472, mockRandom0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8);
      base64_0.encode(byteArray0, 64, 8);
      base64_0.encode(byteArray0, 8, (-1372));
      String string0 = base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7472);
      BigInteger bigInteger0 = new BigInteger(7472, mockRandom0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(64);
      base64_1.encode(byteArray0, 64, 61);
      base64_0.encode(byteArray0, 61, (-1372));
      Base64.discardWhitespace(byteArray1);
      base64_1.encode(byteArray1, (-1), (-1372));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(7502, mockRandom0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8);
      mockRandom0.ints(8, 1370);
      Base64 base64_1 = new Base64(false);
      base64_0.decode(byteArray0, 64, 2055);
      assertEquals(1252, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(283, byteArray0, false);
      base64_0.encode(byteArray0);
      Object object0 = base64_0.decode((Object) " qujW;306UwH8xV");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.encode((byte[]) null, 64, (-2268));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-2268), 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(802, mockRandom0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8192);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.ints(1, 1370);
      base64_0.readResults(byteArray0, 658, 802);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0, 1, 802);
      base64_0.readResults(byteArray0, 1, 658);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(926);
      mockRandom0.nextInt(926);
      BigInteger bigInteger0 = new BigInteger(926, mockRandom0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray1, false);
      base64_0.decode(byteArray1, 1, 1229);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 7);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 0, 123);
      Base64.decodeInteger(byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(926);
      mockRandom0.nextInt(522);
      BigInteger bigInteger0 = new BigInteger(926, mockRandom0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(105);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-20);
      Base64.encodeBase64(byteArray0, false, false, (int) (byte)10);
      Base64 base64_0 = new Base64(65, byteArray0, false);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(7472);
      BigInteger bigInteger0 = new BigInteger(7472, mockRandom0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(64);
      base64_1.encode(byteArray1, 1, 61);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 7);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 0, 123);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-10);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(6);
      base64_1.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-687), byteArray0, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte) (-106);
      byteArray1[2] = (byte)8;
      base64_0.decode(byteArray1, 2101, (-727));
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.discardWhitespace(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2234, mockRandom0);
      bigInteger0.flipBit(3074);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)61;
      base64_0.decode(byteArray0, 0, (int) (byte)1);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)123;
      Base64 base64_0 = new Base64(8, byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte) (-48), (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -48
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64 base64_0 = new Base64(8227);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)29;
      byteArray0[8] = (byte) (-49);
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)108;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 3506);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(5);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte)18;
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, false, true, 64);
      byte[] byteArray1 = Base64.decodeBase64("t7");
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.getLowestSetBit();
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("$ID[p\"PBU,q1plzQ");
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64 base64_0 = new Base64(8227);
      Base64 base64_1 = new Base64((-1230));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)123;
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 1, 3506);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 1, (-4003));
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)0);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode(byteArray0, 1, 1);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64();
      Base64.isBase64((byte)1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 64, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(514L);
      BigInteger bigInteger0 = new BigInteger((byte)43, 40, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64("t7");
      BigInteger bigInteger3 = BigInteger.ONE;
      bigInteger0.or(bigInteger3);
      bigInteger2.getLowestSetBit();
      Base64.encodeBase64((byte[]) null, true);
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64((byte[]) null, true, false, 40);
      Base64.isBase64((byte)127);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)51;
      base64_0.decode(byteArray0, 206, (-210));
      Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.subtract(bigInteger1);
      bigInteger2.getLowestSetBit();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte)62;
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)62;
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.isBase64((byte)61);
      Random.setNextRandom(470);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)96;
      byteArray0[0] = (byte)96;
      Base64 base64_0 = new Base64(8);
      base64_0.decode(byteArray0, 1, 1);
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 12, (byte)96);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = base64_1.decode("org.apache.commons.codec.EncoderException");
      bigInteger0.getLowestSetBit();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)9;
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64((byte)53);
      base64_1.encode(byteArray1, 86, 1);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      byte byte0 = (byte) (-77);
      byte byte1 = (byte)70;
      Base64 base64_1 = new Base64((byte) (-77));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)70;
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = null;
      Base64 base64_2 = new Base64(24, (byte[]) null, false);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64.isBase64((byte)98);
      Base64 base64_0 = new Base64((byte)98);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, (-1599), 0);
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte) (-93));
      Base64 base64_1 = new Base64(false);
      base64_0.encode(byteArray0, 593, (-574));
      Base64.isBase64(byteArray0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)96;
      byteArray0[0] = (byte)96;
      int int0 = 8;
      Base64 base64_0 = new Base64(8);
      base64_0.decode(byteArray0, 1, 1);
      Base64.isArrayByteBase64(byteArray0);
      byte byte1 = (byte)122;
      Base64.isBase64((byte)102);
      Base64 base64_1 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 8, 3409);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte) (-115), 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)43;
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, (int) (byte)43, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64(true);
      base64_0.encode((byte[]) null, (-459), (-82));
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1, false, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode((String) null);
      Base64.decodeBase64("\b+<i=S-`p]&/HiN");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[3];
      Base64.encodeBase64URLSafe((byte[]) null);
      byte byte0 = (byte) (-93);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-93);
      Base64.encodeBase64String(byteArray0);
      base64_0.avail();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      Base64.encodeBase64URLSafe(byteArray2);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-89);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger2.longValueExact();
      bigInteger0.floatValue();
      BigInteger bigInteger3 = bigInteger1.add(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger4 = bigInteger2.subtract(bigInteger3);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger4);
      byte[] byteArray3 = base64_0.decode("9% !-X2RmI3DfYG=6");
      bigInteger3.getLowestSetBit();
      base64_0.encodeToString(byteArray1);
      Base64.discardWhitespace(byteArray3);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray1, (-1189), (int) (byte) (-1));
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      base64_0.decode((byte[]) null);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      base64_0.avail();
      base64_0.encode(byteArray0, 0, (-1));
      Base64.encodeBase64(byteArray0, false);
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte)7);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.longValueExact();
      bigInteger1.floatValue();
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      Base64.encodeInteger(bigInteger2);
      bigInteger0.subtract(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = base64_0.decode("");
      bigInteger2.getLowestSetBit();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)9;
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)9;
      byteArray3[1] = (byte)9;
      byteArray3[2] = (byte)9;
      byteArray3[3] = (byte)9;
      Base64.encodeBase64URLSafe(byteArray3);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray1, (int) (byte)9, 1505);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      base64_0.encodeToString(byteArray0);
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)76;
      base64_0.readResults(byteArray0, (byte)76, (-1740));
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byteArray1[0] = (byte) (-93);
      base64_0.decode(byteArray1, 0, (int) (byte) (-93));
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)96);
      base64_0.readResults(byteArray0, 0, (byte) (-93));
      base64_0.decode(byteArray2);
      base64_0.encode(byteArray3, 1436, 23);
      Base64.encodeBase64(byteArray0, true);
      Base64.isArrayByteBase64(byteArray3);
      Base64.isBase64((byte)2);
      base64_0.encode(byteArray2, 366, (int) (byte)97);
      Base64.isBase64(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 0, 56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)96;
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byteArray1[0] = (byte) (-93);
      BigInteger bigInteger0 = BigInteger.valueOf(2147483665L);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)76;
      base64_0.readResults(byteArray0, (byte)96, (-1539));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.pow((byte)76);
      bigInteger0.clearBit(12);
      base64_0.readResults(byteArray0, (byte)96, 16);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, (-3217), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3217
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.isBase64("tL[/Y8O2{['GQ`");
      int int0 = 0;
      byte[] byteArray1 = base64_0.decode("tL[/Y8O2{['GQ`");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.longValueExact();
      bigInteger1.floatValue();
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      bigInteger0.subtract(bigInteger1);
      bigInteger1.abs();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 967);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("");
      base64_0.decode("Q");
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, true, 76);
      base64_0.readResults(byteArray0, (-351), (-351));
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.clearBit(76);
      base64_0.readResults(byteArray0, (-351), (-1259));
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64(byteArray0);
      base64_0.hasData();
      base64_0.decode((byte[]) null, 0, 0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.longValueExact();
      bigInteger1.floatValue();
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      BigInteger bigInteger3 = bigInteger0.subtract(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.decode("t7");
      bigInteger2.getLowestSetBit();
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger3);
      base64_0.decode(byteArray2, 96, (-996));
      base64_0.hasData();
      base64_0.encodeToString(byteArray4);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(64, byteArray3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [RkE9PQ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byte byte0 = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      String string0 = "3qgD5CC3Yj[E@qX";
      Base64.isBase64("3qgD5CC3Yj[E@qX");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1, (int) (byte)43, (int) (byte) (-105));
      base64_0.isUrlSafe();
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-124);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.and(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      Object object0 = base64_0.decode((Object) "cbb]wCr");
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, true, true);
      Object object1 = base64_0.encode(object0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Object object2 = base64_0.decode(object1);
      Base64.encodeBase64(byteArray2);
      base64_0.decode(object2);
      base64_0.hasData();
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.intValue();
      Base64.encodeInteger(bigInteger2);
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte) (-102));
      Base64.isBase64(byteArray2);
      base64_0.encode(byteArray1, 0, 66);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 623;
      Base64 base64_0 = new Base64(623);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)96;
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false);
      try { 
        base64_0.encode((Object) "`");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)124;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(3);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray1);
      Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)124);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)124;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(1775);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.decodeBase64("UTF-8");
      Base64 base64_1 = new Base64();
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2, 14, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64((-542), byteArray0, true);
      Base64.isBase64("}c1zG");
      base64_0.encode(byteArray0, (-1670), (int) (byte) (-1));
      base64_0.isUrlSafe();
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64((byte[]) null, true);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 95);
      assertArrayEquals(new byte[] {(byte)116, (byte)65, (byte)65, (byte)13, (byte)10}, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.shortValueExact();
      bigInteger0.divideAndRemainder(bigInteger1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
      
      Base64.isBase64((byte) (-76));
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)124;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.decodeBase64("");
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      Base64.decodeInteger(byteArray2);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      Base64.encodeBase64String(byteArray1);
      base64_0.hasData();
      base64_0.encodeToString(byteArray2);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64((-542), byteArray0, true);
      boolean boolean0 = Base64.isBase64("}c1zG");
      base64_0.encode(byteArray0, (-1670), (int) (byte) (-1));
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      base64_0.decode(byteArray1, 1619, (-1670));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-71), (byte)0}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      base64_0.avail();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(")U*!oZ/baLe1");
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.isBase64(byteArray3);
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.isBase64(byteArray2);
      base64_0.avail();
      Base64.encodeBase64String(byteArray2);
      base64_0.encodeToString(byteArray0);
      base64_0.decode(byteArray1, (-4153), 0);
      base64_0.decode("VW9aL2JhTGU=");
      Base64.decodeBase64(byteArray0);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte) (-108);
      byteArray4[2] = (byte) (-55);
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte) (-119);
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte)38;
      byteArray4[7] = (byte) (-12);
      byteArray4[8] = (byte)93;
      base64_0.encode(byteArray4, (-4153), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.longValueExact();
      bigInteger1.floatValue();
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      bigInteger0.subtract(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = base64_0.decode("t7");
      bigInteger2.getLowestSetBit();
      base64_0.encodeToString(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray2, (-1), (-1));
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)76;
      base64_0.readResults(byteArray0, (byte)76, (-1740));
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byteArray1[0] = (byte) (-93);
      base64_0.decode(byteArray1, 0, (int) (byte) (-93));
      Base64.encodeBase64(byteArray2, true, false, 67);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)97;
      byteArray3[1] = (byte) (-93);
      base64_0.encode(byteArray3, (-1512), (int) (byte) (-93));
      Base64.encodeBase64(byteArray1, true);
      Base64.isArrayByteBase64(byteArray1);
      try { 
        base64_0.encode((Object) "#q2McYe>g");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64((-3276));
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)1;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      bigInteger0.shiftLeft((-3835));
      base64_0.isUrlSafe();
      BigInteger bigInteger1 = bigInteger0.not();
      bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger2);
      bigInteger2.longValueExact();
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)82;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64((byte)0, byteArray1, false);
      Base64.isBase64("");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      String string0 = "";
      Base64.encodeBase64String(byteArray0);
      String string1 = "";
      base64_0.decode((Object) ") than the specified maxium size of ");
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[5];
      Base64.isBase64("tL[/Y8O2{['GQ`");
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-47);
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(48);
      Base64.encodeBase64URLSafe(byteArray0);
      try { 
        base64_1.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      base64_0.decode("");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[0];
      base64_0.decode(byteArray2);
      base64_0.isUrlSafe();
      Base64.isBase64(byteArray1);
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)70;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.valueOf((byte)70);
      bigInteger0.testBit((byte)0);
      Base64.isBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      bigInteger0.gcd(bigInteger1);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64(byteArray2, true);
      base64_0.readResults(byteArray0, (byte)0, (byte)70);
      base64_0.readResults(byteArray0, (byte)70, (byte)0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode("AEY");
      Base64.isBase64((byte)0);
      base64_0.encodeToString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)89;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      Base64.toIntegerBytes(bigInteger0);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)124;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("");
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray1);
      Base64.encodeBase64String(byteArray1);
      base64_0.hasData();
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)94;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)120;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)94;
      Base64.decodeBase64(byteArray2);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      base64_0.decode(byteArray2, (-2344), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte byte0 = (byte)98;
      Base64.isBase64((byte)98);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte)0;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)96;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte) (-117);
      byteArray1[4] = (byte)15;
      byteArray1[5] = (byte) (-11);
      byteArray1[6] = (byte)1;
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("YAAHiw/1AQ==", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)88);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[1];
      byte[] byteArray3 = Base64.decodeBase64("");
      byte byte0 = (byte)0;
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64(byteArray2, false, true);
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, (int) (byte)88, (int) (byte)88);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 88
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null);
      int int0 = 2662;
      Base64.encodeBase64((byte[]) null, false, false, 2662);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigInteger0.compareTo((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)79;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [[\uFFFD\u0000E\u0002\uFFFD\uFFFD\uFFFDO]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)109;
      byteArray0[0] = (byte)109;
      byte byte1 = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byte byte2 = (byte)31;
      byteArray0[2] = (byte)31;
      byte byte3 = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      byte byte4 = (byte)14;
      byteArray0[4] = (byte)14;
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-1309));
      byte[] byteArray1 = new byte[4];
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray2 = new byte[5];
      boolean boolean1 = false;
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode((Object) "");
      byteArray2[0] = (byte)127;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)1;
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      base64_0.decode((byte[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-105);
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.readResults((byte[]) null, 0, 16);
      Base64.encodeBase64((byte[]) null);
      base64_0.readResults((byte[]) null, 16, 56);
      boolean boolean0 = true;
      int int0 = 0;
      base64_0.encode((byte[]) null);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertArrayEquals(new byte[] {(byte)86, (byte)65, (byte)65, (byte)65, (byte)13, (byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-123);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(5, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.compareTo(bigInteger1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValueExact();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.min(bigInteger1);
      bigInteger0.toByteArray();
      bigInteger0.testBit(1443);
      bigInteger0.shiftLeft(2778);
      bigInteger0.intValue();
      bigInteger0.getLowestSetBit();
      bigInteger0.toString((-1));
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      Base64 base64_0 = new Base64(1182);
      int int0 = base64_0.readResults((byte[]) null, (-669), (-1168));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      boolean boolean0 = base64_0.hasData();
      base64_0.encode(byteArray0, 0, 0);
      base64_0.encode(byteArray1, 0, 0);
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      Base64.encodeBase64(byteArray0);
      assertSame(byteArray0, byteArray1);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)96;
      byteArray2[1] = (byte)35;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)77;
      byteArray2[4] = (byte)1;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-17);
      byteArray2[7] = (byte) (-95);
      byteArray2[8] = (byte) (-62);
      base64_0.readResults(byteArray2, 15, (byte)96);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)73;
      byte byte0 = (byte)61;
      byteArray0[3] = (byte)61;
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1271), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000bI=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-100), byteArray0, true);
      base64_0.encodeToString(byteArray0);
      bigInteger0.isProbablePrime(0);
      bigInteger0.abs();
      bigInteger0.bitLength();
      byte[] byteArray2 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray2);
      
      base64_0.readResults(byteArray1, (byte) (-100), (byte) (-100));
      assertArrayEquals(new byte[] {(byte)110, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray0);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      assertEquals(0, byteArray4.length);
  }
}
