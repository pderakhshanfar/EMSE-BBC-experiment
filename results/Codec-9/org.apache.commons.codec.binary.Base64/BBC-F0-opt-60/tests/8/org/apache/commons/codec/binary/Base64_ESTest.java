/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 20:15:18 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64 base64_0 = new Base64(23);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8178, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.intValue();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encodeToString(byteArray2);
      // Undeclared exception!
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1379, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)76;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, (int) (byte)76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base64 base64_0 = new Base64(59);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8248, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8248, mockRandom0);
      mockRandom0.ints();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1);
      Base64.discardWhitespace(byteArray1);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8186, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Base64 base64_0 = new Base64(59);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8248, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8248, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      bigInteger1.modPow(bigInteger0, bigInteger0);
      byte[] byteArray4 = base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray5 = base64_1.encode(byteArray4);
      base64_1.decode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray5);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base64 base64_0 = new Base64();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(76);
      BigInteger bigInteger0 = new BigInteger(8186, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte) (-101));
      base64_0.decode(byteArray0, 89, 8186);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Base64 base64_0 = new Base64(54);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(8181, mockRandom0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte)102;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8186, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)62;
      byteArray2[1] = (byte) (-6);
      base64_0.encode(byteArray2);
      byte[] byteArray3 = base64_0.decode(byteArray1);
      Base64.isBase64((byte)61);
      Base64.isBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1093, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      base64_0.decode(byteArray0, 64, 1093);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64 base64_0 = new Base64(59);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      int int0 = 8186;
      BigInteger bigInteger0 = new BigInteger(8186, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      int int1 = 2088;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 2088, 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2088
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom(64);
      BigInteger bigInteger0 = new BigInteger(1103, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.intValue();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.divideAndRemainder(bigInteger1);
      Base64.isBase64((byte) (-86));
      Base64.decodeBase64("A|mMZ;vWD");
      base64_0.encode(byteArray0, 64, 76);
      base64_0.encode(byteArray0, 78, 64);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom(64);
      BigInteger bigInteger0 = new BigInteger(1103, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.intValue();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.divideAndRemainder(bigInteger1);
      Base64.isBase64((byte) (-86));
      Base64.decodeBase64("A|mMZ;vWD");
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray0, 0, 76);
      base64_0.encode(byteArray0);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-79);
      byteArray0[8] = (byte)55;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.decode(byteArray1);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom(64);
      BigInteger bigInteger0 = new BigInteger(1103, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.intValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(64);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      base64_1.decode(byteArray1, 64, 2331);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      int int0 = 1103;
      MockRandom mockRandom0 = new MockRandom(1819L);
      MockRandom mockRandom1 = new MockRandom(3851L);
      BigInteger bigInteger0 = new BigInteger(1908874353, mockRandom1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      int int1 = (-1);
      base64_0.decode(byteArray0, int1, int0);
      Base64.encodeBase64Chunked(byteArray0);
      byte byte0 = (byte)2;
      Base64.isBase64(byte0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeBase64((byte[]) null, false);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(63);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 63, 958);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom(64);
      BigInteger bigInteger0 = new BigInteger(1103, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      base64_0.decode(byteArray0, 12, 12);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)2);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64(59);
      base64_0.avail();
      byte[] byteArray0 = new byte[7];
      base64_0.encodeToString(byteArray0);
      base64_0.decode("AAAAAAAAAA==\u0000\u0000");
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)18;
      base64_0.decode(byteArray0, (int) (byte)18, (-369));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(63);
      base64_0.encode((byte[]) null);
      base64_0.encode((byte[]) null, (-2017), (-2017));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64 base64_0 = new Base64(59);
      base64_0.avail();
      Base64.isBase64((byte)18);
      byte[] byteArray0 = Base64.decodeBase64("wz*Jg*aOEfO");
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 2919);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom(64);
      BigInteger bigInteger0 = new BigInteger(1103, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.isBase64("");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)9;
      byteArray2[2] = (byte) (-32);
      Base64.discardWhitespace(byteArray2);
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(0, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [QVFBQUFBSUFBQUFEQUFBQUJBQUFBQVVBQUFBR0FBQUFCd0FBQUFnQUFBQUpBQUFBQ2dBQUFBc0FB,
         // QUFNQUFBQURRQUFBQTRBQUFBUEFBQUFFQUFBQUJFQUFBQVNBQUFBRXdBQUFCUUFBQUFWQUFBQUZn,
         // QUFBQmNBQUFBWUFBQUFHUUFBQUJvQUFBQWJBQUFBSEFBQUFCMEFBQUFlQUFBQUh3QUFBQ0FBQUFB,
         // aEFBQUFJZ0E9,
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(63);
      base64_0.encode((byte[]) null);
      base64_0.encode((byte[]) null, (-2017), (-2017));
      Base64.encodeBase64((byte[]) null, false, false, (-1));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-2172), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.mod(bigInteger2);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (-2017), (-1));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(63);
      base64_0.encode((byte[]) null);
      Base64.isBase64("");
      base64_0.encode((byte[]) null);
      Base64 base64_1 = new Base64(63);
      Base64.encodeBase64((byte[]) null);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(63);
      base64_0.encode((byte[]) null);
      base64_0.encode((byte[]) null, (-2017), (-2017));
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.isBase64((byte) (-38));
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      MockRandom mockRandom0 = new MockRandom(64);
      BigInteger bigInteger0 = new BigInteger(1103, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.isBase64("");
      Base64 base64_1 = new Base64(64);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_1.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(63);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 64, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.mod(bigInteger1);
      Base64.encodeBase64(byteArray0, true, false, 30);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)50);
      Base64.decodeBase64("encodeInteger called with null parameter");
      Base64.discardWhitespace(byteArray0);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(605, (byte[]) null, false);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom(64);
      BigInteger bigInteger0 = new BigInteger(1103, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)0);
      BigInteger bigInteger2 = BigInteger.ONE;
      BigInteger bigInteger3 = BigInteger.ONE;
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      byte byte0 = (byte)43;
      Base64.isBase64((byte)43);
      Base64 base64_0 = new Base64(63);
      base64_0.encode((byte[]) null);
      int int0 = (-2172);
      base64_0.encode((byte[]) null, (-2017), (-2017));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-2172), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(2137);
      base64_0.encode(byteArray0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)74);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)74;
      byteArray2[1] = (byte)74;
      byteArray2[2] = (byte) (-11);
      byteArray2[3] = (byte)1;
      byteArray2[5] = (byte)1;
      byteArray2[6] = (byte)74;
      base64_0.decode(byteArray2);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray1, true, true, 88);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom(64);
      BigInteger bigInteger0 = new BigInteger(1103, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger0.mod((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(2137);
      base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)74);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)74;
      byteArray2[1] = (byte)74;
      byteArray2[2] = (byte) (-11);
      byteArray2[3] = (byte)1;
      byteArray2[5] = (byte)1;
      byteArray2[6] = (byte)74;
      base64_0.decode(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true, 34);
      Base64.isBase64(byteArray3);
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-91);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64((byte)123);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-11);
      byteArray2[1] = (byte)74;
      byteArray2[2] = (byte)123;
      byteArray2[3] = (byte) (-91);
      byteArray2[4] = (byte) (-11);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray3 = new byte[0];
      base64_1.decode(byteArray3);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("", (byte) (-11));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(76);
      Base64.decodeBase64(byteArray1);
      base64_1.hasData();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ONE;
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte) (-103);
      byteArray1[2] = (byte) (-103);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte) (-103));
      base64_0.decode((byte[]) null);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      base64_0.decode(byteArray2);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64.isBase64((byte)94);
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 331, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "L<NiPZvsr'>,WdoJ`");
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64(byteArray0, true);
      Base64.isBase64("{pylG");
      Base64.isBase64("L<NiPZvsr'>,WdoJ`");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.pow(64);
      bigInteger0.not();
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1979, byteArray0, false);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.isBase64("");
      Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)27;
      byteArray3[3] = (byte)12;
      byteArray3[4] = (byte) (-1);
      base64_0.decode(byteArray3, 123, (-56));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64.isBase64((byte)94);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)66;
      byte[] byteArray1 = new byte[3];
      byte byte1 = (byte) (-109);
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)66;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, (int) (byte)66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((Object) "L<NiPZvsr'>,WdoJ`");
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64(byteArray0, false);
      Base64.isBase64("{pylG");
      Base64.isBase64("L<NiPZvsr'>,WdoJ`");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.pow(64);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      bigInteger0.getLowestSetBit();
      BigInteger bigInteger2 = bigInteger1.andNot(bigInteger0);
      bigInteger0.max(bigInteger2);
      Base64 base64_1 = new Base64(true);
      base64_1.encodeToString(byteArray1);
      byte[] byteArray2 = base64_1.decode(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((Object) "L<NiPZvsr'>,WdoJ`");
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64(byteArray0, false);
      Base64.isBase64("{pylG");
      Base64.isBase64("L<NiPZvsr'>,WdoJ`");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.pow(64);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      bigInteger0.getLowestSetBit();
      BigInteger bigInteger2 = bigInteger1.andNot(bigInteger0);
      bigInteger0.max(bigInteger2);
      Base64 base64_1 = new Base64(false);
      Base64.decodeBase64("");
      Base64.encodeBase64(byteArray1, false, false, 76);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(2137);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      bigInteger1.isProbablePrime(2137);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64((byte)74);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)74;
      byteArray4[1] = (byte)74;
      byteArray4[2] = (byte) (-11);
      byteArray4[3] = (byte)1;
      byteArray4[4] = (byte)74;
      byteArray4[5] = (byte)1;
      byteArray4[6] = (byte)74;
      base64_0.decode(byteArray4);
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      base64_0.decode(byteArray4);
      Base64.encodeInteger(bigInteger1);
      Base64.decodeInteger(byteArray3);
      Base64.encodeBase64(byteArray4, true, false, (int) (byte)74);
      Base64.discardWhitespace(byteArray5);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.pow((byte)22);
      BigInteger bigInteger2 = bigInteger1.nextProbablePrime();
      bigInteger1.intValueExact();
      bigInteger1.divide(bigInteger0);
      bigInteger1.isProbablePrime((byte)0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)22;
      Base64.encodeBase64URLSafeString(byteArray1);
      bigInteger1.toString(117);
      Base64 base64_0 = new Base64((byte)22);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray2);
      bigInteger3.isProbablePrime((byte)22);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64((byte) (-99));
      base64_0.decode(byteArray3);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      Base64 base64_1 = new Base64(32);
      base64_1.decode(byteArray1);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger2);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray6 = Base64.encodeBase64(byteArray4, false, false, 64);
      Base64.discardWhitespace(byteArray6);
      Base64.isBase64(byteArray5);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64(byteArray1);
      byte byte0 = (byte) (-86);
      byte byte1 = (byte)79;
      Base64.isBase64((byte)79);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)79;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, (int) (byte) (-86));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -86
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)10;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      Base64.isBase64((byte) (-86));
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.mod(bigInteger1);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.pow((byte)22);
      bigInteger1.nextProbablePrime();
      bigInteger1.intValueExact();
      bigInteger1.divide(bigInteger0);
      bigInteger1.isProbablePrime((byte)0);
      bigInteger0.and(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("");
      Base64 base64_0 = new Base64(1383, byteArray1, true);
      bigInteger0.shiftRight(0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode("");
      Base64.isArrayByteBase64(byteArray2);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      bigInteger0.nextProbablePrime();
      base64_0.encode(byteArray3, 123, (-1959));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(669, byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.isBase64("(kqnp");
      bigInteger0.intValue();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode("fSmaN~'K");
      byte[] byteArray1 = base64_0.decode("(kqnp");
      base64_0.decode("g");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64.isBase64((byte)94);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(1409);
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)94, 2929);
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)94;
      base64_0.decode(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray2, false, false, (int) (byte)94);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(669, byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.isBase64("(kqnp");
      bigInteger0.intValue();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode("fSmaN~'K");
      base64_0.decode("(kqnp");
      base64_0.decode("g");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.hasData();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)66;
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-94);
      byte byte1 = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byte byte2 = (byte)102;
      byteArray0[3] = (byte)102;
      byte byte3 = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)3;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-90), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [B\uFFFD\uFFFDf\u0001\u0003]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      base64_0.readResults(byteArray0, 1801, (-581));
      byte[] byteArray1 = Base64.decodeBase64("n!_K^i;Th{B]=");
      Base64.isBase64("");
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64((-896), byteArray0, false);
      base64_1.isUrlSafe();
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.pow((byte)22);
      bigInteger1.nextProbablePrime();
      bigInteger1.intValueExact();
      bigInteger1.divide(bigInteger0);
      bigInteger1.isProbablePrime((byte)0);
      bigInteger0.and(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("");
      Base64 base64_0 = new Base64(1383, byteArray1, true);
      bigInteger0.shiftRight(0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode("");
      Base64.isArrayByteBase64(byteArray2);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      bigInteger0.nextProbablePrime();
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.isUrlSafe();
      Base64.encodeInteger(bigInteger1);
      Base64.decodeInteger(byteArray3);
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)22);
      Base64.discardWhitespace(byteArray3);
      Base64.isBase64(byteArray3);
      Base64.toIntegerBytes(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-1546), 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1546
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64((byte)0);
      base64_0.encode(byteArray0, 284, (-1959));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)4;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("encodeInteger called with null parameter");
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[0];
      Base64.decodeInteger(byteArray2);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((Object) "L<NiPZvsr'>,WdoJ`");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64(byteArray0, false);
      Base64.isBase64("{pylG");
      Base64.isBase64("L<NiPZvsr'>,WdoJ`");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.pow(64);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      bigInteger0.getLowestSetBit();
      BigInteger bigInteger2 = bigInteger1.andNot(bigInteger0);
      BigInteger bigInteger3 = bigInteger0.max(bigInteger2);
      Base64 base64_1 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.toIntegerBytes(bigInteger3);
      Base64.encodeBase64String(byteArray0);
      Object object0 = base64_1.decode((Object) "L<NiPZvsr'>,WdoJ`");
      base64_1.encode(object0);
      Base64 base64_2 = new Base64();
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)33;
      base64_2.decode(byteArray3);
      base64_1.decode(byteArray2);
      Base64.decodeBase64("L<NiPZvsr'>,WdoJ`");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64.isBase64((byte)94);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(1409);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)94, 2929);
      base64_0.hasData();
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)94;
      base64_0.readResults(byteArray3, (-385), (byte)94);
      base64_0.readResults(byteArray2, 0, 3132);
      Base64.isBase64("");
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
      base64_0.decode("");
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-14);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64.isBase64((byte)94);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((byte)94);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)94, 2929);
      base64_0.hasData();
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)94;
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray3, (-385), (byte)94);
      base64_0.decode(byteArray2, (-385), (-385));
      byte[] byteArray4 = base64_0.decode(byteArray1);
      boolean boolean0 = false;
      Base64 base64_1 = new Base64((byte)94, byteArray4, false);
      byte[] byteArray5 = new byte[4];
      byteArray5[0] = (byte)94;
      byteArray5[1] = (byte)94;
      byteArray5[2] = (byte)33;
      byteArray5[3] = (byte)94;
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray5, (-3866), 103);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3866
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-108), (int) (byte)33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -108
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      byte byte2 = (byte)91;
      byteArray0[2] = (byte)91;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64("");
      Base64.isArrayByteBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.avail();
      String string0 = ") than the specified maxium size of ";
      base64_0.decode(") than the specified maxium size of ");
      byte[] byteArray2 = new byte[1];
      Base64.encodeBase64String(byteArray0);
      byteArray2[0] = (byte)82;
      Base64.encodeBase64(byteArray2, true);
      base64_0.encode(byteArray2, 0, 0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      byte byte2 = (byte)82;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)28;
      byte byte3 = (byte) (-47);
      byteArray0[4] = (byte) (-47);
      byte byte4 = (byte)55;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-3126), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\uFFFDR\u001C\uFFFD7\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64.isBase64((byte)94);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(1409);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)94, 2929);
      base64_0.hasData();
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)94;
      base64_0.readResults(byteArray3, (-385), (byte)94);
      base64_0.readResults(byteArray2, 0, 3132);
      Base64.decodeBase64("");
      Base64.isBase64("");
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
      base64_0.decode("");
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)83;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.isProbablePrime(504);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      base64_0.decode(byteArray3);
      Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)64;
      base64_0.encodeToString(byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte) (-125);
      byteArray1[3] = (byte)50;
      byteArray1[4] = (byte) (-74);
      byteArray1[5] = (byte)27;
      Base64.encodeBase64(byteArray1);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)6;
      base64_0.encode(byteArray0);
      base64_0.encode((byte[]) null);
      Base64.decodeBase64("l'");
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)36);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeBase64("GpsUZN`");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Object object0 = base64_0.decode((Object) "GpsUZN`");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)105;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.add(bigInteger1);
      bigInteger0.toString((int) (byte)0);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)51;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)96, 26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 96
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(2243, byteArray0);
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte) (-123);
      byteArray1[0] = (byte) (-123);
      byte byte1 = (byte)84;
      byteArray1[1] = (byte)84;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 1991);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)125;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.pow((byte)22);
      bigInteger1.nextProbablePrime();
      bigInteger1.intValueExact();
      bigInteger1.divide(bigInteger0);
      bigInteger1.isProbablePrime((byte)125);
      bigInteger0.and(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("");
      Base64 base64_0 = new Base64(1383, byteArray1, true);
      bigInteger0.shiftRight(0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode("");
      Base64.isArrayByteBase64(byteArray2);
      base64_0.decode(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
      bigInteger0.nextProbablePrime();
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.isUrlSafe();
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)125;
      byteArray3[1] = (byte)125;
      byteArray3[2] = (byte)125;
      byteArray3[3] = (byte)22;
      base64_0.readResults(byteArray3, 1777, 0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.decode(byteArray0);
      Base64.decodeInteger(byteArray1);
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-44);
      byte byte0 = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)1;
      boolean boolean0 = false;
      boolean boolean1 = false;
      Base64.encodeBase64(byteArray0, false, false, 1981);
      boolean boolean2 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDn&\uFFFD\u0001]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)61;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-127);
      base64_0.decode(byteArray0);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      Base64.decodeInteger(byteArray0);
      byteArray0[1] = (byte) (-30);
      base64_0.decode(byteArray0, (-2968), (-269));
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)116;
      base64_0.readResults(byteArray0, (byte) (-30), (byte) (-30));
      byteArray0[4] = (byte)109;
      Base64.encodeBase64(byteArray0);
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)9;
      base64_0.decode(byteArray0, (int) (byte)109, (int) (byte)44);
      byte[] byteArray1 = base64_0.decode("");
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.decodeInteger(byteArray1);
      base64_0.readResults(byteArray2, (byte)9, 80);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.flipBit(2095);
      BigInteger bigInteger2 = bigInteger0.flipBit(1801);
      BigInteger bigInteger3 = bigInteger1.not();
      bigInteger2.abs();
      bigInteger0.doubleValue();
      bigInteger1.pow(2095);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger1.getLowestSetBit();
      bigInteger0.andNot(bigInteger1);
      bigInteger0.max(bigInteger2);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      try { 
        base64_0.encode((Object) bigInteger3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      int int0 = (-875);
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-875), byteArray0, false);
      Base64.decodeInteger(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)0, 0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      base64_0.decode((Object) "L<NiPZvsr'>,WdoJ`");
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64(byteArray0, false);
      Base64.isBase64("{pylG");
      Base64.isBase64("L<NiPZvsr'>,WdoJ`");
      byte[] byteArray1 = new byte[2];
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("4mS9BHVLCwAA", string0);
      assertFalse(base64_0.isUrlSafe());
  }
}
