/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:51:23 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(8);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(8188);
      base64_0.decode(byteArray1, 76, 76);
      base64_0.encode(byteArray1, 2320, (-1747));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      Base64.decodeBase64("");
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)16;
      byte byte0 = (byte)88;
      byteArray0[2] = (byte)88;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-47);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(8);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)1;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 1582, 1582);
      base64_0.encode(byteArray1, 2320, (-1747));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      int int0 = 453;
      Random.setNextRandom(453);
      int int1 = 2047;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(2047, byteArray0, true);
      Base64.encodeBase64(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = bigInteger0.toByteArray();
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(8);
      base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(76);
      bigInteger1.floatValue();
      base64_1.encode(byteArray0);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, true, false, 8188);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.shiftLeft(8188);
      bigInteger2.testBit(8188);
      mockRandom0.nextInt(8188);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray1, false);
      // Undeclared exception!
      base64_0.encode(byteArray1, 256, 2803);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8196, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 1061, 8196);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.discardWhitespace(byteArray1);
      base64_0.readResults(byteArray1, 1016, 8196);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(8);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      mockRandom0.nextInt(64);
      Base64.encodeInteger(bigInteger1);
      boolean boolean0 = false;
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, true);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 8196, 0L, 426L);
      BigInteger bigInteger0 = new BigInteger(8196, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(false);
      mockRandom0.nextInt(64);
      base64_0.encode(byteArray0, 110, (int) (byte)49);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8188);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[0];
      Base64 base64_1 = new Base64(8188, byteArray2);
      bigInteger1.floatValue();
      byte[] byteArray3 = new byte[5];
      bigInteger0.abs();
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte)113;
      byteArray3[2] = (byte)1;
      byteArray3[3] = (byte)113;
      byteArray3[4] = (byte)49;
      base64_0.encode(byteArray3, (-1028), (int) (byte)1);
      byte[] byteArray4 = base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray3, true);
      // Undeclared exception!
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8196, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(false);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-19);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.decodeInteger(byteArray2);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, (int) (byte)1, (int) (byte)1);
      Base64.isBase64((byte) (-19));
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-87);
      byteArray3[2] = (byte)1;
      byteArray3[3] = (byte)19;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)1;
      byteArray3[7] = (byte)3;
      base64_0.encode(byteArray0, (int) (byte)19, (int) (byte) (-87));
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.divideAndRemainder(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.shiftLeft(8188);
      bigInteger1.testBit(8188);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray0, 8188, 1336);
      Base64.isBase64((byte)94);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(true);
      int int0 = 2;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 73, 8188);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1816
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-19);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.decodeInteger(byteArray2);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, (int) (byte)1, (int) (byte)1);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray2);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-87);
      byteArray3[1] = (byte)82;
      byteArray3[2] = (byte)1;
      byteArray3[3] = (byte)19;
      byteArray3[4] = (byte)82;
      byteArray3[5] = (byte)82;
      byteArray3[6] = (byte)1;
      byteArray3[7] = (byte)3;
      base64_0.encode(byteArray3, (int) (byte)82, (-1599));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)31;
      Base64 base64_0 = new Base64((-480), byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-17);
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte) (-31);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-31);
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)9;
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2021161080;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2021161080, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger1);
      Random.setNextRandom(int0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String(byteArray1);
      base64_0.encode(byteArray2, (-1099), (-1099));
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1042, mockRandom0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64(125);
      byte[] byteArray0 = Base64.decodeBase64("org.apache.comQons.codec.bnary.Base64");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64((-5050));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)10;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_1 = new Base64(1418, byteArray1);
      Object object0 = new Object();
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)10;
      byteArray2[4] = (byte)10;
      byteArray2[5] = (byte)10;
      byteArray2[6] = (byte)10;
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64(125);
      byte[] byteArray0 = new byte[17];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.decodeInteger(byteArray2);
      Base64 base64_1 = new Base64(true);
      base64_0.decode(byteArray2, 16, 15);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)23;
      base64_0.decode(byteArray3, 16, (-179));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64(125);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.discardWhitespace(byteArray1);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(false);
      base64_1.decode(byteArray1, (int) (byte)1, 43);
      base64_1.decode(byteArray1, 125, 64);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64.isBase64((byte)124);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64(1932);
      byte[] byteArray0 = null;
      base64_0.encodeToString((byte[]) null);
      byte byte0 = (byte)46;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)46, 79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-98);
      Base64.isBase64((byte)61);
      base64_0.readResults(byteArray0, 121, 1211);
      BigInteger bigInteger0 = BigInteger.ONE;
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)13;
      Base64.encodeBase64(byteArray0, false);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64((byte)13, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (int) (byte)13, (int) (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64(134);
      Base64.encodeBase64((byte[]) null, true, true);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.negate();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1241);
      Base64.decodeBase64(byteArray0);
      bigInteger0.not();
      base64_0.decode(byteArray1, 1, 1);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 2137, 54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64(15);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      base64_0.encode(byteArray0);
      byteArray0[1] = (byte)24;
      Base64.isBase64((byte)104);
      Object object0 = base64_0.decode((Object) "nS15v y0W}qRYA");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-110);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)52, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [5w==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)11;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.and(bigInteger1);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64("Input array too bg, the output array would be bigger (");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 1430);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64Chunked(byteArray1);
      boolean boolean0 = true;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, (int) (byte)22);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafe(byteArray2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (-1262), 950);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1262
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)6;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      //  // Unstable assertion: assertNull(string0);
      
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.decodeBase64((byte[]) null);
      base64_0.encode((byte[]) null);
      BigInteger bigInteger1 = BigInteger.valueOf((byte)0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      String string1 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertEquals("QUMxNHR5Z0cAAA==", string1);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int0);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false, true);
      byte[] byteArray5 = base64_0.decode("QUMxNHR5Z0cNCg==");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)67, (byte)49, (byte)52, (byte)116, (byte)121, (byte)103, (byte)71, (byte)13, (byte)10}, byteArray5);
      
      base64_0.readResults(byteArray4, (-1154), 0);
      byte[] byteArray6 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray6);
      
      byte[] byteArray7 = base64_0.decode(byteArray4);
      //  // Unstable assertion: assertEquals(10, byteArray7.length);
      //  // Unstable assertion: assertEquals(14, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)67, (byte)49, (byte)52, (byte)116, (byte)121, (byte)103, (byte)71, (byte)0, (byte)0}, byteArray7);
      
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray3);
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-15);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)91;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64(byteArray1, true, true, 1360);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray0, true);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray2, true, true, (int) (byte)91);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)15;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray0[8] = (byte) (-42);
      byteArray1[3] = (byte) (-42);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)61;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-42), byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\u0000\uFFFD\u0000=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.avail();
      Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.discardWhitespace(byteArray2);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      base64_0.decode("");
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)72;
      byteArray0[0] = (byte)72;
      byte byte1 = (byte)64;
      byteArray0[1] = (byte)64;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte) (-3);
      Base64 base64_0 = new Base64(true);
      base64_0.decode((String) null);
      base64_0.isUrlSafe();
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.decodeInteger(byteArray1);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)72;
      Base64 base64_0 = new Base64();
      base64_0.decode("");
      base64_0.isUrlSafe();
      Base64.decodeBase64((String) null);
      Base64.decodeInteger(byteArray0);
      base64_0.decode((Object) "");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)72, 1908874353);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 72
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64((-1659));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[1] = (byte)1;
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.isUrlSafe();
      Base64 base64_1 = new Base64(76, byteArray0, true);
      base64_1.decode(byteArray1, (int) (byte)0, (int) (byte)1);
      base64_1.hasData();
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)32;
      byteArray3[2] = (byte)1;
      Base64.encodeBase64(byteArray3, false, true);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(119);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray1);
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 0, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64((-1352));
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)36;
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(64, byteArray1, false);
      byte[] byteArray2 = base64_0.decode("j]iB:D");
      base64_0.isUrlSafe();
      byte[] byteArray3 = Base64.decodeBase64("");
      Base64.decodeInteger(byteArray2);
      Base64 base64_1 = new Base64();
      base64_1.decode((Object) "");
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      Base64.isBase64("");
      base64_0.encode(byteArray1, 0, (int) (byte) (-53));
      base64_0.decode(byteArray3);
      Base64.decodeInteger(byteArray4);
      Base64.encodeBase64(byteArray4, false, true, 1061);
      Base64.decodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray0 = new byte[1];
      Base64.isBase64("");
      byteArray0[0] = (byte)0;
      base64_0.decode(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false, 97);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-7), (byte)11}, byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      Base64.isBase64("Hnm/|xhQ79MEUTK[");
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)76;
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray1 = base64_0.decode("");
      base64_0.isUrlSafe();
      Base64.decodeBase64("");
      Base64.decodeInteger(byteArray0);
      base64_0.decode((Object) "");
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64((-1659));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.readResults(byteArray0, (-1659), 0);
      String string0 = "";
      base64_0.decode("");
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64(byteArray1, false, false, 1);
      base64_0.avail();
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64(3749);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(0, byteArray2.length);
      
      byteArray0[3] = (byte) (-4);
      Base64.decodeInteger(byteArray0);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)0;
      base64_0.encode(byteArray0, 0, (-1174));
      byte[] byteArray3 = new byte[0];
      base64_0.decode(byteArray3, (int) (byte)109, (-1077));
      byte[] byteArray4 = Base64.decodeBase64("");
      String string0 = Base64.encodeBase64String(byteArray4);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte) (-60);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-106), (byte)106}, byteArray2);
      assertEquals(3, byteArray2.length);
      assertEquals(8, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger.valueOf(4689L);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-53);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-1086), (int) (byte)83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1086
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(112);
      byte byte0 = (byte)61;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      byte[] byteArray2 = null;
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)104;
      Base64.isBase64("");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      bigInteger0.bitCount();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      bigInteger0.compareTo(bigInteger1);
      bigInteger1.modPow(bigInteger0, bigInteger0);
      bigInteger0.shiftLeft(64);
      bigInteger1.nextProbablePrime();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64((byte)85);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(64, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [ZlXuaAAAAAAA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.decode((Object) "f-_~20");
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)61;
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray2);
      byte[] byteArray6 = base64_0.decode(byteArray3);
      assertArrayEquals(new byte[] {(byte)0, (byte)61, (byte)0}, byteArray6);
      
      boolean boolean0 = Base64.isBase64("f-_~20");
      byte[] byteArray7 = Base64.encodeBase64URLSafe(byteArray5);
      assertArrayEquals(new byte[] {(byte)85, (byte)70, (byte)69, (byte)57, (byte)80, (byte)81}, byteArray7);
      assertEquals(6, byteArray7.length);
      
      boolean boolean1 = base64_0.isUrlSafe();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("Hnm/|xhQ79MEUTK[");
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(4, byteArray1.length);
      assertEquals(3, byteArray2.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      Base64.encodeBase64(byteArray0);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      base64_0.encode(byteArray0);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte)81;
      base64_0.decode(byteArray0, (int) (byte)0, 67);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)76;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode((Object) "");
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)76);
      assertArrayEquals(new byte[] {(byte)121, (byte)48, (byte)119, (byte)61}, byteArray2);
      
      base64_0.avail();
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      Object object2 = base64_0.encode(object1);
      assertSame(object2, object1);
      
      Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(3749);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)36;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byteArray0[3] = (byte) (-4);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)0;
      base64_0.encode(byteArray0, 0, (-1174));
      bigInteger0.intValueExact();
      Object object0 = new Object();
      Base64.discardWhitespace(byteArray2);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = base64_0.decode("c");
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeBase64(byteArray1);
      Base64 base64_1 = new Base64(0, byteArray2, false);
      base64_1.encode(byteArray1);
      base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)0);
      byte[] byteArray3 = base64_1.decode(byteArray0);
      Base64 base64_2 = new Base64(64);
      base64_2.decode("]");
      base64_1.encodeToString(byteArray1);
      Base64.isArrayByteBase64(byteArray3);
      Base64.encodeBase64(byteArray3, false, false, (int) (byte)0);
      base64_2.avail();
      try { 
        base64_2.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64(923);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)105;
      byteArray2[1] = (byte)0;
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(3, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)105, (byte)0, (byte)0}, byteArray3);
      
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)122;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)42;
      byteArray4[4] = (byte) (-60);
      byteArray4[5] = (byte) (-60);
      byteArray4[6] = (byte)105;
      byteArray4[7] = (byte) (-111);
      byteArray4[8] = (byte) (-111);
      byte[] byteArray5 = Base64.decodeBase64(byteArray4);
      assertArrayEquals(new byte[] {(byte) (-50)}, byteArray5);
      assertEquals(1, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)13;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 787, (-2055));
      base64_0.encode(byteArray0, 0, (int) (byte)0);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte)81;
      base64_0.decode(byteArray0, (int) (byte)0, 67);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      base64_0.decode((byte[]) null, 1, (-308));
      int int0 = 0;
      Base64.encodeBase64((byte[]) null, false, false, 0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64(2681, (byte[]) null, true);
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertNull(byteArray0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte) (-111);
      byteArray0[8] = (byte) (-13);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte) (-111);
      Base64.isBase64(byteArray0);
      Base64.isBase64("");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      bigInteger0.bitCount();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.compareTo(bigInteger0);
      bigInteger0.modPow(bigInteger1, bigInteger1);
      bigInteger0.shiftLeft((-3473));
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte) (-3));
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [H@\u0000\uFFFD\u0000\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(119);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byte[] byteArray1 = base64_0.decode("|=:hGrY?Z5W^`>L=V");
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      byteArray0[1] = (byte)0;
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      byteArray0[2] = (byte)0;
      base64_0.encode(byteArray2);
      base64_0.encode(byteArray1, 0, 0);
      byte[] byteArray3 = base64_0.decode(byteArray0);
      base64_0.decode("6");
      base64_0.encodeToString(byteArray3);
      Base64.isArrayByteBase64(byteArray2);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)99;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)105;
      byteArray4[5] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray4, true, true, (-418));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -418
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.shortValueExact();
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.modInverse(bigInteger1);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, (-236), (-1156));
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-2206), 1642);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2206
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64((-2578));
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.negate();
      bigInteger0.toString();
      byte[] byteArray0 = new byte[3];
      base64_0.encode(byteArray0);
      byteArray0[0] = (byte)13;
      bigInteger1.intValue();
      // Undeclared exception!
      try { 
        bigInteger1.testBit((-2578));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-28);
      byteArray2[1] = (byte) (-28);
      Base64.encodeInteger(bigInteger0);
      byteArray2[2] = (byte) (-28);
      byteArray2[3] = (byte) (-28);
      byteArray2[4] = (byte) (-28);
      byteArray2[5] = (byte) (-28);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.readResults((byte[]) null, (byte) (-28), 115);
      base64_0.readResults(byteArray1, 115, 0);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)123;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(36, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000a0{]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)0;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.hasData();
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1043), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AYEA0zZuAAA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64(923);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)61;
      Base64.decodeBase64(byteArray0);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)0;
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)61;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode(byteArray1, (-878), (-4046));
      int int0 = 0;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64("");
      byte[] byteArray0 = null;
      byte[] byteArray1 = new byte[0];
      Base64.decodeBase64(byteArray1);
      base64_0.encodeToString((byte[]) null);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, 0, 0);
      Base64.encodeBase64(byteArray0, false);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)16;
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[1];
      Base64.isBase64("");
      byteArray1[0] = (byte)0;
      base64_0.decode(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte)0;
      Base64.isArrayByteBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)76;
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode((Object) "");
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString(76);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64();
      int int0 = base64_0.readResults((byte[]) null, (-2673), (-2673));
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("{jAa ");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (-6122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -6122
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64(43);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      base64_0.readResults(byteArray0, (-1586), 74);
      base64_0.decode(byteArray0);
      byteArray0[1] = (byte) (-1);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("Mf8=\r\n", string0);
      
      byte[] byteArray2 = base64_0.decode("Mf8=\r\n");
      Base64.decodeInteger(byteArray2);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-1)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-26);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)79, (byte)89, (byte)61, (byte)13, (byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64(459);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = base64_0.decode("");
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.flipBit(0);
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      bigInteger1.doubleValue();
      int int0 = 0;
      bigInteger1.add(bigInteger2);
      bigInteger1.max(bigInteger0);
      bigInteger0.longValue();
      bigInteger1.pow(0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
      try { 
        base64_0.encode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Base64 base64_0 = new Base64(3749);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)36;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      byteArray0[3] = (byte) (-4);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)0;
      base64_0.encode(byteArray0, 0, (-1174));
      bigInteger0.intValueExact();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)31;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000Q\u0000?\u0000\u001F]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-118);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAn_zciAAAGK", string0);
      
      Base64 base64_0 = new Base64((byte) (-1), byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = base64_0.decode("AAn_zciAAAGK");
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)9, (byte) (-1), (byte) (-51), (byte) (-56), (byte) (-128), (byte)0, (byte)1, (byte) (-118)}, byteArray1);
      
      Object object0 = base64_0.decode((Object) "AAn_zciAAAGK");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-98);
      byteArray0[7] = (byte)86;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(11, byteArray1.length);
  }
}
