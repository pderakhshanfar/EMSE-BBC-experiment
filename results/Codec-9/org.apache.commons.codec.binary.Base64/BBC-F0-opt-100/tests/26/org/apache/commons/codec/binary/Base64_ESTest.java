/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:22:19 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1655);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, (int) (byte)10);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)81, (byte)81, (byte)61, (byte)61}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("IM{L+@;");
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-62), (byte) (-2)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.encode((byte[]) null, 0, 0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(11, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(11, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[0];
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false, false);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-123);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-123), (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotNull(bigInteger0);
      assertEquals((short) (-31488), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-123), (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte) (-30);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-30)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-30), bigInteger0.byteValue());
      assertEquals((short)226, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-30)}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("AF0=");
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)93}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)13, (byte)10}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)13, (byte)10}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.decode((String) null);
      assertNull(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)93, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.decode("gE^w~`}C?");
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)76, (byte)2}, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_1 = new Base64();
      assertNotNull(base64_1);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      
      base64_1.decode(byteArray1, 1, (int) (byte)93);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      
      int int0 = base64_1.avail();
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(1, int0);
      assertNotSame(base64_1, base64_0);
      assertFalse(base64_1.equals((Object)base64_0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, (-2035), (-2035));
      assertEquals(8, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-2035), 1636);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64(8192, byteArray1, true);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8239);
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertEquals(1376, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(1376, byteArray0.length);
      assertEquals(1886, byteArray1.length);
      assertNotNull(byteArray1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(1376, byteArray0.length);
      assertEquals(1886, byteArray1.length);
      assertEquals(2584, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertEquals(1376, byteArray0.length);
      assertEquals(1886, byteArray1.length);
      assertEquals(2584, byteArray2.length);
      assertEquals(3540, byteArray3.length);
      assertNotNull(byteArray3);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8239);
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertEquals(1376, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(1376, byteArray0.length);
      assertEquals(1886, byteArray1.length);
      assertNotNull(byteArray1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(1376, byteArray0.length);
      assertEquals(1886, byteArray1.length);
      assertEquals(2584, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertEquals(1376, byteArray0.length);
      assertEquals(1886, byteArray1.length);
      assertEquals(2584, byteArray2.length);
      assertEquals(3540, byteArray3.length);
      assertNotNull(byteArray3);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8239);
      assertNotNull(bigInteger1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertEquals(1376, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(1376, byteArray0.length);
      assertEquals(1886, byteArray1.length);
      assertNotNull(byteArray1);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(1376, byteArray0.length);
      assertEquals(1886, byteArray1.length);
      assertEquals(2584, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertEquals(1376, byteArray0.length);
      assertEquals(1886, byteArray1.length);
      assertEquals(2584, byteArray2.length);
      assertEquals(3540, byteArray3.length);
      assertNotNull(byteArray3);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      assertEquals(1376, byteArray0.length);
      assertEquals(1886, byteArray1.length);
      assertEquals(2584, byteArray2.length);
      assertEquals(3540, byteArray4.length);
      assertNotNull(byteArray4);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, false, false, 8239);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 64, 1003);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8239);
      assertNotNull(bigInteger1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertEquals(1376, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(6);
      assertNotNull(base64_1);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      
      byte[] byteArray1 = base64_1.encode(byteArray0);
      assertEquals(1376, byteArray0.length);
      assertEquals(2754, byteArray1.length);
      assertNotNull(byteArray1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(1376, byteArray0.length);
      assertEquals(2754, byteArray1.length);
      assertEquals(3770, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertTrue(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = base64_1.encode(byteArray2);
      assertEquals(1376, byteArray0.length);
      assertEquals(2754, byteArray1.length);
      assertEquals(3770, byteArray2.length);
      assertEquals(7542, byteArray3.length);
      assertNotNull(byteArray3);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertTrue(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(base64_0, base64_1);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      // Undeclared exception!
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64((byte)1, byteArray1, false);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(46, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) "US-ASCII");
      assertEquals(0, byteArray0.length);
      assertNotNull(object0);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, object0);
      
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 2174, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8239);
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertEquals(1376, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(1030, byteArray1.length);
      assertNotNull(byteArray1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_1 = new Base64(6, byteArray1, true);
      assertEquals(1030, byteArray1.length);
      assertNotNull(base64_1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertTrue(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      
      byte[] byteArray2 = base64_1.encode(byteArray0);
      assertEquals(1376, byteArray0.length);
      assertEquals(1030, byteArray1.length);
      assertEquals(474605, byteArray2.length);
      assertNotNull(byteArray2);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertTrue(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      // Undeclared exception!
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(11, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(76, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAAAAAAAAAA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)65);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)13, (byte)10}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 64);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, true, 2870);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertNull(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64((byte) (-1), byteArray0, true);
      assertEquals(8, byteArray0.length);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertTrue(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)119);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)12);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_1 = new Base64();
      assertNotNull(base64_1);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      
      base64_1.decode(byteArray1, (int) (byte)0, (int) (byte)93);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64((byte)0);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(7, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64(1289, byteArray0, true);
      assertEquals(8, byteArray0.length);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 1289);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.decode(byteArray0, (int) (byte)93, (-1210));
      assertEquals(2, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)93);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      base64_0.decode(byteArray1, (int) (byte)93, 1);
      assertEquals(2, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8192);
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertEquals(1368, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)93, 1598);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1368
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 1020);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8263);
      assertNotNull(bigInteger1);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertEquals(1380, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 17, 17);
      assertEquals(1380, byteArray0.length);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      base64_0.encode(byteArray0, 17, (-486));
      assertEquals(1380, byteArray0.length);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8238);
      assertNotNull(bigInteger1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(1031, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      Base64 base64_0 = new Base64(8238);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 10, 10);
      assertEquals(1031, byteArray0.length);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      base64_0.encode(byteArray0, 10, (-472));
      assertEquals(1031, byteArray0.length);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.decode("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_0 = new Base64((byte)39, byteArray1, false);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertNull(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(533);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      try { 
        base64_0.encode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)93, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) "AF0=");
      assertEquals(2, byteArray0.length);
      assertNotNull(object0);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, object0);
      
      Object object1 = base64_0.encode(object0);
      assertEquals(2, byteArray0.length);
      assertNotNull(object1);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, object1);
      assertNotSame(byteArray0, object0);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertFalse(byteArray0.equals((Object)object0));
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)13, (byte)10}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)13, (byte)10}, byteArray1);
      assertTrue(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)9}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)32, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)9, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-2160));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -2160
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) "PDw8ADw8");
      assertNotNull(object0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Object object1 = base64_0.decode(object0);
      assertNotNull(object1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("_N +~N<E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-41));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Base64 base64_1 = new Base64();
      assertNotNull(base64_1);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(base64_1.equals((Object)base64_0));
      
      base64_1.decode(byteArray1, (int) (byte)0, (int) (byte)93);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8217);
      assertNotNull(bigInteger1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertEquals(1372, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.decode(byteArray0, 1366, 1366);
      assertEquals(1372, byteArray0.length);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)126;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-87), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("qQAAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(5);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals("AAAA\r\nAAAA\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, (-1275), (-1275));
      assertEquals(2, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-3219), 8192);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8263);
      assertNotNull(bigInteger1);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertEquals(1380, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 17, 17);
      assertEquals(1380, byteArray0.length);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      
      base64_0.encode(byteArray0, 17, (-486));
      assertEquals(1380, byteArray0.length);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(12, byteArray1.length);
      assertNotNull(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      int int0 = base64_0.readResults(byteArray0, 18, 474);
      assertEquals(8, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals((-1), int0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = Base64.decodeBase64("");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = base64_0.readResults(byteArray0, (-1), (-1));
      assertEquals(0, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(1908874353);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      int int0 = base64_0.avail();
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0, 0, (-693));
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-1), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAA=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64(455, (byte[]) null, true);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAAAAAAAAAAAAAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAAA", string0);
      
      base64_0.encode(byteArray0, 785, 343);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
  }
}
