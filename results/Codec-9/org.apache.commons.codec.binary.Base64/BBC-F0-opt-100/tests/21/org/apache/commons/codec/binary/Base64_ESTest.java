/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 16:10:40 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(5);
      base64_0.encode(byteArray1, 79, 5);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray2);
      Object object0 = new Object();
      try { 
        base64_1.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(883, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(883);
      base64_0.decode(byteArray0, 1, 22);
      bigInteger0.testBit(22);
      base64_0.readResults(byteArray0, 85, 15);
      base64_0.encode(byteArray1, 85, (-1));
      Base64.encodeBase64(byteArray0, false, true, 883);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(594);
      base64_0.decode(byteArray0, 594, 5);
      base64_0.encode(byteArray0, (-3033), (-43));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(883, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(883);
      base64_0.decode(byteArray0, 1, 22);
      base64_0.encode(byteArray1, 85, (-1));
      Base64.encodeBase64(byteArray0, false, true, 883);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(5);
      base64_0.readResults(byteArray1, 8193, 79);
      base64_0.decode(byteArray1, 79, 85);
      Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      base64_0.readResults(byteArray0, 79, 0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(5);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray4);
      Base64.isBase64(byteArray2);
      base64_0.decode(byteArray3, 5, 2457);
      // Undeclared exception!
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8217, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.negate();
      mockRandom0.longs();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      bigInteger1.divideAndRemainder(bigInteger1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      base64_0.decode(byteArray3, 8193, 76);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      byte[] byteArray5 = base64_0.decode(byteArray4);
      base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray5, false, false, 8193);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.doubles();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(5);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.andNot(bigInteger1);
      mockRandom0.longs();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray1, 1, 357);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      mockRandom0.nextBytes(byteArray2);
      base64_0.decode(byteArray3, 8193, 8192);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray4);
      // Undeclared exception!
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.longs();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(5);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray1, 1, 357);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      base64_0.decode(byteArray3, 5, 8192);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray3);
      // Undeclared exception!
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Base64.isBase64((byte)38);
      Random.setNextRandom((byte)38);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)38;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byteArray0[6] = (byte) (-88);
      base64_0.encode(byteArray0, (-488), (int) (byte) (-88));
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-507), 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(2495, byteArray0, true);
      Object object0 = base64_0.decode((Object) " 04");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1609L));
      BigInteger bigInteger0 = new BigInteger(8188, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 223, 8188);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 8188, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      BigInteger bigInteger0 = new BigInteger(1968526677, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8193);
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray1);
      Base64 base64_1 = new Base64(1254);
      base64_1.decode(byteArray1, 76, 76);
      assertEquals(1364, byteArray0.length);
      assertEquals(1868, byteArray1.length);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      int int0 = base64_1.avail();
      assertEquals(54, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)4;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.pow((byte)90);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)90;
      byteArray2[1] = (byte)62;
      byteArray2[2] = (byte)62;
      byteArray2[3] = (byte) (-22);
      byteArray2[4] = (byte)32;
      byteArray2[5] = (byte) (-24);
      byteArray2[6] = (byte)32;
      byteArray2[7] = (byte)4;
      byteArray2[8] = (byte)32;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(6, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)62, (byte)62, (byte) (-22), (byte) (-24), (byte)4}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[12] = (byte) (-54);
      Base64 base64_0 = new Base64(19, byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(8193);
      BigInteger bigInteger0 = new BigInteger(8193, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8193, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger2);
      base64_0.decode(byteArray0, (-2081), (-2081));
      boolean boolean0 = Base64.isBase64((byte) (-77));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(912, byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Base64.isBase64((byte)61);
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-1);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64((byte)8);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64(") than the specified maxium size of ");
      byte[] byteArray2 = base64_0.decode("");
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      String string0 = base64_1.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("QUFnSf//\uFFFD\uFFFD", string0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byte byte1 = (byte) (-54);
      byte byte2 = (byte)34;
      Base64 base64_0 = new Base64(1154, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray2);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray1, (int) (byte)0, 21);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-1), (byte) (-1)}, byteArray1);
      
      byte[] byteArray3 = base64_1.encode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte) (-1), (byte) (-1)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte) (-1));
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 940);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte byte0 = (byte)64;
      Base64.isBase64((byte)64);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = null;
      base64_0.encodeToString((byte[]) null);
      Base64 base64_2 = new Base64((byte)74);
      Base64.encodeBase64((byte[]) null, true, true);
      // Undeclared exception!
      try { 
        base64_2.decode((byte[]) null, (-1139), 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_1 = new Base64(true);
      base64_0.encode(byteArray1, (-2241), (-1));
      Base64.isBase64(byteArray0);
      base64_0.hasData();
      base64_0.readResults(byteArray3, (byte)0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte) (-39));
      Base64.isBase64((byte)123);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("");
      byte[] byteArray3 = new byte[0];
      Base64.encodeBase64(byteArray3, false, false, (int) (byte)53);
      Base64.discardWhitespace(byteArray2);
      Base64 base64_0 = new Base64((byte) (-39), byteArray1);
      Base64.encodeBase64String(byteArray1);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)54);
      Base64 base64_1 = new Base64(54);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_2 = new Base64(true);
      base64_0.encode(byteArray1, (-3023), 678);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray1);
      Base64.isBase64((byte)51);
      Base64.isBase64((byte)15);
      Base64.encodeBase64String(byteArray1);
      String string0 = "NL\\uLT&x F4=dA-jL-K";
      Base64.decodeBase64(string0);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray0, true, false, 10);
      base64_0.encode(byteArray0, (int) (byte)15, (-1802));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      Base64.isBase64("");
      int int0 = 74;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64((byte[]) null, true, false);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = base64_0.decode("m'`=7M%Ez1]QHt");
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)9;
      byteArray2[1] = (byte)9;
      byteArray2[2] = (byte)52;
      byteArray2[3] = (byte)1;
      base64_0.encodeToString(byteArray2);
      Base64.isArrayByteBase64(byteArray2);
      Base64 base64_2 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_3 = new Base64(79, (byte[]) null);
      base64_3.encodeToString(byteArray1);
      Base64.decodeBase64("CQk0AQ==");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-54);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64((byte[]) null, false);
      Base64 base64_1 = new Base64(387, (byte[]) null, false);
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 3485, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 1, 21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64(15, byteArray0);
      base64_1.decode("Z*{,");
      Base64.encodeBase64(byteArray1, false, false, 123);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = new byte[8];
      Base64.encodeBase64(byteArray1, true, false);
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      Base64.encodeBase64(byteArray2, true);
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray2, (int) (byte)0, (-364));
      base64_1.avail();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = null;
      Base64.encodeBase64(byteArray1, false, false);
      Base64.isBase64(byteArray0);
      String string0 = "m'`=7M%Ez1]QHt";
      base64_0.decode("m'`=7M%Ez1]QHt");
      base64_0.encodeToString(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_1 = new Base64();
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64((byte)27, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u001B\u001D\u0000u>\u0000\t\u0001\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray2);
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null);
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)40;
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray2);
      Base64.decodeBase64("QUE9PQ==");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64((-567));
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      base64_1.isUrlSafe();
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null, true);
      Object object0 = new Object();
      try { 
        base64_1.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte) (-54);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte) (-54);
      byteArray1[7] = (byte) (-1);
      byteArray1[8] = (byte)123;
      Base64.encodeBase64(byteArray1, false);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 1546);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      Base64.encodeBase64(byteArray2, true);
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray1, 1, 21);
      base64_1.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)74;
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      Base64 base64_1 = new Base64((byte)9);
      Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)74;
      Base64.encodeBase64String(byteArray1);
      Base64.decodeBase64("5RNi4p");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-96);
      base64_0.decode(byteArray0, 2164, (-1));
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64(byteArray2);
      Base64.encodeBase64String(byteArray1);
      Base64.decodeBase64("AA==");
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)0;
      base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (int) (byte)0, 4422);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(2623, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64String(byteArray1);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, false);
      Base64.isBase64(byteArray2);
      base64_0.decode("UVVu8|qY0*");
      base64_0.decode(byteArray1);
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte) (-88);
      byteArray4[1] = (byte) (-54);
      byteArray4[2] = (byte) (-43);
      base64_0.encodeToString(byteArray4);
      Base64.isArrayByteBase64(byteArray4);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray3);
      base64_1.encode(byteArray0);
      Base64.isBase64("");
      Base64.isBase64((byte)79);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "NU uJ");
      Object object1 = base64_0.decode(object0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)112;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-73);
      byteArray2[3] = (byte)5;
      byteArray2[4] = (byte) (-31);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)5;
      base64_0.encode(byteArray2);
      base64_0.encode(object1);
      Base64.encodeBase64(byteArray1);
      base64_0.hasData();
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64((byte)118);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64((byte)118);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      Base64.encodeBase64((byte[]) null, false, true);
      Base64.isBase64(byteArray2);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      byte[] byteArray3 = base64_0.decode(byteArray0);
      base64_0.encodeToString(byteArray3);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_1 = new Base64((byte) (-101));
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)118;
      byteArray4[1] = (byte)88;
      base64_1.encode(byteArray4);
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.encodeBase64URLSafeString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64((byte)118);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-4);
      byteArray1[1] = (byte) (-7);
      byteArray1[2] = (byte) (-7);
      byteArray1[3] = (byte) (-4);
      byteArray1[4] = (byte) (-101);
      byteArray1[5] = (byte) (-4);
      byteArray1[6] = (byte) (-4);
      byteArray1[7] = (byte) (-4);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64((-3498), byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(false);
      base64_1.encodeToString(byteArray2);
      Base64.encodeBase64(byteArray1, false, false, 88);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)104;
      byteArray0[3] = (byte)57;
      Base64 base64_0 = new Base64((byte)115);
      base64_0.hasData();
      Base64.decodeInteger(byteArray0);
      Random.setNextRandom(76);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_1.decode(byteArray0, (-988), 0);
      Base64 base64_2 = new Base64();
      base64_2.encode(byteArray1);
      Base64.encodeBase64(byteArray1, true, true, 25);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray0, (int) (byte)0, 1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 1140);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64((byte)1);
      Base64 base64_1 = new Base64(0);
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_2 = new Base64(76, byteArray1, false);
      Base64 base64_3 = new Base64();
      try { 
        base64_3.decode((Object) base64_2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)117;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "");
      Base64.encodeBase64((byte[]) null, true, true);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)1;
      Base64 base64_1 = new Base64(76, byteArray2);
      Base64 base64_2 = new Base64((byte)1, byteArray1);
      // Undeclared exception!
      try { 
        base64_2.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 37, 375);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte byte0 = (byte)78;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      boolean boolean0 = true;
      int int0 = 162;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(162, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [4\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64(1, (byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      MockRandom mockRandom0 = new MockRandom(76);
      BigInteger bigInteger0 = BigInteger.probablePrime(76, mockRandom0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.decodeBase64("2BAf-)v.cEHE]");
      base64_0.decode((byte[]) null, (-903), (-903));
      Base64.encodeBase64((byte[]) null, false);
      try { 
        base64_0.encode((Object) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64(1, (byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      MockRandom mockRandom0 = new MockRandom(76);
      BigInteger bigInteger0 = BigInteger.probablePrime(76, mockRandom0);
      bigInteger0.toByteArray();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.decodeBase64("2BAf-)v.cEHE]");
      base64_0.decode((byte[]) null, (-903), (-903));
      Base64.decodeBase64("L;-YOT(zn");
      Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, true);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-2390), (byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      MockRandom mockRandom0 = new MockRandom(76);
      BigInteger bigInteger0 = BigInteger.probablePrime(76, mockRandom0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.isBase64("");
      Base64 base64_1 = new Base64(76, byteArray1, false);
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 45, (-1903));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64.isBase64("4okSb*Ygt^)jG");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = base64_0.decode("");
      Base64.encodeBase64(byteArray0, true, false, 76);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("", string0);
      
      base64_0.decode((Object) "");
      byte[] byteArray5 = Base64.encodeBase64(byteArray1, false, true);
      Base64.isBase64(byteArray5);
      base64_0.decode("");
      byte[] byteArray6 = base64_0.decode(byteArray4);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray4);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray6);
      base64_1.encodeToString(byteArray6);
      byte[] byteArray7 = base64_1.encode(byteArray2);
      assertFalse(base64_1.isUrlSafe());
      assertSame(byteArray7, byteArray3);
      assertSame(byteArray0, byteArray6);
      
      Base64.isBase64("");
      boolean boolean1 = Base64.isBase64((byte)16);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64 base64_1 = new Base64(76);
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      Base64.encodeBase64String(byteArray4);
      base64_1.isUrlSafe();
      Base64.decodeBase64((String) null);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_1.decode("Z*{,");
      Base64.encodeBase64((byte[]) null, false, false, 1964);
      base64_1.encode((byte[]) null, 1929, 373);
      assertNotSame(base64_1, base64_0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1305), byteArray0, true);
      byte[] byteArray1 = base64_0.decode("swY?4#Y#}h");
      assertArrayEquals(new byte[] {(byte) (-77), (byte)6, (byte)56, (byte)98}, byteArray1);
      assertEquals(4, byteArray1.length);
      
      int int0 = base64_0.readResults(byteArray0, 1, (byte) (-54));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.encodeToString(byteArray0);
      base64_0.decode("");
      Base64.encodeBase64(byteArray0, true, false, 76);
      base64_0.avail();
      int int0 = (-429);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        base64_0.decode((Object) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)22;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.decodeBase64("62VA\"e1uINE");
      Base64.isBase64("");
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray1, 23, (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)101, (byte)64, (byte)123, (byte)91, (byte) (-120), (byte)52}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.shortValueExact();
      BigInteger bigInteger1 = bigInteger0.shiftRight(0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.divideAndRemainder(bigInteger1);
      bigInteger0.subtract(bigInteger1);
      bigInteger0.shiftRight(0);
      bigInteger0.flipBit((short)1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode("");
      bigInteger0.equals(base64_0);
      bigInteger0.not();
      base64_0.encodeToString(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean0);
      
      base64_0.encode(byteArray1, 0, 940);
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)69, (byte)57, (byte)80, (byte)81}, byteArray2);
      
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte) (-58);
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)1;
      byteArray3[5] = (byte) (-75);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      byte[] byteArray5 = base64_0.decode(byteArray4);
      assertEquals(6, byteArray5.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-58), (byte)0, (byte)0, (byte)1, (byte) (-75)}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-31);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64.isBase64("");
      base64_0.encode(byteArray1, (-1780), (-676));
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray2, 295, 42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64.isBase64("Qw{(gq");
      Base64.isBase64((byte)76);
      Base64 base64_0 = new Base64((byte)76);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte)76;
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode((Object) "Qw{(gq");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("kp2U>|hmt79@FRnnV");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray1);
      base64_0.encode(byteArray0);
      Base64.isBase64("Vzt`:ZVz;F-c[Q ~B");
      Base64.isBase64("Vzt`:ZVz;F-c[Q ~B");
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-1);
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte) (-1);
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte) (-1);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      byteArray3[5] = (byte) (-1);
      byteArray3[6] = (byte)102;
      byteArray3[7] = (byte) (-1);
      byteArray3[8] = (byte) (-66);
      Base64.isBase64(byteArray3);
      base64_0.isUrlSafe();
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray4, false, true);
      byte[] byteArray5 = new byte[6];
      byteArray5[0] = (byte) (-66);
      byteArray5[1] = (byte) (-1);
      byteArray5[2] = (byte) (-66);
      byteArray5[3] = (byte)102;
      byteArray5[4] = (byte) (-1);
      byteArray5[5] = (byte) (-1);
      Base64.isArrayByteBase64(byteArray5);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64(2067, byteArray0, false);
      int int0 = base64_0.readResults(byteArray0, 3431, (-1171));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      Base64 base64_0 = new Base64(5367, byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(210);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(175, byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode(byteArray0, 175, 4256);
      Base64.decodeBase64("");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 2976, 227);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2976
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64(1, (byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      MockRandom mockRandom0 = new MockRandom(76);
      BigInteger bigInteger0 = BigInteger.probablePrime(76, mockRandom0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.decodeBase64("2BAf-)v.cEHE]");
      base64_0.decode((byte[]) null, (-903), (-903));
      Base64.decodeBase64("L;-YOT(zn");
      Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.isBase64((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 111;
      Base64 base64_0 = new Base64(111);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-7);
      base64_0.encodeToString(byteArray0);
      Base64.decodeBase64("&");
      Base64.decodeBase64(",gmByj@SJ%O2o$");
      base64_0.avail();
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = base64_0.decode(">^U");
      Base64.isBase64(">^U");
      String string0 = "";
      Base64.isBase64(">^U");
      byte[] byteArray1 = base64_0.decode("");
      Base64 base64_1 = new Base64();
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray0, false, false);
      try { 
        base64_1.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-51);
      byte byte0 = (byte)73;
      byteArray0[1] = (byte)73;
      byte byte1 = (byte)58;
      byteArray0[2] = (byte)58;
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitCount();
      Base64.encodeInteger(bigInteger0);
      base64_0.decode("");
      Base64.isBase64("");
      Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("");
      byte[] byteArray1 = base64_0.decode("Oc\".Enh.by`$T'<");
      base64_0.decode(byteArray0);
      base64_0.decode((Object) "Oc\".Enh.by`$T'<");
      Base64.encodeBase64(byteArray1);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64(byteArray0, false, true, 823);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64.isBase64((byte)3);
      Base64.encodeBase64((byte[]) null);
      Base64.isBase64(" @aywa|t");
      Base64 base64_0 = new Base64();
      Base64.isBase64(":");
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte byte0 = (byte)78;
      Base64.isBase64((byte)78);
      byte[] byteArray0 = new byte[8];
      byte byte1 = (byte) (-101);
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byte byte2 = (byte) (-7);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte) (-4);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)78, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDNNN\uFFFD\uFFFDN\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)14;
      Base64.encodeBase64(byteArray0, true, true, 64);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-56);
      byteArray1[1] = (byte) (-128);
      Base64.encodeBase64URLSafe(byteArray1);
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)121, (byte)73, (byte)65, (byte)65, (byte)7, (byte)10}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger1.modPow(bigInteger0, bigInteger0);
      bigInteger0.andNot(bigInteger1);
      byte[] byteArray2 = base64_0.decode("");
      Base64.isBase64("4okSb*Ygt^)jG");
      Base64.discardWhitespace(byteArray2);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)57;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(65, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000skh9]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      boolean boolean0 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [TAA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((-3519));
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.isUrlSafe();
      Base64.decodeBase64("IwAVAA==");
      base64_0.encodeToString(byteArray1);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)21;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray3);
      base64_0.decode("]");
      Base64.encodeBase64(byteArray2, false, false, (int) (byte)0);
      base64_0.encode(byteArray3, 123, 123);
      assertArrayEquals(new byte[] {(byte)21, (byte)0, (byte)0}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = ";";
      Base64.isBase64(";");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byte byte0 = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)65;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2181), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [x\uFFFD\u0000\u0000A]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)31;
      Base64 base64_0 = new Base64(1154, byteArray0);
      base64_0.encode(byteArray0);
      base64_0.decode("@vS:o\"");
      base64_0.encodeToString(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      try { 
        base64_0.encode((Object) "/wqoyh8=\uFFFD\n\uFFFD\uFFFD\u001F");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)48;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)7, bigInteger0.shortValue());
      
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)91;
      byteArray1[3] = (byte)60;
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)15;
      byteArray2[1] = (byte)60;
      byteArray2[2] = (byte)1;
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("DzwB", string0);
      
      Base64 base64_0 = new Base64(0);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte)91;
      byteArray3[3] = (byte)15;
      byteArray3[4] = (byte)66;
      byteArray3[5] = (byte)15;
      byteArray3[6] = (byte)1;
      byteArray3[7] = (byte)91;
      int int0 = base64_0.readResults(byteArray3, (byte)1, (-1246));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)93;
      boolean boolean0 = false;
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)50;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)77, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray0, (int) (byte)0, 1);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64((String) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)74;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      base64_0.decode(byteArray1, (-164), 0);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray2 = new byte[3];
      Base64.encodeBase64URLSafe(byteArray2);
      byteArray2[0] = (byte)16;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      byteArray2[1] = (byte) (-13);
      byteArray2[2] = (byte) (-59);
      String string0 = Base64.encodeBase64String(byteArray2);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false, false);
      Base64.isBase64(byteArray2);
      byte[] byteArray5 = base64_0.decode("EPPF");
      base64_0.decode(byteArray2);
      String string1 = base64_0.encodeToString(byteArray3);
      assertEquals("RUFBQQ==", string1);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray4);
      String string2 = base64_0.encodeToString(byteArray5);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-13), (byte) (-59)}, byteArray5);
      assertTrue(string2.equals((Object)string0));
      
      base64_0.encode(byteArray2);
      boolean boolean1 = Base64.isBase64("EPPF");
      assertTrue(boolean1);
      
      boolean boolean2 = Base64.isBase64((byte) (-59));
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64.isBase64((byte) (-39));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("2Q==", string0);
      
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-39);
      byteArray1[1] = (byte) (-39);
      byteArray1[2] = (byte) (-39);
      byteArray1[3] = (byte) (-39);
      byteArray1[4] = (byte) (-39);
      byteArray1[5] = (byte) (-39);
      byteArray1[6] = (byte) (-39);
      byteArray1[7] = (byte) (-39);
      byteArray1[8] = (byte) (-39);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(12, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
