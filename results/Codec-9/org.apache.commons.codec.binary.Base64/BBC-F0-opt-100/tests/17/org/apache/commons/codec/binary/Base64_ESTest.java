/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 11:08:56 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8130, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8131, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(false);
      int int0 = Base64.MIME_CHUNK_SIZE;
      base64_0.encode(byteArray0, 57, 57);
      base64_0.encode(byteArray2, 1348, (-1));
      base64_0.encode(byteArray2, 58, 758);
      base64_0.decode(byteArray2, 58, 58);
      base64_0.encode(byteArray1, 58, 96);
      base64_0.encode(byteArray2, 58, 8131);
      base64_0.avail();
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 36;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(36, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      Object object0 = base64_0.decode((Object) "UTF-16BE");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8130, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray4);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, false, false, 8130);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8120, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(false);
      int int0 = Base64.MIME_CHUNK_SIZE;
      base64_0.encode(byteArray0, 48, 48);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = new byte[0];
      Base64.encodeBase64Chunked(byteArray3);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.encodeBase64Chunked(byteArray3);
      Base64 base64_1 = new Base64();
      Base64.decodeBase64("U<K6");
      base64_1.decode(byteArray2);
      base64_0.readResults(byteArray0, 64, 76);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 8134;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8134, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray0, (-715), 8134);
      int int1 = 48;
      // Undeclared exception!
      base64_0.encode(byteArray3, 0, 8134);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8130, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.encodeBase64Chunked(byteArray3);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8130, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeInteger(byteArray1);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8130, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.floatValue();
      bigInteger1.toByteArray();
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeInteger(byteArray1);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray4);
      // Undeclared exception!
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8130, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.divide(bigInteger0);
      Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeInteger(byteArray1);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8130, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      bigInteger0.bitLength();
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      bigInteger0.or(bigInteger1);
      Base64.decodeInteger(byteArray1);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray4);
      Base64.toIntegerBytes(bigInteger1);
      // Undeclared exception!
      base64_0.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8130, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray3);
      // Undeclared exception!
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8120, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.decodeInteger(byteArray2);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8143, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.decodeInteger(byteArray2);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8120, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeInteger(byteArray2);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray2);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 26, 26);
      base64_0.encode(byteArray2, (-1014), (-1014));
      Base64.encodeInteger(bigInteger1);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8143, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, 63, 736);
      base64_0.encode(byteArray1, (-947), (-2147483646));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8143, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeInteger(byteArray2);
      Base64.decodeInteger(byteArray2);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray2, 63, 736);
      base64_0.encode(byteArray1, (-947), (-2147483646));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextGaussian();
      BigInteger bigInteger0 = new BigInteger(8120, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.decodeInteger(byteArray1);
      Base64.decodeInteger(byteArray1);
      mockRandom0.nextGaussian();
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray1, 736, 26);
      base64_0.encode(byteArray1, (-3394), (-3394));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)24;
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 0, 1282);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom(2844L);
      BigInteger bigInteger0 = new BigInteger(56, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(889, byteArray0);
      // Undeclared exception!
      try { 
        base64_1.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[56];
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1717986918, mockRandom0);
      mockRandom0.nextGaussian();
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-95);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)53;
      byteArray0[7] = (byte)53;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(12, byteArray2.length);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      base64_0.decode(byteArray1, (int) (byte)0, 76);
      Base64.isBase64((byte)50);
      int int0 = base64_0.readResults(byteArray1, 0, 0);
      assertEquals(0, int0);
      assertEquals(18, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[120];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 64, 87);
      assertEquals(166, byteArray1.length);
      
      Base64 base64_1 = new Base64(false);
      base64_0.decode((byte[]) null, 84, (-2106));
      byte[] byteArray2 = Base64.decodeBase64("bM");
      assertArrayEquals(new byte[] {(byte)108}, byteArray2);
      
      byte[] byteArray3 = base64_1.decode(byteArray0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("_{");
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((-1725), byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-38);
      byteArray1[1] = (byte) (-25);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte) (-110);
      byteArray1[5] = (byte) (-6);
      byteArray1[6] = (byte)27;
      byteArray1[7] = (byte)6;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(9, byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte) (-93);
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)20;
      byteArray1[4] = (byte)88;
      byteArray1[5] = (byte)110;
      byteArray1[6] = (byte) (-12);
      byteArray1[7] = (byte)1;
      byteArray1[8] = (byte)1;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals(12, byteArray2.length);
      
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000AAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)4, (byte)20, (byte)88, (byte)110, (byte) (-12), (byte)1, (byte)1}, byteArray3);
      assertEquals(8, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[60];
      Base64 base64_0 = new Base64(9);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte)18;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte)100;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)52, (byte)120, (byte)73, (byte)57, (byte)90, (byte)65}, byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      
      base64_0.encode(byteArray0, 9, 9);
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("AAAAAAAA\u0000\u0000AAAAAAAA\u0000\u0000AAAAAAAA\u0000\u0000AAAAAAAA\u0000\u0000AAAAAAAA\u0000\u0000AAAAAAAA\u0000\u0000AAAAAAAA\u0000\u0000AAAAAAAA\u0000\u0000AAAAAAAA\u0000\u0000AAAAAAAA\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[56];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(78, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertEquals(78, byteArray2.length);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64.encodeBase64(byteArray0, true, true, 78);
      Base64.isBase64((byte) (-5));
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      Object object1 = base64_0.encode(object0);
      //  // Unstable assertion: assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      boolean boolean0 = Base64.isBase64("9");
      assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)32;
      byteArray2[1] = (byte)32;
      byteArray2[2] = (byte)32;
      byteArray2[3] = (byte)32;
      byteArray2[4] = (byte)32;
      byteArray2[5] = (byte)32;
      byteArray2[6] = (byte)32;
      byteArray2[7] = (byte)32;
      byteArray2[8] = (byte)32;
      Base64 base64_0 = new Base64((byte)32, byteArray2);
      Base64.isBase64("");
      base64_0.readResults(byteArray0, (byte)32, 0);
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("QUFBQUFBQUFBQUFBQUFBQUFBQUFBQT09         ", string0);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertEquals(24, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64.isBase64("9");
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (-24), (-676));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 0, (-676));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(9, byteArray0);
      Base64.isBase64("av@.'.Z|?");
      base64_0.readResults(byteArray0, (-1), 270);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64((byte)32);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[29];
      byte byte0 = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.encode(byteArray1);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (84) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64.isBase64("9");
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.readResults((byte[]) null, 10, (-1798));
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((-1));
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      //  // Unstable assertion: assertEquals("NFFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE9PQAA", string0);
      
      base64_0.decode(byteArray1, (int) (byte)0, 5111);
      Base64.isBase64((byte) (-105));
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64.decodeBase64((String) null);
      Base64.isBase64("9");
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_0 = new Base64((byte)0, (byte[]) null);
      Base64.isBase64("]");
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[0];
      base64_1.readResults(byteArray0, (byte)0, 56);
      base64_1.encodeToString((byte[]) null);
      Base64.isBase64((byte)0);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)0;
      byteArray0[15] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = new Base64(76);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      base64_1.decode(byteArray2, 0, 76);
      assertEquals(26, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray2);
      //  // Unstable assertion: assertEquals("UVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFUMDlBQUE9AAA=\u0000\u0000", string0);
      
      Base64.isBase64((byte)61);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      //  // Unstable assertion: assertEquals(26, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64((byte)53);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 5111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray1);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("8l1P SVN)oyTpC{=2");
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.encodeBase64((byte[]) null, false);
      Base64 base64_0 = new Base64(1800, (byte[]) null);
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(boolean0);
      
      Base64.encodeBase64((byte[]) null, true);
      int int0 = base64_0.readResults((byte[]) null, (byte)0, (-3132));
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      
      Base64.isBase64((byte)97);
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
      
      int int1 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte1 = (byte)32;
      byteArray0[4] = (byte)32;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64(2232, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte)0, 90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      
      Base64 base64_0 = new Base64((byte) (-24), byteArray0);
      boolean boolean0 = Base64.isBase64("P7{");
      //  // Unstable assertion: assertFalse(boolean0);
      
      base64_0.readResults(byteArray0, 0, 2089443549);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)0;
      byteArray3[2] = (byte) (-40);
      base64_0.encodeToString(byteArray3);
      Base64.isBase64((byte)0);
      Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)68, (byte)89, (byte)0, (byte)0}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-96);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)53);
      base64_0.readResults(byteArray1, (byte) (-117), (byte)53);
      base64_0.decode(byteArray1, (int) (byte)0, 5111);
      assertEquals(14, byteArray1.length);
      
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 9, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64.decodeBase64((String) null);
      Base64.isBase64("9");
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null, false, false);
      base64_0.readResults((byte[]) null, (byte)0, (byte)0);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64(byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(1);
      base64_0.decode(byteArray2, (int) (byte)0, (int) (byte) (-24));
      assertEquals(38, byteArray2.length);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(20, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(1);
      base64_0.readResults(byteArray0, (byte) (-24), (-30));
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.and(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.abs();
      bigInteger0.compareTo(bigInteger2);
      boolean boolean0 = base64_0.hasData();
      boolean boolean1 = Base64.isBase64((byte) (-1));
      //  // Unstable assertion: assertFalse(boolean1);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-24);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)47;
      byteArray2[3] = (byte)0;
      Base64.encodeBase64Chunked(byteArray2);
      boolean boolean2 = Base64.isBase64((byte)125);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)54, (byte)80, (byte)56, (byte)118, (byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray3);
      
      Base64.encodeBase64URLSafe(byteArray2);
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals(7, byteArray1.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger3.byteValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1, 1501, 1501);
      Base64 base64_1 = new Base64(false);
      base64_1.decode(byteArray0, (-3134), (-1070));
      Base64.decodeBase64("");
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      Base64.encodeBase64(byteArray2, false, false, (-2857));
      Base64.isBase64((byte) (-116));
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64.decodeBase64((String) null);
      boolean boolean0 = Base64.isBase64("9");
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64((byte[]) null, false, false);
      base64_0.readResults((byte[]) null, (byte)0, (byte)0);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null);
      //  // Unstable assertion: assertNull(byteArray1);
      
      Base64.decodeBase64(byteArray0);
      boolean boolean1 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean1);
      
      byte[] byteArray2 = base64_0.decode("3m`=ynQ$)OOnwPd`");
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-34)}, byteArray2);
      
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.isUrlSafe();
      base64_0.avail();
      boolean boolean2 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-68);
      base64_0.encode(byteArray0, (int) (byte) (-80), (int) (byte) (-41));
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)104);
      assertEquals(11, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1501, 1501);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1501
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(3365, (byte[]) null);
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-46);
      base64_0.decode((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(57, (byte[]) null);
      Base64 base64_2 = new Base64((-2146706136));
      try { 
        base64_2.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 2775);
      assertEquals(14, byteArray1.length);
      
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)21;
      base64_0.readResults(byteArray0, (-1), (byte)64);
      Base64.encodeBase64((byte[]) null, false, true, 2775);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(3365, (byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 3365, 3365);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64(2232, byteArray0);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.readResults(byteArray1, (byte)0, (byte)0);
      base64_0.decode((Object) "sB,Gr!*<hcO!");
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)32;
      byteArray2[1] = (byte) (-24);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-24);
      Base64.encodeBase64(byteArray2, false, true);
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64("");
      Base64.encodeBase64URLSafeString(byteArray1);
      boolean boolean0 = Base64.isBase64((byte) (-24));
      boolean boolean1 = Base64.isBase64((byte)121);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64.decodeBase64((String) null);
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(false);
      base64_0.readResults((byte[]) null, (byte)0, (byte)0);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = Base64.decodeBase64("XhB>ZEBv:5![&)o>v}");
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      base64_0.encode((byte[]) null, (-80), (-602));
      base64_0.avail();
      base64_0.decode(byteArray0, (-602), 10);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)94, (byte)16, (byte)89, (byte)16, (byte)27, (byte) (-7), (byte) (-94)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64(2232, byteArray0);
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.readResults(byteArray1, (byte)0, (byte)0);
      String string0 = base64_0.encodeToString(byteArray2);
      //  // Unstable assertion: assertEquals("UVVGRWIwRkRRVDJ3NkE9PQ==\u0000\u0000\uFFFD\u0000 ", string0);
      
      Base64.isBase64((byte)0);
      boolean boolean1 = Base64.isArrayByteBase64(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)68, (byte)111, (byte)65, (byte)67, (byte)65, (byte)61, (byte) (-80), (byte) (-24)}, byteArray1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      boolean boolean0 = Base64.isBase64(" WujtZ*gBF4&*(FhU");
      assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-125);
      Base64 base64_0 = new Base64((byte) (-125), byteArray2, false);
      base64_0.isUrlSafe();
      bigInteger0.getLowestSetBit();
      byte[] byteArray3 = base64_0.decode(byteArray1);
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)16;
      byteArray4[1] = (byte)0;
      byte[] byteArray5 = Base64.encodeBase64(byteArray4);
      assertArrayEquals(new byte[] {(byte)69, (byte)65, (byte)65, (byte)61}, byteArray5);
      
      Base64.decodeBase64(byteArray3);
      boolean boolean1 = Base64.isArrayByteBase64(byteArray3);
      byte[] byteArray6 = base64_0.decode(" WujtZ*gBF4&*(FhU");
      assertEquals(9, byteArray6.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-24), (byte) (-19), (byte)102, (byte)0, (byte)69, (byte) (-32), (byte)88, (byte)84}, byteArray6);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
      
      Base64 base64_1 = new Base64();
      boolean boolean2 = base64_1.isUrlSafe();
      assertFalse(boolean2 == boolean1);
      
      base64_1.avail();
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      byteArray0[0] = (byte) (-81);
      base64_0.readResults(byteArray0, (byte) (-81), (byte) (-81));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte) (-81);
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte) (-81);
      byteArray1[4] = (byte) (-81);
      byteArray1[5] = (byte) (-81);
      byteArray1[6] = (byte) (-81);
      byteArray1[7] = (byte) (-81);
      byteArray1[0] = (byte) (-81);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger1 = bigInteger0.abs();
      bigInteger1.compareTo(bigInteger0);
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean1 = Base64.isBase64((byte)0);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64((byte)43);
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      assertEquals(24, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)22;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("g6QBFg", string0);
      
      Base64.isBase64("j{pExA8BW!N/8d");
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)1;
      Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64(byteArray1, true, false);
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61, (byte) (-80), (byte) (-24)}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-96);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)53);
      base64_0.decode(byteArray1, (int) (byte)0, 5111);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64.isBase64((byte)0);
      String string0 = null;
      Base64.decodeBase64((String) null);
      Base64.isBase64("");
      Base64 base64_0 = new Base64(false);
      base64_0.readResults((byte[]) null, (byte)0, (byte)0);
      byte[] byteArray0 = Base64.decodeBase64("XhB>ZEBv:5![&)o>v}");
      Base64.encodeBase64String(byteArray0);
      int int0 = (-602);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)0, 837);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.getLowestSetBit();
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray2);
      
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray3);
      assertSame(byteArray3, byteArray1);
      
      base64_0.decode((String) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(boolean1 == boolean0);
      
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte) (-109);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-96);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      base64_0.encode(byteArray2, 2511, (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(3365, (byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 3365, 3365);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(108, byteArray0, true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray2, (int) (byte)0, (-1));
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray3);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64(0);
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[0];
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64URLSafe(byteArray0);
      byte byte0 = (byte)64;
      byteArray1[0] = (byte)64;
      Base64.encodeBase64(byteArray0, true, false);
      base64_0.decode(byteArray1, (-4235), 0);
      Base64.isBase64("QUE");
      base64_0.readResults(byteArray1, 0, (-4893));
      base64_0.hasData();
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      base64_0.isUrlSafe();
      base64_0.readResults(byteArray4, (byte)64, 0);
      try { 
        base64_0.encode((Object) "QUE");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.shortValueExact();
      bigInteger1.max(bigInteger0);
      bigInteger1.byteValueExact();
      bigInteger1.intValue();
      bigInteger1.intValueExact();
      bigInteger0.mod(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64((-493));
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)17;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64String(byteArray3);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.isUrlSafe();
      base64_0.readResults(byteArray1, (-493), (-5373));
      base64_0.decode("I:P=W*");
      Base64.isBase64(byteArray3);
      bigInteger0.toString();
      Base64.decodeBase64(byteArray3);
      base64_0.decode(" gHhu<P E7");
      base64_0.decode("");
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte)10;
      byteArray4[1] = (byte)10;
      byteArray4[2] = (byte)17;
      byteArray4[3] = (byte)10;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray4, true, true, (-477));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -477
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      base64_0.encode(byteArray0);
      byte byte0 = (byte)19;
      byteArray0[0] = (byte)19;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = new byte[9];
      Base64 base64_1 = new Base64((-2748), byteArray0);
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64.decodeBase64((String) null);
      Base64.isBase64("");
      Base64 base64_0 = new Base64(false);
      base64_0.readResults((byte[]) null, (byte)0, (byte)0);
      Base64.decodeBase64("XhB>ZEBv:5![&)o>v}");
      Base64.encodeBase64String((byte[]) null);
      base64_0.encode((byte[]) null, (-80), (-602));
      base64_0.avail();
      Base64.decodeBase64((String) null);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 29, (-1538));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64 base64_0 = new Base64(69, byteArray0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.nextProbablePrime();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.abs();
      bigInteger0.compareTo(bigInteger1);
      base64_0.hasData();
      Base64.isBase64((byte)46);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64((byte)17);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray4 = Base64.decodeBase64("");
      assertFalse(byteArray4.equals((Object)byteArray3));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byte byte0 = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)28;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte2 = (byte) (-117);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)101;
      byte byte3 = (byte) (-92);
      byteArray0[6] = (byte) (-92);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)126, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [T~\u001C\u0000\uFFFDe\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)42;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)87;
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64((byte)87);
      base64_0.decode(",%#G*w.4yLM-qfd]");
      Base64.decodeInteger(byteArray1);
      base64_0.decode(byteArray1, (int) (byte)87, (int) (byte)87);
      base64_0.decode(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray0, (byte)42, (-2672));
      base64_0.decode(byteArray0, (int) (byte)42, 397);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      byteArray0[0] = (byte) (-81);
      base64_0.readResults(byteArray0, (byte) (-81), (byte) (-81));
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte) (-81);
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte) (-81);
      byteArray1[4] = (byte) (-81);
      byteArray1[5] = (byte) (-81);
      byteArray1[6] = (byte) (-81);
      byteArray1[7] = (byte) (-81);
      byteArray1[8] = (byte) (-81);
      Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      //  // Unstable assertion: assertEquals(16, byteArray2.length);
      
      Base64 base64_0 = new Base64(2232, byteArray0);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.readResults(byteArray1, (byte)0, (byte)0);
      Object object0 = base64_0.decode((Object) "sB,Gr!*<hcO!");
      Base64.encodeBase64(byteArray1, false, true, 5188);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)68, (byte)111, (byte)65, (byte)67, (byte)65, (byte)61, (byte)18, (byte) (-24)}, byteArray1);
      
      base64_0.encodeToString(byteArray0);
      Object object1 = base64_0.decode(object0);
      Object object2 = base64_0.encode(object1);
      //  // Unstable assertion: assertNotSame(object2, object0);
      //  // Unstable assertion: assertSame(object2, object1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 1036);
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[2] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      base64_0.encodeToString(byteArray0);
      byteArray0[5] = (byte)1;
      byte byte1 = (byte) (-19);
      base64_0.encode(byteArray1, (int) (byte) (-1), 0);
      byteArray0[6] = (byte) (-19);
      base64_0.encodeToString(byteArray0);
      base64_0.avail();
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      base64_0.readResults(byteArray0, 0, (byte)34);
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64.encodeBase64(byteArray0, true, true, 2775);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte)0;
      base64_0.readResults(byteArray0, (byte)0, (byte)21);
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)21);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)112;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = Base64.decodeBase64("XRUAsTlw");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)93, (byte)21, (byte)0, (byte) (-79), (byte)57, (byte)112}, byteArray3);
      
      Base64 base64_0 = new Base64((-1898));
      base64_0.decode((Object) "XRUAsTlw");
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      String string0 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals("V0ZKVlFYTlViSGNTNkE9PQ==", string0);
      
      byte[] byteArray4 = base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
      //  // Unstable assertion: assertEquals(30, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)58;
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.getLowestSetBit();
      bigInteger0.pow((byte)58);
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeBase64("");
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)112;
      byteArray1[4] = (byte) (-124);
      byteArray1[5] = (byte) (-79);
      byteArray1[6] = (byte)123;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2634, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000eep\uFFFD\uFFFD{]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-83);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte) (-83));
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = (-136);
      Base64 base64_0 = new Base64((-136));
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.equals("");
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = null;
      bigInteger0.toString();
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 102;
      bigInteger0.clearBit(102);
      bigInteger0.clearBit(64);
      Base64.encodeInteger(bigInteger0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((byte) (-28), byteArray0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = true;
      Base64.encodeBase64URLSafeString(byteArray2);
      boolean boolean3 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, false, (int) (byte) (-28));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -28
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte) (-55);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, (-1824), (-739));
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [o|\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-59);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(243, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDE\t\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = base64_0.encode((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("Input array too big, the output array would be bigger (");
      base64_0.isUrlSafe();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte) (-1);
      int int0 = bigInteger0.getLowestSetBit();
      byteArray1[4] = (byte)99;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      base64_0.decode(byteArray0);
      byteArray1[7] = (byte)76;
      byteArray1[8] = (byte) (-94);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-1);
      Base64.decodeBase64(byteArray2);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray3 = base64_0.decode("Input array too big, the output array would be bigger (");
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.isUrlSafe();
      int int1 = base64_0.avail();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)104;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)4840, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-94);
      Base64 base64_0 = new Base64(1456, byteArray0, true);
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.avail();
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray0, (-1), (int) (byte) (-20));
      boolean boolean0 = Base64.isBase64("a#");
      byte[] byteArray4 = base64_0.encode(byteArray2);
      assertEquals(26, byteArray4.length);
      
      boolean boolean1 = base64_0.isUrlSafe();
      assertFalse(boolean1 == boolean0);
      
      String string0 = base64_0.encodeToString(byteArray3);
      assertEquals("QzFzQUFRL3NBS0k9DQo\u000B[\u0000\u0001\u000F\uFFFD\u0000\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(15, byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertEquals(12, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, false);
      assertEquals(14, byteArray3.length);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray4 = base64_0.decode(byteArray1);
      assertEquals(5, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-15), (byte)0, (byte)0, (byte)0}, byteArray4);
      
      bigInteger0.isProbablePrime((byte)0);
      bigInteger0.intValue();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.avail();
      boolean boolean1 = Base64.isBase64("org.apache.commons.codec.DecoderException");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
