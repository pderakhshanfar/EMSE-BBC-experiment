/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:50:20 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-35);
      Base64.discardWhitespace(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)89;
      Base64.isBase64(byteArray0);
      Base64 base64_1 = new Base64(33);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, (int) (byte)0, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64((byte) (-1));
      Base64 base64_1 = new Base64((byte) (-1));
      byte[] byteArray0 = new byte[0];
      base64_1.encode(byteArray0);
      byte[] byteArray1 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 76);
      Base64 base64_2 = new Base64();
      Base64 base64_3 = new Base64(4);
      base64_3.decode(byteArray2, 0, 76);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_3.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MockRandom mockRandom0 = new MockRandom(2718);
      BigInteger bigInteger0 = new BigInteger(2718, 2718, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(boolean0);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte) (-31);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, (-52), (-52));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)11;
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(false);
      try { 
        base64_0.encode((Object) "W,}f'|E2tH~|f");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64.isBase64((byte) (-62));
      Base64 base64_0 = new Base64((byte) (-62));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, 76);
      Base64 base64_1 = new Base64(76);
      Base64.encodeBase64String(byteArray1);
      base64_1.decode(byteArray3, 34, 64);
      base64_1.decode(byteArray1, (int) (byte) (-62), 76);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64 base64_0 = new Base64(2539);
      byte[] byteArray0 = new byte[9];
      base64_0.encode(byteArray0, 2539, (-52));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 1795, 2539);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64.isBase64((byte)127);
      Base64 base64_0 = new Base64((byte)127);
      base64_0.encode(byteArray0);
      base64_0.decode("]");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray1 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 669);
      byte[] byteArray3 = Base64.decodeBase64("Input array too big, the output arra> would be bigger (");
      Base64.encodeBase64(byteArray2, false);
      Base64 base64_0 = new Base64(669, byteArray0);
      Base64.discardWhitespace(byteArray3);
      Random.setNextRandom(26);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 669);
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.encode(byteArray1, 15, 669);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.isBase64((byte) (-60));
      Base64 base64_0 = new Base64((byte) (-60));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64(byteArray2, false, false, 76);
      Base64 base64_1 = new Base64(76);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_2 = new Base64(false);
      base64_2.encode(byteArray0);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64Chunked(byteArray1);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2, 15, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray0 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64 base64_0 = new Base64(true);
      base64_0.decode("Input array too big, the output array would be bigger (");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)63;
      byteArray1[1] = (byte) (-107);
      byteArray1[2] = (byte)3;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte) (-36);
      byteArray1[5] = (byte)16;
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray2);
      Base64.isBase64("{W>");
      base64_0.avail();
      base64_0.encode(byteArray2);
      base64_0.decode((Object) "Input array too big, the output array would be bigger (");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64.isBase64((byte)115);
      Base64 base64_0 = new Base64((byte)115);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 76);
      Base64 base64_1 = new Base64(76);
      Base64.encodeBase64String(byteArray1);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray3, 34, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)33;
      Base64 base64_0 = new Base64(13);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.isBase64("");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.isBase64("");
      Base64.discardWhitespace(byteArray2);
      Base64 base64_1 = new Base64();
      try { 
        base64_1.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 615;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)56;
      Base64 base64_0 = new Base64((byte)56);
      Base64.encodeBase64String(byteArray0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 615);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64("i;WJO");
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray0, false, true, 2509);
      String string0 = ")j4h`B/,6vD,n)";
      Base64.decodeBase64(")j4h`B/,6vD,n)");
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64(84, byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = new Base64(3056, byteArray1);
      base64_0.encode(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64.isBase64((byte)115);
      Base64 base64_0 = new Base64((byte)115);
      byte[] byteArray1 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray2, (-62), (-62));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)32;
      Base64 base64_0 = new Base64(1377, byteArray0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(3494, byteArray0, false);
      Base64.encodeBase64URLSafe(byteArray1);
      assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byte byte2 = (byte) (-4);
      byte byte3 = (byte)99;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = new byte[9];
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray3 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      boolean boolean0 = Base64.isBase64(byteArray3);
      assertFalse(boolean0);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      Base64 base64_1 = new Base64(0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((short)30998, bigInteger0.shortValue());
      
      base64_1.encode(byteArray4, 13, 13);
      assertNotSame(byteArray4, byteArray3);
      assertEquals(32, byteArray4.length);
      
      byte[] byteArray5 = base64_1.encode(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)99;
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[3] = (byte)2;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)2;
      byteArray2[6] = (byte)99;
      byteArray2[7] = (byte)2;
      byteArray2[8] = (byte) (-82);
      Base64.isBase64(byteArray2);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray1);
      Base64.decodeBase64((String) null);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      boolean boolean0 = Base64.isBase64("Input array too big, the output array would be bigger (");
      assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(12, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)99;
      Base64.decodeBase64("");
      byte[] byteArray1 = Base64.decodeBase64(") than the specified maxium size of ");
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-4);
      byteArray2[1] = (byte) (-4);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)41;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte) (-1);
      byteArray2[7] = (byte) (-4);
      byteArray2[8] = (byte)0;
      Base64.isBase64(byteArray2);
      Base64.decodeBase64("(0vtHwT4");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.decodeBase64(": ");
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(1920, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0016\uFFFD\uFFFD\u0017\uFFFD\uFFFD\uFFFD\"~'\uFFFD\uFFFD\uFFFDb\uFFFDk\"\uFFFD\uFFFD\u001F]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64(byteArray1);
      Base64.decodeBase64("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AA\u000B\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      Base64.decodeBase64(byteArray0);
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray1 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      Base64.isBase64(byteArray1);
      Base64.decodeBase64("(0vtHwT4");
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 0, (int) (byte)118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-30);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-123);
      byteArray1[1] = (byte)33;
      byteArray1[2] = (byte) (-4);
      byteArray1[3] = (byte)99;
      byte[] byteArray2 = null;
      Base64.encodeBase64((byte[]) null, true, true, (int) (byte) (-30));
      Base64 base64_0 = new Base64(101, (byte[]) null, true);
      base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64(121);
      byte[] byteArray0 = base64_0.decode("#qRZYqQFx");
      Base64 base64_1 = new Base64();
      base64_1.isUrlSafe();
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 287, 101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.isBase64(byteArray1);
      Base64.decodeBase64("encodeInteger called with null parameter");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte)0, byteArray1, true);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      Base64.isBase64((byte) (-114));
      base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray3 = base64_1.encode(byteArray2);
      Random.setNextRandom(76);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray3, 1769, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1769
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.isBase64(byteArray1);
      Base64.decodeBase64("encodeInteger called with null parameter");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte)0, byteArray1, true);
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true, false);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byte byte1 = (byte) (-38);
      byteArray1[2] = (byte) (-38);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64(0);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray3);
      byte[] byteArray4 = base64_0.decode(byteArray2);
      base64_0.encodeToString(byteArray3);
      base64_0.decode(byteArray4);
      Base64 base64_1 = new Base64(false);
      base64_1.isUrlSafe();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, false, false, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (18) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byte byte1 = (byte) (-4);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-4);
      byteArray2[1] = (byte)99;
      byteArray2[2] = (byte) (-4);
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte)99;
      byteArray2[5] = (byte) (-4);
      byteArray2[6] = (byte) (-4);
      byteArray2[7] = (byte)99;
      byte byte2 = (byte) (-1);
      byteArray2[8] = (byte) (-1);
      base64_0.encode(byteArray2);
      String string0 = "e*5r,&4^8NbG@(YVX";
      Base64.isBase64("e*5r,&4^8NbG@(YVX");
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)99;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte) (-4);
      byte byte1 = (byte)99;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = new byte[17];
      byteArray2[0] = (byte) (-4);
      byteArray2[1] = (byte)99;
      byteArray2[2] = (byte) (-4);
      byteArray2[3] = (byte) (-1);
      byteArray1[0] = (byte)99;
      byteArray2[5] = (byte) (-4);
      byteArray2[6] = (byte) (-4);
      byteArray2[7] = (byte)99;
      byte byte2 = (byte) (-1);
      byteArray2[8] = (byte) (-1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.isBase64("e*5r,&4^8NbG@(YVX");
      byte byte3 = (byte)99;
      Base64.discardWhitespace(byteArray3);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(74, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [c\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-4);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)23, (byte)0, (byte)50, (byte) (-123), (byte) (-4), (byte)0}, byteArray1);
      
      Base64.isBase64("");
      Base64.isBase64((byte) (-4));
      Base64 base64_0 = new Base64(1060);
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64((-2889));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)85;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("kGtxwlDo_1U", string0);
      
      Base64.decodeInteger(byteArray0);
      base64_0.avail();
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      byte[] byteArray1 = base64_0.decode("kGtxwlDo_1U");
      assertArrayEquals(new byte[] {(byte) (-112), (byte)107, (byte)113, (byte) (-62), (byte)80, (byte) (-24), (byte) (-1), (byte)85}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Base64.isBase64((byte)115);
      Base64 base64_0 = new Base64((byte)115);
      byte[] byteArray1 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.isUrlSafe();
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)115;
      byteArray4[1] = (byte)115;
      byteArray4[2] = (byte)115;
      Base64.encodeBase64URLSafe(byteArray3);
      byteArray4[3] = (byte)115;
      byteArray4[4] = (byte)115;
      byteArray4[5] = (byte)115;
      byteArray4[6] = (byte)115;
      byteArray4[7] = (byte)115;
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.encode(byteArray2, 776, 91);
      try { 
        base64_0.encode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)99;
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)14);
      String string0 = "2wHJ>mIg#5OfDS,__";
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(72, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u000E\u0017\u0000y\uFFFD\uFFFDc]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte byte0 = (byte) (-77);
      byte byte1 = (byte) (-96);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64((-3344), (byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      base64_0.decode((byte[]) null, (int) (byte)17, (-3344));
      Base64.encodeBase64((byte[]) null, true, true, (int) (byte)17);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_2 = null;
      try {
        base64_2 = new Base64(76, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [ERERERE=\u000B\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.longValueExact();
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray2 = base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.ONE;
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      //  // Unstable assertion: assertEquals("QUEA_w", string0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.doubleValue();
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      bigInteger0.or(bigInteger2);
      bigInteger0.testBit(5);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray0, false, false, 2720);
      boolean boolean0 = Base64.isBase64(byteArray3);
      String string1 = Base64.encodeBase64String(byteArray4);
      //  // Unstable assertion: assertEquals("", string1);
      
      base64_0.encode(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray3);
      
      boolean boolean1 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Base64.encodeBase64(byteArray2);
      Object object0 = base64_0.decode((Object) "}oXt/[-or Mo_q5");
      Object object1 = base64_0.encode(object0);
      //  // Unstable assertion: assertNotSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(1802, (byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.isBase64("wB:;!x,aLXa");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-119);
      byteArray1[1] = (byte) (-119);
      byteArray1[2] = (byte) (-119);
      byteArray1[3] = (byte) (-119);
      byteArray1[4] = (byte)7;
      Base64.isBase64(byteArray1);
      Base64 base64_1 = new Base64(true);
      base64_1.encode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1)}, byteArray1);
      
      Base64 base64_0 = new Base64((byte)99, byteArray0, false);
      base64_0.encode(byteArray0, (int) (byte) (-4), (-1869));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)115);
      base64_0.decode("Di7iK <PZxiF");
      byte[] byteArray1 = new byte[0];
      base64_0.decode(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 2230, 4195);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2230
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("N9H/mVkAAAAA");
      Base64.encodeBase64(byteArray0, true, false, (int) (byte)55);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      byte[] byteArray4 = new byte[0];
      base64_0.encode(byteArray4, 0, 0);
      base64_0.readResults(byteArray1, (byte)89, (byte)0);
      Base64.encodeBase64(byteArray2, false, false);
      base64_0.decode(byteArray2);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals("N9H_mVkAAAAA", string0);
      
      base64_0.encode(byteArray3, (int) (byte) (-1), (int) (byte)89);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)55, (byte)81, (byte)61, (byte)61, (byte)0, (byte)10}, byteArray5);
      //  // Unstable assertion: assertEquals(6, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-96);
      Base64.decodeInteger(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64("l@I{_/V[(");
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-113), (byte) (-1)}, byteArray3);
      assertEquals(3, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0);
      int int0 = base64_0.readResults(byteArray0, (byte)0, (byte)0);
      assertEquals((-1), int0);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, false, false);
      assertEquals(8, byteArray5.length);
      assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)120, (byte)80, (byte)90, (byte)119, (byte)61, (byte)61}, byteArray5);
      
      byte[] byteArray6 = base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray6);
      base64_0.encode(byteArray2, (-2073), (int) (byte)0);
      Base64.encodeBase64Chunked(byteArray6);
      assertNotSame(byteArray0, byteArray5);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.isUrlSafe();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode((Object) "AQAB");
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      // Undeclared exception!
      try { 
        bigInteger0.max((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("QUE9PQ==", string0);
      
      byte[] byteArray4 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray4);
      
      base64_0.isUrlSafe();
      Base64.encodeBase64((byte[]) null, false, false, 76);
      base64_0.encode(byteArray1);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray2);
      Base64.isArrayByteBase64(byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-80), (byte)10}, byteArray5);
      
      Base64.encodeBase64(byteArray3, true, true);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(1802, (byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      BigInteger bigInteger0 = null;
      try { 
        base64_0.encode((Object) "m:}U");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.valueOf((byte)120);
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.floatValue();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)120;
      byteArray1[2] = (byte)120;
      bigInteger0.shortValueExact();
      bigInteger1.max(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2111, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [xxx]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)17;
      byteArray0[1] = (byte)17;
      Base64 base64_0 = new Base64(615, byteArray0);
      Base64.encodeBase64String(byteArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 615);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)33;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      base64_0.decode(byteArray0, (int) (byte) (-67), (int) (byte) (-67));
      Base64.decodeInteger(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("vQAAIQ==", string0);
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      assertEquals(4, byteArray3.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0, (byte)33}, byteArray3);
      
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte) (-67));
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(Integer.MAX_VALUE);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)57;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.bitCount();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      byteArray0[5] = (byte) (-54);
      byte[] byteArray2 = base64_0.decode("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray2.length);
      
      byteArray0[6] = (byte) (-4);
      base64_0.encode(byteArray0, (int) (byte)0, (-1));
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(12, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)111;
      byteArray0[1] = (byte)111;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte)0;
      byteArray0[3] = (byte)0;
      Base64.encodeBase64(byteArray0, true, true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.isBase64(byteArray1);
      String string0 = "encodeInteger called with null parameter";
      byte[] byteArray2 = Base64.decodeBase64("encodeInteger called with null parameter");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.byteValueExact();
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [zw(u\uFFFD'\uFFFD\uFFFD\u001E\uFFFD\u01A5\uFFFD\uFFFDp\uFFFD\uFFFDg\uFFFDYij\uFFFD\uFFFDz\u05EB]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)87;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = base64_0.decode("Di7iK <PZxiF");
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)46, (byte) (-30), (byte)40, (byte) (-10), (byte)113, (byte) (-120)}, byteArray1);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      assertEquals(0, byteArray3.length);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 116, 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 116
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      base64_0.decode(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-77);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray2);
      base64_0.decode(byteArray0, 0, (int) (byte) (-77));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.min(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1, true, true, 76);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(414, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 414, 689);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 414
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("ADIAAQbzAA==\uFFFD\n", string0);
      
      byte[] byteArray1 = Base64.decodeBase64("mEq-_S8)");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-104), (byte)74, (byte) (-66), (byte) (-3), (byte)47}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray1.length);
      
      base64_0.isUrlSafe();
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, true);
      //  // Unstable assertion: assertNull(byteArray2);
      
      base64_0.encodeToString((byte[]) null);
      base64_0.decode((byte[]) null, 0, 0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64((-522), byteArray0);
      base64_0.decode(byteArray0, (-522), (-3240));
      Base64.encodeBase64URLSafe(byteArray0);
      String string0 = "UaLaW6y$K0Xd(";
      Base64.decodeBase64("UaLaW6y$K0Xd(");
      Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.shiftLeft(44);
      Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray1);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64((-2422));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte) (-121);
      int int0 = base64_0.readResults(byteArray0, (byte)14, 0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      byteArray0[0] = (byte)118;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      base64_0.encode(byteArray1, (-88), (-3322));
      byteArray2[1] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      assertEquals(4, byteArray3.length);
      
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)83;
      Base64.encodeBase64(byteArray2, false, false, 61);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-106);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("dgBTwd8Alg", string0);
      
      base64_0.decode("");
      byte[] byteArray4 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      base64_0.encode(byteArray4, 0, 0);
      assertEquals(32, byteArray4.length);
      
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte)49;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64("wB:;!x,aLXa");
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray1);
      Base64.isBase64("e*5r,&4^8NbG@(YVX");
      Base64.encodeBase64(byteArray0, false, false, (int) (byte)55);
      try { 
        base64_0.encode((Object) "wB:;!x,aLXa");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64((-4749));
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.avail();
      base64_0.hasData();
      Base64.encodeBase64((byte[]) null, false, false, (-1132));
      base64_0.decode((String) null);
      Base64.decodeBase64((byte[]) null);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      //  // Unstable assertion: assertEquals(12, byteArray1.length);
      
      byteArray0[0] = (byte) (-5);
      byte[] byteArray2 = base64_0.decode("encodeInteger called with null parameter");
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)1;
      Base64.encodeBase64(byteArray2, true);
      //  // Unstable assertion: assertEquals(27, byteArray2.length);
      
      base64_0.decode(byteArray0, (int) (byte) (-1), (int) (byte) (-5));
      Base64.encodeBase64(byteArray0);
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.min(bigInteger0);
      bigInteger0.min(bigInteger1);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)69, (byte)57, (byte)80, (byte)81}, byteArray4);
      //  // Unstable assertion: assertEquals(6, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray3);
      
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)41;
      byteArray5[3] = (byte)41;
      byteArray5[4] = (byte) (-54);
      String string0 = base64_0.encodeToString(byteArray5);
      //  // Unstable assertion: assertEquals("AAApKco=\uFFFD\n", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)104;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)100, (byte)110, (byte)80, (byte)81, (byte)61, (byte)61, (byte) (-80), (byte)10}, byteArray2);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)104;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)104;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)104;
      byte[] byteArray4 = base64_0.decode(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-122), (byte)24}, byteArray4);
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)0;
      Base64.decodeBase64(byteArray0);
      Base64.decodeBase64("]");
      Base64.isBase64("");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, false, false);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64();
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte byte0 = (byte)0;
      Base64.isBase64((byte)0);
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      String string0 = "vB7-e[`&`d.@0}([=]";
      byte[] byteArray0 = Base64.decodeBase64("vB7-e[`&`d.@0}([=]");
      base64_0.hasData();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray1[1] = (byte) (-30);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.nextProbablePrime();
      // Undeclared exception!
      try { 
        bigInteger1.flipBit((byte) (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-437), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000=\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = null;
      Base64.decodeBase64((String) null);
      Base64.decodeBase64((byte[]) null);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-2608), 213);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)83;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [H\u0000S]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)79;
      byteArray1[3] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)0;
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.isBase64(">sM4mTOSJ)&rPK");
      Base64.encodeBase64(byteArray2, false, false, (int) (byte) (-3));
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode((Object) ">sM4mTOSJ)&rPK");
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64((-205), byteArray0);
      base64_0.isUrlSafe();
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      assertEquals(6, byteArray1.length);
  }
}
