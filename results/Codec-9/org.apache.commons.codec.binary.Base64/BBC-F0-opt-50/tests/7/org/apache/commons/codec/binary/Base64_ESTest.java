/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 09:07:12 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[199];
      Base64 base64_0 = new Base64(4, byteArray0);
      base64_0.encode(byteArray0, 4, 120);
      base64_0.encode(byteArray0, 120, (-1));
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-96);
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte)104;
      byteArray1[3] = (byte)94;
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64(byteArray2, true);
      byteArray1[4] = (byte) (-81);
      byteArray1[5] = (byte) (-92);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[185];
      int int0 = 7;
      Base64 base64_0 = new Base64(7, byteArray0);
      base64_0.encode(byteArray0, 7, 7);
      base64_0.readResults(byteArray0, 7, 7);
      int int1 = 120;
      base64_0.readResults(byteArray0, 7, 120);
      Base64.isBase64(") than the specified maxium size of ");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[185];
      Base64 base64_0 = new Base64(7, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, 7, 7);
      base64_0.encode(byteArray0, 7, 120);
      base64_0.decode(byteArray0, 97, 7);
      // Undeclared exception!
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[170];
      Base64 base64_0 = new Base64(94, byteArray0, true);
      base64_0.encode(byteArray0, 16, 94);
      base64_0.encode(byteArray0, 4740, (-677));
      base64_0.decode(byteArray0, 120, 0);
      base64_0.encode(byteArray0, 120, 1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[185];
      int int0 = 7;
      Base64 base64_0 = new Base64(7, byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0, 7, 7);
      // Undeclared exception!
      base64_0.decode(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[137];
      Base64 base64_0 = new Base64(20, byteArray0);
      base64_0.encode(byteArray0, 20, 20);
      base64_0.readResults(byteArray0, 20, 20);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-57);
      byteArray1[2] = (byte)56;
      byteArray1[3] = (byte)68;
      byteArray1[4] = (byte)51;
      byteArray1[5] = (byte)18;
      byteArray1[6] = (byte)33;
      base64_0.encode(byteArray1, (int) (byte)1, (int) (byte)1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[152];
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.encode(byteArray0, 0, 116);
      base64_0.encode(byteArray0, 0, (-2878));
      base64_0.decode(byteArray0, 7, 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[152];
      Base64 base64_0 = new Base64(7, byteArray0);
      base64_0.encode(byteArray0, 33, 33);
      base64_0.encode(byteArray0, 7, (-1003));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[152];
      Base64 base64_0 = new Base64(7, byteArray0);
      base64_0.encode(byteArray0, 7, 7);
      base64_0.encode(byteArray0, (int) (byte) (-7), (-40));
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[152];
      Base64 base64_0 = new Base64(7, byteArray0);
      base64_0.encode(byteArray0, 7, 7);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-7);
      base64_0.encode(byteArray1, (int) (byte) (-7), (-40));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[157];
      Base64 base64_0 = new Base64(5, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 5, 772);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 157
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[97];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[2] = (byte)65;
      byteArray1[4] = (byte)74;
      byteArray1[5] = (byte)61;
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)65);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[157];
      Base64 base64_0 = new Base64(5, byteArray0);
      base64_0.encodeToString(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[127];
      Base64 base64_0 = new Base64(5, byteArray0);
      base64_0.readResults(byteArray0, 5, 5);
      String string0 = base64_0.encodeToString(byteArray0);
      Base64 base64_1 = new Base64(41, byteArray0);
      byte[] byteArray1 = new byte[6];
      Object object0 = base64_1.decode((Object) string0);
      base64_1.encode(object0);
      byteArray1[0] = (byte)68;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)43;
      base64_0.encodeToString(byteArray0);
      // Undeclared exception!
      base64_1.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[86];
      Base64 base64_0 = new Base64(7, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte)115;
      byteArray1[4] = (byte)81;
      byteArray1[5] = (byte)61;
      byteArray1[6] = (byte)81;
      base64_0.decode(byteArray1, (int) (byte)0, 818);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[86];
      Base64 base64_0 = new Base64(7, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-37);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)63;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)81;
      byteArray1[5] = (byte)61;
      byteArray1[6] = (byte) (-57);
      base64_0.decode(byteArray1, (int) (byte)0, 818);
      base64_0.encodeToString(byteArray0);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(16, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte) (-71);
      byteArray1[3] = (byte) (-2);
      byteArray1[4] = (byte)46;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, (int) (byte)123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64((-221), byteArray0);
      base64_0.encode((byte[]) null, 43, (-221));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-221), 2071);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      bigInteger0.intValue();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte byte0 = (byte) (-113);
      byte byte1 = (byte)71;
      Base64.isBase64((byte)71);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray1);
      BigInteger bigInteger3 = bigInteger0.shiftRight((-2147483646));
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      bigInteger0.intValue();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte byte0 = (byte) (-113);
      Base64.isBase64((byte) (-113));
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.or(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = bigInteger1.shiftRight((-2719));
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger3);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)27;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)27;
      Base64 base64_0 = new Base64((byte)27, byteArray0);
      byte[] byteArray1 = new byte[25];
      byteArray1[10] = (byte)27;
      byteArray1[1] = (byte)27;
      byteArray1[4] = (byte)27;
      byteArray0[3] = (byte)0;
      byteArray1[5] = (byte)27;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)27);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(54, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)71;
      byteArray1[2] = (byte)71;
      byteArray1[3] = (byte)71;
      byteArray1[4] = (byte)71;
      byteArray1[5] = (byte)71;
      byteArray1[6] = (byte)71;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(2886, byteArray0);
      Object object0 = base64_0.decode((Object) "NW6");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(49, byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode((byte[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-91);
      byteArray1[1] = (byte) (-75);
      byteArray1[2] = (byte) (-25);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-81);
      byteArray1[5] = (byte) (-63);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byte byte0 = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byte byte1 = (byte)46;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(1344, byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encode((byte[]) null);
      base64_0.encode(byteArray0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger(byteArray1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(3516, byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 3516, 3516);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64((-768), byteArray0);
      base64_0.encode(byteArray0, (-3051), (-768));
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-72);
      byteArray1[1] = (byte)109;
      byteArray1[2] = (byte)113;
      byteArray1[3] = (byte) (-75);
      byteArray1[4] = (byte)102;
      byteArray1[5] = (byte)80;
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 85, (byte)109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(858, byteArray0);
      base64_0.decode((String) null);
      base64_0.decode(byteArray0, (-1), (-1));
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)48, (byte)25, (byte) (-95), (byte)25, (byte)0, (byte)108, (byte)0, (byte) (-1)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(98, byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-41);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(98, byteArray1);
      base64_0.encodeToString(byteArray0);
      Object object0 = base64_0.decode((Object) "^o%yM8#MZ/I");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object1, object0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(4, byteArray1);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAAA\u0000\u0000\u0000", string0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray2 = base64_0.decode("AAAA\u0000\u0000\u0000");
      assertEquals(3, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)36;
      Base64.isBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)63;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)63}, byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64.isBase64("");
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte)10);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64((-1957), byteArray1, false);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)12;
      byte byte1 = (byte) (-8);
      Base64.isBase64("GcFc ck80%$");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64.isBase64((byte)61);
      int int0 = (-1356);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)61;
      byte byte0 = (byte)100;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)61;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1356), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [=d=======]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)126);
      byte[] byteArray1 = new byte[4];
      // Undeclared exception!
      try { 
        Base64.encodeBase64String(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byte byte0 = (byte)38;
      byteArray0[1] = (byte)38;
      byte byte1 = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byte byte2 = (byte) (-114);
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte)113;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)113, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [{&\uFFFD\uFFFDq]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)119);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64.isBase64((byte) (-4));
      // Undeclared exception!
      try { 
        Base64.decodeBase64((byte[]) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-35);
      byteArray0[0] = (byte) (-35);
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafe(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      Base64 base64_0 = new Base64((-3782), byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = base64_0.decode("2Q==");
      byte[] byteArray2 = new byte[2];
      base64_0.encodeToString(byteArray0);
      byteArray2[0] = (byte) (-39);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.intValue();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString(byteArray1);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-39);
      byteArray0[0] = (byte) (-39);
      Base64 base64_0 = new Base64((-3782), byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode("2Q==");
      byte[] byteArray1 = new byte[2];
      base64_0.encodeToString(byteArray0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64String(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      Base64 base64_0 = new Base64((-3782), byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode("2Q==");
      byte[] byteArray1 = new byte[1];
      base64_0.encodeToString(byteArray0);
      byteArray1[0] = (byte) (-39);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.intValue();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)65);
      bigInteger0.or(bigInteger1);
      Base64.discardWhitespace(byteArray2);
      Base64.isArrayByteBase64(byteArray2);
      byte[] byteArray3 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      bigInteger0.byteValueExact();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte byte0 = (byte)1;
      Base64.isBase64((byte)10);
      bigInteger0.or(bigInteger1);
      BigInteger bigInteger3 = new BigInteger(byteArray1);
      int int1 = 1358;
      bigInteger0.shiftRight(1358);
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger2);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)1;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64((-3782), byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode("AA==");
      byte[] byteArray1 = new byte[2];
      base64_0.encodeToString(byteArray0);
      byteArray1[0] = (byte) (-39);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      bigInteger0.intValueExact();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.intValue();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte byte0 = (byte)65;
      Base64.isBase64((byte)65);
      bigInteger0.or(bigInteger1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.isArrayByteBase64(byteArray2);
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray3);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      int int0 = (-1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      int int1 = Base64.PEM_CHUNK_SIZE;
      bigInteger0.max(bigInteger1);
      bigInteger0.byteValueExact();
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((-1), byteArray0, true);
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "Input array too big, the output array would be bigger (";
      // Undeclared exception!
      try { 
        Base64.decodeBase64("Input array too big, the output array would be bigger (");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64Chunked(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(98);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeBase64("Input array too big, the output array would be bigger (");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.not();
      Base64.encodeBase64(byteArray0, true);
      int int0 = 8160;
      bigInteger0.nextProbablePrime();
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(8160);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-21);
      byteArray0[0] = (byte) (-21);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2649);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-21);
      byteArray0[0] = (byte) (-21);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      int int0 = (-1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.intValueExact();
      bigInteger0.max(bigInteger1);
      bigInteger0.byteValueExact();
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "Input array t7 big, the output array woul be bigger (";
      // Undeclared exception!
      try { 
        Base64.decodeBase64("Input array t7 big, the output array woul be bigger (");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      Base64 base64_0 = new Base64((-3782), byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.decode("2Q==");
      byte[] byteArray1 = new byte[2];
      base64_0.encodeToString(byteArray0);
      byteArray1[0] = (byte) (-39);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValueExact();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.intValue();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)65);
      bigInteger0.or(bigInteger1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.isArrayByteBase64(byteArray2);
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray3);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeBase64("org.apache.Uommons.codec.EncoderException");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte byte0 = (byte)85;
      byte byte1 = (byte)0;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte byte2 = (byte) (-70);
      // Undeclared exception!
      try { 
        Base64.encodeBase64String(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      bigInteger0.max(bigInteger1);
      bigInteger0.byteValueExact();
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      byte byte0 = (byte)1;
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64((byte) (-1), byteArray0, true);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int int0 = 98;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(98);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeBase64("]]");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = "org.apache.commons.codec.EncoderException";
      // Undeclared exception!
      try { 
        Base64.decodeBase64("org.apache.commons.codec.EncoderException");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      Base64 base64_0 = new Base64((-3782), byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = base64_0.decode("2Q==");
      byte[] byteArray2 = new byte[2];
      base64_0.encodeToString(byteArray0);
      byteArray2[0] = (byte) (-39);
      base64_0.encode(byteArray1, 1107, (-1546));
      byteArray2[1] = (byte) (-39);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      base64_0.isUrlSafe();
      Base64.isBase64((byte) (-39));
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      Base64.discardWhitespace(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray3);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.intValueExact();
      bigInteger0.max(bigInteger1);
      bigInteger0.byteValueExact();
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      Base64.isBase64((byte) (-76));
      bigInteger1.setBit(64);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(96);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = (-1608);
      byte[] byteArray0 = null;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1608), (byte[]) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = (-2502);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2502));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(68);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-113);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(1, byteArray0, true);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      // Undeclared exception!
      try { 
        Base64.encodeBase64Chunked(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(68, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)12;
      byteArray0[2] = (byte)12;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      int int0 = (-3782);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-39);
      byteArray0[0] = (byte) (-39);
      Base64 base64_0 = new Base64((-3782), byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = base64_0.decode("2Q==");
      byte[] byteArray2 = new byte[2];
      base64_0.encodeToString(byteArray0);
      byteArray2[0] = (byte) (-39);
      base64_0.encode(byteArray1, 1107, (-1546));
      byteArray2[1] = (byte) (-39);
      // Undeclared exception!
      try { 
        Base64.encodeBase64String(byteArray2);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeBase64("org.apache.commons.codec.EncoderException");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)23;
      byte byte0 = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)110;
      byte byte1 = (byte) (-48);
      byteArray0[8] = (byte) (-48);
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)80);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)66;
      byteArray0[1] = (byte)66;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)118;
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(579);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)104;
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)116;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2360), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0001f\uFFFDn!\u0000t]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)117;
      // Undeclared exception!
      try { 
        Base64.decodeInteger(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64String(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [0\u0019]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
