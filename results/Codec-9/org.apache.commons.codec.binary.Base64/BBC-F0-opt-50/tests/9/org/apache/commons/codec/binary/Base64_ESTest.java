/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:51:18 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(3338);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray1, 85, 3674);
      base64_0.encode(byteArray0, 3674, (-456));
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, 3866);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (11082) than the specified maxium size of 3866
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(3338);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray1, 85, 3674);
      Base64 base64_1 = new Base64(true);
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(3338);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray1);
      // Undeclared exception!
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(15, byteArray0);
      Object object0 = base64_0.decode((Object) "nu5zan)Mv(Q/{(6>");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Object object0 = new Object();
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 1, 1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)57);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode(byteArray1, 0, 1);
      base64_0.encode(byteArray1, 1, (-1272));
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-65);
      byteArray1[1] = (byte) (-38);
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)50;
      byte byte0 = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[6] = (byte) (-4);
      byteArray1[7] = (byte)99;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.intValue();
      BigInteger bigInteger1 = bigInteger0.pow(405);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      Base64.decodeBase64("a}?h=_R");
      bigInteger1.gcd(bigInteger0);
      Base64 base64_0 = new Base64(64611);
      Base64.decodeBase64(byteArray2);
      base64_0.decode(byteArray2);
      // Undeclared exception!
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)102;
      Base64.isBase64(byteArray0);
      Random.setNextRandom((byte)115);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.byteValueExact();
      BigInteger bigInteger1 = bigInteger0.pow(3866);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((byte)10);
      base64_0.encode(byteArray0, 64, 64);
      base64_0.readResults(byteArray0, (byte)10, 2);
      bigInteger0.andNot(bigInteger1);
      base64_0.encode(byteArray0, (-426), (-426));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3853);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(3853);
      bigInteger0.longValueExact();
      base64_0.encode(byteArray0, 1, 97);
      base64_0.encode(byteArray0, 1, (-1963));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3843);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray1);
      Base64 base64_1 = new Base64(64);
      base64_1.encode(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, false, false, 3843);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3843);
      bigInteger1.divide(bigInteger0);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(3847);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[3];
      // Undeclared exception!
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3843);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      bigInteger0.longValueExact();
      base64_0.encode(byteArray0, 5, 5);
      Base64.decodeBase64("ISO-8859-1");
      Random.setNextRandom(76);
      Random.setNextRandom(5);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3843);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      bigInteger0.longValueExact();
      base64_0.encode(byteArray0, 5, 5);
      base64_0.encode(byteArray0, (-446), (-446));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3853);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.modInverse(bigInteger2);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, false, false);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      base64_0.encode(byteArray1, 439, 3853);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3843);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger2.divide(bigInteger0);
      Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[3];
      Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3853);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(336);
      // Undeclared exception!
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3843);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3843);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray1);
      Base64 base64_1 = new Base64(76);
      base64_1.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3853);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      String string0 = Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64(string0);
      Base64.decodeBase64(string0);
      base64_0.encodeToString(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(73, 73, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1796);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3853);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 1, 97);
      base64_0.encode(byteArray0, 1, (-1959));
      assertEquals(2136, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64.isBase64((byte) (-53));
      Base64 base64_0 = new Base64((-50), (byte[]) null, false);
      base64_0.encode((byte[]) null);
      base64_0.encode((byte[]) null, (-50), (-50));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (byte) (-53), (byte) (-53));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(3853);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray0, 76, 76);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64();
      Base64.isBase64((byte)61);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64 base64_0 = new Base64(4);
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("orga\uFFFD\uFFFDpach\uFFFD\uFFFDecom\uFFFD\uFFFDmons\uFFFD\uFFFDcode\uFFFD\uFFFDcbin\uFFFD\uFFFDaryB\uFFFD\uFFFDase6\uFFFD\uFFFD", string0);
      //  // Unstable assertion: assertEquals(24, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64.decodeBase64("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)62;
      Base64 base64_0 = new Base64(24, byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.equals(base64_0);
      BigInteger bigInteger1 = bigInteger0.pow(8148);
      bigInteger1.min(bigInteger0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(50, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.testBit(276);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
      
      Base64 base64_0 = new Base64(false);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("ParametersuppliedtoBase64decodeisnotabyteoraString==", string0);
      
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-13);
      byteArray3[1] = (byte)92;
      byteArray3[2] = (byte)20;
      byteArray3[3] = (byte)1;
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64 base64_1 = new Base64(false);
      base64_1.decode(byteArray4, (int) (byte)1, (int) (byte)20);
      assertEquals(10, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decodZ is not a byte[] or a String");
      Base64 base64_0 = new Base64();
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("ParametersuppliedtoBase64decodZisnotabyteoraString==", string0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(70, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64Chunked(byteArray2);
      base64_1.decode(byteArray4, (int) (byte)0, 2467);
      assertEquals(96, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.valueOf((-1L));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      base64_0.encode(byteArray0, (-1773), (-1773));
      assertEquals(24, byteArray0.length);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-108);
      byte byte0 = (byte)32;
      byteArray0[1] = (byte)32;
      byte byte1 = (byte) (-118);
      byteArray0[2] = (byte) (-118);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-108);
      byteArray2[1] = (byte) (-108);
      byteArray2[2] = (byte) (-118);
      byteArray2[3] = (byte) (-108);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, (int) (byte) (-118));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -118
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)116;
      byteArray0[8] = (byte)0;
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.isBase64((byte)77);
      Base64 base64_0 = new Base64((byte)116);
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.encode(object0);
      try { 
        base64_0.encode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      base64_1.decode(byteArray0, (int) (byte)0, 1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte) (-80));
      Base64.encodeBase64(byteArray0, true, false);
      base64_1.encode(byteArray1, (int) (byte) (-80), (-1272));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-65);
      Base64.encodeBase64(byteArray0, true, false, 6);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      int int0 = 1;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Object object0 = new Object();
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      int int0 = 1;
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 1, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64(false);
      base64_0.isUrlSafe();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      bigInteger0.signum();
      bigInteger0.bitCount();
      bigInteger0.longValueExact();
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, true);
      Base64.encodeBase64(byteArray2, false, true);
      base64_0.encode(byteArray4, 1, 64);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64.isBase64((byte) (-2));
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("!F`RcXo3");
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64("{ASM");
      byte byte0 = (byte) (-88);
      Base64.isBase64((byte) (-88));
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-88);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte) (-88), 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -88
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      bigInteger0.signum();
      bigInteger0.bitCount();
      bigInteger0.longValueExact();
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray1);
      BigInteger.valueOf(2);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte)127);
      Base64.encodeBase64(byteArray2, false, true);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      Base64.isBase64((byte)110);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)7, byteArray0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)7;
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Object object0 = new Object();
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 1, 1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)57);
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.encode(byteArray1, 1, (-1272));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValueExact();
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, false);
      base64_1.encode(byteArray0, 1, 1);
      base64_1.avail();
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false);
      Base64.decodeInteger(byteArray4);
      Base64.isBase64(byteArray2);
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString(8189);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.signum();
      bigInteger0.bitCount();
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger2.longValueExact();
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, true);
      base64_0.encode(byteArray0, 2135, (-315));
      base64_0.avail();
      Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray2);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray3, 8189, 901);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, false, false, 1231);
      base64_0.readResults(byteArray0, 4126, 1035);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.abs();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = bigInteger2.pow(3853);
      BigInteger.valueOf(10L);
      bigInteger1.not();
      Base64.isBase64("8iYJ*jR=?h:@;4*");
      Base64 base64_1 = new Base64(false);
      base64_0.isUrlSafe();
      Base64.decodeBase64("H}lSHaBaa");
      Base64.encodeInteger(bigInteger3);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.abs();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger0);
      bigInteger1.pow(35);
      BigInteger.valueOf(0L);
      bigInteger0.not();
      Base64.isBase64("NMhAhJMBg|h3kp(");
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64(1614);
      byte[] byteArray0 = new byte[0];
      base64_0.readResults(byteArray0, 1019, (-4179));
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)120;
      Base64.decodeBase64(byteArray0);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)86;
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, false, false);
      base64_0.readResults(byteArray1, 116, 116);
      base64_0.readResults(byteArray1, 718, 718);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)33;
      Base64.isBase64((byte)98);
      Base64.encodeBase64(byteArray0, false, false);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1);
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)7);
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString(76);
      Base64.encodeInteger(bigInteger0);
      bigInteger0.signum();
      bigInteger0.bitCount();
      bigInteger0.longValueExact();
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-3);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64 base64_1 = new Base64(false);
      Base64.encodeBase64(byteArray4, false, true);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2, 2, 2135);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 50
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 48);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-107);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("|O`H.AG@8MqLn");
      Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64(false);
      Base64.decodeInteger(byteArray2);
      base64_0.readResults(byteArray1, (byte) (-107), (-658));
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(true);
      boolean boolean0 = true;
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, true);
      Base64 base64_2 = new Base64(64);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray4, 64, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      Base64.encodeBase64(byteArray0, false, false, 693);
      base64_0.hasData();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-38);
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte)21;
      byteArray1[3] = (byte)119;
      byteArray1[4] = (byte)68;
      byteArray1[5] = (byte) (-31);
      byteArray1[6] = (byte)23;
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false);
      Base64 base64_0 = new Base64(4091, (byte[]) null, false);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.decodeBase64("8,)P;LGGWACY0e");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)41;
      Base64.encodeBase64Chunked((byte[]) null);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)52;
      base64_0.readResults(byteArray0, 4091, (byte) (-90));
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.encode((byte[]) null, (-623), (-623));
      Base64.encodeBase64((byte[]) null, true);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)7);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("Vb)");
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray2, (-658), 136);
      Base64.encodeBase64Chunked(byteArray3);
      Base64 base64_1 = new Base64(false);
      Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_2 = new Base64(1457);
      base64_2.encode(byteArray3, 109, (int) (byte) (-1));
      Base64 base64_3 = new Base64(76, (byte[]) null, false);
      base64_3.avail();
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)0;
      Object object0 = new Object();
      Base64 base64_0 = new Base64((-56));
      base64_0.decode(byteArray0, (int) (byte) (-2), (-56));
      byte[] byteArray1 = base64_0.decode("");
      Object object1 = base64_0.decode((Object) "");
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.isUrlSafe();
      base64_0.encode(object1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      Object object0 = new Object();
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, 2421);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.isBase64(byteArray1);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      Object object0 = new Object();
      base64_0.decode(byteArray0, 2421, (int) (byte)0);
      base64_0.decode("");
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64((-2276));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)123;
      base64_0.readResults(byteArray0, (byte)1, 0);
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)59;
      byte byte0 = (byte) (-21);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64.isBase64((byte) (-1));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("Vb)");
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray2, (-658), 136);
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray3);
      try { 
        base64_0.encode((Object) "Vb)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-46);
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)109;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)109, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u000B\uFFFD\u0000m]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.isProbablePrime((-3721));
      bigInteger0.toString((-1589));
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[8];
      bigInteger0.signum();
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-7);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte) (-109);
      bigInteger0.bitCount();
      byteArray1[5] = (byte) (-25);
      byteArray1[6] = (byte)0;
      bigInteger0.longValueExact();
      byteArray1[7] = (byte) (-9);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64((byte[]) null, true, true);
      base64_0.encode(byteArray0, (int) (byte) (-9), (int) (byte)0);
      base64_0.avail();
      Base64.decodeInteger(byteArray3);
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, true, false, 0);
      int int1 = 1;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)33;
      Base64 base64_0 = new Base64(3307, byteArray0);
      Object object0 = base64_0.decode((Object) "WjwJjfiv5nh=@W$TQ&");
      Object object1 = base64_0.decode(object0);
      Object object2 = base64_0.encode(object1);
      assertNotSame(object2, object1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)0, (-867));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)118;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1829, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\uFFFDv]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(1, (byte[]) null, false);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64((-2163));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-26);
      Base64.encodeBase64String(byteArray0);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)86;
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode("2t> {:@Ir$P");
      Base64.isBase64("");
      base64_0.decode(byteArray2);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-26);
      byteArray3[2] = (byte)124;
      byteArray3[3] = (byte)4;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte) (-26);
      byteArray3[6] = (byte)26;
      byteArray3[7] = (byte)71;
      byteArray3[8] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, (int) (byte) (-26), (int) (byte)86);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -26
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-107);
      byteArray1[4] = (byte)104;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)8;
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      base64_0.encodeToString(byteArray0);
      Base64.decodeBase64(":");
      base64_0.decode(byteArray0, (int) (byte)104, 0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = (-937);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-22);
      Base64 base64_0 = new Base64((-937), byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode("O&RTyrJ{");
      Base64.isBase64("~J'1*)f@~ee");
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode(byteArray1, 995, (int) (byte) (-22));
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, (int) (byte) (-41));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -41
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64(1614);
      byte[] byteArray0 = new byte[0];
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("[#T");
      boolean boolean0 = false;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-125);
      byteArray1[2] = (byte) (-76);
      byteArray1[3] = (byte)51;
      byteArray1[4] = (byte)28;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)10;
      byteArray1[7] = (byte)4;
      Base64.encodeBase64URLSafe(byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)50;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD42]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)16;
      byteArray0[1] = (byte)16;
      Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64((-121), (byte[]) null, true);
      Object object0 = base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.decode(object1);
      base64_0.encode(object2);
      assertNotSame(object2, object0);
      
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.decode((byte[]) null);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger1.abs();
      Base64.toIntegerBytes(bigInteger1);
      Base64.encodeInteger(bigInteger1);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
      
      BigInteger.valueOf(0L);
      Base64.isBase64("NMhAhJMBg|h3kp(");
      byte[] byteArray2 = Base64.encodeInteger(bigInteger2);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode("]y\u0000.&t");
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)91;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-54)}, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      byteArray1[1] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("WwA=[\n", string0);
      
      Base64.isArrayByteBase64(byteArray1);
      base64_0.decode("");
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      //  // Unstable assertion: assertEquals(27, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64((-1374));
      Base64.encodeBase64((byte[]) null, false, false);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.isUrlSafe();
      String string0 = "tF]a;N!2~V[-N7Zog";
      base64_0.decode((Object) "tF]a;N!2~V[-N7Zog");
      base64_0.encode(byteArray1);
      base64_0.encode(byteArray0);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)48;
      byte byte0 = (byte)0;
      try { 
        base64_0.encode((Object) "tF]a;N!2~V[-N7Zog");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-108);
      base64_0.decode(byteArray0, 0, 0);
      base64_0.avail();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)78;
      byteArray1[4] = (byte)35;
      byteArray1[5] = (byte)78;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-108);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte) (-37), (int) (byte)35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -37
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-96);
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte) (-96);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)1;
      Base64 base64_0 = new Base64(112, byteArray1);
      Base64.decodeInteger(byteArray1);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.byteValueExact();
      bigInteger1.xor(bigInteger0);
      bigInteger1.or(bigInteger0);
      bigInteger1.longValue();
      bigInteger1.add(bigInteger0);
      bigInteger0.toString(1);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode("!71#EA A\"");
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger0.andNot(bigInteger2);
      base64_0.encode(byteArray0, (-1302), (-1302));
      base64_0.hasData();
      byte[] byteArray2 = base64_0.decode("");
      Base64.encodeBase64String(byteArray1);
      base64_0.decode(byteArray2);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.isBase64("!71#EA A\"");
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)67;
      byteArray2[2] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals("AEMA", string0);
      
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.DecoderException");
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      
      base64_0.encode(byteArray1, 106, (int) (byte)67);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true);
      //  // Unstable assertion: assertEquals(10, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)85, (byte)84, (byte)73, (byte)119, (byte)81, (byte)81, (byte)61, (byte)61, (byte)91, (byte)10}, byteArray4);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("Q20A", string1);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-107);
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      String string0 = "WxFUvY*`";
      byte[] byteArray1 = base64_0.decode("WxFUvY*`");
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.not();
      bigInteger0.getLowestSetBit();
      bigInteger0.signum();
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)0;
      base64_0.decode(byteArray0, (-993), 1);
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (-2980));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -2980
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("4bg;4gk");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.readResults(byteArray0, (-3993), (-3086));
      base64_0.encode(byteArray1, (-3086), (-1));
      base64_0.readResults(byteArray0, (-3047), (-3993));
      Base64.encodeBase64(byteArray0, false, true, 2265);
      base64_0.encodeToString(byteArray0);
      base64_0.decode("");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 992, 992);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 992
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
