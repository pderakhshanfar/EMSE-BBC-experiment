/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:08:21 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(505, (byte[]) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeBase64("Input array oobig, th output array would be bigger (");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(3035, 3, mockRandom0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-997L));
      BigInteger bigInteger0 = new BigInteger(1818, (-3108), mockRandom0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)32;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(99);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(16, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64((byte)94, byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.toByteArray();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte)87;
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = base64_0.decode("");
      Base64.discardWhitespace(byteArray2);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      BigInteger bigInteger1 = new BigInteger(676, (byte)87, mockRandom0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        Base64.encodeBase64Chunked(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(66);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)46;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)52, (byte) (-77), (byte)44, (byte) (-42), (byte)44, (byte)85, (byte)46}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64.isBase64((byte)91);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      Base64 base64_0 = new Base64((byte)94, byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)87;
      byteArray1[2] = (byte)37;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte)7;
      byteArray1[6] = (byte)37;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = 1471;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-34);
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-4);
      byte byte1 = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)84;
      byte byte2 = (byte)81;
      byteArray0[6] = (byte)81;
      byte byte3 = (byte)9;
      byteArray0[7] = (byte)9;
      // Undeclared exception!
      try { 
        Base64.decodeInteger(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64.isBase64((byte)120);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)120);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64((-4736), byteArray0, false);
      Base64.isBase64("Input array too big, the output array would be bigger (");
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)63;
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64.isBase64((byte)120);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)120, (byte[]) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64((byte)94, byteArray0);
      MockRandom mockRandom0 = new MockRandom(8L);
      BigInteger bigInteger0 = new BigInteger(12, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)87;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)40;
      byteArray2[4] = (byte) (-1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertEquals(17, byteArray3.length);
      
      Base64.encodeBase64(byteArray1, true, false);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64((byte)94, byteArray0);
      MockRandom mockRandom0 = new MockRandom(8L);
      BigInteger bigInteger0 = new BigInteger(16, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)87;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)87;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte) (-120);
      byteArray1[8] = (byte)26;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 1471);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byte byte0 = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)11;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)14;
      byteArray0[0] = (byte)14;
      byte byte1 = (byte)1;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)1;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafe(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, (byte[]) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte byte0 = (byte) (-38);
      Base64.isBase64((byte) (-38));
      byte[] byteArray0 = new byte[4];
      byte byte1 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-38);
      Base64 base64_0 = new Base64(1456, byteArray0, false);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-6);
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2761));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64(122, byteArray0, false);
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1466));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)37;
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-120);
      byteArray0[8] = (byte)94;
      Base64 base64_0 = new Base64((-1803), byteArray0);
      MockRandom mockRandom0 = new MockRandom((byte) (-1));
      BigInteger bigInteger0 = new BigInteger((byte)94, mockRandom0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(8, byteArray1.length);
      
      base64_0.decode(byteArray0, (int) (byte)0, 1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(12, byteArray3.length);
      
      byte[] byteArray4 = base64_0.decode("Q*A=YV'%3ZS!BzPK/J");
      assertArrayEquals(new byte[] {(byte)64}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)41;
      byteArray0[0] = (byte)41;
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafe(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      bigInteger0.bitLength();
      byte byte0 = (byte)18;
      byteArray0[1] = (byte)18;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.getLowestSetBit();
      bigInteger1.setBit((byte)18);
      bigInteger0.gcd(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 2414);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte)120;
      byteArray0[3] = (byte)120;
      byte byte3 = (byte)46;
      byteArray0[4] = (byte)46;
      byte byte4 = (byte) (-27);
      byteArray0[5] = (byte) (-27);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-124);
      Base64 base64_0 = new Base64(0, byteArray0, false);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-65);
      byteArray0[0] = (byte) (-65);
      byte byte1 = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      Base64 base64_0 = new Base64((-1), byteArray0);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(76);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true, true, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      int int0 = (-1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64.isBase64("O:(;");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 79;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(79);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)66;
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-13);
      Base64 base64_0 = new Base64(534, byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-13);
      byteArray1[1] = (byte) (-13);
      byteArray1[2] = (byte) (-52);
      byteArray1[3] = (byte) (-13);
      byteArray1[4] = (byte) (-44);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-17);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(7, byteArray2.length);
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64String(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)55;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-55);
      Base64 base64_0 = new Base64(95, byteArray0, false);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(64);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)14;
      byteArray0[0] = (byte)14;
      byte byte1 = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafe(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeBase64((String) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeBase64((byte[]) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [a4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDG\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-188), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -188
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
