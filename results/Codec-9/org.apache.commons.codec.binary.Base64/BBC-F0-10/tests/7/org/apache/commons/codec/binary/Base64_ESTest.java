/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:05:37 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "pR%Clp~");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[99];
      byte byte0 = (byte)20;
      Base64 base64_0 = new Base64((byte)20, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[99];
      Base64 base64_0 = new Base64((byte)20, byteArray0, true);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(525);
      base64_0.decode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, 525, (-1847));
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-1146));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1146
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[99];
      Base64 base64_0 = new Base64((byte)20, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode(byteArray1, (int) (byte)20, 64);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[92];
      byte byte0 = (byte)20;
      Base64 base64_0 = new Base64((byte)20, byteArray0, false);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      int int0 = 791;
      // Undeclared exception!
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[92];
      Base64 base64_0 = new Base64((byte)20, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[92];
      Base64 base64_0 = new Base64((byte)20, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode(byteArray1, (int) (byte)20, 791);
      // Undeclared exception!
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[111];
      Base64 base64_0 = new Base64((byte)21, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[92];
      Base64 base64_0 = new Base64((byte)21, byteArray0, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[105];
      Base64 base64_0 = new Base64((byte)18, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = new byte[0];
      base64_0.encode(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 64, 1366);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1085
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[89];
      Base64 base64_0 = new Base64((byte)18, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      String string0 = base64_0.encodeToString(byteArray2);
      Base64.decodeBase64(string0);
      Random.setNextRandom(64);
      // Undeclared exception!
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[89];
      Base64 base64_0 = new Base64((byte)17, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      String string0 = base64_0.encodeToString(byteArray2);
      Base64.decodeBase64(string0);
      // Undeclared exception!
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1055), byteArray0);
      base64_0.encode(byteArray0);
      Object object0 = base64_0.decode((Object) "3nuJc YMI05 lCK");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-51);
      base64_0.decode(byteArray0, 0, (int) (byte)52);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[77];
      Base64 base64_0 = new Base64((byte)17);
      base64_0.encode(byteArray0, (int) (byte)17, (int) (byte)17);
      base64_0.readResults(byteArray0, (byte)17, (byte)17);
      base64_0.readResults(byteArray0, (byte)17, 51);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      base64_0.decode("}+b9cQZGm.19s");
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-44);
      Base64.encodeBase64String(byteArray0);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)7;
      base64_0.encode(byteArray0, 10, (-824));
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)12;
      base64_0.encode(byteArray0, 83, 83);
      byteArray0[7] = (byte)1;
      base64_0.decode(byteArray0, 97, (-187));
      Random.setNextRandom(1717986918);
      base64_0.encode(byteArray0);
      Base64.isBase64(byteArray0);
      base64_0.encode(byteArray0);
      base64_0.decode((Object) "CRvUAAAAAAA=");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[77];
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      String string0 = base64_0.encodeToString(byteArray2);
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[77];
      Base64 base64_0 = new Base64((byte)17, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      base64_0.encodeToString(byteArray1);
      String string0 = base64_0.encodeToString(byteArray2);
      Base64.decodeBase64(string0);
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, (int) (byte)0, 76);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)76, (byte)107, (byte)61, (byte)124, (byte) (-71)}, byteArray1);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[56];
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 76, 68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-8);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 6);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)70, (byte)102, (byte)103, (byte)61, (byte)124, (byte) (-71)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)50;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)124, (byte) (-71), (byte)59, (byte)0, (byte)115, (byte)0, (byte)50}, byteArray1);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("ew;f");
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, (int) (byte)0, 3476);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      Base64 base64_0 = new Base64((byte)33, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(84, byteArray1.length);
      assertEquals(116, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.cpmmons.codec.binary.StringUtils");
      Base64 base64_0 = new Base64(13);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 13, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, (int) (byte)0, 61);
      int int0 = base64_0.readResults(byteArray1, (byte)0, 2465);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)6, (byte)1, (byte)69, (byte)61, (byte)6, (byte)1}, byteArray1);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      base64_0.decode(byteArray1, (int) (byte)0, 1717986918);
      base64_0.encode(byteArray0, 43, 43);
      base64_0.hasData();
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(30, byteArray1.length);
      assertEquals(20, byteArray2.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      assertEquals(20, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      base64_0.decode(byteArray1, (int) (byte)0, 1717986918);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.isBase64(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 1717986918, 1717986918);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-87);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((-2686));
      Base64 base64_1 = new Base64((byte)32, byteArray1);
      Base64.isBase64(")bS9L$ {ZQDq(4l");
      Object object0 = base64_1.decode((Object) "");
      Object object1 = base64_1.encode(object0);
      Base64.encodeBase64(byteArray1, false, false);
      Object object2 = base64_0.encode(object1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-87);
      byteArray2[1] = (byte)6;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte) (-87);
      byteArray2[4] = (byte)6;
      byteArray2[5] = (byte) (-87);
      byteArray2[6] = (byte)100;
      byteArray2[7] = (byte)1;
      byteArray2[8] = (byte)6;
      Base64.encodeBase64(byteArray2, false, false);
      base64_0.decode(object2);
      byte[] byteArray3 = base64_1.decode(byteArray1);
      Base64.decodeBase64(")bS9L$ {ZQDq(4l");
      base64_0.readResults(byteArray3, 3873, (-437));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((byte[]) null);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.decode(byteArray1, (int) (byte)0, 1717986918);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.byteValueExact();
      bigInteger0.shiftLeft((byte)0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(":jd}p5");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64(2398);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)26;
      byteArray2[1] = (byte) (-70);
      byteArray2[2] = (byte)3;
      Base64.decodeBase64(byteArray2);
      Base64.decodeInteger(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-250), 2398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64.decodeBase64("N0I=8Ry");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("qO@\"([OUXM'2Bdbxgt");
      base64_0.decode(byteArray1, (int) (byte)0, 1433);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte)0;
      base64_1.encode(byteArray2);
      base64_1.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64.decodeBase64((String) null);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("g\"!wng>`:4h");
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 4073, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64("aB");
      Base64.isBase64("!DBIK#;8K");
      Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64("Gd!J^0q?rs");
      base64_0.encode(byteArray3, 56, (int) (byte) (-118));
      Base64.isBase64(byteArray3);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 3503, (byte) (-118));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      base64_0.decode(byteArray1, (int) (byte)0, 1717986918);
      base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_1.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(":jd}p5");
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      base64_0.decode(byteArray1, (int) (byte)0, 1717986918);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray1, 1717986918, 2);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("");
      base64_0.decode(byteArray0, (int) (byte)0, (-743));
      base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(true);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("N0I=8Ry");
      byte byte0 = (byte)111;
      Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64((byte)111);
      int int0 = Base64.PEM_CHUNK_SIZE;
      base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      base64_0.decode(byteArray1, (int) (byte)0, 1717986918);
      base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(true);
      base64_1.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)34;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)118);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.getLowestSetBit();
      Base64 base64_0 = new Base64(true);
      bigInteger0.shiftLeft(442);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 657);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64(92, byteArray2, true);
      base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)33;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte) (-44);
      byteArray3[8] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)33;
      Base64 base64_0 = new Base64(true);
      base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger1);
      base64_0.encodeToString((byte[]) null);
      Base64.isBase64("");
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.encode((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.encode((byte[]) null, 0, 0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)62;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode("ALlvAD4");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.equals((Object) null);
      Base64.encodeInteger(bigInteger0);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("");
      Base64.isBase64("");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeBase64(byteArray0);
      base64_0.decode("");
      Object object0 = base64_0.decode((Object) "ALlvAD4=\r\n");
      base64_0.decode(object0);
      base64_0.encode(byteArray1, 0, (int) (byte)111);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64.isBase64((byte)28);
      Base64.isBase64("_i");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)28;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1);
      Base64.isBase64("_i");
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)34;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)124);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.getLowestSetBit();
      Base64 base64_0 = new Base64(true);
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(1200);
      Base64 base64_1 = new Base64(false);
      base64_1.decode((Object) "");
      Base64 base64_2 = new Base64(1200, byteArray0, false);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      Base64.encodeBase64(byteArray2, false, false, 1073741824);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      Base64 base64_0 = new Base64((-1726));
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.avail();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte) (-55);
      byteArray1[3] = (byte) (-107);
      byteArray1[4] = (byte) (-20);
      byteArray1[5] = (byte)36;
      byteArray1[6] = (byte)7;
      byteArray1[7] = (byte) (-110);
      byteArray1[8] = (byte)113;
      Base64.decodeInteger(byteArray1);
      Base64.isBase64((byte)93);
      Base64.isBase64((byte)99);
      base64_0.decode(byteArray0);
      Base64.encodeBase64((byte[]) null, false, false, (int) (byte)93);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)34;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)118);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.not();
      bigInteger0.getLowestSetBit();
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.avail();
      Base64.decodeInteger(byteArray1);
      base64_0.decode((String) null);
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("N0I=8Ry");
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, (-7591), (-7591));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(1);
      base64_1.readResults(byteArray0, (-635), (byte)111);
      base64_1.encode(byteArray1);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)54;
      byteArray0[3] = (byte)0;
      Base64.encodeBase64((byte[]) null);
      Base64.isBase64("Y");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      bigInteger2.gcd(bigInteger1);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      Base64.decodeBase64(byteArray0);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-65);
      base64_0.decode(byteArray0, (-1904), (int) (byte) (-65));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(false);
      base64_0.readResults(byteArray0, 64, (byte) (-65));
      Base64 base64_2 = new Base64((-12));
      Base64 base64_3 = new Base64((byte) (-65), (byte[]) null);
      base64_3.readResults((byte[]) null, 36, 68);
      base64_0.encode((byte[]) null);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = null;
      Base64.decodeBase64((String) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(114);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      BigInteger bigInteger1 = bigInteger0.abs();
      bigInteger1.divideAndRemainder(bigInteger0);
      bigInteger1.signum();
      bigInteger1.negate();
      bigInteger1.testBit(2308);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.hasData();
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-1547));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1547
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-65);
      base64_0.decode(byteArray0, (-1904), (int) (byte) (-65));
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(68);
      base64_0.readResults(byteArray0, 64, (byte) (-65));
      Base64 base64_2 = new Base64(1, byteArray1);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)1;
      byteArray3[1] = (byte)1;
      // Undeclared exception!
      try { 
        base64_2.encode(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray1 = base64_1.decode("");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      base64_1.encodeToString(byteArray1);
      Base64.isBase64("{@|ybBe\"m");
      Base64.isBase64("@My/8K:tz^XiBv?t");
      base64_0.encode(byteArray1);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = base64_0.decode("3(?x8Ku<}(Sz&vGeCv");
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2, (int) (byte)62, (int) (byte)31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 62
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("N0I=8Ry");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64((byte)111);
      base64_0.readResults(byteArray1, (byte)111, 78);
      byte[] byteArray2 = new byte[0];
      base64_0.encode(byteArray2);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray1, (-1), (-2312));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      Base64.decodeBase64(byteArray0);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-65);
      base64_0.decode(byteArray0, (-1904), (int) (byte) (-65));
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      base64_0.encode(byteArray0);
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray1 = base64_0.decode("D");
      base64_0.encode(byteArray1, 16, 0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)4;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)61;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)61;
      byteArray1[5] = (byte)4;
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.pow(123);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      base64_0.readResults((byte[]) null, 25, 25);
      base64_0.decode("UTF-16");
      Base64.isBase64((byte)61);
      base64_0.decode(byteArray2, (int) (byte)61, 104);
      Base64.encodeBase64(byteArray3, true);
      try { 
        base64_0.encode((Object) "ZwQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte byte0 = (byte)65;
      Base64.isBase64((byte)65);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      try { 
        base64_0.encode((Object) "}Sc");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(5);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)121;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)86;
      Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_1 = new Base64((byte) (-103));
      base64_1.readResults(byteArray1, 5, 4233);
      base64_0.encode(byteArray0);
      base64_1.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = true;
      boolean boolean1 = false;
      Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 493, 2883);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)91;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte) (-57));
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray0, 1, (int) (byte)0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 95);
      base64_0.decode((String) null);
      Base64.encodeBase64(byteArray1, true, true, 4964);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("N0I=8Ry");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)109;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-37);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64();
      String string0 = "Oyz2`~v&b6;Ac{";
      Base64.decodeBase64("N0I=8Ry");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(70, byteArray0, false);
      byte[] byteArray1 = base64_1.decode("U4Ks6`*z;k0");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      base64_0.encodeToString(byteArray1);
      Base64.isBase64("ryl9ag0sdL$j=x$SS");
      Base64.isBase64(" YPR/lNL\u0007(|1M");
      base64_1.encode(byteArray0);
      Base64.decodeBase64(byteArray1);
      base64_1.decode("D");
      base64_1.encode(byteArray0, 0, 671);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte byte0 = (byte) (-65);
      Base64 base64_0 = new Base64(false);
      Base64.decodeInteger(byteArray1);
      base64_0.decode(byteArray0);
      base64_0.decode(byteArray0, (int) (byte) (-65), 62);
      base64_0.avail();
      String string0 = "a#";
      Base64.isBase64("a#");
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.toByteArray();
      bigInteger0.add(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger2.divideAndRemainder(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64.isBase64((byte)28);
      String string0 = "_i";
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64("Wl");
      int int0 = (-956);
      Base64 base64_0 = new Base64((-956), byteArray0, true);
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 1, 350);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("N0I=8Ry");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.encodeToString(byteArray2);
      Base64.isBase64("");
      Base64.isBase64("");
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.decodeBase64(byteArray1);
      base64_0.decode("N0I");
      base64_0.encode(byteArray2, (int) (byte) (-71), (int) (byte)111);
      Base64.isBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)61;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)61;
      base64_0.encode(byteArray2, Integer.MAX_VALUE, (-1018));
      base64_0.decode("N0I=8Ry");
      base64_0.readResults(byteArray1, (byte)109, 1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("N0I=8Ry");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)109;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-37);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-37);
      base64_0.encode(byteArray3, Integer.MAX_VALUE, (-1018));
      Base64.encodeBase64(byteArray2, false, true, 64);
      base64_0.decode("N0I=8Ry");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-7);
      base64_0.readResults(byteArray0, (byte) (-83), 0);
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)44;
      byte byte1 = (byte)0;
      byteArray0[5] = (byte)0;
      Base64.isBase64(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.subtract(bigInteger1);
      BigInteger.valueOf(2247L);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      bigInteger0.clearBit(0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-76);
      byteArray1[1] = (byte) (-34);
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)116, (byte)78, (byte)52, (byte)65, (byte) (-24), (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(5);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)121;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("mQB5", string0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)86;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte)98;
      base64_0.readResults(byteArray1, 43, (byte)1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      assertEquals(9, byteArray2.length);
      
      byteArray1[4] = (byte)0;
      byte[] byteArray3 = base64_0.decode(byteArray1);
      assertArrayEquals(new byte[] {(byte)85}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = base64_0.decode("+ZB@wEC");
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-112), (byte)112, (byte)16}, byteArray0);
      
      base64_0.encode((byte[]) null, 775, (-508));
      base64_0.decode((byte[]) null, (-508), (-508));
      Base64.isBase64((byte) (-1));
      base64_0.readResults((byte[]) null, (-231), 0);
      int int0 = base64_0.readResults((byte[]) null, 511, 0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-5);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      base64_0.decode("FbG\"nLk|0k`)|o_wQA");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte)1;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64(90);
      byte[] byteArray0 = new byte[7];
      base64_0.decode(byteArray0, 90, 0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      Base64.decodeBase64(byteArray0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(4457, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AEcAHwAAAA==|\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte) (-24);
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte) (-52);
      byteArray1[4] = (byte)111;
      byteArray1[5] = (byte)51;
      byteArray1[6] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("");
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      bigInteger2.bitCount();
      base64_0.decode("org.apache.commons.codec.EncoderException");
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(114);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      BigInteger bigInteger1 = bigInteger0.abs();
      bigInteger1.divideAndRemainder(bigInteger0);
      bigInteger1.negate();
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-1547));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1547
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode((Object) "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-119);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)91;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte) (-57));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-24)}, byteArray1);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64("Oyz2`~v&b6;Ac{");
      base64_0.decode(byteArray0, 350, (int) (byte)0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray3 = base64_0.decode("VI9IabSk");
      assertEquals(6, byteArray3.length);
      
      Base64.decodeBase64(byteArray2);
      base64_0.encode(byteArray0, (-1533), (int) (byte)0);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      base64_0.decode((Object) "VI9IabSk");
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "fOmm~<x\"zL0Q";
      Base64.isBase64("fOmm~<x\"zL0Q");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-61);
      byteArray0[0] = (byte) (-61);
      byte byte1 = (byte)21;
      byteArray0[1] = (byte)21;
      byte byte2 = (byte) (-30);
      byteArray0[2] = (byte) (-30);
      Base64 base64_0 = new Base64((-1270), byteArray0);
      Base64.encodeBase64(byteArray0, true);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)62;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode("ALlvAD4");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("");
      Base64.isBase64("");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeBase64(byteArray0);
      base64_0.decode("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, (int) (byte)111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)104;
      int int0 = base64_0.readResults(byteArray0, (byte)0, (-1123));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64((-696));
      byte[] byteArray0 = new byte[0];
      base64_0.decode(byteArray0, (-696), (-1159));
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)116;
      byteArray1[2] = (byte)119;
      byteArray1[3] = (byte) (-3);
      byteArray1[4] = (byte)19;
      byteArray1[5] = (byte) (-87);
      base64_0.decode(byteArray1, (int) (byte) (-87), (int) (byte)116);
      base64_0.isUrlSafe();
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray1, true, false);
      boolean boolean1 = false;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64((byte[]) null, true, true, (int) (byte)119);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-30);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals("UVUxUlFXUkZOR2xCUVVScAAA", string0);
      
      boolean boolean0 = Base64.isBase64("UVUxUlFXUkZOR2xCUVVScA0K");
      //  // Unstable assertion: assertTrue(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      bigInteger0.remainder(bigInteger1);
      bigInteger0.gcd(bigInteger1);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-17);
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.doubleValue();
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)117;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte2 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte) (-27);
      byteArray0[8] = (byte) (-7);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(35, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [(u\u0000\u0000\u0000\u0000j\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)96;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 4583);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)94;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AMYAAADHXg", string0);
      
      byte[] byteArray1 = Base64.decodeBase64("ZwcJCnJe#c;!F\"uta]2");
      assertEquals(10, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode("q{[Z?P");
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.decodeBase64(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-109)}, byteArray3);
      assertArrayEquals(new byte[] {(byte) (-87), (byte) (-109)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 3587);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64((-51));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)101;
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte)112;
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("ZWVlcA==", string0);
      
      int int0 = base64_0.readResults(byteArray0, (-1), (-1));
      assertEquals((-1), int0);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)101;
      byteArray2[1] = (byte)101;
      byteArray2[2] = (byte)101;
      byteArray2[3] = (byte)101;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertNotSame(byteArray3, byteArray2);
      assertEquals(4, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byte byte0 = (byte)86;
      byteArray0[3] = (byte)86;
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(358, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0001\u0000\uFFFDV]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)95;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)8;
      byteArray3[1] = (byte)45;
      byteArray3[2] = (byte)22;
      Base64.encodeBase64(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64.encodeBase64(byteArray3, true);
      Base64.isBase64("xxYIVddf");
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-65);
      base64_0.decode(byteArray0, (-1904), (int) (byte) (-65));
      base64_0.avail();
      Base64.isBase64("#");
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      String string0 = "Q3b";
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.toByteArray();
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      // Undeclared exception!
      try { 
        bigInteger2.divideAndRemainder(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)27;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-88);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      String string0 = "A>G?t.yQ(4OU(nC4";
      Base64.isBase64("07WWtN*r|j");
      Object object0 = base64_0.decode((Object) "A>G?t.yQ(4OU(nC4");
      Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("?7R0tF<ZSx-u{eX%8");
      base64_0.encode(object0);
      Base64.isBase64("07WWtN*r|j");
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(":}+xH&elDM|MJwXc");
      Base64.isBase64(":}+xH&elDM|MJwXc");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.flipBit(671);
      bigInteger0.and(bigInteger1);
      bigInteger0.isProbablePrime((-1));
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("?;}hv/V|Qw0#sI+");
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("K3hIZWxETU1Kd1hj", string0);
      
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray1);
      Base64.decodeInteger(byteArray2);
      Base64 base64_0 = new Base64((-2659), byteArray2);
      boolean boolean0 = Base64.isBase64(")g:i3yABT");
      assertFalse(boolean0);
      
      Base64.encodeBase64(byteArray2, true, true, 0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-114)}, byteArray1);
      
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = Base64.decodeBase64("e");
      boolean boolean0 = Base64.isArrayByteBase64(byteArray4);
      assertTrue(boolean0);
  }
}
