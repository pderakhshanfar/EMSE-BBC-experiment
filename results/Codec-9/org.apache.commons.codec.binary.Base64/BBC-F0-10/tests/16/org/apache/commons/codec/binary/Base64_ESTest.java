/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:07:30 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[137];
      Base64 base64_0 = new Base64(14, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[132];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      String string0 = "W5u)L?[InLc}GqP";
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, true, true);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[132];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[132];
      int int0 = 5;
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[132];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.discardWhitespace(byteArray0);
      Random.setNextRandom(76);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[131];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeBase64("l07^DEh[t%");
      Object object0 = base64_0.decode((Object) string0);
      base64_0.decode(byteArray0, 5, 5);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-128);
      byteArray2[1] = (byte) (-1);
      Base64.discardWhitespace(byteArray2);
      // Undeclared exception!
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[131];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64(5, byteArray0);
      // Undeclared exception!
      base64_1.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[131];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[125];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode(string0);
      // Undeclared exception!
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[114];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[9];
      byte byte0 = (byte)66;
      byteArray2[0] = (byte)66;
      byte byte1 = (byte)88;
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[97];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, 30, (-516));
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[44];
      Base64 base64_0 = new Base64(8);
      base64_0.encode(byteArray0, 8, 8);
      base64_0.decode(byteArray0, 8, 8);
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray0, 1, 8);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[114];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      base64_0.decode(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[130];
      Base64 base64_0 = new Base64(5, byteArray0);
      base64_0.encode(byteArray0, 5, 46);
      base64_0.encode(byteArray0, 46, 46);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 5, 305);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 130
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[114];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode(string0);
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[97];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[96];
      Base64 base64_0 = new Base64(5, byteArray0);
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1, 5, (int) (byte) (-17));
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-17);
      byteArray2[1] = (byte) (-17);
      byteArray2[2] = (byte) (-17);
      byteArray2[3] = (byte) (-37);
      byteArray2[4] = (byte) (-17);
      base64_0.decode(byteArray2, 0, 0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(string0);
      base64_0.decode((Object) string0);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      base64_0.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[96];
      Base64 base64_0 = new Base64(5, byteArray0);
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1, 5, (int) (byte) (-17));
      Base64.decodeInteger(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(string0);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode((Object) string0);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[96];
      Base64 base64_0 = new Base64(5, byteArray0);
      String string0 = "org.apache.commons.codec.binary.Base64";
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-17);
      base64_0.encode(byteArray3, 5, (int) (byte) (-17));
      Base64.decodeInteger(byteArray2);
      String string1 = Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeBase64(string1);
      // Undeclared exception!
      base64_0.decode((Object) string1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[96];
      Base64 base64_0 = new Base64(5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, 5, 5);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(106700, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.encode(byteArray0, (-613), (-613));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(78, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[64];
      byte[] byteArray1 = new byte[0];
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(1897, byteArray1);
      Object object0 = base64_0.decode((Object) "encodeInteger called with null parameter");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64 base64_0 = new Base64(5, byteArray0);
      base64_0.encode(byteArray0, 5, 24);
      base64_0.encode(byteArray0, 24, 24);
      base64_0.encode(byteArray0, 24, (-106));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64 base64_0 = new Base64(5, byteArray0);
      base64_0.encode(byteArray0, 5, 24);
      base64_0.encode(byteArray0, 24, 24);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(23607, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 5, 5);
      base64_0.encode(byteArray0, (-106), (-106));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64 base64_0 = new Base64(8, byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray0, 8, 8);
      base64_0.encode(byteArray0, 8, 8);
      base64_0.encode(byteArray0, (-630), (-4029));
      Base64.isBase64((byte)7);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64 base64_0 = new Base64(8, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(76, byteArray1.length);
      
      base64_0.encode(byteArray0, 8, 8);
      base64_0.encode(byteArray0, (-630), (-4029));
      base64_0.decode(byteArray0, 4017, 8);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertEquals(646, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[40];
      Base64 base64_0 = new Base64(1, byteArray0);
      base64_0.encode(byteArray0, 1, 1);
      base64_0.decode(byteArray0, 1, (-1223));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((-1062), byteArray0, true);
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte)93;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[40];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 1323);
      assertEquals(76, byteArray2.length);
      assertEquals(56, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[40];
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(8, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(58, byteArray1.length);
      
      base64_0.encode(byteArray0, 8, 8);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(40, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64((byte)1);
      assertFalse(boolean0);
      
      int int0 = base64_0.readResults(byteArray0, (byte)1, (byte)1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[40];
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(8, byteArray0);
      base64_0.encode(byteArray0, 8, 8);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
      
      int int0 = base64_0.avail();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(8, byteArray0);
      base64_0.readResults(byteArray0, 8, 8);
      base64_0.encode(byteArray0, 8, 8);
      base64_0.decode(byteArray0, (-2676), (-2676));
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals((short)1, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1, byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(8, byteArray0);
      base64_0.encode(byteArray0, 8, 8);
      BigInteger bigInteger1 = BigInteger.ZERO;
      base64_0.readResults(byteArray0, 8, 8);
      bigInteger0.add(bigInteger1);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 437, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 437
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)104;
      base64_0.decode(byteArray0, (int) (byte)1, 64);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(64, byteArray0);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codeq.binary.5tringUtils");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = 9;
      Base64 base64_0 = new Base64(9, byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 2098);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[14];
      base64_0.encode(byteArray0, (int) (byte) (-51), (int) (byte) (-51));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-318), (byte) (-51));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)102;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(22, byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAAAAAAAAAAAAAAAAAAA\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64(byteArray0, false);
      Base64.isBase64((byte) (-20));
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 1717986918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte) (-102));
      Base64.encodeBase64(byteArray1, false, false, (int) (byte)18);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)64;
      Base64 base64_0 = new Base64((-3411), byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 13, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64 base64_0 = new Base64((-34));
      Object object0 = base64_0.decode((Object) "h");
      base64_0.encode(object0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64((-34));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)16;
      Base64.isArrayByteBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(80, (byte[]) null, true);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 28, 80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-24);
      byteArray0[0] = (byte) (-24);
      Base64 base64_0 = new Base64(1913, byteArray0, false);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64((byte) (-24));
      byte[] byteArray2 = base64_0.decode(byteArray1);
      base64_0.encode(byteArray2, 4323, (int) (byte) (-24));
      Base64.isBase64((byte) (-24));
      base64_0.decode(byteArray1);
      base64_0.encode(byteArray0, 99, (int) (byte) (-24));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-2648), 1553);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(104, byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64();
      base64_0.decode("");
      Base64.isBase64((byte)126);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.longValue();
      Base64 base64_0 = new Base64((-641), (byte[]) null);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64();
      base64_0.decode("n> ^s");
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      base64_0.encode(byteArray0, (int) (byte) (-43), (int) (byte) (-43));
      base64_0.hasData();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "}_C43{l<eoe.");
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      byte byte0 = (byte)0;
      byte[] byteArray0 = Base64.decodeBase64("D&B?6");
      Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_1 = new Base64(false);
      base64_1.hasData();
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64((byte)124, byteArray0, false);
      base64_0.decode("ISO-8859-1");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(64);
      Base64.encodeBase64(byteArray0, true, true, 76);
      Base64 base64_2 = new Base64(76, byteArray0);
      Base64 base64_3 = new Base64(true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-27);
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte)9;
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)8;
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = base64_0.decode("lineSeperator must not contain base64 9haracters: [");
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)8);
      BigInteger bigInteger0 = BigInteger.TEN;
      base64_0.decode(byteArray1, 1751, (int) (byte)8);
      Random.setNextRandom(18);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64((-2152));
      base64_0.encodeToString((byte[]) null);
      Base64 base64_1 = new Base64();
      Object object0 = new Object();
      try { 
        base64_1.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64(": ");
      Base64.decodeBase64(">_4s]]]J<g?>W>[+");
      byte[] byteArray0 = new byte[4];
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray0);
      Object object0 = new Object();
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)14;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64.encodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[5] = (byte)8;
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)8);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)8, (int) (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-38);
      Base64 base64_0 = new Base64((byte) (-38), byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 2953);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte) (-37);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      String string0 = "lineSeperator must not contain base64 characters: [";
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      base64_0.hasData();
      base64_0.decode(byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-34);
      byte byte1 = (byte)52;
      byteArray0[3] = (byte)52;
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 23, (int) (byte) (-34));
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, true, 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (26) than the specified maxium size of 23
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64.isBase64((byte)67);
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      String string0 = "9y-";
      Base64.decodeBase64("9y-");
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64(0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)14;
      Base64 base64_0 = new Base64((-36));
      base64_0.encode(byteArray0, 62, (-36));
      base64_0.encode(byteArray0, (int) (byte)0, 8176);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64(byteArray1);
      Object object0 = new Object();
      Base64.decodeInteger(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      base64_0.encodeToString(byteArray0);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, (int) (byte)44);
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.hasData();
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray2, (int) (byte)0, 115);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      Base64 base64_1 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte) (-59));
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-59);
      Base64.discardWhitespace(byteArray1);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)14);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime((byte)14, mockRandom0);
      Base64.discardWhitespace(byteArray2);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.decodeInteger(byteArray1);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)52;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64(byteArray0);
      Object object0 = new Object();
      Base64.decodeInteger(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)14);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((-1), byteArray0, false);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValueExact();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.readResults(byteArray1, 1107, 0);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, false);
      base64_0.hasData();
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.isBase64((byte)0);
      base64_0.readResults(byteArray1, (-1), (byte)0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("9y-");
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64(6);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)62;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-41);
      base64_0.encodeToString(byteArray3);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode((Object) "9y-");
      base64_0.decode(byteArray0);
      Base64.decodeInteger(byteArray2);
      base64_0.avail();
      Base64.discardWhitespace(byteArray4);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byte byte2 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = null;
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64();
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray0, (-306), (byte)0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      base64_0.readResults(byteArray0, (-1735), 2);
      base64_0.encode(byteArray1, (-1735), (-1));
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode(byteArray0, 1363, 0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64String(byteArray3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64((-2165));
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_1 = new Base64();
      Object object0 = new Object();
      try { 
        base64_1.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.negate();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger2.subtract(bigInteger1);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafeString(byteArray0);
      bigInteger2.intValue();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      bigInteger0.setBit(76);
      base64_0.decode(byteArray1, (int) (byte) (-36), 0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true, false, (int) (byte) (-128));
      base64_0.encode(byteArray2);
      Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray4);
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 107);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_1 = new Base64(76, byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64String(byteArray2);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      base64_1.readResults(byteArray1, 0, (-189));
      Base64.isBase64(byteArray2);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64(byteArray1, false, false);
      base64_1.hasData();
      base64_0.avail();
      Base64.decodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)14;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)14);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((-1), byteArray0, true);
      byte[] byteArray2 = Base64.decodeBase64("jvYmXk");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      base64_0.decode((Object) "jvYmXk");
      bigInteger1.isProbablePrime((-1));
      Base64.decodeInteger(byteArray2);
      Base64.isArrayByteBase64(byteArray3);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger2 = new BigInteger(byteArray4);
      Base64.encodeInteger(bigInteger2);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray3);
      base64_0.decode(byteArray5, 3009, (-1));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)14;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)14);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((-1), byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.readResults(byteArray1, 1107, 0);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, false);
      base64_0.hasData();
      base64_0.avail();
      Base64.decodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)102;
      byte byte0 = (byte)96;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-56);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(5, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDzf`\u0000\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)96;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)52;
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte) (-34);
      byteArray1[5] = (byte) (-68);
      Base64.decodeInteger(byteArray1);
      base64_0.readResults(byteArray0, (-663), (-306));
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.readResults(byteArray0, (byte)52, (-605));
      base64_0.encode(byteArray2, (int) (byte)96, (-1735));
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray0, (int) (byte) (-34), 0);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-36);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.negate();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.subtract(bigInteger1);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafeString(byteArray0);
      bigInteger0.intValue();
      Base64.encodeBase64(byteArray1, true, true);
      bigInteger0.setBit(64);
      base64_0.decode(byteArray0, (int) (byte) (-36), 0);
      Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, (int) (byte) (-128));
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      base64_0.encodeToString(byteArray0);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, (int) (byte)44);
      Base64.isArrayByteBase64(byteArray2);
      boolean boolean0 = true;
      int int0 = (-666);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (-666));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -666
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64((-4212));
      Object object0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byte byte2 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = null;
      base64_0.readResults((byte[]) null, 93, (-4212));
      base64_0.encodeToString(byteArray0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray0, 1, (-416));
      Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeBase64("+IEfLl$MLK!'R/k");
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64(855, byteArray0, true);
      byte[] byteArray3 = base64_0.decode(byteArray1);
      assertTrue(base64_0.isUrlSafe());
      
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true, true);
      assertSame(byteArray4, byteArray3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      base64_0.encode((byte[]) null);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-34);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)0;
      byte byte1 = (byte)120;
      byteArray0[4] = (byte)120;
      byte byte2 = (byte)90;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)0;
      byte byte3 = (byte)12;
      byteArray0[7] = (byte)12;
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)83;
      base64_0.encode(byteArray0);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)120;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.avail();
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64("sVPpAAD_eA");
      Base64.isBase64((byte) (-40));
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte) (-79));
      Base64.isBase64((byte)115);
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-1);
      base64_0.encode(byteArray1, 0, 0);
      byteArray0[0] = (byte) (-53);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      String string0 = ">@";
      Base64.encodeBase64Chunked(byteArray2);
      try { 
        base64_0.encode((Object) ">@");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("9y-");
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("Mw==", string0);
      
      Base64 base64_0 = new Base64((-357));
      Base64.decodeInteger(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertEquals(3, byteArray3.length);
      
      base64_0.decode((Object) "Mw==");
      base64_0.decode(byteArray1);
      Base64.decodeInteger(byteArray2);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)47}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)13;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-85), (byte)0, (byte)117}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-127);
      base64_0.readResults(byteArray0, 0, 4271);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64((-1330));
      Base64 base64_1 = new Base64(48);
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AH4xdQA", string0);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)117;
      byteArray1[2] = (byte)126;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)49;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((byte) (-69), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-9);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-584), byteArray0);
      base64_0.avail();
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      Object object0 = base64_0.decode((Object) "gL8GUs>sb");
      base64_0.encode(object0);
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.toByteArray();
      Base64.encodeInteger(bigInteger0);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)107;
      base64_0.readResults(byteArray0, 2532, 280);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode("");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)107;
      byteArray1[2] = (byte)107;
      byteArray1[3] = (byte)107;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)29;
      byteArray1[7] = (byte)107;
      byteArray1[8] = (byte)29;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)29, (int) (byte)29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-125);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte byte0 = (byte) (-106);
      Base64.isBase64((byte) (-106));
      Base64 base64_0 = new Base64((byte) (-106));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte) (-106);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-125);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, false);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0, (-1), (int) (byte)0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.encode((byte[]) null, (-336), 0);
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(0);
      Base64.toIntegerBytes(bigInteger0);
      bigInteger1.intValueExact();
      base64_0.hasData();
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.bitLength();
      bigInteger2.modInverse(bigInteger1);
      Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray1 = base64_0.decode("*,LZd$H");
      base64_0.avail();
      Base64.isBase64("*,LZd$H");
      base64_0.decode(byteArray1);
      base64_0.decode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64(80, (byte[]) null, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-103);
      Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true, true, (-3374));
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [J\u0000p\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
