/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:06:20 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8140, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1);
      base64_0.encode(byteArray1, 0, 1291);
      base64_0.encode(byteArray1, 1, 1291);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("og.apache.commons.codec.binary.StringUtils");
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8140, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8140);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      base64_0.encode(byteArray4);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, true, true, 8140);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0);
      base64_0.decode("");
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      base64_0.decode("+");
      Base64.isBase64("");
      base64_0.hasData();
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8139, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8139);
      base64_0.encode(byteArray1, 16, 1286);
      base64_0.encode(byteArray1, 1286, (-656));
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(4958, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-1075));
      base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray0);
      base64_1.encode(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte)49;
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)49;
      byteArray2[1] = (byte)49;
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8140, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      bigInteger0.abs();
      Base64 base64_0 = new Base64(8140);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray1, 16, 1270);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-56);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-19);
      base64_0.encode(byteArray2, (-195), (int) (byte) (-19));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte) (-19), (byte) (-56));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8140, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8140);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.encodeBase64(byteArray0, false, false, 76);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((-452), byteArray1, false);
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 encode is not a byte[]");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8140, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2021161080, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      bigInteger0.divideAndRemainder(bigInteger1);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8094, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray4);
      // Undeclared exception!
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      Base64 base64_0 = new Base64(12);
      byte[] byteArray1 = new byte[13];
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)44;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 920);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.decodeBase64("w;I~KLTlLS+u@3T%btS");
      Base64 base64_0 = new Base64(10, byteArray0, false);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)124;
      byteArray2[1] = (byte)102;
      byteArray2[2] = (byte) (-6);
      byteArray2[3] = (byte)19;
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte)123;
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.readResults(byteArray1, 348, (-1773));
      //  // Unstable assertion: assertEquals(11, byteArray1.length);
      
      int int0 = base64_0.readResults(byteArray3, (byte)19, 10);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)71, (byte)98, (byte)54, (byte)69, (byte)47, (byte)57, (byte)55, (byte) (-25), (byte) (-33)}, byteArray3);
      //  // Unstable assertion: assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)77;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD~llM]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base6 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (int) (byte)0, (-569));
      Base64 base64_1 = new Base64();
      base64_1.decode("5/_0 >${;%A(G4NuD4");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 1764);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64((byte)123);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)123;
      byteArray3[2] = (byte)123;
      Base64.encodeBase64(byteArray3, true);
      base64_0.encodeToString(byteArray0);
      Base64 base64_2 = new Base64(76);
      Base64 base64_3 = new Base64(true);
      Object object0 = new Object();
      try { 
        base64_0.encode((Object) "RyxP'g5ct($IY92d%,");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1177, byteArray1, false);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)53, (byte)57, (byte)56, (byte)61, (byte) (-25), (byte) (-33)}, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, (int) (byte)0, 65);
      assertEquals(12, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64((byte)86);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-91);
      base64_0.encode(byteArray0, (int) (byte) (-91), (-5030));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, (int) (byte)0, 65);
      Base64.isBase64((byte)86);
      base64_0.avail();
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertEquals(7, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)121;
      base64_0.encode(byteArray0, 1, 1);
      base64_0.decode((byte[]) null, 1, (-1408));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)22;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)35, (byte)0, (byte) (-26), (byte)5, (byte)0, (byte)47, (byte)96, (byte)22}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      base64_0.readResults(byteArray0, 0, (-1857));
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)121;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_1 = new Base64();
      Base64 base64_2 = new Base64();
      base64_2.decode(byteArray1, (int) (byte)0, 65);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        base64_2.readResults(byteArray2, (-3802), (byte)121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      base64_0.readResults(byteArray0, 0, (-1857));
      byteArray0[0] = (byte)66;
      Base64.decodeInteger(byteArray0);
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray1);
      Base64 base64_2 = new Base64();
      // Undeclared exception!
      try { 
        base64_2.decode((byte[]) null, 64, (int) (byte)66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64((-2220), (byte[]) null, false);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.encode((byte[]) null, 10, (-1322));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-812), 89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 114;
      Base64 base64_0 = new Base64(114);
      base64_0.readResults((byte[]) null, 114, 114);
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = null;
      base64_0.decode((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, false);
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)57;
      byteArray1[1] = (byte)35;
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)32;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)104;
      byteArray1[7] = (byte)40;
      byteArray1[8] = (byte)123;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((byte) (-10), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64(1083, (byte[]) null, false);
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray1.length);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte)8;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)107, (byte)47, (byte)68, (byte)107, (byte)68, (byte)118, (byte) (-45), (byte)83, (byte)8}, byteArray1);
      
      Base64.isBase64((byte)25);
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false, (int) (byte)61);
      assertEquals(14, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((byte[]) null, (int) (byte)0, (int) (byte)0);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-25), (byte) (-33)}, byteArray2);
      
      Base64 base64_1 = new Base64(76);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false);
      base64_1.encode(byteArray1, 8180, 0);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64((byte)103);
      boolean boolean1 = Base64.isBase64(byteArray3);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.testBit(2564);
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)77;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte) (-109), (int) (byte)77);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      base64_0.readResults(byteArray0, 0, 95);
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)121;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertEquals((short)7, bigInteger0.shortValue());
      
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("QgB5AAAAAA==\uFFFD\uFFFD", string0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      //  // Unstable assertion: assertEquals(18, byteArray2.length);
      
      Base64 base64_1 = new Base64();
      Base64 base64_2 = new Base64();
      base64_2.decode(byteArray1, (int) (byte)0, 65);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)119;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = Base64.isBase64("(/[?x0LQt4cBG");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)43;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)15}, byteArray1);
      assertEquals(1, byteArray1.length);
      
      base64_0.decode((String) null);
      Base64.encodeBase64((byte[]) null, false);
      base64_0.encode((byte[]) null);
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      base64_0.decode((String) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("AAAAAAAAAA==", string0);
      
      Base64 base64_1 = new Base64(false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)14;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte)0;
      String string1 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("/w54AA==\uFFFD\uFFFD", string1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)14);
      //  // Unstable assertion: assertEquals(12, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.readResults((byte[]) null, (-2228), (-3855));
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      boolean boolean0 = Base64.isBase64("FUoxdN2gVTbJKEI{E-");
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)20;
      byteArray2[1] = (byte)121;
      byteArray2[2] = (byte)121;
      byteArray2[3] = (byte)121;
      byteArray2[4] = (byte)121;
      byteArray2[5] = (byte)121;
      byteArray2[6] = (byte)121;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, true);
      base64_0.decode(byteArray0, 1191, 0);
      Base64.isBase64("");
      Base64.decodeInteger(byteArray2);
      Base64 base64_1 = new Base64(1191, byteArray1);
      // Undeclared exception!
      try { 
        base64_1.encodeToString(byteArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.testBit(2564);
      byte[] byteArray0 = new byte[11];
      Base64 base64_0 = new Base64(0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false, true, 9);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)25;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 1, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)97);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)89, (byte)102, (byte)56, (byte)61}, byteArray3);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray5 = Base64.encodeBase64(byteArray1, true, true);
      assertEquals(5, byteArray5.length);
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray2);
      assertTrue(boolean1 == boolean0);
      assertNotSame(byteArray0, byteArray4);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)102;
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      base64_0.readResults(byteArray0, 0, 95);
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)121;
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_1 = new Base64();
      Base64 base64_2 = new Base64();
      // Undeclared exception!
      try { 
        base64_2.decode(byteArray1, (int) (byte)0, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.testBit(2564);
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-112);
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base6 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64();
      base64_0.decode("");
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("!\"sNaXQqi:lK");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, 64);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64((byte)0);
      boolean boolean1 = Base64.isBase64((byte)77);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true);
      assertEquals(92, byteArray4.length);
      assertEquals(48, byteArray2.length);
      assertEquals(36, byteArray1.length);
      
      boolean boolean2 = Base64.isBase64((byte)0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-70);
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray0);
      String string0 = null;
      base64_1.decode((String) null);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (-2236), (-394));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      Base64 base64_0 = new Base64(12, byteArray1, false);
      base64_0.decode((Object) "5|(](98");
      Base64.decodeBase64("/f;>Voz@y`(tG|@s");
      Base64.decodeBase64("C}\"E4Aq=4i@`5");
      Base64 base64_1 = new Base64();
      base64_1.decode("org.apache.commons.codec.binary.Base64");
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      boolean boolean0 = false;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-63);
      Base64.encodeBase64(byteArray0, false, true, 81);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, (int) (byte)0, (-108));
      base64_0.decode(byteArray0, (int) (byte)0, 1169);
      base64_0.decode((Object) "AAA=");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 103);
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = base64_0.decode(byteArray0);
      byte[] byteArray4 = base64_0.decode("");
      Base64.decodeInteger(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64(byteArray0);
      byte[] byteArray6 = Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeInteger(byteArray4);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray7 = Base64.encodeBase64(byteArray5, false, false);
      Base64.encodeBase64(byteArray6, false, false, 55);
      Base64.encodeBase64(byteArray7, false, false);
      base64_0.decode(byteArray3, (-1), (-3937));
      Base64.isBase64("");
      Base64.decodeInteger(byteArray4);
      Base64.decodeBase64(byteArray5);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)97);
      Base64.isBase64((byte)97);
      Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray1, 0, 0);
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64(byteArray0, true, true, 64);
      Base64.encodeBase64(byteArray0, true, false);
      base64_0.decode(byteArray0, 0, 0);
      Base64.isBase64("N1iM|r#K'Q{nmMm");
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64(byteArray2);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-105);
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)96;
      Base64 base64_0 = new Base64((byte)97, byteArray1);
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray0.length);
      
      Base64 base64_1 = new Base64(728, byteArray0);
      byte[] byteArray1 = base64_1.decode("");
      Base64.encodeBase64URLSafe(byteArray1);
      bigInteger0.doubleValue();
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      base64_1.decode(byteArray0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)97);
      Base64.isBase64((byte)97);
      Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray1, 0, 0);
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(4, byteArray3.length);
      
      base64_0.decode(byteArray0, 0, 0);
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.DecoderException");
      assertFalse(boolean0);
      
      Base64.decodeInteger(byteArray1);
      byte[] byteArray4 = Base64.decodeBase64(byteArray2);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-1)}, byteArray4);
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray2);
      int int0 = base64_0.readResults(byteArray5, 1952257861, 0);
      assertEquals(10, byteArray5.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 2548;
      bigInteger0.testBit(2548);
      bigInteger0.nextProbablePrime();
      bigInteger0.intValue();
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)57;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertEquals((short) (-1), bigInteger1.shortValue());
      
      Base64.toIntegerBytes(bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)34;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, (int) (byte)34);
      Base64 base64_0 = new Base64(85);
      Object object0 = base64_0.decode((Object) "]");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      Object object3 = base64_0.decode(object2);
      Object object4 = base64_0.decode(object3);
      base64_0.encode(object4);
      int int0 = base64_0.readResults(byteArray1, (byte)34, (byte)61);
      assertEquals(14, byteArray1.length);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-36);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      boolean boolean0 = Base64.isBase64(byteArray3);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64.decodeBase64("+");
      byte[] byteArray4 = base64_0.decode("+");
      boolean boolean1 = Base64.isBase64("+");
      byte[] byteArray5 = Base64.encodeBase64(byteArray2, true, false, 149);
      Base64.encodeBase64Chunked(byteArray4);
      boolean boolean2 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      
      Base64.encodeBase64(byteArray4, false);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      Base64.isBase64((byte)0);
      byte[] byteArray6 = Base64.encodeBase64(byteArray5, false);
      //  // Unstable assertion: assertEquals(10, byteArray5.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)78, (byte)119, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-11), (byte)0}, byteArray5);
      //  // Unstable assertion: assertEquals(16, byteArray6.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = false;
      byte byte0 = (byte)0;
      byte byte1 = (byte)119;
      byte byte2 = (byte)14;
      byte byte3 = (byte) (-11);
      byte byte4 = (byte)0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte5 = (byte)41;
      byteArray0[3] = (byte)41;
      Base64.encodeBase64String(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 1169);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      base64_0.readResults(byteArray0, 0, 95);
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)121;
      base64_0.decode(byteArray0, 0, (int) (byte)0);
      Base64.decodeInteger(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("QgB5AAAAAA==\uFFFD\uFFFD", string0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      base64_0.decode(byteArray0, 115, 1);
      boolean boolean0 = Base64.isBase64("QgB5AAAAAA==\u0000\u0000");
      //  // Unstable assertion: assertFalse(boolean0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      //  // Unstable assertion: assertEquals((byte) (-33), bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)66, (byte)119, (byte)61, (byte)61, (byte) (-25), (byte) (-33)}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)114;
      byteArray0[0] = (byte)114;
      byte byte1 = (byte)67;
      byteArray0[1] = (byte)67;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.byteValueExact();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger out of byte range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)54;
      Base64.encodeBase64(byteArray0);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(2627);
      base64_0.decode(byteArray0, (-512), (-512));
      Base64.isBase64((byte) (-1));
      Base64.isBase64(">T(?s]UW:(7s{{:__Y");
      Base64 base64_1 = new Base64();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 0;
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      base64_0.decode((Object) "5|(](98");
      Base64.decodeBase64("/f;>Voz@y`(tG|@s");
      base64_0.encodeToString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAA=", string0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      
      Base64.isBase64("");
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)0;
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(0, byteArray3.length);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      bigInteger0.byteValueExact();
      bigInteger0.clearBit(0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray4 = base64_0.decode("");
      String string1 = base64_0.encodeToString(byteArray4);
      assertEquals("", string1);
      
      byte[] byteArray5 = base64_0.decode("~kqjk ");
      assertEquals(3, byteArray5.length);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-88), (byte) (-28)}, byteArray5);
      
      Base64.encodeBase64(byteArray4, true, true, 1923);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      base64_0.decode((byte[]) null, 2691, 0);
      String string0 = null;
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)17;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.hasData();
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("b0pnQUFMUy1FUQ", string0);
      
      byte[] byteArray2 = base64_0.decode("b0pnQUFMUy1FUQ");
      assertEquals(10, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)111, (byte)74, (byte)103, (byte)65, (byte)65, (byte)76, (byte)83, (byte)45, (byte)69, (byte)81}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-49);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)46;
      byteArray1[3] = (byte) (-49);
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte)9;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-49);
      Base64 base64_0 = new Base64((byte)0, byteArray1);
      base64_0.encode(byteArray0, (int) (byte) (-49), 0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.testBit(64);
      MockRandom mockRandom0 = new MockRandom(76);
      mockRandom0.longs(1870L, 0L, 1870L);
      mockRandom0.nextGaussian();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-973), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64((-2236), byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode((Object) "=\u0004c([S{_");
      Base64.decodeBase64("=\u0004c([S{_");
      base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray1);
      base64_0.decode(byteArray0, (int) (byte)0, (-1790));
      Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.clearBit((byte)0);
      bigInteger1.getLowestSetBit();
      bigInteger1.min(bigInteger0);
      bigInteger0.shortValueExact();
      bigInteger0.shiftLeft(803);
      bigInteger0.gcd(bigInteger1);
      base64_0.encode(byteArray1);
      Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray0, (-5682), 589);
      base64_0.decode("=\u0004c([S{_");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
      base64_0.decode(byteArray2);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 1364);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      base64_0.readResults(byteArray0, 0, 95);
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)3;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1);
      base64_0.avail();
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)121;
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte)121;
      byteArray2[5] = (byte)121;
      byteArray2[6] = (byte)66;
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-120);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      bigInteger0.gcd(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
      base64_0.decode((Object) "AACI");
      base64_0.encodeToString(byteArray1);
      Base64.encodeInteger(bigInteger0);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("]");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(979);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 979);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      base64_0.encode(byteArray0, (-2035), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64(":,_4KtT6lEnKQu");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64(":,_4KtT6lEnKQu");
      int int0 = 0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [/4KtT6lEnKQu]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-33);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)17;
      byte byte1 = (byte) (-25);
      byteArray0[4] = (byte) (-25);
      byte byte2 = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      Base64 base64_0 = new Base64(0, byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)27;
      byteArray2[3] = (byte) (-9);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-56);
      Base64 base64_1 = new Base64(64, byteArray2, true);
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.longValueExact();
      // Undeclared exception!
      try { 
        bigInteger0.mod((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray0, false);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64((-1324));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-94);
      base64_0.readResults(byteArray0, 1, 2180);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0);
      base64_0.decode("");
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray3 = new byte[0];
      Base64.isBase64(byteArray3);
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      base64_0.decode("+");
      Base64.isBase64("");
      Base64.encodeBase64(byteArray0, true, true, 64);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.hasData();
      Base64.encodeBase64(byteArray3, false);
      Base64.isBase64((byte)0);
      Base64.encodeBase64(byteArray1, false);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)77;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)68;
      Base64.isBase64(byteArray0);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_1.readResults((byte[]) null, (byte) (-64), 1);
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, (-1506), (int) (byte)0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)57;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1);
      boolean boolean0 = true;
      boolean boolean1 = true;
      int int0 = (-802);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)87;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000[\u0000W]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Base64.isBase64("");
      try { 
        base64_0.encode((Object) "|a)\",lA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte) (-116);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0001\u0001S\u0017\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)104;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-68);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(644, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0001h\u0000\u0000u'\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Base64 base64_0 = new Base64((-2371));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-38);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byteArray0[1] = (byte)55;
      Base64.decodeBase64(byteArray1);
      byteArray0[2] = (byte)35;
      bigInteger0.toString();
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode((Object) "U7oLrl~.Doq'");
      bigInteger0.bitCount();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, false, (-274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -274
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.modPow(bigInteger1, bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (-1));
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)62;
      byteArray2[1] = (byte) (-118);
      byte byte0 = (byte) (-98);
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      byteArray2[2] = (byte) (-98);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)40;
      byteArray2[5] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
