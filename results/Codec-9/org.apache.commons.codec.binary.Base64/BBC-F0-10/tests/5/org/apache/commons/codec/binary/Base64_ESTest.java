/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:03:03 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(6);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)64;
      byteArray2[1] = (byte)18;
      byteArray2[2] = (byte)18;
      base64_1.encode(byteArray2);
      base64_0.readResults(byteArray1, 1, 76);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(884, mockRandom0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte) (-65);
      byteArray0[8] = (byte) (-13);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = BigInteger.probablePrime(1883, mockRandom0);
      BigInteger.valueOf((-1820));
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 43, 1883);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 316
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = new byte[9];
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64(byteArray0, false, false, 6);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1527);
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(902, mockRandom1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, (int) (byte)44, 902);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base64 base64_0 = new Base64(67);
      base64_0.encode((byte[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)44;
      Base64.isBase64("");
      base64_0.decode((Object) "");
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1, 103, (-2911));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)100;
      bigInteger0.longValueExact();
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray1, (-1947), (byte)100);
      Base64 base64_1 = new Base64((-4048));
      Base64 base64_2 = new Base64();
      byte[] byteArray2 = new byte[14];
      byteArray2[0] = (byte)100;
      byteArray2[1] = (byte)100;
      byteArray2[2] = (byte)100;
      byteArray2[3] = (byte) (-4);
      byteArray2[4] = (byte)100;
      byteArray2[5] = (byte)100;
      base64_0.decode(byteArray2, 64, (int) (byte) (-1));
      base64_1.decode((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64(true);
      base64_0.encode((byte[]) null, (-1325), (-1));
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 77, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-128);
      Base64.isArrayByteBase64(byteArray0);
      MockRandom mockRandom0 = new MockRandom(1922L);
      base64_0.readResults(byteArray0, (-1582), (byte) (-99));
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((byte) (-99), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)100;
      bigInteger0.longValueExact();
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray1, (-1947), (byte)100);
      Base64 base64_1 = new Base64((-4048));
      Base64 base64_2 = new Base64();
      byte[] byteArray2 = new byte[14];
      byteArray2[0] = (byte)100;
      byteArray2[1] = (byte)100;
      byteArray2[2] = (byte)100;
      byteArray2[3] = (byte) (-4);
      byteArray2[4] = (byte)100;
      byteArray2[5] = (byte)100;
      base64_2.encode(byteArray2, 0, (-1648));
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_0.decode(byteArray3, 1, 29);
      base64_0.avail();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode("");
      base64_0.encode(byteArray0, (-485), (-485));
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte)27;
      Base64.isBase64("rryI+ph7");
      byte byte0 = (byte)9;
      Base64.encodeBase64(byteArray1, true, true, 39);
      byteArray1[2] = (byte)9;
      byte byte1 = (byte)8;
      byteArray1[3] = (byte)8;
      byte byte2 = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)118;
      Base64.decodeBase64("ISO-8859-1");
      byteArray1[6] = (byte) (-1);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (-2177), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-7);
      byteArray0[0] = (byte) (-7);
      byte byte1 = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-48);
      byte byte2 = (byte) (-76);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-1);
      byte byte3 = (byte)0;
      byteArray0[5] = (byte)0;
      Base64.isBase64((byte) (-1));
      byte byte4 = (byte)16;
      Base64.isBase64((byte) (-48));
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64(byteArray0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)100;
      bigInteger0.longValueExact();
      Base64 base64_0 = new Base64((-613));
      base64_0.readResults(byteArray0, (byte) (-1), (byte)100);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = BigInteger.probablePrime(902, mockRandom0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray2);
      base64_0.decode(byteArray0, 1, (-1935));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64();
      Base64.isArrayByteBase64(byteArray0);
      MockRandom mockRandom0 = new MockRandom((-1294L));
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-88);
      Base64.decodeBase64(byteArray1);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-73);
      byteArray2[3] = (byte) (-45);
      byteArray2[4] = (byte)10;
      byteArray2[5] = (byte)97;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 1, 613);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, false);
      MockRandom mockRandom0 = new MockRandom((-806L));
      Base64 base64_0 = new Base64(1527);
      base64_0.readResults(byteArray0, 1527, 902);
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(902, mockRandom1);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 1731, 1527);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1731
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)100;
      bigInteger0.longValueExact();
      bigInteger0.toString((int) (byte)100);
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray1, (-1947), (byte)100);
      Base64 base64_1 = new Base64((-4048));
      Base64 base64_2 = new Base64();
      byte[] byteArray2 = new byte[14];
      byteArray2[0] = (byte)100;
      byteArray2[1] = (byte)100;
      byteArray2[2] = (byte)100;
      byteArray2[3] = (byte) (-4);
      byteArray2[4] = (byte)100;
      byteArray2[5] = (byte)100;
      base64_2.encode(byteArray2, 0, (-1648));
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_2.decode((Object) "25600");
      base64_0.decode(byteArray3, 1, 29);
      assertEquals(22, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)100;
      bigInteger0.longValueExact();
      bigInteger0.toString((int) (byte)100);
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray1, (-1947), (byte)100);
      Base64 base64_1 = new Base64((-4048));
      Base64 base64_2 = new Base64();
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)100;
      byteArray2[1] = (byte)100;
      byteArray2[2] = (byte)100;
      byteArray2[3] = (byte) (-4);
      byteArray2[4] = (byte)100;
      byteArray2[5] = (byte)100;
      base64_2.encode(byteArray2, 0, (-1648));
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      base64_2.decode((Object) "25600");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, 1, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 2627, 2627);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64((-1719));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)58;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-41);
      byteArray0[8] = (byte)0;
      base64_0.readResults(byteArray0, 100, (-1434));
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)1;
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)44);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)44;
      byteArray0[3] = (byte)0;
      byteArray2[2] = (byte)44;
      byteArray2[3] = (byte)44;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte)0, 590);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byte byte0 = (byte)2;
      byteArray0[1] = (byte)2;
      byte byte1 = (byte)123;
      byteArray0[2] = (byte)123;
      byte byte2 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)46;
      Base64 base64_0 = new Base64(1, byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64();
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-38);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, (int) (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("UTF-16");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)123;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_1 = new Base64((-5071));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-19);
      base64_1.encode(byteArray0, (int) (byte) (-19), (-5071));
      Base64.encodeBase64Chunked((byte[]) null);
      base64_1.hasData();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)100;
      bigInteger0.longValueExact();
      bigInteger0.toString((int) (byte)100);
      Base64 base64_0 = new Base64(true);
      int int0 = base64_0.readResults(byteArray1, (-1947), (byte)100);
      assertEquals(0, int0);
      
      byte[] byteArray2 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      assertEquals(27, byteArray2.length);
      
      Base64 base64_1 = new Base64();
      boolean boolean0 = base64_1.hasData();
      assertFalse(boolean0);
      
      Base64.isBase64((byte) (-1));
      Base64 base64_2 = new Base64(34);
      Object object0 = base64_2.decode((Object) "25855");
      Object object1 = base64_2.encode(object0);
      Object object2 = base64_1.decode(object1);
      Object object3 = base64_0.decode(object1);
      assertNotSame(object3, object2);
      assertFalse(base64_2.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      boolean boolean0 = Base64.isBase64("UTF-16LE");
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)81;
      byteArray3[1] = (byte) (-94);
      byteArray3[2] = (byte) (-104);
      byteArray3[3] = (byte)1;
      byte[] byteArray4 = base64_0.decode(byteArray3);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      boolean boolean1 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      byte[] byteArray5 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64(73);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = new byte[9];
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, false, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 13
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray1);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((byte) (-1));
      bigInteger0.longValueExact();
      base64_0.readResults(byteArray0, (byte)0, 76);
      bigInteger1.longValueExact();
      bigInteger1.toString(112);
      base64_0.readResults(byteArray1, (byte)0, 2809);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.hasData();
      Base64.isBase64((byte)124);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64((byte)0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.isBase64("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)118;
      Base64.decodeInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) ".;Iggv+n 8t%t_");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64((-651), (byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-651), 54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(false);
      int int0 = (-843);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray2, (-843), (-843));
      base64_0.hasData();
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(14, byteArray0);
      base64_0.avail();
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray1);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)122;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (-3246), 0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode((Object) "Parameter supplied to Base64 encode is not a byte[]");
      base64_0.readResults(byteArray1, (-81), 0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-92);
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-52);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-52);
      Base64 base64_0 = new Base64((byte) (-52), byteArray1);
      BigInteger bigInteger0 = null;
      Base64.encodeBase64String(byteArray1);
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64((byte[]) null, false);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, true);
      Base64.decodeBase64("");
      base64_0.decode(byteArray0, 2627, 0);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray2, (-843), (-843));
      base64_0.hasData();
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)35;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)28;
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte) (-35);
      base64_0.decode(byteArray1, 830, (int) (byte) (-35));
      byte[] byteArray2 = base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)109);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray2, (-843), (-843));
      base64_0.decode(byteArray0, 8177, 8174);
      base64_0.decode((String) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger1);
      Base64.isBase64((byte)116);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      Base64 base64_1 = new Base64(830, byteArray0);
      base64_1.avail();
      byte[] byteArray1 = base64_1.decode(byteArray0);
      Base64.encodeBase64(byteArray1);
      base64_1.encodeToString(byteArray1);
      Base64.isBase64((byte)61);
      base64_0.isUrlSafe();
      base64_1.decode((String) null);
      Base64.encodeBase64((byte[]) null, true, false, 64);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)54;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.discardWhitespace(byteArray0);
      Object object0 = null;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)1, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [nw==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom(76);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      base64_0.readResults(byteArray0, (byte)46, (byte)46);
      BigInteger bigInteger0 = BigInteger.probablePrime(1527, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)21;
      Base64 base64_0 = new Base64(1312, byteArray0);
      base64_0.avail();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("ACUV\u0000%\u0015", string0);
      
      Base64.isBase64((byte)37);
      Base64.encodeBase64(byteArray0, true);
      base64_0.isUrlSafe();
      byte[] byteArray3 = base64_0.decode(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte) (-7)}, byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)118, (byte)107, (byte)61, (byte) (-94), (byte) (-7)}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-48);
      base64_0.decode(byteArray0, (int) (byte) (-102), (-86));
      base64_0.decode("W8v1~!i<+F");
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      boolean boolean0 = Base64.isBase64((byte) (-102));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      base64_0.readResults(byteArray0, 44, (byte)90);
      byteArray0[7] = (byte)90;
      base64_0.encode(byteArray0, (int) (byte)117, (int) (byte)0);
      base64_0.decode("org.apache.commons.codec.binary.Base64");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)88;
      base64_0.encodeToString(byteArray0);
      Base64.isBase64((byte)117);
      base64_0.isUrlSafe();
      base64_0.decode(byteArray0);
      Random.setNextRandom(2829);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      Base64.isBase64((byte) (-1));
      Base64.isBase64((byte) (-48));
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode((Object) "AJrQtP8AAAAA");
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertTrue(boolean0);
      
      base64_0.encode(byteArray1, 8188, 2486);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-102);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-76);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)16;
      byteArray2[7] = (byte)16;
      byteArray2[8] = (byte) (-76);
      boolean boolean1 = Base64.isArrayByteBase64(byteArray2);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.compareTo(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((byte) (-1));
      bigInteger0.longValueExact();
      base64_0.readResults(byteArray0, (byte)100, (-26));
      bigInteger1.longValueExact();
      bigInteger1.toString(112);
      base64_0.readResults(byteArray1, (byte)100, 2809);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.hasData();
      Base64.isBase64((byte)124);
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode("t~v?YXsVt7]o");
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeBase64((String) null);
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)28;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, (-2536), (-2004318070));
      assertEquals(14, byteArray1.length);
      
      boolean boolean0 = base64_0.hasData();
      boolean boolean1 = Base64.isBase64("");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64(564, byteArray1, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 5, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray0, true, false, 4114);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray2.length);
      
      Base64 base64_0 = new Base64(4114, (byte[]) null, true);
      byte[] byteArray3 = base64_0.decode(byteArray1);
      assertTrue(base64_0.isUrlSafe());
      assertSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)1, 2627);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)64;
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)111;
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      Base64 base64_1 = new Base64(830, byteArray0);
      base64_1.avail();
      byte[] byteArray1 = base64_1.decode(byteArray0);
      Base64.encodeBase64(byteArray1);
      String string0 = base64_1.encodeToString(byteArray1);
      assertFalse(base64_1.isUrlSafe());
      assertEquals("", string0);
      
      boolean boolean0 = Base64.isBase64((byte)61);
      boolean boolean1 = base64_0.isUrlSafe();
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = new byte[0];
      base64_0.encode(byteArray2);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      base64_0.decode(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.discardWhitespace(byteArray3);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray4 = new byte[5];
      byteArray4[1] = (byte) (-60);
      byteArray4[2] = (byte) (-60);
      byteArray4[3] = (byte)14;
      byteArray4[4] = (byte) (-60);
      byte[] byteArray5 = Base64.decodeBase64(byteArray4);
      assertNotSame(byteArray5, byteArray3);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray2, (-843), (-843));
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean1 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false);
      Base64 base64_0 = new Base64(1402, (byte[]) null);
      int int0 = base64_0.readResults((byte[]) null, 0, 0);
      assertEquals(0, int0);
      
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true);
      assertNull(byteArray1);
      
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)4;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)88;
      byteArray2[5] = (byte)97;
      byteArray2[6] = (byte) (-34);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((short)93, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)90;
      base64_0.encode(byteArray0, (int) (byte)117, (int) (byte)0);
      base64_0.decode("org.apache.commons.codec.binary.Base64");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)88;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)103;
      byteArray1[3] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      int int0 = 0;
      int int1 = 780;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 780);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)10;
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-98));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -98
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      assertEquals(0, byteArray2.length);
      
      base64_0.encode(byteArray0, (-1), 0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte) (-60);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.decodeBase64("W8v1~!i<+F");
      base64_0.avail();
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertArrayEquals(new byte[] {(byte)91, (byte) (-53), (byte) (-11), (byte) (-117), (byte) (-31)}, byteArray3);
      
      base64_0.decode(byteArray2);
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertTrue(boolean0);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("W8v1i+E=", string0);
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray4);
      assertEquals(18, byteArray5.length);
      
      byte[] byteArray6 = Base64.decodeBase64(byteArray1);
      assertNotSame(byteArray1, byteArray4);
      assertEquals(9, byteArray6.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)21;
      Base64 base64_0 = new Base64(1312, byteArray0);
      base64_0.avail();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("ACUV\u0000%\u0015", string0);
      
      Base64.isBase64((byte)37);
      base64_0.isUrlSafe();
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertEquals(0, byteArray2.length);
      assertSame(byteArray1, byteArray3);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.compareTo(bigInteger0);
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((byte) (-1));
      bigInteger0.longValueExact();
      base64_0.readResults(byteArray0, (byte)100, (-26));
      bigInteger1.longValueExact();
      bigInteger1.toString(112);
      int int0 = base64_0.readResults(byteArray1, (byte)100, 2809);
      assertEquals(0, int0);
      
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      base64_0.hasData();
      boolean boolean0 = Base64.isBase64((byte)124);
      assertFalse(boolean0);
      
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = base64_0.decode("t~v?YXsVt7]o");
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("ZP8", string0);
      
      Base64.decodeBase64((String) null);
      base64_0.decode((String) null);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(6, byteArray3.length);
      
      Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
      assertArrayEquals(new byte[] {(byte) (-74), (byte) (-10), (byte)23, (byte) (-79), (byte)91, (byte)123}, byteArray5);
      assertEquals(6, byteArray5.length);
      assertEquals(6, byteArray2.length);
      
      byte[] byteArray6 = base64_0.decode("ZP8");
      assertArrayEquals(new byte[] {(byte)100, (byte) (-1)}, byteArray6);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("]&M\"* ");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte) (-90);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("mWAAWgCmRaY=", string0);
      
      Base64 base64_0 = new Base64(108);
      base64_0.isUrlSafe();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)56;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)69;
      byteArray1[3] = (byte) (-90);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-90);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-103);
      byteArray1[8] = (byte)96;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false, 258);
      assertArrayEquals(new byte[] {(byte)56, (byte)0, (byte)69, (byte) (-90), (byte)0, (byte) (-90), (byte)0, (byte) (-103), (byte)96}, byteArray2);
      assertEquals(14, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)73;
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)83;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(0);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)9;
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Ik\tS]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)121;
      Base64.encodeBase64(byteArray0, true, false, 4114);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = base64_0.decode((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte)82, (byte) (-26), (byte) (-68), (byte) (-6), (byte) (-122), (byte)1, (byte) (-125)}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      Base64.decodeBase64(byteArray0);
      byte byte0 = (byte)118;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)33;
      byteArray1[1] = (byte)118;
      byteArray1[2] = (byte)118;
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64((-3649), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [!vv]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)111;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-66)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.byteValueExact();
      bigInteger0.min(bigInteger1);
      bigInteger0.shortValueExact();
      bigInteger0.getLowestSetBit();
      Base64 base64_0 = new Base64();
      bigInteger0.shiftLeft(5181);
      Base64.decodeBase64((byte[]) null);
      bigInteger0.flipBit(64);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("", string0);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      bigInteger0.toByteArray();
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray1);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)93;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-7), (byte)0, (byte)38, (byte) (-1), (byte)0, (byte) (-9), (byte)0, (byte)93}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64(51);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)0;
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-69);
      byteArray1[4] = (byte) (-42);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-42);
      byteArray2[1] = (byte) (-102);
      byteArray2[2] = (byte)0;
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)28;
      byte byte0 = (byte) (-35);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-21);
      byte byte1 = (byte)35;
      byteArray0[6] = (byte)35;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [n6\u000E\u001C\uFFFD\uFFFD#]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64(2370);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-1), 2005);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = base64_0.decode("GFxsk#v\"`q");
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)53;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)53;
      byteArray3[1] = (byte)53;
      byteArray3[2] = (byte)53;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)53;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)0;
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray4, false);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toByteArray();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      int int0 = 0;
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)114;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(16, byteArray0, false);
      base64_0.readResults(byteArray0, 16, 16);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)63;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2473), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD1L\u0000\u0000\u0001?]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64((-454));
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode((Object) "");
      Base64.decodeInteger(byteArray0);
      base64_0.avail();
      base64_0.decode(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray2, true);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)116;
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64(380);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)52;
      Base64.encodeBase64(byteArray0, false, true, 1563);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-24);
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64(2489);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64(255);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Base64 base64_0 = new Base64(36);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64((-1719));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-41);
      byteArray0[8] = (byte)0;
      base64_0.readResults(byteArray0, 100, (-1434));
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)1;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-92);
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-52);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-52);
      Base64 base64_0 = new Base64((byte) (-52), byteArray1);
      String string0 = "dWq/\"";
      Base64.encodeBase64String(byteArray1);
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
