/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:15:58 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7256, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = bigInteger0.toString(7256);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(string0);
      
      byte[] byteArray0 = Base64.decodeBase64(string0);
      assertEquals(1629, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals(2896, byteArray2.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      int int0 = bigInteger1.bitLength();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(0, int0);
      assertNotSame(bigInteger1, bigInteger0);
      
      base64_0.decode(byteArray1, 0, 49);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray3.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals(2896, byteArray2.length);
      assertEquals(3864, byteArray4.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray4);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7256, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = bigInteger0.toString(7256);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(string0);
      
      byte[] byteArray0 = Base64.decodeBase64(string0);
      assertEquals(1629, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals(2896, byteArray2.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals(2896, byteArray2.length);
      assertEquals(3862, byteArray3.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray3);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      
      // Undeclared exception!
      Base64.encodeBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7256, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = bigInteger0.toString(7256);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(string0);
      
      byte[] byteArray0 = Base64.decodeBase64(string0);
      assertEquals(1629, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean1 = Base64.isBase64(string0);
      assertFalse(boolean1 == boolean0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(boolean1);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals(2896, byteArray2.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      int int0 = bigInteger1.bitLength();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(0, int0);
      assertNotSame(bigInteger1, bigInteger0);
      
      base64_0.decode(byteArray1, 0, 114);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      
      base64_0.encode(byteArray1, (-612), (-1269));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      
      byte[] byteArray3 = Base64.decodeBase64("9");
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      
      boolean boolean2 = Base64.isBase64(byteArray1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(boolean2);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      
      byte[] byteArray4 = new byte[0];
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray4, 0, (-612));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7256, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String string0 = bigInteger0.toString(7256);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(string0);
      
      byte[] byteArray0 = Base64.decodeBase64(string0);
      assertEquals(1629, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean1 = mockRandom0.nextBoolean();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals(2896, byteArray2.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      int int0 = bigInteger1.bitLength();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(0, int0);
      assertNotSame(bigInteger1, bigInteger0);
      
      base64_0.decode(byteArray1, 0, 114);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertEquals((short)10, bigInteger2.shortValue());
      assertEquals((byte)10, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      base64_0.encode(byteArray1, (-612), (-1269));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray3 = Base64.decodeBase64("");
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      
      boolean boolean2 = Base64.isBase64(byteArray1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(boolean2);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      
      byte[] byteArray4 = new byte[0];
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray4, 0, (-612));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7256, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = bigInteger0.toString(7256);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(string0);
      
      byte[] byteArray0 = Base64.decodeBase64(string0);
      assertEquals(1629, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals(2896, byteArray2.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      int int0 = bigInteger1.bitLength();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(0, int0);
      assertNotSame(bigInteger1, bigInteger0);
      
      base64_0.decode(byteArray1, 0, 49);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BigInteger bigInteger2 = BigInteger.TEN;
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertEquals((byte)10, bigInteger2.byteValue());
      assertEquals((short)10, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      
      base64_0.encode(byteArray1, (-612), (-1269));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      
      boolean boolean1 = Base64.isBase64(byteArray1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(boolean1 == boolean0);
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(boolean1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      
      byte[] byteArray3 = new byte[0];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray3, 0, (-612));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7286, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = new BigInteger(7286, mockRandom0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)256, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      String string0 = bigInteger0.toString(7286);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(string0);
      assertNotSame(bigInteger0, bigInteger1);
      
      byte[] byteArray0 = Base64.decodeBase64(string0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertEquals(1636, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray0);
      assertNotSame(bigInteger0, bigInteger1);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(456, int0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1636, byteArray0.length);
      assertEquals(2182, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1636, byteArray0.length);
      assertEquals(2184, byteArray2.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      BigInteger bigInteger2 = BigInteger.ZERO;
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      int int1 = bigInteger2.bitLength();
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(int1 == int0);
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals(0, int1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      
      BigInteger bigInteger3 = bigInteger2.clearBit(1220);
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertFalse(bigInteger3.equals((Object)bigInteger1));
      assertTrue(bigInteger3.equals((Object)bigInteger2));
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      assertNotSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      assertNotSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      
      base64_0.decode(byteArray0, 0, 2272);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals(1636, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BigInteger bigInteger4 = bigInteger1.abs();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger1.equals((Object)bigInteger3));
      assertFalse(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger0));
      assertFalse(bigInteger4.equals((Object)bigInteger2));
      assertFalse(bigInteger4.equals((Object)bigInteger3));
      assertEquals((short)256, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((byte)0, bigInteger4.byteValue());
      assertEquals((short)256, bigInteger4.shortValue());
      assertNotNull(bigInteger4);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger4);
      assertSame(bigInteger4, bigInteger1);
      assertNotSame(bigInteger4, bigInteger0);
      assertNotSame(bigInteger4, bigInteger2);
      assertNotSame(bigInteger4, bigInteger3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7256, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = bigInteger0.toString(7256);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(string0);
      
      byte[] byteArray0 = Base64.decodeBase64(string0);
      assertEquals(1629, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      
      boolean boolean0 = mockRandom0.nextBoolean();
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals(2896, byteArray2.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      int int0 = bigInteger1.bitLength();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals(0, int0);
      assertNotSame(bigInteger1, bigInteger0);
      
      BigInteger bigInteger2 = new BigInteger(76, mockRandom0);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertEquals((short) (-6912), bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger2);
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(16, byteArray3.length);
      assertEquals((short) (-6912), bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertNotNull(byteArray3);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray4.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray4);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7256, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = bigInteger0.toString(7256);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(string0);
      
      byte[] byteArray0 = Base64.decodeBase64(string0);
      assertEquals(1629, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals(2896, byteArray2.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      int int0 = bigInteger1.bitLength();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(0, int0);
      assertNotSame(bigInteger1, bigInteger0);
      
      base64_0.decode(byteArray1, 1, 67);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      
      BigInteger bigInteger2 = bigInteger1.clearBit(1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertNotNull(bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      
      base64_0.decode(byteArray0, 2979, (-1776));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals(1629, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BigInteger bigInteger3 = bigInteger2.abs();
      assertTrue(bigInteger1.equals((Object)bigInteger2));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertTrue(bigInteger3.equals((Object)bigInteger1));
      assertFalse(bigInteger3.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger2.shortValue());
      assertEquals((byte)0, bigInteger2.byteValue());
      assertEquals((byte)0, bigInteger3.byteValue());
      assertEquals((short)0, bigInteger3.shortValue());
      assertNotNull(bigInteger3);
      assertNotSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger1, bigInteger3);
      assertNotSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger3);
      assertNotSame(bigInteger2, bigInteger0);
      assertSame(bigInteger3, bigInteger2);
      assertNotSame(bigInteger3, bigInteger1);
      assertNotSame(bigInteger3, bigInteger0);
      
      byte[] byteArray3 = Base64.decodeBase64("");
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      
      base64_0.encode(byteArray0, 2979, 67);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals(1629, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.7, double0, 0.01);
      
      int int1 = base64_0.avail();
      assertFalse(int1 == int0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(50, int1);
      
      Object object1 = base64_0.decode((Object) string0);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(object1.equals((Object)object0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object1);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      
      Object object2 = base64_0.encode(object1);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object2);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(object1, object2);
      assertNotSame(object2, object1);
      
      Object object3 = base64_0.encode(object2);
      assertFalse(bigInteger0.equals((Object)bigInteger3));
      assertFalse(bigInteger0.equals((Object)bigInteger2));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(object1.equals((Object)object2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object3);
      assertNotSame(bigInteger0, bigInteger3);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(object1, object2);
      assertNotSame(object1, object3);
      assertNotSame(object2, object1);
      assertNotSame(object2, object3);
      assertNotSame(object3, object2);
      assertNotSame(object3, object1);
      
      // Undeclared exception!
      base64_0.encode(object3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7256, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      String string0 = bigInteger0.toString(7256);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(string0);
      
      byte[] byteArray0 = Base64.decodeBase64(string0);
      assertEquals(1629, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals(2896, byteArray2.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      int int0 = bigInteger1.bitLength();
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals(0, int0);
      assertNotSame(bigInteger1, bigInteger0);
      
      base64_0.decode(byteArray1, 1, 67);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      base64_0.encode(byteArray1, (-612), (-1269));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.7, double0, 0.01);
      
      base64_0.decode(byteArray2, 1, 67);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(1629, byteArray0.length);
      assertEquals(2172, byteArray1.length);
      assertEquals(2896, byteArray2.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      int int1 = base64_0.avail();
      assertFalse(int1 == int0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(50, int1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-74), (byte)127}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      MockRandom mockRandom0 = new MockRandom(7235);
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7235, mockRandom0);
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1204, byteArray1.length);
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1204, byteArray1.length);
      //  // Unstable assertion: assertEquals(1606, byteArray2.length);
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1204, byteArray1.length);
      //  // Unstable assertion: assertEquals(1606, byteArray2.length);
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-74), (byte)127}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      MockRandom mockRandom0 = new MockRandom(7235);
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7235, mockRandom0);
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1204, byteArray1.length);
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64(7235);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      base64_0.decode(byteArray1, 675, 675);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1204, byteArray1.length);
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      int int0 = base64_0.readResults(byteArray1, 743, 1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1204, byteArray1.length);
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-74), (byte)127}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(6, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-74), (byte)127}, byteArray0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-74), (byte)127}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)116, (byte)110, (byte)56, (byte)61, (byte) (-74), (byte)127}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals(12, byteArray2.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-74), (byte)127}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)116, (byte)110, (byte)56, (byte)61, (byte) (-74), (byte)127}, byteArray1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-74), (byte)127}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      MockRandom mockRandom0 = new MockRandom(7235);
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7235, mockRandom0);
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1204, byteArray1.length);
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1204, byteArray1.length);
      //  // Unstable assertion: assertEquals(1606, byteArray2.length);
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      
      Base64 base64_0 = new Base64(7235);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray3 = new byte[9];
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)76;
      byteArray3[1] = (byte)67;
      byteArray3[2] = (byte)9;
      byteArray3[3] = (byte)100;
      byteArray3[4] = (byte)101;
      byteArray3[5] = (byte)4;
      byteArray3[6] = (byte) (-3);
      byteArray3[7] = (byte)46;
      byteArray3[8] = (byte) (-113);
      byte[] byteArray4 = base64_0.decode(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(3, byteArray4.length);
      //  // Unstable assertion: assertEquals(9, byteArray3.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)44, (byte)39, (byte)94}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)76, (byte)67, (byte)9, (byte)100, (byte)101, (byte)4, (byte) (-3), (byte)46, (byte) (-113)}, byteArray3);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      
      boolean boolean0 = Base64.isBase64(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(9, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)76, (byte)67, (byte)9, (byte)100, (byte)101, (byte)4, (byte) (-3), (byte)46, (byte) (-113)}, byteArray3);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(901, byteArray5.length);
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-74), (byte)127}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      MockRandom mockRandom0 = new MockRandom(5792);
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7235, mockRandom0);
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray1 = new byte[8];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)114;
      byteArray1[3] = (byte) (-22);
      byteArray1[4] = (byte) (-120);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)103;
      byteArray1[7] = (byte)3;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      //  // Unstable assertion: assertEquals((short)26371, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)3, bigInteger1.byteValue());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte)114, (byte) (-22), (byte) (-120), (byte)0, (byte)103, (byte)3}, byteArray1);
      //  // Unstable assertion: assertNotNull(bigInteger1);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      //  // Unstable assertion: assertEquals(12, byteArray2.length);
      //  // Unstable assertion: assertEquals((short)26371, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)3, bigInteger1.byteValue());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte)114, (byte) (-22), (byte) (-120), (byte)0, (byte)103, (byte)3}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      Base64 base64_1 = new Base64(true);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertTrue(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)116, (byte)110, (byte)56, (byte)61, (byte) (-74), (byte)127}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-74), (byte)127}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      
      base64_0.decode(byteArray2, (int) (byte)1, 872);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      //  // Unstable assertion: assertEquals(12, byteArray2.length);
      //  // Unstable assertion: assertEquals((short)26371, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)3, bigInteger1.byteValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte)114, (byte) (-22), (byte) (-120), (byte)0, (byte)103, (byte)3}, byteArray1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(4);
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      BigInteger bigInteger0 = new BigInteger(2171, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(364, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      Base64 base64_1 = new Base64(true);
      assertFalse(base64_1.equals((Object)base64_0));
      assertTrue(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_1);
      
      base64_0.decode(byteArray0, 64, 1186);
      assertFalse(base64_0.equals((Object)base64_1));
      assertEquals(364, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(base64_0, base64_1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(42, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      Object object0 = base64_0.decode((Object) "p;<]R4<{h<");
      assertEquals(0, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object0);
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-74), (byte)127}, byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      MockRandom mockRandom0 = new MockRandom(7235);
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(7235, mockRandom0);
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1204, byteArray1.length);
      //  // Unstable assertion: assertEquals((byte) (-30), bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)226, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      BigInteger bigInteger1 = new BigInteger(1717986918, mockRandom0);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals((byte)22, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)790, bigInteger1.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      BigInteger bigInteger0 = new BigInteger(5792, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(968, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray0, 1, 546);
      assertEquals(968, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int1 = base64_0.avail();
      assertFalse(int1 == int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(408, int1);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(968, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      BigInteger bigInteger0 = new BigInteger(2939, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(492, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      
      mockRandom0.setSeed(0);
      boolean boolean0 = Base64.isBase64((byte)7);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(2939);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray0, 0, 16);
      assertEquals(492, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int1 = base64_0.readResults(byteArray0, (byte)7, 16);
      assertFalse(int1 == int0);
      assertEquals(492, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(12, int1);
      
      try { 
        base64_0.encode((Object) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      BigInteger bigInteger0 = new BigInteger(5792, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(968, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray0, 1, 546);
      assertEquals(968, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 1, (-2731));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray1, 1, 1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      base64_0.encode(byteArray1, (-1383), (-1383));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(8, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      BigInteger bigInteger0 = new BigInteger(5792, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(968, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(968, byteArray0.length);
      assertEquals(1325, byteArray1.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-69);
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)70;
      byteArray2[3] = (byte)24;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(4, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-69), (byte)1, (byte)70, (byte)24}, byteArray2);
      assertFalse(boolean0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      BigInteger bigInteger0 = new BigInteger(5792, mockRandom0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(968, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.encode(byteArray0, 94, 124);
      assertEquals(968, byteArray0.length);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = mockRandom0.nextInt();
      assertEquals(0, int0);
      
      BigInteger bigInteger0 = new BigInteger(5792, mockRandom0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(968, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.decodeBase64("r");
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertEquals(968, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(bigInteger1, bigInteger0);
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 462);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (1326) than the specified maxium size of 462
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Base64 base64_0 = new Base64(4, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      Base64 base64_1 = new Base64((byte)32, byteArray0);
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(1, byteArray0.length);
      assertFalse(base64_1.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_1);
      
      byte[] byteArray1 = Base64.decodeBase64("encodeInteger called with null parameter");
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(27, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(27, byteArray1.length);
      assertEquals((byte) (-93), bigInteger0.byteValue());
      assertEquals((short) (-30557), bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(27, byteArray1.length);
      assertEquals(27, byteArray3.length);
      assertNotNull(byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 53, 1948);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64((-2205));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[4];
      Base64 base64_1 = new Base64((-1472));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_1);
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-74), (byte)127}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-74), (byte)127}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)116, (byte)110, (byte)56, (byte)61, (byte) (-74), (byte)127}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertEquals(4, byteArray4.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      
      byte[] byteArray5 = new byte[8];
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      
      byteArray5[0] = (byte)1;
      byteArray5[1] = (byte)65;
      byteArray5[2] = (byte) (-118);
      byteArray5[3] = (byte)1;
      byteArray5[4] = (byte)118;
      byteArray5[5] = (byte)54;
      byteArray5[6] = (byte)0;
      byteArray5[7] = (byte)108;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray5);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertEquals(8, byteArray5.length);
      //  // Unstable assertion: assertEquals((short) (-347), bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-91), bigInteger1.byteValue());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)65, (byte) (-118), (byte)1, (byte)118, (byte)54, (byte)0, (byte)108}, byteArray5);
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)106;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)106;
      byteArray1[2] = (byte)54;
      byteArray1[4] = (byte)106;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 1, (int) (byte)106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)124;
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.encode(byteArray0, (-1), (-1));
      assertEquals(7, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)105, (byte)105, (byte)105, (byte)37, (byte)105, (byte)124}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      base64_0.encode(byteArray1, 90, 1083);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte)105, (byte)105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Base64 base64_0 = new Base64((byte) (-6), (byte[]) null, true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.encode((byte[]) null, 1, (int) (byte)0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64("ceV_X");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 2146896743, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)103, (byte)65, (byte)61}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Base64.isBase64((byte)2);
      assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)103, (byte)65}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray1, (int) (byte)2, 3647);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)103, (byte)65, (byte)61}, byteArray1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[5];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)106;
      byteArray1[2] = (byte) (-6);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)106;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 1, (int) (byte)106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64(6, (byte[]) null, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)68;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)94, (byte)68}, byteArray0);
      assertNotNull(string0);
      assertEquals("XkQ=", string0);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)94, (byte)68}, byteArray0);
      assertNotNull(string1);
      assertEquals("XkQ", string1);
      
      byte[] byteArray1 = base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNull(byteArray1);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)94, (byte)68}, byteArray0);
      assertFalse(boolean0);
      
      base64_0.encode((byte[]) null, 6, (-656));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)94;
      byteArray2[1] = (byte)94;
      byteArray2[2] = (byte)68;
      byteArray2[3] = (byte)94;
      byteArray2[4] = (byte)68;
      byteArray2[5] = (byte)94;
      byteArray2[6] = (byte)68;
      byteArray2[7] = (byte)35;
      byteArray2[8] = (byte)94;
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(2, byteArray3.length);
      assertEquals(9, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)12, (byte)48}, byteArray3);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)68, (byte)94, (byte)68, (byte)94, (byte)68, (byte)35, (byte)94}, byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      
      boolean boolean1 = Base64.isBase64((byte)68);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = base64_0.decode((Object) "Qt:/0Sg|=l3bP\"a~D&q");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, (-317));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -317
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64 base64_0 = new Base64(21, byteArray0, false);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)95, (byte)119}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("/w==\uFFFD", string0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)95, (byte)119, (byte) (-74), (byte)127}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)95, (byte)119, (byte) (-74), (byte)127}, byteArray2);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)106;
      base64_0.encode(byteArray0, (int) (byte)0, (-1));
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)106, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 10);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)106, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)71, (byte)111, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)106, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)71, (byte)111, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-74), (byte)127}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      
      base64_0.encode(byteArray0, 1, (-1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)106, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        bigInteger0.gcd((BigInteger) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64((-2990), byteArray0, true);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("QUFBQUFBQUFBQQ", string0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertEquals(7, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertEquals(16, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertEquals(16, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      
      byte[] byteArray4 = Base64.decodeBase64("QUFBQUFBQUFBQQ");
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(10, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)103, (byte)65, (byte)61}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)103, (byte)65}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray2, (int) (byte)0, (int) (byte)2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray2.length);
      assertTrue(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)2, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)103, (byte)65}, byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)64;
      byteArray3[1] = (byte)2;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)2;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)2;
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((byte) (-94), byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      base64_0.decode(byteArray0, (int) (byte) (-94), (-1723));
      assertEquals(0, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray1);
      
      boolean boolean0 = base64_0.hasData();
      assertEquals(0, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(boolean0);
      assertSame(byteArray0, byteArray1);
      
      base64_0.encode(byteArray0, (-2209), 110);
      assertEquals(0, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray1);
      
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-94);
      byteArray2[1] = (byte) (-94);
      byteArray2[2] = (byte) (-94);
      byteArray2[3] = (byte) (-94);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[6];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte) (-94);
      byteArray1[2] = (byte) (-94);
      byteArray1[3] = (byte) (-94);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      Base64 base64_0 = new Base64((byte) (-94), byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte) (-94), (byte) (-94), (byte) (-94), (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false, 2757);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte) (-74), (byte)127}, byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte) (-94), (byte) (-94), (byte) (-94), (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      
      byte[] byteArray5 = new byte[8];
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte) (-94);
      byteArray5[2] = (byte) (-94);
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte) (-94);
      byteArray5[5] = (byte)0;
      byteArray5[6] = (byte)0;
      byteArray5[7] = (byte)0;
      base64_0.encode(byteArray5, (int) (byte)0, 1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals(8, byteArray5.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte) (-94), (byte) (-94), (byte) (-94), (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-94), (byte) (-94), (byte)0, (byte) (-94), (byte)0, (byte)0, (byte)0}, byteArray5);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)1;
      String string0 = "Input array too big, the output array would be bigger (";
      Base64 base64_2 = new Base64();
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_2);
      
      try { 
        base64_2.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = Base64.isBase64((byte)127);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      String string0 = "Input array too big, the output array would be bigger (";
      Object object0 = base64_0.decode((Object) "Input array too big, the output array would be bigger (");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object0);
      
      Object object1 = base64_0.decode(object0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(object1);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      Base64 base64_0 = new Base64(3692, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-94)}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((short)162, bigInteger0.shortValue());
      assertEquals((byte) (-94), bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-94)}, byteArray0);
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals((short)162, bigInteger0.shortValue());
      assertEquals((byte) (-94), bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-94)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94)}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-42);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)51, (byte)108, (byte)41, (byte) (-42), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)108, (byte)41, (byte) (-42), (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Base64.isBase64((byte) (-42));
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals((byte) (-34), bigInteger0.byteValue());
      assertEquals((short)222, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)51, (byte)108, (byte)41, (byte) (-42), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)51, (byte)108, (byte)41, (byte) (-42), (byte)0}, byteArray1);
      assertNotNull(bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(46, (byte[]) null, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNull(byteArray1);
      
      byte[] byteArray2 = base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNull(byteArray2);
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      Base64 base64_0 = new Base64((-107), byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      boolean boolean0 = base64_0.hasData();
      assertEquals(1, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertFalse(boolean0);
      
      Base64 base64_1 = new Base64((-107), byteArray0, true);
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(1, byteArray0.length);
      assertTrue(base64_1.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_1);
      
      boolean boolean1 = base64_1.isUrlSafe();
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertTrue(base64_1.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)42}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(boolean1);
      assertNotSame(base64_1, base64_0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(3692, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray1.length);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)10}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = base64_0.decode("ISO-8859-1");
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(2, byteArray0.length);
      assertEquals(7, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)33, (byte)35, (byte) (-66), (byte) (-13), (byte) (-50), (byte)125, (byte) (-5)}, byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      
      byte[] byteArray3 = base64_0.decode("]");
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      
      base64_0.encode(byteArray2, 3692, (int) (byte) (-61));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertEquals(2, byteArray0.length);
      assertEquals(7, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)33, (byte)35, (byte) (-66), (byte) (-13), (byte) (-50), (byte)125, (byte) (-5)}, byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      
      boolean boolean0 = Base64.isBase64("Input array too big, the output array would be bigger (");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("[I:\"z/.y#");
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)63, (byte) (-14)}, byteArray0);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray1);
      
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)23;
      byteArray2[1] = (byte)127;
      byteArray2[2] = (byte)89;
      byteArray2[3] = (byte)5;
      byteArray2[4] = (byte)127;
      byteArray2[5] = (byte)1;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-4198), byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0017Y\u0005\u0001]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)1;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = new Base64(3264, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte) (-10), (byte)32, (byte)9, (byte) (-10), (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray0, (int) (byte)84, (int) (byte)0);
      assertEquals(7, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte) (-10), (byte)32, (byte)9, (byte) (-10), (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      int int0 = base64_0.readResults(byteArray0, 80, 1322);
      assertEquals(7, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte) (-10), (byte)32, (byte)9, (byte) (-10), (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, int0);
      
      int int1 = base64_0.readResults(byteArray0, (-1326), 1433);
      assertTrue(int1 == int0);
      assertEquals(7, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte) (-10), (byte)32, (byte)9, (byte) (-10), (byte)1, (byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, int1);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)32, (byte)9, (byte) (-10), (byte)1, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals("9iAJ9gEAAA", string0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)9;
      String string1 = Base64.encodeBase64URLSafeString(byteArray1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)32, (byte)9, (byte)9}, byteArray1);
      assertNotNull(string1);
      assertEquals("ACAJCQ", string1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      Base64 base64_0 = new Base64(8192, byteArray0, true);
      assertEquals(7, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)123, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)123, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(string0);
      assertEquals("AAAAewAAAA\u0000\u0000\u0000{\u0000\u0000\u0000", string0);
      
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals(7, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)123, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64((-1377), byteArray0);
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(7, byteArray0.length);
      assertFalse(base64_1.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)123, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_1);
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)123, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)123, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)123, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      boolean boolean0 = Base64.isBase64("");
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      boolean boolean1 = Base64.isBase64("p5_~");
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
      
      Base64 base64_1 = new Base64(12);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_1);
      
      int int0 = base64_0.readResults(byteArray0, (-235), (-1750));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      
      String string0 = base64_1.encodeToString(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("QUFBQUFBQUFB\uFFFDQQ==\uFFFD", string0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      
      base64_1.decode(byteArray1, 12, 64);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(7, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, 4);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (18) than the specified maxium size of 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("[I:\"z/Ry#");
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)63, (byte) (-47)}, byteArray0);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(25, (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNull(string0);
      
      byte[] byteArray1 = Base64.decodeBase64((String) null);
      assertNull(byteArray1);
      
      String string1 = base64_0.encodeToString(byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)35, (byte)63, (byte) (-47)}, byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(string1);
      assertEquals("Iz/R", string1);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, true, true);
      assertNull(byteArray2);
      
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(505, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      Base64 base64_1 = new Base64(64, byteArray0, false);
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(0, byteArray0.length);
      assertFalse(base64_1.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_1);
      
      int int0 = base64_1.avail();
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(0, byteArray0.length);
      assertFalse(base64_1.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, int0);
      assertNotSame(base64_1, base64_0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      String string0 = bigInteger0.toString();
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(string0);
      assertEquals("1", string0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray1.length);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = Base64.isBase64((byte)73);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("[I:\"z/.y#");
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)63, (byte) (-14)}, byteArray0);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(25, (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNull(string0);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true, true, 639);
      assertNull(byteArray1);
      
      byte[] byteArray2 = base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNull(byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray4);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray5 = Base64.encodeInteger(bigInteger0);
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertEquals(4, byteArray5.length);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray5);
      assertNotNull(byteArray5);
      assertNotSame(byteArray5, byteArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64((-41), (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)2;
      byteArray1[5] = (byte)117;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(6, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-89), (byte) (-1), (byte)6, (byte)2, (byte)117}, byteArray1);
      assertArrayEquals(new byte[] {(byte)47, (byte)54, (byte)102, (byte)47, (byte)66, (byte)103, (byte)74, (byte)49}, byteArray2);
      assertNotNull(byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64((byte) (-23));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      
      boolean boolean0 = Base64.isBase64("s$'");
      assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray2, (-1723), (-4200));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertTrue(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true, (-4200));
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray3);
      assertSame(byteArray3, byteArray1);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray3, byteArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = Base64.decodeBase64("[I:\"z/.y#");
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)63, (byte) (-14)}, byteArray0);
      assertNotNull(byteArray0);
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNull(string0);
      
      byte[] byteArray1 = base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNull(byteArray1);
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)1;
      byteArray2[4] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertEquals(5, byteArray2.length);
      assertEquals(8, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)0, (byte)0, (byte) (-1)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)65, (byte)65, (byte)65, (byte)80, (byte)56, (byte)61}, byteArray3);
      assertNotNull(byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      
      byte[] byteArray4 = new byte[0];
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, false);
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertEquals(0, byteArray4.length);
      assertEquals(0, byteArray5.length);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertNotNull(byteArray5);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertSame(byteArray4, byteArray5);
      assertSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      assertSame(bigInteger1, bigInteger0);
      
      byte[] byteArray6 = Base64.encodeInteger(bigInteger1);
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertEquals(4, byteArray6.length);
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray6);
      assertNotNull(byteArray6);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray2);
      
      byte[] byteArray7 = new byte[9];
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray4));
      
      byteArray7[0] = (byte)0;
      byteArray7[1] = (byte)0;
      byteArray7[2] = (byte) (-1);
      byteArray7[3] = (byte)0;
      byteArray7[4] = (byte)0;
      byteArray7[5] = (byte)0;
      byteArray7[6] = (byte)0;
      byteArray7[7] = (byte)0;
      byteArray7[8] = (byte)0;
      base64_0.encode(byteArray7, (int) (byte)0, (-1769));
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertEquals(9, byteArray7.length);
      assertFalse(base64_0.isUrlSafe());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray7);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray2);
      assertNotSame(byteArray7, byteArray3);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, byteArray4);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)103;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      BigInteger bigInteger2 = bigInteger0.modPow(bigInteger1, bigInteger1);
      bigInteger0.nextProbablePrime();
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray4 = base64_0.decode("Input array too big, the output array would be bigger (");
      base64_0.decode(byteArray0, 31, (int) (byte)103);
      base64_0.isUrlSafe();
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      //  // Unstable assertion: assertTrue(boolean0);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, false);
      BigInteger bigInteger3 = new BigInteger(byteArray5);
      bigInteger3.compareTo(bigInteger2);
      Base64.encodeInteger(bigInteger3);
      //  // Unstable assertion: assertEquals(32, byteArray4.length);
      
      BigInteger bigInteger4 = Base64.decodeInteger(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)100, (byte)106, (byte)80, (byte)98, (byte)90, (byte)95}, byteArray2);
      //  // Unstable assertion: assertEquals((short)23135, bigInteger4.shortValue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)80;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      Base64 base64_0 = new Base64(8192, byteArray0, true);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAAAewAAAA\u0000\u0000\u0000{\u0000\u0000\u0000", string0);
      
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      BigInteger bigInteger0 = new BigInteger(2948, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(492, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)1;
      Base64 base64_0 = new Base64(1631, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("AP8Q3AE=", string0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, false);
      //  // Unstable assertion: assertEquals(20, byteArray4.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      
      byte[] byteArray5 = Base64.decodeBase64(",gCdbD0I~HK[SlB#I");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-128), (byte)39, (byte)91, (byte)15, (byte)66, (byte)7, (byte)41, (byte)41, (byte)65}, byteArray5);
      //  // Unstable assertion: assertEquals(9, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-80);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AP-w", string0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.intValue();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)66;
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte) (-1);
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-80);
      byteArray2[1] = (byte)3;
      byteArray2[2] = (byte)66;
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte) (-80);
      byteArray2[5] = (byte)0;
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte) (-15));
      Base64 base64_0 = new Base64((-2108), byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray0, false, true, (-3097));
      Base64.encodeBase64(byteArray1, false, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-1332), (-132));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-11);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.remainder(bigInteger1);
      bigInteger0.nextProbablePrime();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-74), (byte)127}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.nextProbablePrime();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[7];
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte) (-36);
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)1;
      Base64 base64_0 = new Base64(1716, byteArray2);
      base64_0.decode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.encodeToString((byte[]) null);
      base64_0.encode(byteArray2);
      Base64.decodeBase64("AQ");
      Base64.isArrayByteBase64(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("AQ");
      byte[] byteArray3 = Base64.encodeBase64((byte[]) null, false, true);
      assertNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      base64_0.encode(byteArray0);
      Base64.decodeBase64("");
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertTrue(boolean0);
      
      base64_0.hasData();
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray4 = Base64.decodeBase64("-");
      assertEquals(0, byteArray4.length);
      
      Base64.encodeBase64(byteArray2, true, true);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray1);
      assertSame(byteArray5, byteArray3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)1;
      Base64 base64_0 = new Base64(1631, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64((byte) (-36), (byte[]) null);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte) (-36);
      byteArray2[3] = (byte) (-36);
      Base64 base64_2 = new Base64(95, byteArray2, true);
      String string0 = base64_2.encodeToString(byteArray1);
      assertEquals("", string0);
      assertTrue(base64_2.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64("");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray2, (-1723), (-4200));
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true, (-4200));
      assertSame(byteArray1, byteArray3);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(false);
      int int0 = 0;
      int int1 = 1042;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byteArray0[0] = (byte)47;
      byte[] byteArray2 = Base64.decodeBase64("");
      byteArray0[1] = (byte) (-75);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isArrayByteBase64(byteArray3);
      base64_0.encode(byteArray2, (int) (byte)47, (int) (byte)47);
      Base64.isArrayByteBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(790, byteArray1, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-24);
      byteArray3[1] = (byte)11;
      Base64 base64_1 = new Base64(76, byteArray3);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      base64_1.readResults(byteArray2, (byte) (-87), 64);
      base64_1.encode(byteArray4, (int) (byte)0, (int) (byte) (-24));
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger1);
      base64_0.decode("Input array too big, the output array would be bigger (");
      base64_0.decode("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 2113396605, (int) (byte)11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2113396605
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64((-1), byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("ugC/AAAAAA==", string0);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      base64_0.encode(byteArray0, 0, (int) (byte)0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64("");
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      base64_0.avail();
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      assertEquals(0, byteArray4.length);
      
      Base64.decodeBase64((String) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(0, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.nextProbablePrime();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)127;
      Base64 base64_0 = new Base64((byte)0, byteArray1);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = "";
      Base64.isBase64("");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-36);
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte) (-52);
      byteArray1[3] = (byte)105;
      byteArray1[4] = (byte)114;
      byteArray1[5] = (byte)80;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)92;
      Base64.encodeBase64(byteArray1, false, false, 100);
      Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1149), byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDN\uFFFDirP\u0001\\]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_0 = new Base64(1);
      Base64.encodeBase64((byte[]) null, true);
      base64_0.decode((byte[]) null, 877, (-29));
      int int0 = base64_0.readResults((byte[]) null, 1, 1);
      assertEquals((-1), int0);
      
      base64_0.decode("");
      base64_0.hasData();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-18);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)76, (byte)52, (byte)79, (byte)68, (byte)102, (byte)76, (byte)117}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, (int) (byte)85);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      //  // Unstable assertion: assertEquals(19, byteArray3.length);
      
      base64_0.avail();
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(14, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(790, byteArray1, false);
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      int int0 = (-2354);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte)0;
      byteArray4[7] = (byte)0;
      byteArray4[8] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray4, false, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Ve;&`Ng?n`");
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(862);
      int int0 = 1;
      base64_0.decode(byteArray0, 1, 1);
      int int1 = 0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 862);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-38);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-70), (byte)0, (byte) (-65), (byte)0, (byte)29, (byte)0, (byte) (-38)}, byteArray2);
      assertEquals(7, byteArray2.length);
      
      base64_0.avail();
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      assertEquals(16, byteArray3.length);
      
      Base64.decodeBase64("");
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64("");
      Base64.encodeBase64URLSafe(byteArray1);
      int int0 = 4029;
      Base64 base64_0 = new Base64(4029, byteArray0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "3h13v2gS~uHbHJ)8p^";
      byte[] byteArray0 = Base64.decodeBase64("3h13v2gS~uHbHJ)8p^");
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u001Dw\uFFFDh\u0012\uFFFDv\uFFFD'\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-87);
      Base64 base64_0 = new Base64((-2252), byteArray0);
      Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, (byte) (-112), (-1031));
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-2396), 1068);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2396
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-101);
      Base64 base64_0 = new Base64((-831), byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray0, (byte)62, 0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.intValueExact();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.xor(bigInteger1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("", string0);
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(1, byteArray3.length);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)80, (byte)103, (byte)67, (byte)72, (byte)65, (byte)74, (byte)115, (byte)61}, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = base64_0.decode((String) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString((byte[]) null);
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      //  // Unstable assertion: assertNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-80);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 64);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)80, (byte)43, (byte)119, (byte) (-74), (byte)127}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[5] = (byte)0;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      base64_0.decode((Object) "");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false);
      assertEquals(0, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray2);
      assertArrayEquals(new byte[] {(byte)84, (byte)117, (byte)77, (byte)65, (byte)65, (byte)65}, byteArray2);
      assertEquals(10, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64("");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)1;
      Base64.encodeBase64(byteArray2, false);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.encode(byteArray1, (int) (byte)1, 0);
      base64_0.encodeToString(byteArray2);
      Base64.decodeBase64("AAE=");
      boolean boolean0 = Base64.isBase64((byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-106);
      Base64 base64_0 = new Base64((-1332), byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byte byte0 = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)9;
      byte byte1 = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byte byte2 = (byte)84;
      byteArray0[5] = (byte)84;
      byte byte3 = (byte)0;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(3264, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD \t\u0001\u0001T\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-52);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)246, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte) (-43);
      byteArray0[8] = (byte)123;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-111), (byte)1, (byte) (-97), (byte)62, (byte)0, (byte) (-126), (byte) (-43), (byte)123}, byteArray2);
      
      Base64 base64_0 = new Base64((byte) (-97));
      base64_0.readResults(byteArray0, (byte) (-97), 3412);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(4756, byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)3;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64(1, byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray2, 1, 1986);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode(byteArray1);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-98), (byte)0, (byte) (-72), (byte) (-94), (byte)3}, byteArray3);
      
      base64_0.isUrlSafe();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger1.max(bigInteger0);
      bigInteger1.and(bigInteger2);
      bigInteger1.longValue();
      Base64.encodeInteger(bigInteger1);
      Base64.decodeBase64("");
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("FJ4AuKID", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)42;
      byteArray0[0] = (byte)42;
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)103;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger0.modPow(bigInteger1, bigInteger1);
      bigInteger0.nextProbablePrime();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = base64_0.decode("Input array too big, the output array would be bigger (");
      base64_0.decode(byteArray0, 31, (int) (byte)103);
      base64_0.isUrlSafe();
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)100, (byte)106, (byte)80, (byte)98, (byte)90, (byte)95}, byteArray2);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false);
      BigInteger bigInteger2 = new BigInteger(byteArray4);
      byte[] byteArray5 = Base64.encodeInteger(bigInteger2);
      //  // Unstable assertion: assertEquals(32, byteArray3.length);
      //  // Unstable assertion: assertEquals(60, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-33);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)1;
      Base64 base64_0 = new Base64(1631, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("AP8Q3AE=", string0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64(") than the specified maxium size of ");
      Base64.isArrayByteBase64(byteArray3);
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64.encodeBase64String((byte[]) null);
      byte[] byteArray4 = Base64.decodeBase64(") than the specified maxium size of ");
      //  // Unstable assertion: assertEquals(21, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray2, false, false);
      //  // Unstable assertion: assertEquals(16, byteArray5.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)80, (byte)56, (byte)81, (byte)51, (byte)65, (byte)69, (byte)61, (byte)0, (byte)127}, byteArray2);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("[I:\"z/.y#");
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)35, (byte)63, (byte) (-14)}, byteArray0);
      
      base64_0.encodeToString((byte[]) null);
      base64_0.encode((byte[]) null);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals(8, byteArray2.length);
      
      byte[] byteArray3 = new byte[0];
      Base64.encodeBase64(byteArray3, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(6, byteArray1.length);
      
      Base64 base64_0 = new Base64((byte) (-1));
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray3);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte) (-1);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray4);
      assertEquals("AP8AAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)99;
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(0);
      try { 
        base64_0.encode((Object) "hTofWABjWmM");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)80, (byte)81, (byte)0, (byte)127}, byteArray2);
      
      byteArray0[0] = (byte)47;
      Base64.decodeBase64("");
      byteArray0[1] = (byte) (-75);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true);
      Base64.isArrayByteBase64(byteArray3);
      byte[] byteArray4 = Base64.decodeBase64(",gCdbD0I~HK[SlB#I");
      //  // Unstable assertion: assertEquals(9, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte)81, (byte)72, (byte)48, (byte)65, (byte)65}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64 base64_0 = new Base64(470);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)56;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte) (-79);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)19;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)1;
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte)0;
      Base64.encodeBase64(byteArray4, false);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray3);
      assertFalse(byteArray5.equals((Object)byteArray1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.nextProbablePrime();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)110;
      byteArray1[4] = (byte) (-70);
      byteArray1[5] = (byte)47;
      byteArray1[6] = (byte)0;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)127, (byte)110, (byte) (-70), (byte)47, (byte)0}, byteArray2);
      assertEquals(6, byteArray2.length);
  }
}
