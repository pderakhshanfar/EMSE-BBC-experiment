/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 02:15:29 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      bigInteger0.longValue();
      BigInteger bigInteger2 = new BigInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger2);
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.decodeInteger(byteArray3);
      base64_0.decode(byteArray4);
      // Undeclared exception!
      base64_0.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.discardWhitespace(byteArray0);
      MockRandom mockRandom0 = new MockRandom((-1027L));
      BigInteger bigInteger0 = new BigInteger(1982292598, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(false);
      base64_0.encode(byteArray0, 64, 98);
      base64_0.decode(byteArray0, (-3397), 0);
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray0, 53, 1659);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Base64 base64_0 = new Base64(1146);
      byte[] byteArray0 = new byte[9];
      base64_0.encodeToString((byte[]) null);
      byte byte0 = (byte)9;
      byteArray0[0] = (byte)9;
      byte byte1 = (byte)7;
      byteArray0[1] = (byte)7;
      byte byte2 = (byte)116;
      byteArray0[2] = (byte)116;
      byte byte3 = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)73;
      byte byte4 = (byte)86;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)97;
      byte byte5 = (byte)118;
      byteArray0[8] = (byte)118;
      base64_0.encodeToString((byte[]) null);
      base64_0.decode((String) null);
      base64_0.encode(byteArray0, (int) (byte)97, (-1042));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 1146, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      bigInteger0.longValue();
      BigInteger bigInteger2 = new BigInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64.decodeInteger(byteArray3);
      byte[] byteArray5 = base64_0.decode(byteArray4);
      // Undeclared exception!
      Base64.decodeInteger(byteArray5);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64.toIntegerBytes(bigInteger1);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7192, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextDouble();
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      bigInteger0.longValue();
      BigInteger bigInteger3 = new BigInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger3);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      base64_0.encode((byte[]) null, 0, 1188);
      base64_0.decode(byteArray4);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7192, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextDouble();
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      bigInteger0.longValue();
      BigInteger bigInteger3 = new BigInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger3);
      base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 7192;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7192, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextDouble();
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      bigInteger1.xor(bigInteger2);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      bigInteger0.longValue();
      BigInteger bigInteger3 = new BigInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger3);
      base64_0.encode(byteArray3);
      bigInteger3.multiply(bigInteger1);
      byte[] byteArray4 = null;
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(25L);
      mockRandom0.setSeed(25L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(2459, mockRandom0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 64, 2459);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7169, mockRandom0);
      bigInteger0.not();
      bigInteger0.longValue();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextFloat();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      BigInteger bigInteger2 = new BigInteger(byteArray3);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger2);
      // Undeclared exception!
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 1330;
      Base64 base64_0 = new Base64(1330, byteArray0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("", 1330);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Radix out of range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(4, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64(byteArray1, false, true);
      Base64.decodeBase64(byteArray1);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(423, byteArray1, true);
      Object object0 = base64_0.decode((Object) "92WdE$P #k|)><|");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(2454, mockRandom0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger1.not();
      Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode(byteArray0, 76, (-1414));
      Base64 base64_1 = new Base64((-1), byteArray1);
      base64_1.encode(byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-23);
      byteArray2[1] = (byte)101;
      byteArray2[2] = (byte) (-98);
      Base64.encodeBase64(byteArray2, false, true);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.decodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(2454, mockRandom0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.not();
      bigInteger0.subtract(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      base64_0.decode(byteArray0, 64, 2454);
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(2454, mockRandom0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.not();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 64, 1987);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 412
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((byte)96, byteArray0, false);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)96;
      byteArray3[1] = (byte)96;
      byteArray3[2] = (byte)96;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.encodeBase64((byte[]) null, false, false);
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(25L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(2454, mockRandom0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.not();
      bigInteger0.subtract(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = new byte[4];
      base64_0.decode(byteArray2, 2454, 2454);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      byteArray2[0] = (byte) (-106);
      byteArray2[1] = (byte)103;
      byteArray2[2] = (byte) (-62);
      byteArray2[3] = (byte) (-124);
      Base64.encodeBase64(byteArray3, false, false);
      assertEquals(568, byteArray3.length);
      
      base64_0.encode(byteArray2, (int) (byte) (-124), 44);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      assertEquals(303, byteArray4.length);
      assertEquals(307, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(25L);
      mockRandom0.nextFloat();
      BigInteger bigInteger0 = new BigInteger(2454, mockRandom0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.not();
      bigInteger0.subtract(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      base64_0.decode(byteArray0, 64, 2454);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 4944, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4944
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray2, 2, 2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)76, (byte)69, (byte)65, (byte)61, (byte)44, (byte)64}, byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.mod(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      Base64.toIntegerBytes(bigInteger2);
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      int int0 = base64_0.readResults(byteArray3, 76, 61);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)79, (byte)118, (byte)47, (byte)44, (byte)64}, byteArray3);
      
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray2);
      //  // Unstable assertion: assertEquals((short)0, bigInteger3.shortValue());
      
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-21), (byte) (-1)}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-115);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      bigInteger0.negate();
      base64_0.encode(byteArray1);
      base64_0.encode((byte[]) null);
      base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.mod(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      Base64.toIntegerBytes(bigInteger2);
      Base64.isBase64(byteArray1);
      base64_0.readResults(byteArray3, 76, 61);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 606, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 606
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)124;
      byteArray0[8] = (byte) (-74);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(5, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [#~|\u0001(]f|\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(16);
      byte[] byteArray0 = null;
      base64_0.encode((byte[]) null);
      Base64 base64_1 = new Base64((-243), (byte[]) null, true);
      base64_1.avail();
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, 2089, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)123;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, (int) (byte)123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Base64.isBase64((byte) (-13));
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-24);
      Object object0 = base64_0.decode((Object) "ISO-8859-1");
      Object object1 = base64_0.encode(object0);
      assertNotSame(object1, object0);
      
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)7;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.avail();
      int int0 = base64_0.readResults(byteArray1, (byte) (-24), (-872));
      assertEquals(14, byteArray1.length);
      assertEquals((-1), int0);
      
      base64_0.encode(byteArray0, 3522, (int) (byte)37);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-77);
      byteArray2[1] = (byte) (-77);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)7;
      byteArray4[1] = (byte)37;
      byteArray4[2] = (byte) (-64);
      byteArray4[3] = (byte)49;
      byteArray4[4] = (byte)10;
      byteArray4[5] = (byte)69;
      byteArray4[6] = (byte)67;
      byteArray4[7] = (byte)46;
      byteArray4[8] = (byte)37;
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, false, false, 38);
      assertEquals(12, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 61, 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64.isBase64((byte) (-13));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte) (-13);
      byteArray0[8] = (byte) (-13);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.decodeBase64(byteArray2);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.mod(bigInteger0);
      bigInteger0.divide(bigInteger1);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertEquals(18, byteArray5.length);
      
      byte[] byteArray6 = base64_0.decode(byteArray3);
      //  // Unstable assertion: assertEquals(0, byteArray6.length);
      
      boolean boolean0 = Base64.isBase64(byteArray3);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((String) null);
      Object object0 = new Object();
      Object object1 = base64_0.decode((Object) "B)h]3");
      base64_0.decode(object1);
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64.isBase64((byte) (-13));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte) (-13);
      byteArray0[8] = (byte) (-13);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertEquals(12, byteArray1.length);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      bigInteger1.mod(bigInteger0);
      bigInteger0.divide(bigInteger1);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
      String string0 = Base64.encodeBase64String(byteArray5);
      //  // Unstable assertion: assertEquals("LEA=", string0);
      
      String string1 = base64_0.encodeToString(byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertEquals("LEA=,@", string1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.isBase64((byte)111);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)1);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.decode((String) null);
      assertNull(byteArray1);
      
      base64_0.encode(byteArray0, 66, (int) (byte)0);
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_0 = new Base64(16);
      base64_0.encode(byteArray0, 0, (-1067));
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertSame(byteArray3, byteArray1);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(81, byteArray0);
      base64_0.decode("`EV=-Ah L");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray1, 6, (-641));
      base64_0.decode((Object) "}L{Dqj7'{.mMH*p");
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray2);
      base64_0.decode("Z0VmTH;[KF8%SR1#");
      Base64.encodeBase64(byteArray0, false, false);
      Random.setNextRandom(4374);
      base64_0.decode("}L{Dqj7'{.mMH*p");
      base64_0.decode("");
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray2);
      assertEquals(10, byteArray2.length);
      
      Base64.isBase64((byte)111);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String((byte[]) null);
      base64_0.decode(byteArray0, 8162, (int) (byte)0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      Base64.isBase64(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(4);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(18, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64.isBase64((byte) (-13));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte) (-13);
      byteArray0[8] = (byte) (-13);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.decodeBase64(byteArray2);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 884);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64.isBase64("encodeInteger called with null parameter");
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, 64);
      base64_0.decode("*)>uIo.=_");
      try { 
        base64_0.encode((Object) "*)>uIo.=_");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64();
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)64;
      Base64 base64_1 = new Base64((byte)64, byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)29;
      byteArray2[1] = (byte)64;
      byteArray2[2] = (byte)29;
      byteArray2[3] = (byte)123;
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray2, 76, (int) (byte)64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.isBase64((byte)17);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-24);
      byteArray1[1] = (byte) (-24);
      byteArray1[2] = (byte)0;
      Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-24);
      byteArray3[1] = (byte) (-24);
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-24);
      byteArray3[4] = (byte) (-4);
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, (int) (byte)0, 814);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray1, true, true, 14);
      Base64.isBase64("B<I");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)123, (int) (byte)123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 123
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.isBase64((byte)61);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1333);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)61;
      byteArray2[1] = (byte)61;
      byteArray2[2] = (byte)61;
      byteArray2[3] = (byte)61;
      byteArray2[4] = (byte)57;
      byteArray2[5] = (byte)61;
      byteArray2[6] = (byte)61;
      byteArray2[7] = (byte)12;
      byteArray2[8] = (byte)61;
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeBase64((byte[]) null, true);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)2;
      base64_0.encode(byteArray1, 66, (-2679));
      byte byte0 = (byte)52;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)32;
      byteArray2[1] = (byte)52;
      BigInteger.valueOf((-1142L));
      byteArray2[2] = (byte)6;
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray2, (byte)32, (byte)52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray0, 2984, 0);
      Object object0 = new Object();
      try { 
        base64_1.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)123;
      byteArray0[0] = (byte)123;
      byte byte1 = (byte)57;
      byteArray0[1] = (byte)57;
      byte byte2 = (byte)32;
      byteArray0[2] = (byte)32;
      byte byte3 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte byte4 = (byte)0;
      byteArray0[5] = (byte)0;
      byte byte5 = (byte)110;
      byteArray0[6] = (byte)110;
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = (byte) (-13);
      Base64.isBase64((byte) (-13));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-13);
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)47;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64(82);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, (-361), (int) (byte) (-13));
      boolean boolean0 = Base64.isBase64((byte) (-13));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte) (-62), byteArray1, false);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)84;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-53);
      byteArray2[3] = (byte) (-62);
      byteArray2[4] = (byte)39;
      byteArray2[5] = (byte) (-53);
      byteArray2[6] = (byte) (-62);
      byteArray2[7] = (byte) (-62);
      byteArray2[8] = (byte)39;
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      Base64 base64_1 = new Base64(false);
      Base64.decodeBase64(byteArray3);
      Base64.isArrayByteBase64(byteArray3);
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)39, (byte) (-62)}, byteArray1);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-1724));
      base64_0.decode("");
      Base64.encodeBase64(byteArray2, false);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)79;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)97;
      byteArray1[1] = (byte)110;
      byteArray1[2] = (byte)103;
      byteArray1[3] = (byte)110;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)97;
      byteArray1[6] = (byte) (-10);
      byteArray1[7] = (byte)97;
      byteArray1[8] = (byte)100;
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)100;
      byteArray2[1] = (byte)110;
      byteArray2[2] = (byte)103;
      byteArray2[3] = (byte)103;
      byteArray2[4] = (byte)103;
      byteArray2[5] = (byte) (-10);
      byteArray2[6] = (byte)97;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(7, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)100, (byte)110, (byte)103, (byte)103, (byte)103, (byte) (-10), (byte)97}, byteArray3);
      
      Base64 base64_0 = new Base64(99);
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = Base64.decodeBase64("");
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("", string0);
      
      String string1 = Base64.encodeBase64String(byteArray0);
      assertEquals("AA==", string1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger1 = new BigInteger(788, mockRandom0);
      BigInteger bigInteger2 = bigInteger1.subtract(bigInteger0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger2);
      assertEquals(128, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-104);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-24);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray1, (int) (byte) (-104), (int) (byte) (-13));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)90, (byte)103, (byte)65, (byte)56, (byte)43, (byte)103, (byte)61, (byte)39, (byte) (-62)}, byteArray1);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-24);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("B<I");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-1426), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1426
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)0;
      Base64 base64_1 = new Base64((byte)83);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)70, (byte)77, (byte)65, (byte)39, (byte) (-62)}, byteArray1);
      
      base64_0.hasData();
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Base64.isBase64((byte) (-13));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte) (-13);
      byteArray0[8] = (byte) (-13);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.decodeBase64(byteArray2);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      bigInteger1.mod(bigInteger0);
      bigInteger0.divide(bigInteger1);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertEquals(2, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray1, true, true, 61);
      //  // Unstable assertion: assertEquals(12, byteArray1.length);
      //  // Unstable assertion: assertEquals(18, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      byte byte0 = (byte)72;
      byteArray0[1] = (byte)72;
      byte byte1 = (byte)23;
      byteArray0[2] = (byte)72;
      byte byte2 = (byte)60;
      byteArray0[3] = (byte)60;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.encode(byteArray0, (int) (byte)23, 0);
      base64_0.decode((Object) "bUhIPA");
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("bUhIPA");
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode((Object) "bUhIPA");
      base64_0.decode("gSbngK*D:l%{Tc5aWlf");
      Base64.toIntegerBytes(bigInteger0);
      try { 
        base64_0.encode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)78;
      byte byte0 = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)0;
      Base64.isBase64((byte)1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64(true);
      base64_1.readResults((byte[]) null, (byte) (-82), 176);
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, (int) (byte)4, 1736);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.doubleValue();
      boolean boolean0 = Base64.isBase64("encodeInteger called with null parameter");
      //  // Unstable assertion: assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode("*)>uIo.=_");
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      
      int int0 = base64_0.readResults(byteArray1, 0, (byte)51);
      //  // Unstable assertion: assertEquals((-1), int0);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)84, (byte)88, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte)39, (byte) (-62)}, byteArray4);
      //  // Unstable assertion: assertEquals(10, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 96);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(55);
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(12, byteArray1.length);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      byte[] byteArray4 = Base64.decodeBase64("");
      assertEquals(0, byteArray4.length);
      
      base64_0.readResults(byteArray3, 35, (-1896));
      assertEquals(0, byteArray3.length);
      assertArrayEquals(new byte[] {}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, (int) (byte)1, (-4181));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)79;
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.valueOf((byte)97);
      bigInteger0.not();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.add(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)97, (byte)103, (byte)0, (byte)121, (byte)100, (byte)79}, byteArray1);
      
      byte[] byteArray2 = Base64.decodeBase64("D?LG~");
      base64_0.readResults(byteArray2, (byte)100, 499);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-79)}, byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false);
      assertEquals(12, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)60;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("bUgXPA", string0);
      
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.getLowestSetBit();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray1.length);
      
      base64_0.encode(byteArray0, (int) (byte)23, 0);
      base64_0.decode((Object) "bUgXPA");
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertEquals((byte) (-104), bigInteger1.byteValue());
      
      byte[] byteArray2 = Base64.decodeBase64("bUgXPA");
      Base64.encodeBase64String(byteArray0);
      String string1 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("bUgXPA", string1);
      
      base64_0.decode((Object) "bUgXPA");
      base64_0.decode("gSbngK*D:l%{Tc5aWlf");
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray3.length);
      
      base64_0.decode(byteArray0);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)72;
      byteArray4[1] = (byte)60;
      byteArray4[2] = (byte)23;
      byteArray4[3] = (byte)23;
      byteArray4[4] = (byte)60;
      byteArray4[5] = (byte)60;
      byteArray4[6] = (byte)72;
      byte[] byteArray5 = base64_0.encode(byteArray4);
      assertEquals(12, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      Base64.isBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)66, (byte)82, (byte)111, (byte)45, (byte)65, (byte)81}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      Base64.encodeBase64((byte[]) null, true);
      Base64 base64_0 = new Base64(18, (byte[]) null, true);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)17;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-52);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64.isBase64((byte) (-13));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte) (-13);
      byteArray0[8] = (byte) (-13);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      //  // Unstable assertion: assertEquals(9, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-13), (byte) (-13), (byte) (-13), (byte) (-13), (byte) (-13), (byte) (-13), (byte) (-13), (byte) (-13), (byte) (-13)}, byteArray3);
      
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      bigInteger1.mod(bigInteger0);
      bigInteger0.divide(bigInteger1);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
      //  // Unstable assertion: assertEquals(14, byteArray5.length);
      
      Base64.decodeBase64("");
      base64_0.readResults(byteArray1, (byte) (-13), (byte) (-13));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-65);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AACBmqr_Qb8", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)78;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-110);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-122);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (-878), 3260);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -878
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray1 = new byte[4];
      byte byte0 = (byte)0;
      Base64.encodeBase64URLSafeString((byte[]) null);
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)46;
      byte byte1 = (byte) (-15);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true, 0);
      Base64 base64_0 = new Base64(0, byteArray2, true);
      Base64.encodeBase64URLSafe(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = new byte[3];
      byte[] byteArray4 = base64_0.decode(byteArray2);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)71, (byte)68, (byte)65, (byte)65, (byte)65}, byteArray4);
      assertEquals(7, byteArray4.length);
      
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-125);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1, mockRandom0);
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray5.length);
      
      byteArray3[2] = (byte)0;
      base64_0.encode(byteArray3, (int) (byte)0, 119);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray6 = Base64.encodeInteger(bigInteger1);
      assertEquals(4, byteArray6.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray6);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64((-1939));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte)47;
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)64;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)29;
      byteArray1[4] = (byte)96;
      byteArray1[5] = (byte)96;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-39);
      byteArray1[8] = (byte)96;
      base64_0.decode(byteArray1, (-1281), (int) (byte)96);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)110;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)123, (byte)57, (byte)0, (byte)0, (byte)0, (byte)110}, byteArray1);
      
      Base64 base64_0 = new Base64((byte)0);
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)60;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2225, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [2\u0014\u0011\u0016\u0000\u0000\uFFFD\u0000<]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64(3756);
      base64_0.decode((byte[]) null);
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.getLowestSetBit();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)44;
      base64_0.readResults(byteArray0, (byte)44, (byte)1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)118;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray2);
      base64_0.avail();
      bigInteger1.compareTo(bigInteger0);
      base64_0.avail();
      Base64.encodeInteger(bigInteger1);
      base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, true, 64);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)113;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)118;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(3263);
      try { 
        base64_0.encode((Object) "M-zGD[a");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byte byte0 = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)14;
      byte byte1 = (byte) (-40);
      byteArray0[4] = (byte) (-40);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(4373, byteArray0, false);
      Base64.encodeBase64String(byteArray1);
      base64_0.encodeToString(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      int int0 = base64_0.readResults(byteArray0, 28, 37);
      assertEquals(0, int0);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertSame(byteArray2, byteArray1);
      
      boolean boolean0 = base64_0.isUrlSafe();
      boolean boolean1 = Base64.isBase64((byte)53);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      String string0 = "";
      Base64.decodeBase64("");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte) (-85);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-50);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, 64);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte) (-85);
      Base64.isBase64("");
      Base64.encodeBase64Chunked(byteArray3);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64(byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte) (-85), 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -85
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)104, 0);
      byte[] byteArray1 = Base64.decodeBase64((String) null);
      assertNull(byteArray1);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte) (-62), byteArray1, false);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)84;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-53);
      byteArray2[3] = (byte) (-62);
      byteArray2[4] = (byte)39;
      byteArray2[5] = (byte) (-53);
      byteArray2[6] = (byte) (-62);
      byteArray2[7] = (byte) (-62);
      byteArray2[8] = (byte)39;
      Base64.decodeBase64(byteArray2);
      Base64 base64_1 = new Base64(false);
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("encodeInteger called with null parameter");
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64(byteArray2);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode("*)>uIo.=_");
      base64_0.readResults(byteArray1, 0, (byte)51);
      Base64.encodeBase64(byteArray1, true);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-24);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom(1L);
      BigInteger bigInteger1 = new BigInteger(0, mockRandom0);
      bigInteger0.subtract(bigInteger1);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 88, 88);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 88
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-74);
      byteArray0[0] = (byte) (-74);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1);
      Base64.encodeBase64Chunked(byteArray1);
      String string0 = "";
      Base64.isBase64("");
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [D]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      byteArray0[0] = (byte)0;
      base64_0.decode("]^");
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)96;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigInteger0.divideAndRemainder(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.encodeToString(byteArray0);
      base64_0.encodeToString(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, (int) (byte) (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
