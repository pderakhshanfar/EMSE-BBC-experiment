/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 02:24:55 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)4);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)9);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeBase64("org.pache.commons%codec.DecoerException");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[2] = (byte)4;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)4);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(937, byteArray0);
      String string0 = "UTF-8";
      Object object0 = base64_0.decode((Object) "UTF-8");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(5);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom((-2269));
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2269));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)79;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)4);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)43;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      byte[] byteArray1 = base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(433);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(645, byteArray0, false);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)73;
      byteArray1[1] = (byte)73;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte) (-78);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)116;
      byteArray0[4] = (byte) (-103);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(110);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      int int0 = Base64.MIME_CHUNK_SIZE;
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)121;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(8);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-34);
      Base64 base64_0 = new Base64(0, byteArray0);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.binary.Base64");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
      Object object2 = new Object();
      try { 
        base64_0.encode(object2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte)116;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)116);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-11);
      Base64 base64_0 = new Base64(803, byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2981));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-1);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-1), byteArray0);
      base64_0.encode(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
      byte byte1 = (byte)71;
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte) (-1), (byte)71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1490));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)121;
      Base64 base64_0 = new Base64((byte)121, byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, (int) (byte)121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[4];
      byte byte0 = (byte)99;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(89, (byte[]) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)15;
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte)121;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte)121;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger0.xor(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.andNot(bigInteger1);
      bigInteger0.signum();
      bigInteger2.shiftLeft((byte)15);
      Base64.isBase64("yfTmS}MQ6)");
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)15;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafe(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(5108);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-87);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-426), (byte[]) null, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.negate();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte) (-45);
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte)102;
      byteArray1[5] = (byte)102;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray0, 0, 0);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray1, true, true);
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray2);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-55);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)47;
      // Undeclared exception!
      try { 
        Base64.decodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeBase64("YCJvj9E/C\"wou9k+1");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-31);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      String string0 = "";
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        Base64.decodeBase64("b");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-84);
      byteArray0[0] = (byte) (-84);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte) (-16);
      byteArray0[2] = (byte) (-16);
      Base64 base64_0 = new Base64((-1004), byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-84);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-16);
      byteArray1[3] = (byte) (-16);
      byteArray1[4] = (byte)0;
      base64_0.readResults(byteArray1, 3750, (byte) (-16));
      base64_0.decode("rADw");
      byteArray1[5] = (byte) (-30);
      base64_0.encode(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.testBit((byte) (-84));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true, true, (-1185));
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\u0000\u0000I\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, (byte[]) null, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64.isBase64("");
      String string0 = "b\\";
      // Undeclared exception!
      try { 
        Base64.decodeBase64("b");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64.isBase64("^Kba-;|^r|{)`ho dGs");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)15;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "YCJvj9E/C\"wou9k+1";
      // Undeclared exception!
      try { 
        Base64.decodeBase64("YCJvj9E/C\"wou9k+1");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeBase64("org.apache.commons.codec.DecoderException");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)42;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(775, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDT\uFFFDd\uFFFD\u0005*]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValue();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.andNot(bigInteger1);
      bigInteger0.byteValueExact();
      Base64.toIntegerBytes(bigInteger0);
      bigInteger0.longValue();
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(true);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-39);
      // Undeclared exception!
      try { 
        Base64.encodeBase64Chunked(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.shiftLeft((-523));
      Base64 base64_0 = new Base64(85, byteArray0);
      base64_0.encode(byteArray0);
      int int0 = (-4348);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 85, 85);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 85
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-87);
      byteArray0[8] = (byte) (-38);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.encode(byteArray0, (int) (byte) (-1), (-1006));
      byte[] byteArray1 = base64_0.decode("l>8l>;k'*BcLujv+");
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(1, byteArray0, true);
      int int0 = (-247);
      Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray0, 1, (-247));
      base64_0.encode(byteArray0);
      int int1 = 5;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger("", 5);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)0;
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(112, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [w\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1689));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-57);
      byteArray0[7] = (byte) (-121);
      byteArray0[8] = (byte)98;
      // Undeclared exception!
      try { 
        Base64.encodeBase64String(byteArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(2896);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0013E]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
