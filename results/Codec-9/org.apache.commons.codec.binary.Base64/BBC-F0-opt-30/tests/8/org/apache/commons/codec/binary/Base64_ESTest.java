/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:51:15 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-30);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)105, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\tiE\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(3753, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      bigInteger0.intValue();
      base64_0.encodeToString(byteArray0);
      base64_0.decode(byteArray0, 3753, (-807));
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 76, 2781);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 628
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(3753, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      int int0 = Base64.MIME_CHUNK_SIZE;
      base64_0.decode(byteArray0, 2, 2);
      base64_0.encode(byteArray0, 2, (-409));
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 5;
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      String string0 = Base64.encodeBase64URLSafeString(byteArray4);
      base64_0.encode(byteArray0);
      Object object0 = base64_0.decode((Object) string0);
      // Undeclared exception!
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      String string0 = Base64.encodeBase64URLSafeString(byteArray4);
      Base64.decodeInteger(byteArray4);
      base64_0.encode(byteArray0);
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      base64_0.encode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(3753, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 2, 2);
      base64_0.encode(byteArray0, 2, (-409));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte) (-44);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte byte0 = (byte)125;
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte)125;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)125;
      Base64 base64_0 = new Base64(5, byteArray0, false);
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 2, 22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(6, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray2);
      base64_0.decode((Object) "UVVGQlFRQUFBQUFBQUFBQUFBQkJRVUZCQUFBQUFBQUFBQUFBQUVGQlFVRUFBQUFBQUFBQUFBQUFRVUU5UFFBQUFBQUFBQUFBQUFB");
      Object object0 = base64_0.decode((Object) "UVVGQlFRQUFBQUFBQUFBQUFBQkJRVUZCQUFBQUFBQUFBQUFBQUVGQlFVRUFBQUFBQUFBQUFBQUFRVUU5UFFBQUFBQUFBQUFBQUFB");
      assertNotSame(byteArray0, object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)107;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)65;
      byteArray2[3] = (byte)125;
      byteArray2[4] = (byte) (-40);
      byteArray2[5] = (byte) (-34);
      byteArray2[6] = (byte)9;
      byteArray2[7] = (byte) (-102);
      byteArray2[8] = (byte)1;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(8, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)107, (byte)1, (byte)65, (byte)125, (byte) (-40), (byte) (-34), (byte) (-102), (byte)1}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64((byte)69);
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)69);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-101);
      byteArray1[1] = (byte)104;
      Base64.encodeBase64(byteArray1, false, false, 6);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)0, (byte) (-8), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)93;
      Base64 base64_0 = new Base64(5, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, true, false);
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      BigInteger bigInteger0 = BigInteger.TEN;
      base64_0.encode(byteArray2, (int) (byte)93, (int) (byte)93);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)93;
      byteArray4[1] = (byte)93;
      byteArray4[2] = (byte)93;
      byteArray4[3] = (byte)93;
      Base64.encodeBase64(byteArray3, true, false, 2452);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-50);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte) (-50));
      base64_0.readResults(byteArray0, (byte)102, 123);
      base64_0.decode(byteArray1, 1, 123);
      Random.setNextRandom(1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64((byte)102);
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)102);
      base64_0.readResults(byteArray1, (byte)0, (byte)102);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)41;
      base64_0.decode(byteArray0, (int) (byte)4, (int) (byte)4);
      byteArray0[7] = (byte) (-1);
      base64_0.encode(byteArray0, 4139, (int) (byte) (-116));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)28;
      Base64.encodeBase64(byteArray0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[7] = (byte) (-11);
      Base64.isBase64((byte)125);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64((byte)102);
      int int0 = Base64.PEM_CHUNK_SIZE;
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)102);
      base64_0.avail();
      Random.setNextRandom(8184);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte) (-1);
      base64_0.encode(byteArray0, 4139, (int) (byte) (-116));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)93;
      byteArray1[2] = (byte)93;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.encode(byteArray3);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.toByteArray();
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)101;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(970, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [{d \uFFFD\uFFFD8e]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false, 0);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-41);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      
      base64_0.decode(byteArray0);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      base64_0.hasData();
      byte[] byteArray2 = Base64.decodeBase64("bD5A6Je#c]nSx");
      assertArrayEquals(new byte[] {(byte)108, (byte)62, (byte)64, (byte) (-24), (byte) (-105), (byte) (-100), (byte) (-99), (byte)44}, byteArray2);
      assertEquals(8, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64("Le#YrY.VD^");
      assertFalse(boolean0);
      
      Base64.encodeBase64((byte[]) null, true);
      base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      
      base64_0.decode((String) null);
      Random.setNextRandom(71);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)40;
      Base64 base64_0 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1, 1, (int) (byte)40);
      assertEquals(35, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
      
      base64_0.decode("");
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)5;
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-11);
      Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)61);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte)5;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(21, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [=\u0000=\u0005]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)110;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-18);
      Base64.isBase64((byte)1);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)119;
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64((byte)4);
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(8, (byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64 base64_2 = new Base64(0, (byte[]) null, true);
      base64_2.encode((byte[]) null);
      int int0 = 8180;
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 0, 8180);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte byte0 = (byte)64;
      Base64.isBase64((byte)64);
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)64;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)64);
      Base64 base64_0 = new Base64((byte)64, byteArray0);
      base64_0.readResults(byteArray1, 1001, (byte)64);
      Base64 base64_1 = new Base64(2, byteArray0, true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)64;
      byteArray2[1] = (byte)64;
      byte byte1 = (byte)16;
      byteArray2[2] = (byte)16;
      byteArray2[3] = (byte)64;
      byteArray2[4] = (byte)64;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 2, (int) (byte)16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      Base64.decodeBase64((byte[]) null);
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode("AA");
      Base64 base64_1 = new Base64((byte)0, byteArray0, false);
      base64_1.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-18);
      Base64.isBase64((byte)1);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)119;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)119;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte) (-18);
      byteArray1[7] = (byte) (-18);
      base64_0.readResults(byteArray1, (byte)1, (byte)1);
      Base64 base64_1 = new Base64(28, byteArray0, false);
      base64_1.encode(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)28;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byteArray1[3] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray3 = base64_1.decode(byteArray0);
      base64_1.hasData();
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.decodeInteger(byteArray2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64((byte)102);
      int int0 = Base64.PEM_CHUNK_SIZE;
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)102);
      Random.setNextRandom((-1747));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      byte[] byteArray2 = new byte[7];
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      Object object0 = base64_0.decode((Object) "QUFBQUFBQUFBQT09");
      base64_0.encode(object0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_1 = new Base64(true);
      Base64.isBase64((byte)0);
      base64_0.readResults(byteArray3, 8184, (byte)0);
      Base64 base64_2 = new Base64(5793, byteArray3, false);
      base64_1.encode(byteArray0);
      base64_1.decode(byteArray0, (int) (byte)0, 64);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 1, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(36);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.hasData();
      Base64.isBase64((byte)45);
      base64_0.readResults(byteArray1, 30, (byte) (-62));
      Base64 base64_1 = new Base64(2258, byteArray0, true);
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray1, 36, 123);
      base64_1.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)28;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byteArray0[2] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_1 = new Base64(false);
      base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.decode(byteArray1);
      base64_1.encodeToString(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray3);
      byte[] byteArray4 = new byte[0];
      Base64.decodeInteger(byteArray4);
      base64_1.decode((Object) "UVZKM1FVRkJRVUZCUVVGQg0K\r\n");
      Base64.discardWhitespace(byteArray0);
      base64_0.encodeToString(byteArray3);
      base64_1.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray2, true, false);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(8, (byte[]) null);
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)85;
      byteArray4[1] = (byte)85;
      byteArray4[2] = (byte)0;
      base64_0.encodeToString(byteArray4);
      base64_0.readResults(byteArray4, (byte)85, (byte)36);
      Base64.isBase64("]");
      base64_0.encode(byteArray3, (int) (byte)85, (int) (byte)85);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)85;
      byteArray0[0] = (byte)85;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)85;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.encodeToString((byte[]) null);
      base64_0.encode(byteArray1, (int) (byte)85, (-1));
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64(false);
      byte byte2 = (byte)0;
      Base64.isBase64((byte)0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-1), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte)106;
      base64_0.encode(byteArray0);
      Base64.isBase64("7DUw Aso1kJVsb");
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[2] = (byte)85;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.encodeToString((byte[]) null);
      base64_0.encode(byteArray1, (int) (byte)85, (-1));
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)48);
      base64_0.encodeToString(byteArray0);
      Base64.isBase64("MAA=\r\n");
      base64_0.encode(byteArray1, 49, 72);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray0, 2035, 3164);
      Base64.isBase64("MAA=\r\n");
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.decode("8KyHIH!Uj\"<tK");
      base64_0.hasData();
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      Base64 base64_1 = new Base64(24);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      base64_1.decode((Object) "54r{_2(");
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      Base64.discardWhitespace(byteArray0);
      base64_0.hasData();
      Base64.isBase64((byte) (-126));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false, 0);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-41);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      base64_0.hasData();
      Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64 base64_1 = new Base64(true);
      base64_1.decode((byte[]) null);
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_1.decode((Object) "");
      Base64.discardWhitespace(byteArray1);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray0);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      base64_0.decode(object1);
      Base64.discardWhitespace(byteArray0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64(true);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64("P,l/+x)125_aYM9 ");
      Base64.encodeBase64String(byteArray1);
      Base64.decodeInteger(byteArray2);
      base64_1.decode((Object) ":\"Q^ f9&fg['QT");
      Base64.encodeBase64(byteArray3);
      byte[] byteArray4 = base64_1.decode("");
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray5 = base64_1.decode(byteArray4);
      Base64.encodeBase64(byteArray5, false, false);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.toString();
      BigInteger bigInteger2 = bigInteger1.min(bigInteger0);
      bigInteger1.longValue();
      Base64.encodeInteger(bigInteger2);
      Base64 base64_1 = new Base64(64);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(720);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray1, 49, 72);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString(byteArray0);
      base64_0.readResults(byteArray0, 2035, 3164);
      Base64.isBase64("MAA=\r\n");
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      Base64.encodeBase64URLSafeString(byteArray3);
      byte[] byteArray4 = base64_0.decode("8KyHIH!Uj\"<tK");
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(32, byteArray4, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD u#\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-117);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      base64_0.hasData();
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray3);
      base64_0.decode((Object) "h4s");
      Base64.discardWhitespace(byteArray1);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeBase64(byteArray1);
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigInteger0.setBit((-1763));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)12;
      base64_0.encode(byteArray0, 1952257861, (int) (byte) (-116));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      base64_0.hasData();
      base64_0.readResults(byteArray0, 0, (byte)0);
      base64_0.decode(byteArray0, (-62), (-4594));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)28;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte)62;
      base64_0.hasData();
      base64_0.decode("C.]gL41T]J#");
      base64_0.readResults(byteArray1, 123, (-43));
      base64_0.decode(byteArray1, (int) (byte)0, 123);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)102;
      byteArray2[1] = (byte)102;
      byteArray2[2] = (byte)62;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray0, true);
      boolean boolean1 = true;
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-37);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0);
      base64_0.hasData();
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeInteger(byteArray2);
      base64_0.decode((Object) "^4y*:7ZEEno1tdB");
      Base64.discardWhitespace(byteArray1);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false, 0);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-41);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      base64_0.hasData();
      Base64.decodeBase64((String) null);
      Base64.isBase64("pCMb:cZ_QH");
      Base64.encodeBase64((byte[]) null, false);
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      Base64.encodeBase64((byte[]) null, false, false, 0);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, 0);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte) (-41);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-113);
      byte[] byteArray1 = Base64.decodeBase64("");
      base64_0.readResults(byteArray1, 1764, (byte)0);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)103;
      byte byte0 = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-12);
      base64_0.encodeToString(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-12);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-113);
      base64_0.decode(byteArray1);
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray1);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)93;
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64("!");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)31;
      byteArray2[1] = (byte)0;
      Base64.encodeBase64String(byteArray2);
      Base64.decodeBase64("");
      Base64.isArrayByteBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-85);
      byteArray3[1] = (byte)36;
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeBase64("");
      Base64.encodeBase64String(byteArray2);
      Base64.decodeInteger(byteArray2);
      base64_0.decode((Object) ":\"Q^ f9&fg['QT");
      Base64.encodeBase64(byteArray1);
      base64_0.decode(":\"Q^ f9&fg['QT");
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false);
      base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray4, true, false);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false, 0);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64((byte[]) null, false, false, 0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-41);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      base64_0.hasData();
      Base64.encodeBase64URLSafeString((byte[]) null);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.doubleValue();
      byte[] byteArray1 = new byte[8];
      byteArray1[5] = (byte)12;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-7);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)25;
      byteArray1[6] = (byte)100;
      byteArray1[7] = (byte)25;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger0.and(bigInteger1);
      Base64 base64_1 = new Base64((byte) (-7), byteArray0, false);
      base64_1.encodeToString(byteArray0);
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)28;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)102;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-11);
      byteArray0[8] = (byte)62;
      base64_0.hasData();
      base64_0.readResults(byteArray1, 123, (-43));
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false, 0);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-41);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      base64_0.hasData();
      Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64 base64_1 = new Base64(true);
      base64_1.decode((byte[]) null);
      boolean boolean0 = base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_1.decode((Object) "");
      Base64.discardWhitespace(byteArray1);
      boolean boolean1 = base64_1.hasData();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)45;
      Base64.encodeBase64(byteArray0, true, false, 64);
      byteArray1[1] = (byte) (-10);
      byteArray1[2] = (byte) (-105);
      byteArray1[3] = (byte)111;
      byteArray1[4] = (byte)0;
      Base64.encodeBase64String(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64(byteArray0);
      base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, 2492);
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byte byte0 = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      int int0 = 486;
      Base64 base64_0 = new Base64(486);
      Base64.decodeInteger(byteArray1);
      base64_0.decode(byteArray0, (int) (byte)93, 0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)12;
      base64_0.encode(byteArray0, (int) (byte) (-116), (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      boolean boolean0 = false;
      Base64 base64_0 = new Base64((-1323), byteArray0, false);
      byte[] byteArray1 = new byte[4];
      byte byte0 = (byte)1;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-32);
      byte byte0 = (byte) (-85);
      byteArray0[4] = (byte) (-85);
      byte byte1 = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_0 = new Base64(true);
      String string0 = ":\"Q^ f9&fg['QT";
      try { 
        base64_0.encode((Object) ":\"Q^ f9&fg['QT");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      byte[] byteArray2 = new byte[7];
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray2, 0, 6);
      base64_0.encodeToString(byteArray0);
      base64_0.encodeToString(byteArray1);
      Base64.isBase64("AAAAAAAAAA==");
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((byte)0, (java.util.Random) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-49);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)80);
      assertEquals(11, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString(byteArray0);
      byteArray0[0] = (byte)22;
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-36);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      int int0 = base64_0.readResults(byteArray3, 42, 1315);
      assertEquals(0, byteArray3.length);
      assertEquals((-1), int0);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(0, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray2);
      assertArrayEquals(new byte[] {(byte)82, (byte)109, (byte)100, (byte)69, (byte)89, (byte)119, (byte)48, (byte)75}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)57;
      byteArray0[1] = (byte)57;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64.isBase64((byte)98);
      Base64.isBase64((byte)98);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)98;
      boolean boolean0 = false;
      int int0 = (-717);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, (-717));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -717
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)44;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      Base64.encodeBase64(byteArray1, true, true, 0);
      Base64.isBase64((byte) (-85));
      Base64 base64_0 = new Base64((-1), byteArray1);
      byte[] byteArray2 = base64_0.decode("_dq25XK_=CKFA]UaxJg");
      assertArrayEquals(new byte[] {(byte) (-3), (byte) (-38), (byte) (-74), (byte) (-27), (byte)114, (byte) (-65)}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(6, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byteArray0[0] = (byte) (-89);
      base64_0.decode("uK#/WITw");
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-117);
      base64_0.encodeToString(byteArray1);
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger1.toString((int) (byte) (-89));
      // Undeclared exception!
      try { 
        bigInteger1.clearBit((byte) (-12));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 694, 694);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-1751));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1751
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      String string0 = "org.apache.commons.codec.DecoderException";
      Base64 base64_1 = new Base64(0);
      try { 
        base64_1.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-93);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0019I\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)121;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)57;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-41);
      base64_0.encode(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.doubleValue();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-7);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)33;
      byteArray1[6] = (byte)100;
      byteArray1[7] = (byte)25;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger0.and(bigInteger1);
      bigInteger0.abs();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.hasData();
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 1001);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-87);
      byteArray0[0] = (byte) (-87);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)41;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte) (-87), (int) (byte)41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -87
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      boolean boolean0 = base64_0.hasData();
      byte[] byteArray0 = new byte[4];
      Base64.encodeBase64String(byteArray0);
      byteArray0[0] = (byte) (-47);
      Base64.encodeBase64Chunked(byteArray0);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)126;
      base64_0.encodeToString(byteArray0);
      base64_0.encodeToString(byteArray0);
      boolean boolean1 = Base64.isBase64("");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false);
      Base64 base64_0 = new Base64(64);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.readResults((byte[]) null, 64, 64);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)87;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray2);
      
      base64_0.decode((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-113);
      byte[] byteArray1 = Base64.decodeBase64("");
      base64_0.readResults(byteArray1, 1764, (byte)0);
      assertEquals(0, byteArray1.length);
      
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-12);
      base64_0.encodeToString(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AI9WAGcA9A==", string0);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-12);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-113);
      byteArray2[4] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      assertEquals(10, byteArray3.length);
      
      byteArray2[5] = (byte)103;
      Base64.isArrayByteBase64(byteArray2);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      Object object0 = null;
      base64_0.decode((Object) "");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)3;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)25;
      byteArray1[4] = (byte)58;
      byteArray1[5] = (byte) (-83);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)8;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((byte)8, byteArray0);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-7);
      byteArray3[1] = (byte) (-7);
      Base64.encodeBase64String(byteArray3);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (-1791), (int) (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1791
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)126;
      byteArray0[1] = (byte)126;
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)126, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AH4=\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)68;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64(byteArray0, true, false, 2195);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)51, (byte)119, (byte)69, (byte)65, (byte)56, (byte)107, (byte)49, (byte)69, (byte)13, (byte)10}, byteArray1);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("3wEA8k1E", string0);
      
      base64_0.readResults(byteArray0, (-4388), (byte)1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean1 = Base64.isBase64("org.apache.commons.codec.EncoderException");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)121;
      byteArray0[0] = (byte)121;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-45);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
