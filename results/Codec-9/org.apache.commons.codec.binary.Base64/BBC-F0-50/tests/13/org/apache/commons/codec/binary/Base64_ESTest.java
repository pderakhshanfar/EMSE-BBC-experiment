/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:06:02 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7073, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      Base64 base64_1 = new Base64(4);
      base64_0.encode(byteArray0, 76, 3);
      bigInteger0.doubleValue();
      byte[] byteArray1 = base64_1.encode(byteArray0);
      base64_0.decode(byteArray1, 3, 76);
      Base64.toIntegerBytes(bigInteger0);
      base64_1.encode(byteArray1, (-810), 0);
      base64_0.encode(byteArray1, 3, (-810));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-200L));
      BigInteger bigInteger0 = new BigInteger(7083, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      Base64 base64_1 = new Base64(4);
      base64_1.encode(byteArray0, 76, 4);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_1.encode(byteArray1, 81, (-1339));
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-200L));
      BigInteger bigInteger0 = new BigInteger(7087, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      Base64 base64_1 = new Base64(7087);
      base64_1.encode(byteArray0, 1059, 81);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      base64_1.encode(byteArray1, 0, (-1679));
      byte[] byteArray2 = new byte[0];
      // Undeclared exception!
      try { 
        base64_1.readResults(byteArray2, 0, 869);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-200L));
      BigInteger bigInteger0 = new BigInteger(7083, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      Base64 base64_1 = new Base64(4);
      base64_1.encode(byteArray0, 1059, 81);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      base64_1.encode(byteArray1, 76, 2043);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      base64_1.encode(byteArray2, 1059, (-987));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("eYNV?koa!Ji{{/WCb");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2066), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [y\uFFFDU\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null, 5, (-1791));
      Base64.encodeBase64((byte[]) null);
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-684), 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-200L));
      BigInteger bigInteger0 = new BigInteger(7083, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      Base64 base64_1 = new Base64(16);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      base64_1.encode(byteArray1, 76, 2043);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-200L));
      BigInteger bigInteger0 = new BigInteger(7105, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(16);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      mockRandom0.longs((long) 4);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      Base64.decodeInteger(byteArray2);
      base64_1.decode(byteArray3);
      // Undeclared exception!
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-200L));
      BigInteger bigInteger0 = new BigInteger(7105, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(16);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)4;
      byteArray3[1] = (byte) (-5);
      Base64.encodeBase64(byteArray3);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      Base64.decodeInteger(byteArray2);
      base64_1.decode(byteArray4);
      // Undeclared exception!
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(7083, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(16);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_1.encode(byteArray1, 76, 2043);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, true, false, 2043);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-200L));
      BigInteger bigInteger0 = new BigInteger(7083, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(16);
      base64_0.encode(byteArray0, (-1), (-1));
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)19;
      byteArray0[0] = (byte)9;
      byteArray0[6] = (byte) (-35);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray0);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      base64_0.encode(object1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-200L));
      BigInteger bigInteger0 = new BigInteger(7080, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(4);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(16);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      Base64.decodeInteger(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
      base64_1.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(108);
      base64_0.avail();
      Random.setNextRandom(10);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-200L));
      BigInteger bigInteger0 = new BigInteger(7080, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(931);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(1309);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_2 = new Base64(false);
      base64_2.encode(byteArray1, 76, 51);
      base64_2.readResults(byteArray0, 41, 43);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3720);
      BigInteger bigInteger0 = new BigInteger(3720, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(3720);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(3720);
      Base64 base64_2 = new Base64();
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)19;
      byteArray2[2] = (byte) (-108);
      byteArray2[3] = (byte)37;
      byteArray2[4] = (byte)70;
      Base64.encodeBase64(byteArray2, true, false, 10);
      byte[] byteArray3 = base64_1.encode(byteArray1);
      base64_2.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3720);
      BigInteger bigInteger0 = new BigInteger(3720, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(3720);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(3720);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_2 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_2.encode(byteArray1, 1, 1994);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 826
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.setSeed(1073741824);
      BigInteger bigInteger0 = new BigInteger(1073741824, mockRandom1);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.andNot(bigInteger1);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.isBase64((byte)124);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3720);
      BigInteger bigInteger0 = new BigInteger(3720, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(3720);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64 base64_1 = new Base64(3720);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_2 = new Base64(false);
      byte[] byteArray2 = base64_2.encode(byteArray1);
      Base64.isArrayByteBase64(byteArray2);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      bigInteger0.compareTo(bigInteger1);
      assertEquals((short)20797, bigInteger1.shortValue());
      
      base64_1.decode(byteArray2, 61, 3720);
      assertEquals(1134, byteArray2.length);
      assertEquals(826, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(437, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(3702);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(64);
      base64_1.decode(byteArray1, 64, 64);
      assertEquals(94, byteArray1.length);
      assertEquals(68, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3720);
      BigInteger bigInteger0 = new BigInteger(3720, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(3720);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(826, byteArray1.length);
      
      Base64 base64_1 = new Base64(613);
      base64_1.decode(byteArray0, 613, 1307);
      assertEquals(616, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(437);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(437, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(76, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64("dd&Y4rv^9#^eG>Lk37E");
      assertEquals(10, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-42), (byte)56, (byte) (-82), (byte) (-1), (byte)94, (byte)24, (byte) (-71), (byte)55, (byte) (-20)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)111;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-11);
      byteArray2[1] = (byte)9;
      byteArray2[0] = (byte) (-100);
      byteArray2[3] = (byte)98;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      assertEquals(3, byteArray3.length);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)0, (byte)98}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 550);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)6;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 377, 377);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64(5);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      Base64 base64_1 = new Base64(5, byteArray0, true);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-81);
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)104);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte) (-81);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 1, 3720);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Base64 base64_0 = new Base64(437);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)41;
      Base64.decodeBase64(byteArray0);
      base64_0.encode((byte[]) null, 437, (-1791));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-37);
      byteArray1[1] = (byte) (-1);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (byte) (-37), (-2147483646));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-38);
      Base64 base64_0 = new Base64((byte)5, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(14);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-111);
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)5;
      Base64.encodeBase64Chunked(byteArray0);
      byteArray3[4] = (byte)41;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte) (-38);
      BigInteger bigInteger0 = new BigInteger(byteArray3);
      Base64.encodeInteger(bigInteger0);
      base64_1.hasData();
      base64_1.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)10;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(2494);
      bigInteger0.bitCount();
      Base64.decodeBase64(byteArray0);
      base64_0.decode((Object) "W'q'is7'LiT!$lxEsxc");
      Base64.encodeBase64(byteArray0, true, true, 8140);
      base64_0.decode(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.compareTo(bigInteger1);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null, 5, (-1791));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3720);
      BigInteger bigInteger0 = new BigInteger(3720, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((-3399));
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64.isBase64("o");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-4962), byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte) (-66);
      byteArray1[2] = (byte) (-66);
      byteArray1[3] = (byte) (-66);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64.isBase64((byte)61);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(3720, byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte) (-1));
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)3);
      Base64.isBase64((byte)95);
      Base64.encodeBase64(byteArray2);
      Base64.isBase64(byteArray3);
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64(24);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)32;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger1.testBit(1547);
      BigInteger bigInteger2 = bigInteger0.mod(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      byteArray1[1] = (byte) (-50);
      base64_0.decode(byteArray1, (int) (byte)32, (-3074));
      byteArray1[2] = (byte)23;
      bigInteger0.shiftLeft(17);
      base64_0.encode(byteArray1, 15, 910);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte)23);
      base64_0.decode(byteArray2, (-3074), 24);
      // Undeclared exception!
      try { 
        bigInteger2.clearBit((-3074));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64((byte)71);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)71);
      Base64.isBase64((byte)71);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.isBase64(byteArray3);
      Base64.encodeBase64String(byteArray3);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(3720, byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(3720, byteArray0, false);
      base64_1.decode(byteArray1, 3720, 0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_2 = new Base64(false);
      base64_2.decode(byteArray1);
      base64_1.hasData();
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64(37, (byte[]) null, true);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.encode((byte[]) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64.isBase64("Ls~utHm4a?n5ux1");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)71;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray2);
      base64_0.decode((Object) "R0dHRw==\u0000\u0000");
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      Base64.isBase64((byte)71);
      Base64.isBase64((byte)71);
      Base64.encodeBase64(byteArray1);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64String(byteArray3);
      base64_0.hasData();
      Base64.isBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-12);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)91;
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-82);
      Base64.decodeBase64("");
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte) (-35);
      byteArray4[1] = (byte) (-35);
      Base64.encodeBase64(byteArray4, true, true);
      Base64.decodeBase64(byteArray4);
      Base64.discardWhitespace(byteArray4);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-82);
      Base64.decodeBase64("");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-35);
      byteArray2[1] = (byte) (-35);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      Base64.decodeBase64(byteArray2);
      Base64.discardWhitespace(byteArray2);
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(3720, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false, 3720);
      base64_0.decode("");
      base64_0.avail();
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_1 = new Base64(38);
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)109;
      byteArray4[1] = (byte)106;
      byteArray4[2] = (byte)57;
      byteArray4[3] = (byte)100;
      byteArray4[4] = (byte)40;
      base64_1.encode(byteArray4);
      byte[] byteArray5 = base64_1.decode(byteArray3);
      base64_1.hasData();
      Base64.isBase64(byteArray5);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(3720, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)25;
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, true, false, 3720);
      byte[] byteArray3 = base64_0.decode("");
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 3720, 3720);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3720
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)7;
      Base64.isArrayByteBase64(byteArray0);
      int int0 = 61;
      Base64 base64_0 = new Base64(61);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.hasData();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.clearBit(64);
      bigInteger0.shortValueExact();
      Base64.encodeBase64Chunked(byteArray1);
      bigInteger0.shortValueExact();
      bigInteger0.signum();
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.gcd(bigInteger0);
      bigInteger0.flipBit(0);
      bigInteger0.floatValue();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, (-2633), 0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64(76, (byte[]) null);
      base64_0.encode((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null, true, false, 76);
      byte[] byteArray0 = base64_0.decode("");
      Base64.encodeBase64((byte[]) null, true);
      base64_0.decode((byte[]) null);
      base64_0.encode((byte[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte)41;
      base64_0.encode(byteArray1);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64(2807, (byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.pow(76);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      base64_0.decode((byte[]) null, 32, (-1742));
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      base64_0.hasData();
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.encode(byteArray0, 32, (-1742));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "o";
      Base64.isBase64("o");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      Base64 base64_1 = new Base64(28, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 2, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = ">*.d[u*UG";
      Base64.isBase64(">*.d[u*UG");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)71;
      byteArray2[1] = (byte)71;
      byteArray2[2] = (byte)71;
      byteArray2[3] = (byte)71;
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.encode(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)105);
      assertEquals(12, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray2, (byte)1, (-423));
      base64_0.readResults(byteArray0, (-423), (byte) (-8));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, 37);
      Base64 base64_0 = new Base64(37, (byte[]) null);
      base64_0.decode((String) null);
      byte byte0 = (byte)77;
      byte byte1 = (byte)118;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-656), 2021161080);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      Base64.isBase64("a?^I$?SIG29#9:'o");
      base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Object object0 = new Object();
      Base64 base64_1 = new Base64(true);
      try { 
        base64_1.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64 base64_0 = new Base64(37, (byte[]) null, true);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, 75);
      Base64 base64_1 = new Base64(86);
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray0, true, true);
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(2253, byteArray0);
      base64_0.encode(byteArray0);
      Base64.isBase64("J'=8UuqX");
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64 base64_0 = new Base64(2807, (byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.pow(76);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      base64_0.decode((byte[]) null, (-4176), (-1375));
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      base64_0.hasData();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode((byte[]) null, 64, 0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      Base64 base64_0 = new Base64((byte)1, byteArray0);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 107, 113);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 3720;
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(3720, byteArray0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 3720);
      base64_0.decode("AAAAAAAAAA==");
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)77;
      byteArray2[1] = (byte)118;
      byteArray2[2] = (byte)1;
      byte byte0 = (byte)91;
      byteArray2[3] = (byte)91;
      base64_0.encode(byteArray2, 76, (-1037));
      Base64.isBase64("9{Q");
      base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      int int1 = 1;
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(3720, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, true, false, 3720);
      base64_0.decode("");
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)77;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.flipBit((byte)77);
      bigInteger0.floatValue();
      Base64.encodeInteger(bigInteger1);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64(false);
      try { 
        base64_1.decode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.gcd(bigInteger1);
      bigInteger0.flipBit(0);
      byte byte0 = (byte)118;
      int int0 = Integer.MAX_VALUE;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-643), Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -643
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64.isBase64(">*.d[u*UG");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray1);
      Base64.isBase64("&S]D$MDC9,E1");
      Object object0 = base64_0.decode((Object) ">*.d[u*UG");
      Object object1 = new Object();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.and(bigInteger1);
      Base64 base64_1 = new Base64((-1751), (byte[]) null);
      Base64 base64_2 = new Base64(64);
      Object object2 = base64_2.decode(object0);
      Object object3 = base64_1.decode(object2);
      base64_0.encode(object3);
      base64_2.decode((byte[]) null);
      base64_0.encode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)71;
      base64_0.encode(byteArray3);
      base64_0.encode((byte[]) null);
      base64_2.hasData();
      base64_0.decode(byteArray3);
      base64_1.avail();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64(37, (byte[]) null, true);
      byte[] byteArray0 = new byte[1];
      base64_0.decode(byteArray0, 0, 0);
      Base64.encodeBase64((byte[]) null, false, false, 57);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 57, 82);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 37;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(37, (byte[]) null, true);
      byte[] byteArray1 = new byte[1];
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 37, 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64.isBase64(">*.d[u*UG");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.isBase64("&S]D$MDC9,E1");
      base64_0.decode((Object) ">*.d[u*UG");
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isBase64((byte)71);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      Base64.isBase64(byteArray4);
      Base64.encodeBase64String(byteArray4);
      base64_0.hasData();
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64.isBase64(">*.d[u*UG");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)71}, byteArray2);
      
      Base64 base64_0 = new Base64();
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("Unc9PQ0K", string0);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(10, byteArray3.length);
      
      byte[] byteArray4 = base64_0.encode(byteArray1);
      Base64.isBase64("&S]D$MDC9,E1");
      base64_0.decode((Object) ">*.d[u*UG");
      byte[] byteArray5 = Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isBase64(byteArray2);
      byte[] byteArray6 = Base64.encodeBase64(byteArray5);
      Base64.isBase64(byteArray6);
      Base64.encodeBase64String(byteArray6);
      Base64.isBase64((byte)71);
      Base64.isBase64(byteArray4);
      assertArrayEquals(new byte[] {(byte)82, (byte)119, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-103);
      byte byte0 = (byte)91;
      base64_0.encode(byteArray0, (int) (byte) (-103), (-1));
      Base64.isBase64("a?^I$?SIG29#9:'o");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.encode((Object) "a?^I$?SIG29#9:'o");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(3720, byteArray0);
      base64_0.encode(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("", string0);
      
      Base64.encodeBase64(byteArray0, true, false, 3720);
      base64_0.decode("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      assertEquals(0, byteArray3.length);
      assertSame(byteArray1, byteArray2);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)118;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)91;
      Base64.isBase64("9{Q");
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-103);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)67;
      byteArray0[5] = (byte)40;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      assertEquals(10, byteArray1.length);
      
      byte[] byteArray2 = new byte[1];
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertTrue(base64_0.isUrlSafe());
      
      byteArray2[0] = (byte)63;
      Base64.decodeBase64("");
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false, false, 76);
      assertNotSame(byteArray2, byteArray3);
      assertEquals(4, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)80, (byte)119, (byte)61, (byte)61}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64(437, (byte[]) null);
      base64_0.decode((byte[]) null, 437, 0);
      base64_0.encode((byte[]) null, 0, (-1791));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64.decodeBase64((String) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)49;
      base64_0.decode(byteArray0, (-1), (int) (byte) (-70));
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      
      Base64.isBase64((byte) (-33));
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1);
      Base64.isBase64(byteArray0);
      String string1 = Base64.encodeBase64String(byteArray0);
      assertEquals("TrrfAjE=", string1);
      
      base64_0.hasData();
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-70);
      byteArray2[1] = (byte) (-70);
      byteArray2[2] = (byte)49;
      byteArray2[3] = (byte)49;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)49;
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-109);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.valueOf((-2458L));
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime((byte)57, mockRandom0);
      bigInteger0.gcd(bigInteger1);
      bigInteger0.bitLength();
      base64_0.encode(byteArray2);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray1);
      base64_0.readResults(byteArray0, (byte)90, (byte)0);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encodeToString(byteArray0);
      base64_0.avail();
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)90;
      Base64.encodeBase64Chunked(byteArray3);
      base64_0.decode(byteArray2);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)49;
      base64_0.decode(byteArray0, (-1), (int) (byte) (-70));
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64((byte[]) null, false, false);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-1);
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("/w==", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)88;
      byteArray0[0] = (byte)88;
      byte byte1 = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byte byte2 = (byte)39;
      byteArray0[2] = (byte)39;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.toString();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.clearBit((byte) (-15));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)63;
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = new byte[0];
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.not();
      BigInteger bigInteger2 = bigInteger0.flipBit(1144);
      bigInteger0.andNot(bigInteger2);
      BigInteger bigInteger3 = BigInteger.ONE;
      bigInteger3.bitCount();
      bigInteger0.andNot(bigInteger3);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.decode("Q-*T-W6Zm}-SQ3{`hU");
      base64_0.decode(":n3c");
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray1 = base64_0.decode((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64(122);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-17);
      byte[] byteArray1 = base64_0.decode("!p");
      assertEquals(0, byteArray1.length);
      
      byteArray0[2] = (byte)68;
      int int0 = base64_0.readResults(byteArray0, 122, (byte) (-3));
      assertEquals((-1), int0);
      
      Base64.isBase64("");
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-3);
      byteArray2[1] = (byte) (-3);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.isUrlSafe();
      int int1 = base64_0.readResults(byteArray3, (-1173), 25);
      assertEquals(6, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)102, (byte)48, (byte)61, (byte)13, (byte)10}, byteArray3);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 3720;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(3720, byteArray0);
      base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray0);
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, true, false, 3720);
      base64_0.decode("");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)118;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)91;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, Integer.MAX_VALUE, (-1037));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "";
      Base64.isBase64("");
      byte byte0 = (byte) (-1);
      Base64.isBase64((byte) (-1));
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-53);
      byte byte0 = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false, true);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Base64 base64_0 = new Base64(1079);
      base64_0.avail();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)81;
      base64_0.encodeToString(byteArray0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)9;
      Base64 base64_0 = new Base64((-3686), byteArray0, true);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-1));
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      base64_0.decode(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false);
      base64_0.decode(byteArray2, (int) (byte) (-1), (int) (byte) (-1));
      assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray2);
      assertEquals(6, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      Base64 base64_1 = new Base64();
      Object object0 = base64_1.decode((Object) "#@;%3myOO?");
      base64_0.encode(object0);
      assertFalse(base64_1.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("c(6Xp?\"^-@[6.Ql");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-59);
      Base64.decodeBase64("oq!E;Jx+jg6{m*]8$X");
      byteArray0[4] = (byte) (-35);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)65, (byte)103, (byte)65, (byte)65, (byte)120, (byte)100, (byte)48, (byte)13, (byte)10}, byteArray1);
      assertEquals(5, byteArray2.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(498);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = new byte[8];
      byte byte2 = (byte)39;
      byteArray2[0] = (byte)39;
      byte byte3 = (byte)0;
      Base64.encodeBase64String(byteArray2);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      try { 
        bigInteger0.modInverse(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [ARVvqQAAAQ==\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64 base64_0 = new Base64((-1), byteArray0);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.readResults(byteArray1, (-1), (byte)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray0);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-41);
      byteArray0[7] = (byte) (-111);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.longValue();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(11, byteArray1.length);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertArrayEquals(new byte[] {(byte) (-83)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64.isBase64(">*.d[u*UG");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray1);
      boolean boolean0 = Base64.isBase64("&S]D$MDC9,E1");
      base64_0.decode((Object) ">*.d[u*UG");
      byte[] byteArray4 = Base64.encodeBase64(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isBase64(byteArray2);
      assertEquals(1, byteArray2.length);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray4);
      boolean boolean1 = Base64.isBase64(byteArray5);
      assertTrue(boolean1);
      
      String string0 = Base64.encodeBase64String(byteArray5);
      assertEquals("VW5jOVBRPT0=", string0);
      
      boolean boolean2 = base64_0.hasData();
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = Base64.isBase64(byteArray3);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-35);
      byte byte1 = (byte)68;
      byteArray0[2] = (byte)68;
      byte byte2 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)4;
      byte byte3 = (byte) (-50);
      byteArray0[5] = (byte) (-50);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1768, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\uFFFDD\u0000\u0004\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)107;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("rBkRADkA2Qlr", string0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)24;
      byteArray1[1] = (byte) (-102);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)16;
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte)0);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)82;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [r\uFFFD4\u0000R]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 37;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(37, (byte[]) null, true);
      boolean boolean0 = false;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-58);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 2243);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "y\"1P9~~V7_i%T3v)7L";
      byte[] byteArray0 = Base64.decodeBase64("y\"1P9~~V7_i%T3v)7L");
      boolean boolean0 = true;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)82;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("rlI=", string0);
      
      base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "9:ZKfQ+]";
      Base64.isBase64("9:ZKfQ+]");
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(2807, (byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      int int0 = (-659);
      // Undeclared exception!
      try { 
        bigInteger0.pow((-659));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative exponent
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)78, (byte)73, (byte)49, (byte)65, (byte)65, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertEquals(10, byteArray1.length);
      
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.gcd(bigInteger1);
      bigInteger0.flipBit(0);
      bigInteger0.flipBit(0);
      bigInteger0.floatValue();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      Object object0 = base64_0.decode((Object) "]");
      assertNotNull(object0);
  }
}
