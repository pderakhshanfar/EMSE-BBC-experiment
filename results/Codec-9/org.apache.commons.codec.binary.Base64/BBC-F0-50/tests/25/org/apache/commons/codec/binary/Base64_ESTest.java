/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:17:53 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8189);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)91;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2887), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\t\uFFFD\u0001J\uFFFD\uFFFD$[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8177);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(6);
      bigInteger0.toString();
      base64_0.decode((String) null);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8209);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(8189);
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger1.subtract(bigInteger2);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, 8209, 757);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = Base64.encodeBase64String(byteArray3);
      base64_0.decode((Object) string0);
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, true, true, 8209);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8191);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8167);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      bigInteger1.shiftLeft(8171);
      Base64 base64_0 = new Base64(8185);
      Base64 base64_1 = new Base64(8185);
      base64_1.decode("");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, 64, 76);
      BigInteger bigInteger2 = bigInteger1.xor(bigInteger0);
      String string0 = bigInteger1.toString(58);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      bigInteger0.mod(bigInteger2);
      Base64.isBase64(string0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string1 = Base64.encodeBase64String(byteArray3);
      Base64.decodeBase64(string1);
      Base64.toIntegerBytes(bigInteger2);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8160);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 3520, (-3068));
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(124, byteArray0, false);
      base64_1.encode(byteArray1);
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("&^P{");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8171);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger1.mod(bigInteger2);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray0, 64, 124);
      BigInteger bigInteger3 = BigInteger.ZERO;
      bigInteger1.toString(62);
      base64_0.encode(byteArray0, 4, (-2611));
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray2);
      BigInteger bigInteger4 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger4);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8160);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(8171);
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, 64, 74);
      BigInteger bigInteger2 = BigInteger.ZERO;
      String string0 = bigInteger1.toString(62);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = new byte[2];
      byteArray3[1] = (byte) (-46);
      Base64.isBase64(string0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      String string1 = Base64.encodeBase64String(byteArray4);
      Base64.decodeBase64(string1);
      Object object0 = base64_0.decode((Object) string0);
      // Undeclared exception!
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8160);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(8171);
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, 64, 74);
      BigInteger bigInteger2 = BigInteger.ZERO;
      String string0 = bigInteger1.toString(62);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = new byte[2];
      byteArray3[1] = (byte) (-21);
      Base64.isBase64(string0);
      Base64.encodeBase64(byteArray1, false);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      BigInteger bigInteger3 = BigInteger.TEN;
      // Undeclared exception!
      Base64.encodeBase64String(byteArray4);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.shiftLeft(8160);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64(8171);
      Base64 base64_1 = new Base64(76);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray1);
      base64_0.decode(byteArray0, 64, 74);
      String string0 = bigInteger2.toString(62);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode((Object) string0);
      Base64.encodeBase64(byteArray2, true);
      byte[] byteArray3 = new byte[2];
      // Undeclared exception!
      base64_1.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 966);
      bigInteger2.shiftRight((byte) (-93));
      BigInteger bigInteger3 = bigInteger2.shiftLeft(966);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 0, 105);
      Base64.toIntegerBytes(bigInteger2);
      base64_0.avail();
      Base64 base64_1 = new Base64(64);
      try { 
        base64_1.decode((Object) bigInteger3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-60);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.shiftLeft(1341);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64((byte) (-56));
      Base64.isBase64("UTF-16");
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray1, (-877), 1353);
      base64_1.encode(byteArray0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-60);
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.shiftLeft(8171);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(8171);
      Base64 base64_1 = new Base64(8171);
      Base64.decodeBase64(byteArray0);
      bigInteger0.longValue();
      Base64.isBase64("UTF-16");
      base64_0.decode(byteArray0, 76, 1353);
      base64_1.encode(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(1364, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-1);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(7, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      int int0 = (-3640);
      Base64.encodeBase64(byteArray1, false, true, (-3640));
      Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64(byteArray2);
      base64_0.encode(byteArray2);
      String string0 = "JV,w0/gXb#k/<P<B0ok";
      Object object0 = base64_0.decode((Object) "JV,w0/gXb#k/<P<B0ok");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)83;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      int int0 = 17;
      Base64 base64_0 = new Base64(17, byteArray0, true);
      Base64.encodeBase64(byteArray0, true, true);
      int int1 = 51;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 51);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64 base64_0 = new Base64(21);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = new byte[0];
      base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(21);
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_2 = new Base64(false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray3, true, true, 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (112) than the specified maxium size of 20
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64(21);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(21);
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_2 = new Base64(false);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_3 = new Base64();
      base64_3.decode("");
      // Undeclared exception!
      try { 
        base64_2.decode(byteArray2, 21, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Base64 base64_0 = new Base64(2953);
      byte[] byteArray0 = Base64.decodeBase64("{)<tQxMF{87C[OQ&n");
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("tQxMF87COQk", string0);
      
      byte[] byteArray1 = base64_0.decode("{)<tQxMF{87C[OQ&n");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-75), (byte)12, (byte)76, (byte)23, (byte) (-50), (byte) (-62), (byte)57}, byteArray2);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)47, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, false);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      Base64 base64_0 = new Base64(1, byteArray0, false);
      base64_0.decode("xineSeperator must not contain base64 characters:V[");
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((-3482));
      Base64.decodeBase64((String) null);
      bigInteger0.shiftLeft((-3482));
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.encodeToString(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte)31;
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)49;
      byteArray1[4] = (byte)23;
      byteArray1[5] = (byte) (-1);
      byteArray1[6] = (byte)122;
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)95;
      byteArray0[3] = (byte)0;
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode((String) null);
      byte[] byteArray1 = Base64.decodeBase64((String) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toByteArray();
      bigInteger0.longValue();
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)37;
      byte byte0 = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_1 = new Base64(35);
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, (-1345), 116);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.discardWhitespace(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAA=", string0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte)100;
      byteArray1[4] = (byte)100;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64((-2590));
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertArrayEquals(new byte[] {(byte)100, (byte)100, (byte)100, (byte)100}, byteArray3);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((byte)93, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.decode((Object) "`Ml`xPI");
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      Base64 base64_0 = new Base64(1, byteArray0, true);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      assertEquals(32, byteArray1.length);
      
      bigInteger0.nextProbablePrime();
      boolean boolean0 = Base64.isBase64("lineSeperator must not contain base64 characters: [");
      assertFalse(boolean0);
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray2);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64(2869, byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-524), 566);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -524
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((byte)100);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.discardWhitespace(byteArray2);
      Base64 base64_1 = new Base64();
      base64_1.readResults(byteArray2, (byte)100, 1557);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray2, 64, 378);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      Base64 base64_0 = new Base64(1, byteArray0, true);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      boolean boolean0 = Base64.isBase64("lineSeperator must not contain base64 characters: [");
      assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      bigInteger0.doubleValue();
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("Q3c9PQ", string0);
      
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray1);
      assertEquals((short)26604, bigInteger2.shortValue());
      assertEquals(32, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)95;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.isBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-702), 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      Base64 base64_1 = new Base64(1, (byte[]) null, true);
      base64_1.decode((byte[]) null);
      base64_1.decode("");
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      Base64.isBase64("");
      Base64.encodeInteger(bigInteger1);
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      Base64.encodeBase64(byteArray0);
      try { 
        base64_1.decode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.isBase64(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 3267);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)100;
      byteArray0[0] = (byte)100;
      Base64 base64_0 = new Base64();
      int int0 = (-1);
      base64_0.encode(byteArray0, (-1325), (-1));
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)100;
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, 8180, (-2079));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String(byteArray1);
      boolean boolean1 = base64_0.isUrlSafe();
      //  // Unstable assertion: assertTrue(boolean1);
      
      Base64.isBase64((byte)123);
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("AAAAAA\uFFFD\uFFFD", string0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-106), (byte) (-1)}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)61);
      Base64.encodeBase64(byteArray1, true, true);
      String string0 = "";
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [F=\u0000\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((-1225));
      base64_0.decode(byteArray1, (int) (byte)0, 1879);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      Base64 base64_0 = new Base64((byte)100);
      base64_0.encode(byteArray0, (-1325), (-1));
      Random.setNextRandom((-1));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      Base64 base64_0 = new Base64(1, byteArray0, false);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(586, byteArray1, true);
      byte[] byteArray2 = base64_1.decode("lineSeperator must not contain base64 characters: [");
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      BigInteger bigInteger2 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger2);
      bigInteger2.doubleValue();
      bigInteger1.byteValueExact();
      // Undeclared exception!
      try { 
        base64_1.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      Base64.encodeBase64((byte[]) null, true, true, (-1));
      Base64 base64_0 = new Base64(2002, (byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.encode((byte[]) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-58);
      byteArray1[2] = (byte)101;
      byteArray1[3] = (byte) (-6);
      byteArray1[4] = (byte)105;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)126;
      byteArray1[7] = (byte) (-19);
      byteArray1[8] = (byte)90;
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64.decodeBase64("Oo`%LW{:WW1nHt\"");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(1, byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      bigInteger0.doubleValue();
      bigInteger0.byteValueExact();
      base64_0.encodeToString(byteArray3);
      Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64Chunked(byteArray1);
      try { 
        base64_0.encode((Object) "lineSeperator must not contain base64 characters: [");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray1, 1, (byte)10);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)10, (int) (byte)10);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(4, byteArray0, false);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode("");
      assertFalse(base64_0.isUrlSafe());
      
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      Base64.isBase64("");
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray3);
      
      bigInteger1.doubleValue();
      bigInteger1.byteValueExact();
      base64_0.encodeToString(byteArray0);
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray1);
      Base64 base64_1 = new Base64((-2147483646), byteArray2);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_1.decode(object0);
      Object object2 = base64_0.decode(object1);
      Object object3 = base64_0.decode(object2);
      base64_0.decode(object3);
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      base64_1.hasData();
      assertNotSame(byteArray0, byteArray4);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte) (-42);
      byteArray0[8] = (byte) (-42);
      Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)1, 111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("JwABAP8=", string0);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)1, (byte) (-1)}, byteArray5);
      
      byte[] byteArray6 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray7 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray7.length);
      
      boolean boolean0 = Base64.isBase64(byteArray6);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.getLowestSetBit();
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray0);
      bigInteger0.pow(64);
      BigInteger bigInteger3 = bigInteger1.min(bigInteger0);
      bigInteger3.longValue();
      bigInteger3.longValue();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.decode("ISO-8859-1");
      boolean boolean0 = Base64.isBase64("yVJqV{FcLtEMz>U~");
      assertFalse(boolean0);
      
      BigInteger bigInteger4 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger4);
      bigInteger1.doubleValue();
      BigInteger bigInteger5 = BigInteger.ONE;
      bigInteger5.byteValueExact();
      bigInteger2.byteValueExact();
      Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals(12, byteArray3.length);
      
      byte[] byteArray4 = base64_0.decode(byteArray1);
      Base64 base64_1 = new Base64((-2042), byteArray2, false);
      base64_1.decode((Object) "zll'Fu|>&m=}_;`");
      assertArrayEquals(new byte[] {(byte)33, (byte)35, (byte) (-66), (byte) (-13), (byte) (-50), (byte)125, (byte) (-5)}, byteArray2);
      
      Base64.isBase64("zll'Fu|>&m=}_;`");
      base64_0.hasData();
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      Base64 base64_0 = new Base64(1, byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      bigInteger0.doubleValue();
      bigInteger0.byteValueExact();
      base64_0.encodeToString(byteArray3);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray2);
      base64_0.decode(byteArray1);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("Rl8AAAA", string0);
      
      Base64 base64_0 = new Base64((-1225));
      base64_0.decode((Object) "Rl8AAAA");
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      //  // Unstable assertion: assertEquals(9, byteArray2.length);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64.isBase64((byte)67);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAA==", string0);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(10, byteArray1.length);
      
      base64_0.readResults(byteArray0, (byte)67, (-1022));
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64(byteArray2, false, false, 14);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      base64_0.readResults(byteArray1, 108, 108);
      base64_0.decode((Object) "Af8=");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, false, true);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0, true, false);
      base64_0.isUrlSafe();
      Base64.isBase64((byte)120);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(414);
      base64_0.encode(byteArray0);
      base64_0.decode((Object) "");
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.getLowestSetBit();
      bigInteger0.add(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray0);
      bigInteger0.pow(64);
      BigInteger bigInteger2 = bigInteger1.min(bigInteger0);
      bigInteger2.longValue();
      base64_0.decode(byteArray0);
      base64_0.decode("ISO-8859-1");
      Base64.isBase64("yVJqV{FcLtEMz>U~");
      BigInteger bigInteger3 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger3);
      bigInteger1.doubleValue();
      BigInteger bigInteger4 = BigInteger.ONE;
      bigInteger4.byteValueExact();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray2);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)100, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.decodeBase64("Oo`%LW{:WW1nHt\"");
      Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray1);
      Object object0 = new Object();
      base64_0.decode((Object) "Oo`%LW{:WW1nHt\"");
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      byteArray0[6] = (byte)33;
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64.isBase64((byte) (-40));
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, (byte) (-40), (byte) (-40));
      base64_0.decode((Object) "![+NLJ:Y%0~#CE1_>");
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-40);
      byteArray2[1] = (byte) (-88);
      byteArray2[2] = (byte) (-40);
      byteArray2[3] = (byte) (-40);
      byteArray2[4] = (byte) (-40);
      byteArray2[5] = (byte) (-40);
      base64_0.decode(byteArray2);
      Base64.encodeBase64((byte[]) null, true, false, 88);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.longValue();
      bigInteger0.shortValueExact();
      Random.setNextRandom((byte)115);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-98);
      byteArray2[1] = (byte) (-5);
      byteArray2[2] = (byte)29;
      byteArray2[3] = (byte)115;
      byteArray2[4] = (byte)107;
      byteArray2[5] = (byte) (-98);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.encodeBase64(byteArray1, false, true, (int) (byte)107);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64(10);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      Base64.decodeBase64("");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.abs();
      Base64.toIntegerBytes(bigInteger0);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)36;
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray0);
      bigInteger3.modPow(bigInteger1, bigInteger1);
      byteArray0[3] = (byte) (-67);
      Base64.encodeBase64(byteArray0, false);
      byteArray0[4] = (byte)36;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.decodeBase64("");
      bigInteger3.isProbablePrime(5);
      bigInteger3.andNot(bigInteger2);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger3);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encodeToString(byteArray1);
      Base64.discardWhitespace(byteArray2);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)115;
      byteArray0[0] = (byte)115;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.longValue();
      bigInteger0.shortValueExact();
      Random.setNextRandom((byte)115);
      Base64.encodeInteger(bigInteger0);
      String string0 = "org.apache.commons.codec.binary.Base64";
      Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      Base64 base64_0 = new Base64(7);
      base64_0.encode(byteArray0, (-1325), (-1));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)39;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      Base64 base64_1 = new Base64(0);
      base64_1.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.getLowestSetBit();
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray0);
      bigInteger0.pow(64);
      Object object0 = new Object();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger3 = BigInteger.ONE;
      bigInteger0.longValue();
      Base64.decodeBase64("");
      bigInteger0.andNot(bigInteger2);
      bigInteger1.isProbablePrime(3319);
      Base64 base64_1 = new Base64((-1), byteArray1);
      try { 
        base64_1.encode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((-1225));
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 1879);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-80);
      byteArray0[4] = (byte)13;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byteArray0[3] = (byte)41;
      base64_0.decode(byteArray0, (-1476), (int) (byte) (-80));
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)41, (-1386));
      byteArray0[6] = (byte)109;
      base64_0.readResults(byteArray0, (byte)41, 106);
      base64_0.decode((Object) "^(m");
      Base64.isBase64((byte)42);
      Base64.encodeBase64(byteArray1, false);
      Base64.isBase64("^(m");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-1);
      base64_0.encode(byteArray0, 43, (-93));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(1, byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("WRv_'ZHiS&?SXr\"(:'");
      Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray1);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64((-685));
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)1;
      base64_0.encode(byteArray0);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)24;
      Base64.decodeBase64((byte[]) null);
      base64_0.encode((byte[]) null);
      Base64.isBase64("");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.getLowestSetBit();
      BigInteger bigInteger2 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger3 = BigInteger.ZERO;
      bigInteger1.longValue();
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.decode("");
      Base64.isBase64("");
      bigInteger1.doubleValue();
      bigInteger1.byteValueExact();
      Base64.toIntegerBytes(bigInteger1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 2198, 42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2198
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-67);
      Base64 base64_0 = new Base64(2240, byteArray0, true);
      base64_0.decode(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.isBase64((byte)67);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray0, (byte)67, (-1022));
      Random.setNextRandom(119);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-52);
      byte[] byteArray1 = new byte[0];
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_1 = new Base64(48);
      Base64 base64_2 = new Base64((byte)98, byteArray1, true);
      // Undeclared exception!
      try { 
        base64_2.decode(byteArray2, (-1225), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1225
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1878, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000=\u001F\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_0 = new Base64((-1225));
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)98;
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("\"~>'2C?uYBWq>h!n");
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)0;
      Base64.encodeBase64(byteArray0, true, true, 2315);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)33;
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.testBit(76);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encodeToString(byteArray1);
      base64_0.avail();
      Base64.encodeBase64(byteArray2, false, false, 2574);
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-1);
      Base64.isArrayByteBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)70;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0011\u0000\uFFFD\u0000F]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64((-685));
      Base64.encodeBase64Chunked((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)48;
      base64_0.decode(byteArray0, 1018, (-1907));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-42);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-42);
      byteArray1[1] = (byte) (-122);
      byteArray1[2] = (byte)95;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)116;
      byteArray1[5] = (byte)70;
      byteArray1[6] = (byte)95;
      byteArray1[7] = (byte)70;
      byteArray1[8] = (byte)70;
      Base64.encodeBase64(byteArray1, true, true, 52);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64((-1813));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 1420);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-111);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-3026), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0000\u0001+\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray0, false);
      Base64.decodeBase64("");
      base64_0.encodeToString(byteArray2);
      Object object0 = new Object();
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.longValue();
      Base64.decodeBase64("");
      bigInteger0.andNot(bigInteger1);
      int int0 = (-1);
      bigInteger0.isProbablePrime((-1));
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[2];
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("WRv_'ZHiS&?SXr\"(:'");
      byteArray0[0] = (byte)33;
      Base64.decodeBase64(byteArray1);
      byteArray0[1] = (byte) (-1);
      base64_0.encode(byteArray0);
      base64_0.decode((Object) "");
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      String string0 = "org.apache.commons.codec.DecoderException";
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      int int0 = (-218);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (-218));
      Base64 base64_0 = new Base64((-218));
      base64_0.decode((Object) "");
      String string0 = "N^N.b-YAXvQ";
      Base64.encodeBase64(byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-218), 2580);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -218
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-19));
      BigInteger bigInteger0 = null;
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)58;
      Base64.encodeBase64(byteArray0, true, true);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)13;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byteArray0[3] = (byte)41;
      base64_0.decode(byteArray0, (-1476), (int) (byte) (-80));
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      base64_0.encode(byteArray0, (int) (byte)41, (-1386));
      byteArray0[6] = (byte)109;
      base64_0.readResults(byteArray0, (byte)41, 106);
      base64_0.decode((Object) "^(m");
      Base64.isBase64((byte)42);
      Base64.encodeBase64(byteArray1, false);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte) (-67);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(2240, byteArray0, true);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.getLowestSetBit();
      bigInteger0.add(bigInteger1);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray0);
      bigInteger0.pow(64);
      bigInteger1.min(bigInteger0);
      bigInteger1.longValue();
      base64_0.decode(byteArray0);
      base64_0.decode("");
      Base64.isBase64("");
      Base64.encodeInteger(bigInteger1);
      bigInteger1.doubleValue();
      bigInteger1.byteValueExact();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray2);
      base64_0.decode((Object) "");
      Base64.isBase64("");
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-126);
      byteArray0[7] = (byte) (-64);
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)63;
      byteArray0[0] = (byte)63;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)27;
      byteArray0[2] = (byte)27;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64();
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      base64_0.decode(object1);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64String(byteArray2);
      bigInteger0.nextProbablePrime();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray0);
      base64_0.encode(byteArray2);
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger1);
      Base64.toIntegerBytes(bigInteger1);
      Base64.decodeBase64("");
      base64_0.isUrlSafe();
      Base64.encodeInteger(bigInteger1);
      try { 
        base64_0.encode((Object) "PwAb");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-1);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("ZP8=", string0);
      
      Base64 base64_0 = new Base64((byte) (-1));
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64String((byte[]) null);
      base64_0.decode((String) null);
      byte[] byteArray1 = base64_0.decode("");
      assertEquals(0, byteArray1.length);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(102, byteArray0);
      Base64.encodeBase64String(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 102, 3252);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 102
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-42);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      assertArrayEquals(new byte[] {(byte)49, (byte)103, (byte)61, (byte)61, (byte)13, (byte)10}, byteArray1);
      assertEquals(6, byteArray1.length);
  }
}
