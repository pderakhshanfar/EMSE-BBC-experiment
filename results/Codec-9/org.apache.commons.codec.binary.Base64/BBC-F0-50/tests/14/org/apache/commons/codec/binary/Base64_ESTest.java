/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:17:32 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)52;
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(false);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte) (-39));
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray0);
      base64_0.readResults(byteArray0, (byte)1, (byte)1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(889, (byte) (-39), mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1728);
      base64_0.decode(byteArray0, 1728, (int) (byte) (-39));
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2001, 111, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(111, 2001, mockRandom1);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(314);
      base64_0.decode(byteArray0, 121, 314);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte)33;
      byteArray1[2] = (byte)49;
      byteArray1[3] = (byte) (-19);
      byteArray1[4] = (byte) (-83);
      byteArray1[5] = (byte)105;
      byteArray1[6] = (byte)12;
      byteArray1[7] = (byte)0;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.avail();
      base64_0.encode(byteArray2, (int) (byte)0, 247);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((-2344), byteArray0);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(846L);
      BigInteger bigInteger0 = new BigInteger(1700, 1700, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1700);
      Base64 base64_0 = new Base64(52);
      base64_0.decode(byteArray0);
      base64_0.decode(byteArray1);
      try { 
        base64_0.encode((Object) "Q\"Zu");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 14);
      Base64.encodeBase64(byteArray0);
      boolean boolean0 = true;
      int int0 = 0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (22) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1981);
      BigInteger bigInteger0 = new BigInteger(1981, 48, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(314);
      base64_0.decode(byteArray0, 48, 314);
      Base64 base64_1 = new Base64(76);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.discardWhitespace(byteArray0);
      Random.setNextRandom(76);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2001);
      BigInteger bigInteger0 = new BigInteger(2001, 91, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(314);
      base64_0.decode(byteArray0, 91, 314);
      Base64 base64_1 = new Base64();
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64(false);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      base64_0.decode(byteArray0, 68, (-934));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2001);
      BigInteger bigInteger0 = new BigInteger(2001, 91, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(314);
      base64_0.decode(byteArray0, 166, 166);
      Base64 base64_1 = new Base64();
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 91;
      MockRandom mockRandom0 = new MockRandom(2001);
      BigInteger bigInteger0 = new BigInteger(2001, 91, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(91);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 102, 1381);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 336
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2001);
      BigInteger bigInteger0 = new BigInteger(2001, 91, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(251, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, false);
      //  // Unstable assertion: assertNull(byteArray2);
      
      Base64 base64_0 = new Base64((-1), byteArray1, false);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      Base64.encodeBase64(byteArray0, true);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.flipBit((byte)9);
      // Undeclared exception!
      try { 
        bigInteger1.divideAndRemainder(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)67;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 4, (int) (byte)20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      Base64 base64_0 = new Base64((byte)1, byteArray0, false);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      base64_0.encode(byteArray0, (int) (byte) (-39), (int) (byte) (-39));
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      base64_0.encode(byteArray0, (int) (byte) (-39), (int) (byte) (-39));
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)118;
      base64_0.encode(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)126);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Base64.isBase64((byte) (-51));
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)32;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray0, 1, (int) (byte)1);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(false);
      Base64 base64_2 = new Base64();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_2.encode((byte[]) null, 64, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(691);
      Base64.decodeBase64((byte[]) null);
      base64_0.decode((byte[]) null, 691, (-1468));
      Base64.encodeBase64((byte[]) null, false, false);
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-100);
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = (byte)37;
      byteArray1[3] = (byte)68;
      byteArray1[4] = (byte)122;
      byteArray1[5] = (byte)57;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)89;
      int int0 = base64_0.readResults(byteArray1, 85, 691);
      assertEquals((-1), int0);
      
      Base64.encodeBase64((byte[]) null, true, true, 691);
      byte[] byteArray2 = base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray2);
      
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-100);
      byteArray3[1] = (byte)122;
      byteArray3[2] = (byte)89;
      byteArray3[3] = (byte)37;
      byteArray3[4] = (byte)68;
      byteArray3[5] = (byte)1;
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      assertEquals(6, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      Base64 base64_0 = new Base64((byte)1, byteArray0, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      base64_0.encode(byteArray0, (int) (byte) (-39), (int) (byte) (-39));
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (byte) (-39), 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      Base64 base64_0 = new Base64((byte)1, byteArray0, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      bigInteger0.isProbablePrime((byte) (-39));
      base64_0.encode(byteArray0, (int) (byte) (-39), (int) (byte) (-39));
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      int int0 = base64_0.avail();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Base64.isBase64((byte)117);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)117;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.abs();
      bigInteger1.gcd(bigInteger0);
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64(5);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.isBase64(byteArray1);
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("dT09\u0000\u0000dXV1\u0000\u0000PT11\u0000\u0000", string0);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64((-2874), (byte[]) null, false);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 1, 773);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.isBase64((byte)85);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray0);
      int int0 = 3;
      base64_0.encode(byteArray0, 3, (int) (byte) (-39));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 49, (-4002));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = null;
      Base64.decodeBase64((String) null);
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "UTF-8");
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = base64_0.decode("#fp>mnb\"E*{PpqbJ");
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)126, (byte) (-103), (byte) (-89), (byte)108, (byte)67, (byte) (-23), (byte) (-87), (byte) (-78)}, byteArray1);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAA=", string0);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)61;
      Base64.decodeInteger(byteArray3);
      Object object0 = base64_0.decode((Object) "UTF-8");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      Base64 base64_0 = new Base64();
      byte byte1 = (byte) (-39);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-118);
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte)8;
      byteArray1[3] = (byte)52;
      Base64.isArrayByteBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)123;
      byteArray2[1] = (byte)64;
      byteArray2[2] = (byte)110;
      byteArray2[3] = (byte) (-55);
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte) (-1);
      Base64.isArrayByteBase64(byteArray2);
      Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((byte) (-55), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(100, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-39);
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)1;
      byteArray1[6] = (byte) (-109);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)1, 2417);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64((-1773), (byte[]) null, false);
      Base64.decodeBase64(byteArray0);
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray1 = base64_0.decode("nal%ncpLq3X&");
      base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.decode("iQlz+eA=D+4/");
      assertEquals(5, byteArray2.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-99), (byte) (-87), (byte)103, (byte)114, (byte) (-110), (byte) (-22), (byte) (-35)}, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(0, byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64((byte)75, byteArray1);
      Base64.decodeBase64("M`");
      Base64 base64_1 = new Base64((byte)0);
      base64_1.decode("M`");
      Base64.isBase64(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      Base64 base64_0 = new Base64((byte)1, byteArray0, true);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      base64_0.encode(byteArray0, (int) (byte) (-39), (int) (byte) (-39));
      Base64 base64_1 = new Base64(17, byteArray0, true);
      base64_1.isUrlSafe();
      base64_1.encodeToString(byteArray0);
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      Base64.isBase64(byteArray0);
      Base64.decodeBase64("~<eP1");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)75;
      byteArray1[3] = (byte)75;
      byteArray1[4] = (byte)0;
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, (int) (byte)0);
      Base64.decodeInteger(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)75;
      byteArray4[1] = (byte)22;
      byteArray4[2] = (byte)75;
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      base64_0.decode((Object) "UTF-8");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)61;
      byte[] byteArray2 = new byte[4];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.decodeBase64("UTF-8");
      Base64 base64_1 = new Base64(64);
      base64_1.decode("UTF-8");
      Base64.decodeBase64(byteArray2);
      Base64 base64_2 = new Base64(76);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)5;
      byteArray3[1] = (byte)61;
      byteArray3[2] = (byte)1;
      byteArray3[3] = (byte)61;
      byteArray3[4] = (byte)61;
      byteArray3[5] = (byte)61;
      // Undeclared exception!
      try { 
        base64_2.encode(byteArray3, (int) (byte)1, 1751);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      base64_0.decode((Object) "UTF-8");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.gcd(bigInteger1);
      Base64.decodeBase64("r{r,cG=qwJ\"D%Z");
      Base64 base64_1 = new Base64(2237);
      base64_1.decode("ZKzi`B0pY");
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_2 = new Base64();
      base64_2.decode("ZKzi`B0pY");
      base64_1.decode(byteArray1);
      base64_0.decode(":6&BAU3V{.rLbw$c[w");
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64((byte)75, byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encode(byteArray2, (int) (byte)75, (int) (byte)0);
      base64_0.isUrlSafe();
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      Base64 base64_1 = new Base64(64, (byte[]) null, true);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      Base64 base64_0 = new Base64((byte)1, byteArray0, true);
      Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte) (-39), 60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -39
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)55;
      byteArray0[8] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray1);
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)106, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u01D9j\t\u0002\u001C7\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-78);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 4599);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, true, false, (int) (byte)32);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)32;
      byteArray4[1] = (byte) (-78);
      byteArray4[2] = (byte)32;
      Base64.encodeBase64(byteArray4, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)32, byteArray3, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [sg==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      base64_0.decode(byteArray0, (int) (byte) (-39), (int) (byte) (-39));
      byteArray0[1] = (byte) (-39);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(false);
      base64_1.readResults(byteArray1, (byte) (-39), (byte)122);
      base64_0.decode(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-39);
      byteArray2[1] = (byte) (-39);
      byteArray2[2] = (byte)122;
      byteArray2[3] = (byte) (-39);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.gcd(bigInteger1);
      Base64.decodeBase64((String) null);
      base64_0.decode("");
      Base64.decodeBase64(byteArray0);
      base64_1.decode((String) null);
      base64_1.decode(byteArray2);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64((-1), (byte[]) null);
      Base64.isBase64("");
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      base64_0.decode((Object) "UTF-8");
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte)61;
      byteArray1[4] = (byte)61;
      byteArray1[5] = (byte) (-110);
      byteArray1[7] = (byte)5;
      base64_0.encode(byteArray1);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      base64_0.decode((Object) "UTF-8");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)61;
      byte[] byteArray2 = new byte[4];
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_1 = new Base64(false);
      base64_1.encode(byteArray3, 23, (-456));
      Base64 base64_2 = new Base64(23, byteArray0);
      base64_2.isUrlSafe();
      Base64.decodeBase64((String) null);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)61;
      byteArray4[1] = (byte)5;
      byteArray4[2] = (byte)5;
      byteArray4[3] = (byte)5;
      byteArray4[4] = (byte)61;
      byteArray4[5] = (byte)5;
      byteArray4[6] = (byte)5;
      Base64.encodeBase64(byteArray4, false, false, (int) (byte)61);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      Base64.isBase64("1g =__rW=;=rGq?Q");
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "";
      Base64.decodeBase64("");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.abs();
      int int0 = 0;
      bigInteger1.isProbablePrime(187);
      BigInteger bigInteger2 = BigInteger.valueOf(187);
      Base64.toIntegerBytes(bigInteger2);
      // Undeclared exception!
      try { 
        bigInteger1.flipBit((-2941));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Negative bit address
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base64_0.decode(byteArray0, 2768, (int) (byte) (-39));
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64("2a3dJ@-/pnSWA@cY@");
      base64_0.encode(byteArray1, 883, 2768);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode("B");
      base64_0.encode(byteArray1);
      Base64.discardWhitespace(byteArray1);
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.isProbablePrime(1);
      BigInteger bigInteger1 = BigInteger.valueOf((byte)0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      bigInteger0.flipBit((byte)75);
      Base64 base64_0 = new Base64((byte)0, byteArray0, true);
      base64_0.encode(byteArray1, (int) (byte)75, (-1));
      byte[] byteArray2 = base64_0.decode("_;VS0SiN\"aFr");
      base64_0.isUrlSafe();
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      Base64.isArrayByteBase64(byteArray3);
      Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64(false);
      base64_0.readResults(byteArray1, (byte)75, 10);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      bigInteger0.isProbablePrime(0);
      BigInteger.valueOf((-468L));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.flipBit(0);
      bigInteger0.shiftRight(0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = new byte[3];
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode(byteArray1, 108, 0);
      base64_0.hasData();
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.encode(byteArray3, 0, 0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      base64_0.decode(byteArray0, (int) (byte) (-39), (int) (byte) (-39));
      byteArray0[5] = (byte)0;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)51;
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(") than the specified maxium size of ");
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)34;
      base64_0.encode(byteArray0, (int) (byte)34, (int) (byte)14);
      base64_0.decode(byteArray0);
      Base64.decodeBase64("2QAOMwAAAA==");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte) (-39);
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte)51;
      byteArray1[5] = (byte) (-23);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      base64_0.decode(byteArray0, (int) (byte) (-39), (int) (byte) (-39));
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(") than the specified maxium size of ");
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)23;
      base64_0.encode(byteArray0, (int) (byte)23, (int) (byte)0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = base64_0.decode("dG$xheO0_b.");
      base64_0.encode(byteArray2);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("dR#x\"N");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      bigInteger0.isProbablePrime(0);
      BigInteger.valueOf((-468L));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.flipBit(0);
      Base64 base64_0 = new Base64(0, byteArray1, true);
      base64_0.encode(byteArray0, 2302, (-1455));
      String string0 = "_;VS0SiN\"aFr";
      base64_0.hasData();
      Base64 base64_1 = new Base64();
      try { 
        base64_1.encode((Object) "_;VS0SiN\"aFr");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)75, byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-1288), 34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1288
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      bigInteger0.isProbablePrime(0);
      BigInteger.valueOf((-468L));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.flipBit(0);
      bigInteger0.shiftRight(0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-122);
      Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString();
      Base64.encodeInteger(bigInteger0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      base64_0.readResults(byteArray0, (byte)0, (byte)70);
      byteArray0[3] = (byte)0;
      base64_0.decode(byteArray0);
      Base64.decodeBase64("-7{RWlM'");
      base64_0.decode("-7{RWlM'");
      byte[] byteArray1 = new byte[1];
      Base64.decodeBase64("10");
      byteArray1[0] = (byte)0;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.decode("nal%ncpLq3X&");
      base64_0.decode(byteArray1);
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.hasData();
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)70;
      byteArray0[0] = (byte)70;
      byte byte1 = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString();
      byte byte2 = (byte)51;
      byte byte3 = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64.isBase64(".k kC|oCHH3_h");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 3182, 2530);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3182
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      base64_0.decode((Object) "UTF-8");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)61;
      byte[] byteArray2 = new byte[4];
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray3);
      
      byteArray2[0] = (byte)61;
      byteArray2[1] = (byte)5;
      byteArray2[2] = (byte)5;
      byteArray2[3] = (byte)61;
      Base64.isBase64(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)80, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)10, (byte)21}, byteArray4);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      //  // Unstable assertion: assertEquals("PQAAAAA", string0);
      
      Base64.encodeBase64(byteArray0, false, false, 64);
      base64_0.decode(byteArray0, (int) (byte)61, 28);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)61, (byte)5, (byte)5, (byte)61}, byteArray5);
      //  // Unstable assertion: assertEquals(4, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      bigInteger0.isProbablePrime(0);
      BigInteger.valueOf((-468L));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.flipBit(0);
      bigInteger0.shiftRight(0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      Base64.decodeBase64(byteArray3);
      bigInteger0.intValue();
      Base64 base64_1 = new Base64((-1929), byteArray1);
      base64_1.encodeToString(byteArray3);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 64, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)21;
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      base64_0.hasData();
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      Base64.encodeBase64(byteArray0);
      byteArray0[0] = (byte)70;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString();
      Base64.encodeInteger(bigInteger0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      base64_0.readResults(byteArray0, (byte)0, (byte)70);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.decodeBase64("-7{RWlM'");
      byte[] byteArray2 = base64_0.decode("-7{RWlM'");
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      Base64.decodeBase64(byteArray3);
      base64_0.decode("nal%ncpLq3X&");
      base64_0.decode(byteArray3);
      base64_0.decode("10");
      base64_0.encode(byteArray2);
      base64_0.decode(byteArray2);
      Base64.encodeBase64String(byteArray1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      bigInteger0.isProbablePrime(0);
      BigInteger.valueOf((-468L));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.flipBit(0);
      bigInteger0.shiftRight(0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-122);
      byte[] byteArray3 = base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray3, true);
      base64_0.hasData();
      base64_0.decode("dR#x\"N");
      Base64.isArrayByteBase64(byteArray1);
      Base64.discardWhitespace(byteArray2);
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("dR#x\"N");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      bigInteger0.isProbablePrime(0);
      BigInteger.valueOf((-468L));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.flipBit(0);
      Base64 base64_0 = new Base64(0, byteArray1, true);
      base64_0.encode(byteArray0, 2302, (-1455));
      byte[] byteArray2 = base64_0.decode("_;VS0SiN\"aFr");
      base64_0.isUrlSafe();
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.decodeBase64("_;VS0SiN\"aFr");
      base64_0.decode(byteArray3);
      try { 
        base64_0.encode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.shiftRight(608);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      Base64.encodeBase64(byteArray3, true);
      base64_0.hasData();
      Base64 base64_1 = new Base64();
      base64_1.decode("oe-nDPrQNM@@");
      Base64.isArrayByteBase64(byteArray3);
      Base64.discardWhitespace(byteArray2);
      Base64.isBase64((byte)53);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)0;
      base64_0.decode((byte[]) null);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)51;
      base64_0.readResults(byteArray0, (-511), (-1717));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)1;
      Base64 base64_0 = new Base64((byte)0, byteArray1, true);
      base64_0.encode(byteArray0, 2302, (int) (byte)0);
      byte[] byteArray2 = base64_0.decode("80}Z~");
      base64_0.isUrlSafe();
      Base64.decodeInteger(byteArray2);
      Base64.decodeBase64("");
      base64_0.readResults(byteArray2, 1629, 2302);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      base64_0.decode((Object) "J 'jZ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)61;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)61;
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)5;
      byteArray3[1] = (byte)5;
      byteArray3[2] = (byte)5;
      byteArray3[3] = (byte)5;
      byteArray3[4] = (byte)5;
      byteArray3[5] = (byte)61;
      byteArray3[6] = (byte)5;
      byteArray3[7] = (byte)61;
      byteArray3[8] = (byte)1;
      Base64.isBase64(byteArray3);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray1, false, false, 64);
      base64_0.decode(byteArray4, (int) (byte)5, (int) (byte)5);
      Base64.discardWhitespace(byteArray3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-50);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte)14, byteArray0);
      base64_0.decode((Object) "AOUAKQ7O");
      base64_0.decode((Object) "");
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64(byteArray0, false, false, 106);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      bigInteger0.isProbablePrime(0);
      BigInteger.valueOf((-468L));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.flipBit(0);
      bigInteger0.shiftRight(0);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-122);
      byteArray2[2] = (byte)0;
      base64_0.decode(byteArray2);
      Base64.encodeBase64(byteArray0, true);
      base64_0.hasData();
      base64_0.decode("]");
      Base64.isArrayByteBase64(byteArray1);
      Base64.discardWhitespace(byteArray2);
      Base64.isBase64((byte)27);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)122;
      byteArray0[3] = (byte)0;
      byte[] byteArray2 = Base64.decodeBase64("-7{RWlM'");
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray5 = Base64.decodeBase64("A\"cD");
      Base64.discardWhitespace(byteArray2);
      Base64 base64_0 = new Base64((-754), byteArray3, false);
      byte[] byteArray6 = base64_0.decode(byteArray4);
      assertNotSame(byteArray6, byteArray5);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean1 = Base64.isBase64((byte) (-75));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      String string0 = base64_0.encodeToString((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64(85);
      byte[] byteArray0 = new byte[0];
      int int0 = 507;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-86);
      base64_0.decode(byteArray1);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)54;
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)33, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [6!\u0000\u0001\u0001Y\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte)0, (-3078));
      byte[] byteArray1 = new byte[6];
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64("AAAAAAAA");
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.readResults(byteArray1, 90, 90);
      byteArray1[0] = (byte) (-89);
      Base64.decodeBase64(byteArray2);
      byteArray1[1] = (byte)93;
      byteArray1[2] = (byte)82;
      byte[] byteArray3 = base64_0.encode(byteArray1);
      byteArray1[3] = (byte) (-21);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      base64_0.decode(byteArray3);
      base64_0.readResults(byteArray1, 0, 0);
      Base64.encodeBase64(byteArray1, true);
      Base64.encodeBase64String(byteArray3);
      base64_0.decode("3-c");
      base64_0.decode(byteArray1, (int) (byte)0, (int) (byte)82);
      base64_0.isUrlSafe();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-27);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)14;
      byte byte1 = (byte) (-50);
      byteArray0[5] = (byte) (-50);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((byte)14, byteArray0);
      base64_0.decode((Object) "AOUAKQ7O");
      String string0 = "";
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)88;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)73}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("%");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-1));
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-1);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "6bn4VOD>WwUh8A-~E3k");
      base64_0.decode((byte[]) null, (-945), (-945));
      byte[] byteArray0 = Base64.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = (-205);
      Base64.encodeBase64((byte[]) null, false, false, (-205));
      Base64 base64_0 = new Base64(false);
      base64_0.encode((byte[]) null);
      boolean boolean0 = true;
      Base64.encodeBase64((byte[]) null, false, true);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-78);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      base64_0.readResults(byteArray2, (byte) (-78), (byte)0);
      assertEquals(14, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray3);
      assertEquals(4, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("dR#x\"N");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      bigInteger0.isProbablePrime(0);
      BigInteger.valueOf((-468L));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.flipBit(0);
      bigInteger0.shiftRight(0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray2);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-122);
      byteArray3[2] = (byte)0;
      base64_0.decode(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, true);
      assertEquals(6, byteArray4.length);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      byte[] byteArray5 = base64_0.decode("dR#x\"N");
      Base64.isArrayByteBase64(byteArray3);
      byte[] byteArray6 = Base64.discardWhitespace(byteArray5);
      assertArrayEquals(new byte[] {(byte)117, (byte)28, (byte)77}, byteArray6);
      
      boolean boolean1 = Base64.isBase64((byte) (-1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-86);
      byte byte0 = (byte)105;
      byteArray0[5] = (byte)105;
      byte byte1 = (byte) (-69);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigInteger0.mod((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byte byte0 = (byte) (-29);
      Base64.isBase64("rv|]aQB:AA$DOrN,");
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      base64_0.decode(byteArray0, (int) (byte) (-39), (int) (byte) (-39));
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      Base64.decodeBase64(byteArray0);
      byteArray0[4] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("2QAAMwAAAA==", string0);
      
      boolean boolean0 = Base64.isBase64(") than the specified maxium size of ");
      //  // Unstable assertion: assertFalse(boolean0);
      
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)23;
      base64_0.encode(byteArray0, (int) (byte)23, (int) (byte)0);
      Base64.encodeBase64(byteArray0, false, false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)50, (byte)81, (byte)65, (byte)65, (byte)77, (byte)119, (byte)68, (byte)112, (byte)70, (byte)119}, byteArray1);
      
      byte[] byteArray2 = base64_0.decode("dG$xheO0_b.");
      byte[] byteArray3 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)100, (byte)71, (byte)120, (byte)104, (byte)101, (byte)79, (byte)48, (byte)47, (byte)1, (byte)0}, byteArray3);
      
      base64_0.decode(byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)116, (byte)108, (byte)97, (byte)120, (byte) (-19), (byte)63}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-32);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0001\uFFFD\u0000K\u0000C\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64((-2397));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)52;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("RL8tAAA0", string0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)82, (byte)76, (byte)56, (byte)116, (byte)65, (byte)65, (byte)65, (byte)48}, byteArray1);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)70;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString();
      Base64.encodeInteger(bigInteger0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)122;
      base64_0.readResults(byteArray0, (byte)0, (byte)70);
      byteArray0[3] = (byte)0;
      base64_0.decode(byteArray0);
      Base64.decodeBase64("-7{RWlM'");
      base64_0.decode("-7{RWlM'");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      Base64.decodeBase64(byteArray1);
      base64_0.decode("nal%ncpLq3X&");
      base64_0.decode(byteArray1);
      base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-5);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)56;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u00005K\uFFFDi8\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0001\u0000|\u0000w\u0000\uFFFD\u0001\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 58;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)43;
      byteArray0[0] = (byte)43;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte) (-53);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-90);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(58, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [+\u0000\u02E6]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-8);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Wx\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Base64.isBase64("88)3dDMwuyE>");
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)70;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)70, 1562);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 70
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 8;
      Base64 base64_0 = new Base64(8);
      base64_0.decode((Object) "J 'jZ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)61;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)61;
      byteArray2[1] = (byte)5;
      byteArray2[2] = (byte)5;
      byteArray2[3] = (byte)61;
      base64_0.readResults(byteArray2, (byte)5, (byte)61);
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)5;
      base64_0.decode("hkl");
      Base64.encodeBase64(byteArray1, false, true);
      byteArray0[1] = (byte)76;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      int int0 = base64_0.readResults(byteArray0, 40, (byte) (-1));
      //  // Unstable assertion: assertEquals(0, int0);
      
      base64_0.avail();
      Base64.decodeBase64(">]lLRD<SwV");
      byte[] byteArray1 = Base64.decodeBase64("rnGZ~&.Yho");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)114, (byte)110, (byte)71, (byte)90, (byte)89, (byte)104, (byte)111, (byte)61, (byte)1, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger1.divideAndRemainder(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte)27;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-78);
      byteArray1[6] = (byte)29;
      byteArray1[7] = (byte)34;
      byteArray1[8] = (byte) (-107);
      Base64.encodeBase64(byteArray1, true, false, 720);
      byte[] byteArray2 = base64_0.decode("HO\"<u3@(<;#ne");
      base64_0.readResults(byteArray2, 68, 3279);
      Base64.decodeInteger(byteArray2);
      Object object0 = base64_0.decode((Object) "HO\"<u3@(<;#ne");
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(32, byteArray0, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 2302, (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2302
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAAA_wAAAA\r\n", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
