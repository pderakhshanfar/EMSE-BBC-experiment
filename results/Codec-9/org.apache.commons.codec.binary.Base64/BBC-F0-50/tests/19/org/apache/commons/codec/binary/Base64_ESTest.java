/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:06:14 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[116];
      Base64 base64_0 = new Base64(45, byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (162) than the specified maxium size of 45
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(29, byteArray0, true);
      Object object0 = base64_0.decode((Object) "&2BL5b{t(A6");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[78];
      Base64 base64_0 = new Base64(18, byteArray0);
      base64_0.encode(byteArray0, 18, 18);
      base64_0.encode(byteArray0, 18, 18);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1, 38, (-1229));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(1545, byteArray0, true);
      base64_0.encode(byteArray1, 1, 1);
      base64_0.encode(byteArray1, 1545, (int) (byte) (-108));
      base64_0.encode(byteArray1, 1545, 76);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[82];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)16;
      byteArray1[2] = (byte)65;
      byteArray1[3] = (byte) (-59);
      byteArray1[4] = (byte) (-108);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray0, 4, 4);
      base64_0.encode(byteArray0, 4, 76);
      base64_0.encode(byteArray0, (-1856), (int) (byte) (-97));
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[82];
      Base64 base64_0 = new Base64(4, byteArray0);
      base64_0.encode(byteArray0, 4, 4);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1, 38, (-1211));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray2);
      base64_0.encode(byteArray3);
      Base64.encodeBase64(byteArray1);
      Base64 base64_1 = new Base64(0);
      base64_1.decode(byteArray2, 0, 1731);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      int int0 = 55;
      base64_0.encodeToString(byteArray2);
      Random.setNextRandom(55);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      int int0 = 4;
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      BigInteger bigInteger0 = new BigInteger(byteArray4);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.decode(byteArray1, (int) (byte)1, 76);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.decode(byteArray1, (int) (byte)12, 76);
      base64_0.readResults(byteArray0, 0, 1);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      Base64.encodeBase64(byteArray1, true);
      base64_0.decode(byteArray1, (int) (byte)0, 76);
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Random.setNextRandom(64);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Random.setNextRandom(73);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      byte[] byteArray5 = new byte[19];
      byteArray5[1] = (byte) (-97);
      byteArray3[97] = (byte) (-97);
      byte byte0 = (byte)3;
      byteArray5[3] = (byte)3;
      byteArray5[4] = (byte) (-49);
      byteArray5[5] = (byte) (-28);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray4);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Random.setNextRandom(73);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      byte[] byteArray5 = new byte[19];
      byteArray5[1] = (byte) (-97);
      byteArray3[97] = (byte) (-97);
      byteArray5[3] = (byte)3;
      byteArray5[5] = (byte) (-28);
      Base64.encodeBase64URLSafeString(byteArray5);
      byteArray5[6] = (byte)3;
      byte byte0 = (byte) (-112);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray4);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encode(byteArray0, 4, 76);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Random.setNextRandom(73);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      byte[] byteArray5 = new byte[19];
      byteArray5[1] = (byte) (-97);
      byteArray3[97] = (byte) (-97);
      byteArray5[3] = (byte)3;
      byteArray5[4] = (byte) (-49);
      // Undeclared exception!
      Base64.encodeBase64(byteArray4, true, true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Random.setNextRandom(62);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      byte[] byteArray5 = new byte[9];
      byteArray5[0] = (byte)98;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      Base64.encodeBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.decode(byteArray1, (int) (byte)0, 76);
      Base64.isBase64((byte)0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Random.setNextRandom(62);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      Base64 base64_0 = new Base64(4, byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 30);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Random.setNextRandom(55);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      // Undeclared exception!
      base64_0.encodeToString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-111);
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte) (-15);
      byteArray1[3] = (byte) (-52);
      byteArray1[4] = (byte)10;
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Random.setNextRandom(55);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, true, false);
      base64_0.encode(byteArray5);
      base64_0.decode(byteArray4, 55, (-1));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray2);
      Random.setNextRandom(55);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      base64_1.decode(byteArray4);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      int int0 = 55;
      Random.setNextRandom(55);
      Base64.encodeBase64(byteArray3, true, false);
      base64_0.decode(byteArray3, 55, (-1));
      // Undeclared exception!
      Base64.discardWhitespace(byteArray4);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((short)0, bigInteger0.shortValue());
      
      base64_0.encode(byteArray3);
      Random.setNextRandom(55);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, false);
      assertEquals(5280, byteArray4.length);
      
      base64_0.decode(byteArray3, 55, (-1));
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte)106;
      byte[] byteArray6 = Base64.encodeBase64(byteArray5, false, false, (int) (byte)106);
      assertArrayEquals(new byte[] {(byte)97, (byte)103, (byte)61, (byte)61}, byteArray6);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      Base64 base64_1 = new Base64(4, byteArray0);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 4, 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-107);
      byteArray1[1] = (byte) (-107);
      byteArray1[2] = (byte) (-107);
      byteArray1[3] = (byte) (-107);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64((byte)40, byteArray0, false);
      Base64.encodeBase64(byteArray1);
      Base64 base64_1 = new Base64((byte) (-107), byteArray1);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 0, 1416);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)1;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(2618);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, (int) (byte)125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)29;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(7);
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray1, (int) (byte)0, 76);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)71, (byte)85, (byte)66, (byte)72, (byte)81, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.clearBit(3004);
      Base64 base64_0 = new Base64(4, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals(76, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte) (-106);
      byteArray4[1] = (byte)7;
      base64_0.decode(byteArray4, 1210, (int) (byte) (-106));
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)91;
      Base64 base64_0 = new Base64((byte)96);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_1.decode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)76;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      Base64 base64_0 = new Base64((byte)123, byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(21, byteArray1.length);
      
      base64_0.encode((byte[]) null);
      Base64 base64_1 = new Base64();
      int int0 = base64_1.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64((-50), byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)28;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte) (-15);
      byteArray1[4] = (byte)85;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1), byteArray0);
      byte[] byteArray1 = new byte[6];
      byte byte0 = (byte)7;
      byteArray1[0] = (byte)7;
      byte byte1 = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)70;
      byte byte2 = (byte) (-12);
      byteArray1[3] = (byte) (-12);
      byteArray1[4] = (byte)70;
      byteArray1[5] = (byte)76;
      int int0 = 1;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 1, (int) (byte)70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte)66;
      byteArray1[3] = (byte) (-115);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (int) (byte) (-115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -115
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      String string0 = base64_0.encodeToString(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals("", string0);
      
      boolean boolean1 = Base64.isBase64((byte)61);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)9;
      Base64.isBase64((byte)59);
      boolean boolean0 = Base64.isBase64(byteArray0);
      boolean boolean1 = Base64.isBase64((byte)52);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64((byte) (-61));
      boolean boolean1 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      Base64 base64_0 = new Base64(2239);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)40}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte) (-61));
      Base64 base64_0 = new Base64(34, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 34, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)102;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
      assertEquals(30, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)105, (byte)120, (byte)59, (byte)102}, byteArray1);
      assertFalse(boolean0);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)55);
      Base64.decodeBase64((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      Base64.decodeBase64((byte[]) null);
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1463), byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)41;
      byteArray1[3] = (byte) (-110);
      byteArray1[4] = (byte) (-60);
      byteArray1[5] = (byte)55;
      byteArray1[6] = (byte)98;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)55;
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = null;
      Base64 base64_0 = new Base64(67, (byte[]) null);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)55;
      byteArray2[1] = (byte)55;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 2736, 67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2736
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)55;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)55;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)68;
      byteArray1[5] = (byte)123;
      byteArray1[6] = (byte)55;
      byteArray1[7] = (byte)55;
      byteArray1[8] = (byte)55;
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray3);
      Base64.encodeBase64Chunked(byteArray2);
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray3);
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)123;
      byteArray4[1] = (byte)55;
      byteArray4[2] = (byte)68;
      byteArray4[3] = (byte)55;
      byteArray4[4] = (byte)123;
      base64_0.readResults(byteArray4, (byte)55, (byte)68);
      try { 
        base64_0.encode((Object) "TnpjQWUwUjdOemMzDQo\r\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.signum();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)34);
      Base64 base64_0 = new Base64(1, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte)34, (int) (byte)34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(1, byteArray0);
      Base64.isBase64("p");
      Object object0 = base64_0.decode((Object) "p");
      Object object1 = base64_0.encode(object0);
      base64_0.decode(object1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 2, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64(13);
      Base64 base64_1 = new Base64(13);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)40;
      byteArray0[8] = (byte)40;
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals("KCgoKCgoKCgo\u0000\u0001", string0);
      
      boolean boolean0 = Base64.isBase64("o\u0000hJ>aJ!F:c");
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)40;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)123;
      Base64 base64_0 = new Base64();
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("KHt7ewAAAA==", string0);
      
      Base64.isBase64((byte)123);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.readResults(byteArray1, (-1), (-1689));
      base64_0.decode(byteArray1);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      byte[] byteArray2 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-68);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64(byteArray0);
      base64_0.hasData();
      base64_0.decode((String) null);
      Base64.encodeBase64((byte[]) null, true, true, (int) (byte) (-1));
      try { 
        base64_0.decode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64(13);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-111);
      Base64 base64_1 = new Base64((-584));
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      //  // Unstable assertion: assertEquals("UnRMkQAAAA", string0);
      
      Base64.encodeBase64(byteArray0, false, false);
      String string1 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("UnRMkQAAAA==\u0000\u0001", string1);
      
      boolean boolean0 = Base64.isBase64("sP4|'?Y >/");
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)40;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)123;
      boolean boolean0 = false;
      Base64 base64_0 = new Base64((-28), byteArray0, false);
      Base64.encodeBase64(byteArray1);
      Base64 base64_1 = new Base64((byte)40, byteArray1);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 0, 1416);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 2736, 2736);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2736
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      Base64 base64_1 = new Base64();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      base64_0.decode(byteArray1, (int) (byte)0, (-1199));
      Base64 base64_2 = new Base64((-678));
      base64_2.avail();
      Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(7, byteArray2.length);
      
      byte[] byteArray3 = Base64.decodeBase64("^1]jnGEh(H");
      boolean boolean0 = Base64.isBase64(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)57, (byte) (-58), (byte)18, (byte)17}, byteArray3);
      assertEquals(5, byteArray3.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((-584), byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray0, (-5785), 8188);
      int int0 = (-484);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[3];
      Base64 base64_2 = new Base64(64, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = base64_0.decode("OTC}#Wlj+6.l''");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.max(bigInteger2);
      //  // Unstable assertion: assertEquals((byte) (-9), bigInteger0.byteValue());
      
      base64_0.encode(byteArray1, 76, (int) (byte) (-11));
      base64_0.decode(byteArray0, 64, 71);
      base64_2.hasData();
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertEquals(3, byteArray4.length);
      
      BigInteger bigInteger3 = BigInteger.ZERO;
      byte[] byteArray5 = Base64.encodeInteger(bigInteger3);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
      
      Base64.isBase64(byteArray2);
      Base64 base64_3 = new Base64(false);
      byte[] byteArray6 = new byte[2];
      byteArray6[0] = (byte) (-11);
      byteArray6[1] = (byte) (-55);
      String string0 = base64_3.encodeToString(byteArray6);
      //  // Unstable assertion: assertEquals("9ck=\u0000\u0001", string0);
      
      boolean boolean0 = base64_3.hasData();
      boolean boolean1 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)91;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)0, (byte)4, (byte) (-7), (byte)91}, byteArray1);
      
      Base64 base64_0 = new Base64((byte)4);
      byte[] byteArray2 = new byte[8];
      byteArray2[1] = (byte) (-21);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      bigInteger0.abs();
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(7, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-21), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      
      byteArray2[2] = (byte) (-1);
      byte[] byteArray4 = base64_0.decode("");
      byteArray2[3] = (byte) (-7);
      byteArray2[5] = (byte) (-7);
      byteArray2[6] = (byte)4;
      String string0 = base64_0.encodeToString(byteArray2);
      //  // Unstable assertion: assertEquals("AOv/\u0000\u0001+QD5\u0000\u0001BAA=\u0000\u0001", string0);
      
      int int0 = base64_0.readResults(byteArray0, 11, 11);
      //  // Unstable assertion: assertEquals((-1), int0);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, false, true, 3571);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64(true);
      base64_0.decode("");
      Base64.isBase64((byte)33);
      Object object0 = new Object();
      base64_0.decode((Object) "lineSeperatoL must not contain base64 characters: [");
      base64_0.encode(byteArray0, (int) (byte)96, 1657);
      base64_0.readResults(byteArray0, (-1051), 0);
      byte[] byteArray1 = base64_0.decode((byte[]) null);
      assertNull(byteArray1);
      
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAAAAAAAAAA=", string0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)91;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte) (-1), (byte)0, (byte)4, (byte)50, (byte)91}, byteArray1);
      
      Base64 base64_0 = new Base64((byte)4);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)102;
      byteArray2[1] = (byte) (-21);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals(8, byteArray3.length);
      
      byteArray2[2] = (byte) (-1);
      byte[] byteArray4 = base64_0.decode("");
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      
      byteArray2[3] = (byte)50;
      byteArray2[4] = (byte)102;
      byteArray2[5] = (byte)50;
      byteArray2[6] = (byte)4;
      byteArray2[7] = (byte)102;
      String string0 = base64_0.encodeToString(byteArray2);
      //  // Unstable assertion: assertEquals("Zuv/\u0000\u0001MmYy\u0000\u0001BGY=\u0000\u0001", string0);
      
      int int0 = base64_0.readResults(byteArray0, 11, 11);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64.isBase64("b-(Ml)j");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_0 = new Base64((-2419), byteArray0);
      base64_0.encode(byteArray2);
      byte[] byteArray3 = new byte[2];
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.equals(base64_0);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray5 = new byte[1];
      Base64.decodeInteger(byteArray5);
      byte[] byteArray6 = new byte[1];
      byteArray6[0] = (byte)0;
      bigInteger0.intValueExact();
      Base64.encodeBase64URLSafeString(byteArray6);
      base64_0.encode(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray4, 3079, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3079
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64 base64_0 = new Base64(41);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)123;
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("UnRMkQAAew==\u0000\u0001", string0);
      
      Base64.isBase64((byte)116);
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64(379);
      base64_0.avail();
      base64_0.hasData();
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte)120;
      byteArray3[2] = (byte) (-1);
      Base64.isArrayByteBase64(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, true, 76);
      Base64.encodeBase64URLSafeString(byteArray2);
      Object object0 = base64_0.decode((Object) "UVVFOVBR");
      base64_0.encode(object0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray4, false, false, (-386));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -386
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray4);
      //  // Unstable assertion: assertEquals((short)17990, bigInteger0.shortValue());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)85, (byte)86, (byte)86, (byte)71, (byte)82, (byte)103, (byte)61, (byte)61, (byte)0, (byte)1}, byteArray4);
      //  // Unstable assertion: assertEquals(10, byteArray4.length);
      
      base64_1.encodeToString(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray1);
      base64_1.encodeToString(byteArray3);
      Base64 base64_2 = new Base64();
      boolean boolean1 = base64_2.hasData();
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = Base64.isBase64(byteArray3);
      boolean boolean3 = base64_1.isUrlSafe();
      //  // Unstable assertion: assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)40;
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray0, 2736, (-7));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (byte)123, (byte) (-45));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)0;
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)96;
      Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(2618);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.readResults(byteArray0, (byte)1, 0);
      Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray0, 0, 0);
      byte[] byteArray1 = base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (int) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (42) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 2847);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte) (-54);
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray3);
      base64_0.encodeToString(byteArray1);
      Base64 base64_1 = new Base64((byte)0);
      base64_1.decode("+,NORGhBPJ*$LZ{N");
      Base64.encodeBase64(byteArray2, false, false, (int) (byte)70);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte) (-54);
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray3);
      base64_0.encodeToString(byteArray1);
      Base64.isBase64(byteArray1);
      base64_0.encodeToString(byteArray1);
      base64_0.hasData();
      Base64.isBase64(byteArray4);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      Base64 base64_1 = new Base64();
      Base64 base64_2 = new Base64();
      base64_2.decode(byteArray0, 76, 0);
      base64_1.avail();
      base64_2.hasData();
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-948));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -948
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_1 = new Base64((byte)0, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_2 = new Base64((-1));
      base64_2.decode("");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger1.max(bigInteger0);
      base64_0.encode(byteArray1, (int) (byte)0, (-1));
      base64_1.decode(byteArray1, (-1), (int) (byte) (-1));
      base64_0.hasData();
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.discardWhitespace(byteArray2);
      Base64.encodeInteger(bigInteger1);
      Base64 base64_3 = new Base64((byte)0);
      base64_3.readResults(byteArray2, (-424), 76);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (int) (byte)0, (-4582));
      base64_0.avail();
      base64_0.hasData();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.mod(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 122);
      bigInteger0.doubleValue();
      bigInteger0.longValueExact();
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_1 = new Base64(64, byteArray3, false);
      Base64.toIntegerBytes(bigInteger0);
      base64_1.decode("7=#8q6X%");
      Base64.encodeBase64(byteArray4, false, true, 1908874353);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = null;
      byte[] byteArray1 = new byte[8];
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)0;
      byte byte2 = (byte)0;
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray1, (int) (byte)0, (int) (byte) (-1));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (byte)0, (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)34;
      byte byte0 = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)43;
      byte byte1 = (byte) (-11);
      byteArray0[6] = (byte) (-11);
      boolean boolean0 = true;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-7), byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [{(\uFFFD\"\uFFFD+\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)84;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      bigInteger2.toByteArray();
      bigInteger1.nextProbablePrime();
      bigInteger2.toByteArray();
      bigInteger2.divideAndRemainder(bigInteger1);
      bigInteger0.equals(bigInteger2);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.decodeInteger(byteArray2);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("AQ", string0);
      
      byte[] byteArray3 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray3, 43, 1120);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true, true);
      assertEquals(4, byteArray4.length);
      
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, (int) (byte)0, (-4582));
      base64_0.avail();
      base64_0.hasData();
      Base64.isArrayByteBase64(byteArray0);
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, false, true, 222);
      Base64.encodeBase64URLSafeString(byteArray0);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((-2071));
      base64_0.encodeToString(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_1 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, (-1), 2663);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-80);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-80);
      byte byte0 = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      Base64.isBase64(byteArray0);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(76, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\uFFFD\u0000=F\uFFFD\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)120;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64(379);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      Base64.encodeBase64(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, (-484));
      base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)84;
      byte[] byteArray1 = new byte[7];
      Base64.decodeBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64.decodeBase64("t");
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      bigInteger2.toByteArray();
      bigInteger1.nextProbablePrime();
      bigInteger2.toByteArray();
      bigInteger2.divideAndRemainder(bigInteger1);
      bigInteger0.equals(bigInteger2);
      bigInteger0.negate();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.encode(byteArray0);
      base64_0.decode("AQ");
      Base64.encodeBase64(byteArray0, false, false, 1096);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      base64_1.readResults(byteArray1, (-927), 22);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte) (-68);
      byteArray3[1] = (byte) (-82);
      byteArray3[2] = (byte) (-1);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64String(byteArray4);
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte) (-54);
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray3);
      Base64.encodeBase64(byteArray3, true);
      base64_0.encodeToString(byteArray1);
      Base64.isBase64(byteArray1);
      base64_0.encodeToString(byteArray1);
      base64_0.hasData();
      Base64.isBase64(byteArray4);
      Base64.encodeBase64(byteArray4, false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)1;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64((String) null);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64(false);
      base64_0.decode((String) null);
      base64_0.readResults((byte[]) null, 1, (-2043));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = base64_0.decode("k5x!r\"pOw|QLP&f;B");
      base64_0.decode((Object) "k5x!r\"pOw|QLP&f;B");
      Base64.isBase64((byte) (-1));
      base64_0.decode(byteArray1, 0, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)1;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64((String) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-4582));
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = (byte)0;
      Base64.isBase64((byte)0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, 2, 680);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64();
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)84;
      byteArray0[0] = (byte)84;
      byte byte1 = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte)1;
      byteArray0[3] = (byte)1;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1641, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [T\uFFFD\u0000\u0001]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte) (-80);
      Base64 base64_0 = new Base64((byte) (-80), byteArray1);
      Base64.encodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      try { 
        base64_0.encode((Object) ";aCGsC)JC+");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64(byteArray0, false, false);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
      base64_0.avail();
      base64_0.hasData();
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte) (-31));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -31
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte) (-110);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-73);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)37;
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64((-259), byteArray0);
      int int0 = (-19);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-76);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = base64_0.decode("");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode(byteArray1, (int) (byte) (-122), (int) (byte) (-76));
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      Base64.isBase64("");
      base64_0.readResults(byteArray0, (-1495), 1);
      base64_0.encode(byteArray2, 659, 66);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      int int0 = 0;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byte byte0 = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byte byte1 = (byte)38;
      byteArray0[2] = (byte)38;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte) (-1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)38, 395);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-13);
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
      assertEquals(30, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte)127;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode((Object) "AQAAAfslPoR_");
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Base64 base64_0 = new Base64(41);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)123;
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("UnRMkQAAew==\r\n", string0);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Base64.isBase64("b-(Ml)j");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byte byte0 = (byte)96;
      byteArray1[1] = (byte)96;
      byte byte1 = (byte)115;
      base64_0.encode(byteArray0);
      String string0 = "org.apache.commons.codec.EncoderException";
      base64_0.decode("org.apache.commons.codec.EncoderException");
      try { 
        base64_0.encode((Object) "b-(Ml)j");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2752), byteArray0);
      Base64.isBase64("p");
      base64_0.decode((Object) "[xYD7>");
      base64_0.encode((byte[]) null, (-2752), (-2752));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-126);
      byte byte0 = (byte) (-73);
      byteArray0[7] = (byte) (-73);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-845), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000R9\u0019\u0000(\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-23);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)65, (byte)70, (byte)111, (byte)65, (byte)65, (byte)79, (byte)107, (byte)61}, byteArray1);
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1);
      String string0 = null;
      MockRandom mockRandom0 = new MockRandom((-1383L));
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-20);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      Base64 base64_0 = new Base64(51, byteArray0);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte) (-20));
      base64_0.decode(byteArray0, (int) (byte)0, 0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-2978));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -2978
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
