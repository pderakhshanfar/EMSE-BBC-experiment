/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:08:15 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[98];
      Base64 base64_0 = new Base64(6, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = base64_0.decode("");
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.decodeBase64("");
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[98];
      Base64 base64_0 = new Base64(6, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeBase64(string0);
      Base64 base64_1 = new Base64(6);
      base64_1.avail();
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)49;
      byteArray2[1] = (byte) (-97);
      byteArray2[2] = (byte) (-60);
      byteArray2[3] = (byte)98;
      byteArray2[4] = (byte)91;
      byteArray2[5] = (byte)121;
      byteArray2[6] = (byte)80;
      byteArray2[7] = (byte)41;
      byteArray2[8] = (byte) (-126);
      base64_0.readResults(byteArray2, (byte)80, (-2206));
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[98];
      int int0 = 6;
      Base64 base64_0 = new Base64(6, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(string0);
      Base64 base64_1 = new Base64(6);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)38;
      byte byte0 = (byte)107;
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[98];
      Base64 base64_0 = new Base64(6, byteArray0, true);
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64String(byteArray1);
      String string0 = Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeBase64(string0);
      Base64 base64_1 = new Base64(6);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[67];
      Base64 base64_0 = new Base64(6, byteArray0, false);
      base64_0.encode(byteArray0, 6, 6);
      base64_0.encode(byteArray0, 6, 6);
      base64_0.encode(byteArray0, 1, 64);
      byte[] byteArray1 = Base64.decodeBase64("9`sa(2X/*=x982");
      Base64.decodeBase64("9`sa(2X/*=x982");
      base64_0.readResults(byteArray1, 1, 1);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[67];
      Base64 base64_0 = new Base64(6, byteArray0, true);
      base64_0.encode(byteArray0, 6, 6);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64 base64_0 = new Base64(6, byteArray0, true);
      base64_0.encode(byteArray0, 6, 6);
      Base64.isBase64("nf:;RI");
      int int0 = 29;
      base64_0.encode(byteArray0, 1, 29);
      Base64.decodeBase64("1D9o91O`uUAN_MH");
      base64_0.encode(byteArray0, 6, 49);
      base64_0.readResults(byteArray0, 1, 1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 29, 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 57
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      Base64 base64_0 = new Base64(6, byteArray0, true);
      byte[] byteArray1 = new byte[0];
      base64_0.encodeToString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("org.aacpe.commonscodecno]erException");
      byte[] byteArray3 = base64_0.encode(byteArray2);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      Base64 base64_1 = new Base64(6, byteArray0, true);
      base64_1.encode(byteArray4, 76, 252);
      Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      base64_1.readResults(byteArray4, 252, 6);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      Base64 base64_0 = new Base64(2, byteArray0, true);
      Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray0, 2, 2);
      base64_0.encode(byteArray0, (-1536), (-104));
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      Base64 base64_0 = new Base64(6, byteArray0, true);
      base64_0.encode(byteArray0, 6, 6);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)30;
      byteArray1[1] = (byte)0;
      base64_0.encode(byteArray1, 6, (-1536));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray2, 28, 28);
      base64_0.encode(byteArray1, (-2787), (-2787));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Base64 base64_0 = new Base64((-262));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)100;
      byteArray0[7] = (byte)2;
      base64_0.encode(byteArray0, 0, (int) (byte)2);
      base64_0.encode(byteArray0, (int) (byte) (-45), (int) (byte) (-45));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray1, 28, 28);
      base64_0.encode(byteArray0, 108, (-40));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      Base64 base64_0 = new Base64(6, byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64("org.aache.commonscodecnoderException");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray3);
      // Undeclared exception!
      base64_0.decode(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      Base64 base64_0 = new Base64(6, byteArray0, false);
      byte[] byteArray1 = Base64.decodeBase64("org.aache.commonscodecnoderException");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray3);
      // Undeclared exception!
      base64_0.decode(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      int int0 = 6;
      Base64 base64_0 = new Base64(6, byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      // Undeclared exception!
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      Base64 base64_0 = new Base64(6, byteArray0, false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      String string0 = base64_0.encodeToString(byteArray2);
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[57];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(19, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      Base64 base64_0 = new Base64(6, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("org.aache.commonscodecnoderException");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray3);
      base64_0.decode(string0);
      base64_0.decode(byteArray2, 6, (-1413));
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      Base64 base64_0 = new Base64(6, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("org.aache.commonscodecnoderException");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray3);
      base64_0.decode(string0);
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      Base64 base64_0 = new Base64(6, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("org.aache.commonscodecnoderException");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray3);
      String string0 = base64_0.encodeToString(byteArray3);
      // Undeclared exception!
      base64_0.decode(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(1514, byteArray1);
      base64_0.encode(byteArray2);
      Object object0 = base64_0.decode((Object) "Fa$A D*?yz7mUpB@");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      Base64 base64_0 = new Base64(6, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("org.aache.commonscodec.noderException");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      String string0 = base64_0.encodeToString(byteArray3);
      byte[] byteArray4 = base64_0.decode(string0);
      assertEquals(1321, byteArray4.length);
      assertEquals(1321, byteArray3.length);
      
      // Undeclared exception!
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)123;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(6, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 6, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.encode((byte[]) null, (-1), (-1));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 98, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-93);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.longValueExact();
      BigInteger bigInteger2 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 0, 85);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)43, (byte)103, (byte)69, (byte)61, (byte) (-6), (byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64(9, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)32;
      byteArray3[1] = (byte)96;
      byteArray3[2] = (byte)76;
      byteArray3[3] = (byte) (-95);
      byteArray3[4] = (byte)28;
      byteArray3[5] = (byte)18;
      byteArray3[6] = (byte) (-27);
      byteArray3[7] = (byte)49;
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      assertArrayEquals(new byte[] {(byte)96, (byte)76, (byte) (-95), (byte)28, (byte)18, (byte) (-27), (byte)49}, byteArray4);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.longValueExact();
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)118;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_1.decode(byteArray1, 9, 11);
      assertEquals(14, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.longValueExact();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.decode(byteArray1, 0, (int) (byte)118);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61, (byte) (-6), (byte)1}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      base64_0.avail();
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (-1), (-1));
      boolean boolean1 = base64_0.hasData();
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)19;
      byteArray1[2] = (byte) (-26);
      byteArray1[3] = (byte) (-103);
      byteArray1[4] = (byte)9;
      byteArray1[5] = (byte)13;
      byteArray1[6] = (byte)120;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte) (-84);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1, (byte)19, (byte) (-26), (byte) (-103), (byte)120, (byte)0, (byte) (-84)}, byteArray2);
      
      byte[] byteArray3 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)43, (byte)103, (byte)69, (byte)61}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(9, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.EncoderException");
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(76);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      byte[] byteArray3 = base64_0.encode(byteArray1);
      Base64.isArrayByteBase64(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      assertEquals(88, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(9, byteArray0, true);
      base64_0.decode(byteArray0);
      Base64 base64_1 = new Base64(76);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      base64_0.encode(byteArray0);
      base64_0.decode((Object) "");
      base64_0.encode(byteArray0, 64, (-2084));
      int int0 = base64_1.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, (int) (byte)10);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte) (-6), (byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      base64_0.encode((byte[]) null);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)43, (byte)103, (byte)69, (byte)61, (byte) (-6), (byte)1}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64.isBase64((byte) (-76));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray1, false);
      base64_0.decode("");
      Base64.isBase64((byte)61);
      Random.setNextRandom((byte) (-76));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)21;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[4];
      Base64.decodeInteger(byteArray2);
      Base64.isBase64(byteArray2);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.longValueExact();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)21);
      bigInteger0.signum();
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2, 1, 1982292598);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      Base64.encodeBase64(byteArray0, true);
      base64_0.encode((byte[]) null, 11, (-981));
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64.isBase64((byte) (-76));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger0.longValueExact();
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.toIntegerBytes(bigInteger1);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray2, 0, 3770);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      boolean boolean0 = base64_0.isUrlSafe();
      //  // Unstable assertion: assertFalse(boolean0);
      
      base64_0.decode((byte[]) null);
      Base64 base64_1 = new Base64(false);
      base64_1.decode((String) null);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)43, (byte)103, (byte)69, (byte)61, (byte) (-6), (byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      base64_0.decode("/S?CKWsC9");
      base64_0.decode((String) null);
      base64_0.isUrlSafe();
      Base64 base64_1 = new Base64();
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 64, 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      assertFalse(base64_0.isUrlSafe());
      
      Base64 base64_1 = new Base64((-2329), byteArray0, true);
      boolean boolean0 = base64_1.isUrlSafe();
      assertTrue(boolean0);
      
      byte[] byteArray1 = base64_1.decode((String) null);
      assertNull(byteArray1);
      
      boolean boolean1 = Base64.isBase64((byte) (-41));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-111);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger0.longValueExact();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-111), (byte)0}, byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray3);
      Base64 base64_1 = new Base64(64, byteArray4, false);
      byte[] byteArray6 = Base64.CHUNK_SEPARATOR;
      Base64 base64_2 = new Base64(40);
      byte[] byteArray7 = base64_2.decode("encodeInteger called with null parameter");
      //  // Unstable assertion: assertEquals(27, byteArray7.length);
      
      Base64.encodeBase64(byteArray5, true, true, 8192);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)112, (byte)70, (byte)81, (byte)81, (byte)61, (byte)61, (byte) (-6), (byte)1}, byteArray3);
      //  // Unstable assertion: assertEquals(14, byteArray5.length);
      
      Base64.decodeBase64(byteArray4);
      boolean boolean1 = base64_1.isUrlSafe();
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64.isBase64("b-(Ml)j");
      Base64 base64_0 = new Base64();
      base64_0.decode("b-(Ml)j");
      base64_0.decode((String) null);
      Base64 base64_1 = new Base64((-121));
      base64_1.isUrlSafe();
      Base64 base64_2 = new Base64();
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64.isBase64("R0{9bGeFZCgG");
      Base64 base64_0 = new Base64(3, byteArray0, false);
      int int0 = base64_0.readResults(byteArray0, (byte)0, (-2687));
      assertEquals(0, int0);
      
      base64_0.decode((Object) "[xYD7>");
      Base64 base64_1 = new Base64(10, byteArray0, true);
      byte[] byteArray1 = base64_1.encode(byteArray0);
      assertEquals(30, byteArray1.length);
      
      base64_1.encode(byteArray0, 395, (int) (byte)0);
      assertTrue(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.decode("/S?CKWsC9");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-3), (byte)32, (byte) (-118), (byte)90, (byte) (-64), (byte) (-67)}, byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode((String) null);
      //  // Unstable assertion: assertNull(byteArray2);
      
      boolean boolean0 = base64_0.isUrlSafe();
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_1 = new Base64();
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      
      Base64 base64_2 = new Base64();
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = base64_0.decode("uDW79HXw$$;CK2XCU");
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1);
      int int0 = base64_1.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_0 = new Base64(false);
      base64_0.encode((byte[]) null, 11, (-981));
      byte[] byteArray2 = base64_0.encode((byte[]) null);
      assertNull(byteArray2);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-76));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray1, false);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray2, (int) (byte) (-76), 0);
      Base64.decodeInteger(byteArray3);
      Base64 base64_1 = new Base64(62, byteArray2, true);
      base64_1.decode("");
      boolean boolean1 = Base64.isBase64((byte)1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.decode("/S?CKWsC9");
      byte[] byteArray2 = base64_0.decode((String) null);
      assertNull(byteArray2);
      
      base64_0.isUrlSafe();
      byte[] byteArray3 = base64_0.decode("N2=fQlKWi65np0xm");
      Base64.isBase64((byte)64);
      base64_0.readResults(byteArray1, 40, 40);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)32, (byte) (-118), (byte)90, (byte) (-64), (byte) (-67)}, byteArray1);
      
      Base64.encodeBase64((byte[]) null, false, false);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertEquals(4, byteArray4.length);
      assertArrayEquals(new byte[] {(byte)78, (byte)119, (byte)61, (byte)61}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeInteger(bigInteger0);
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("", string0);
      
      byte[] byteArray2 = Base64.decodeBase64("");
      assertEquals(0, byteArray2.length);
      
      Base64 base64_0 = new Base64((-709), (byte[]) null, false);
      byte[] byteArray3 = base64_0.decode("UTF-16LE");
      assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126, (byte) (-41), (byte) (-94), (byte) (-60)}, byteArray3);
      assertEquals(6, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray4);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)21;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.isBase64(byteArray1);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.ZERO;
      bigInteger2.longValueExact();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_2 = new Base64();
      base64_2.decode(byteArray3, 0, (int) (byte)118);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-6), (byte)1}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      base64_0.decode(byteArray0, (int) (byte)0, (-1));
      base64_0.decode(byteArray0, (int) (byte)83, 148);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)1}, byteArray1);
      
      int int0 = Base64.PEM_CHUNK_SIZE;
      Object object0 = base64_0.decode((Object) " %-llW`\"jz~vfyc");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.decode(object1);
      Object object3 = base64_0.decode(object2);
      assertNotSame(object3, object1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte byte0 = (byte) (-76);
      Base64.isBase64((byte) (-76));
      byte byte1 = (byte)1;
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Base64 base64_0 = new Base64();
      Base64.decodeBase64((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      Base64 base64_1 = new Base64(64, byteArray0, false);
      Base64.encodeBase64((byte[]) null, false, true, (-2345));
      bigInteger0.signum();
      base64_0.encode((byte[]) null, (int) (byte)2, 0);
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.decodeInteger(byteArray1);
      base64_1.decode(") than the specified maxium size of ");
      Base64.isBase64((byte)2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Base64.isBase64((byte) (-76));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray1, false);
      base64_0.decode("");
      base64_0.decode(byteArray2);
      base64_0.decode("");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-65);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)23;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[4] = (byte)100;
      byte byte1 = (byte)0;
      byteArray0[5] = (byte)0;
      Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64.isBase64("b-(Ml)j");
      Base64 base64_0 = new Base64();
      base64_0.decode("/S?CKWsC9");
      base64_0.decode((String) null);
      base64_0.isUrlSafe();
      Base64.isBase64((byte)42);
      base64_0.avail();
      Base64.encodeBase64((byte[]) null, true, true, 4776);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Base64 base64_0 = new Base64(1, byteArray0);
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.decode((Object) "p");
      base64_0.encode((byte[]) null, 1, 81);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-80);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(76, byteArray1, false);
      base64_1.encode(byteArray0, 0, (-1));
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-80);
      byteArray2[1] = (byte) (-80);
      byteArray2[2] = (byte) (-80);
      byteArray2[3] = (byte) (-80);
      byteArray2[4] = (byte) (-80);
      byteArray2[5] = (byte) (-80);
      byteArray2[6] = (byte) (-80);
      byteArray2[7] = (byte) (-80);
      byteArray2[8] = (byte) (-80);
      // Undeclared exception!
      try { 
        base64_1.readResults(byteArray2, 917, (-855));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Base64.isBase64((byte) (-76));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((byte) (-76));
      bigInteger0.signum();
      base64_0.encode(byteArray2, (int) (byte) (-76), (int) (byte) (-76));
      base64_0.decode(byteArray0, (int) (byte) (-76), (int) (byte) (-76));
      Base64.isBase64(byteArray2);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte) (-76);
      byteArray4[1] = (byte) (-76);
      byteArray4[2] = (byte) (-76);
      bigInteger0.shortValueExact();
      byteArray4[3] = (byte) (-76);
      byteArray4[4] = (byte) (-76);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray5 = Base64.encodeBase64(byteArray3);
      Base64.encodeBase64String(byteArray3);
      Base64.encodeBase64Chunked(byteArray5);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = (byte) (-76);
      Base64.isBase64((byte) (-76));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray1, false);
      Base64.encodeBase64(byteArray0, true, false, 76);
      bigInteger0.signum();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte) (-76), (int) (byte) (-76));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 669);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 0, (int) (byte)1);
      base64_0.readResults(byteArray0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray1, (byte) (-80), (byte) (-80));
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_0.hasData();
      Base64.isBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray1, (byte) (-80), (byte) (-80));
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray1, false);
      bigInteger0.signum();
      base64_0.encode(byteArray2, (int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte byte0 = (byte) (-76);
      Base64.isBase64((byte) (-76));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-76);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray1, false);
      bigInteger0.signum();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte) (-76), (int) (byte) (-76));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-85);
      Base64.decodeInteger(byteArray0);
      byteArray0[0] = (byte) (-85);
      byte byte1 = (byte)1;
      byteArray0[1] = (byte)1;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, true, false, 5);
      byteArray0[3] = (byte)83;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64(41);
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)76;
      byte[] byteArray1 = base64_0.decode("/S?CKWsC9");
      base64_0.decode((String) null);
      boolean boolean0 = base64_0.isUrlSafe();
      Base64.isBase64((byte)70);
      base64_0.avail();
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, 76);
      //  // Unstable assertion: assertEquals(12, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("/SCKWsC9\u0000\u0001", string0);
      
      boolean boolean1 = Base64.isBase64(byteArray4);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2752), byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
      base64_0.encodeToString(byteArray1);
      Base64 base64_2 = new Base64();
      base64_2.decode("Input array too big, the output array would be bigger (");
      Object object0 = new Object();
      Object object1 = new Object();
      Base64.encodeBase64(byteArray1, false, false, 76);
      Base64.isBase64((byte)124);
      base64_2.decode(byteArray0, 103, (-2752));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)74);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.readResults(byteArray0, (-422), 45);
      base64_0.decode("*}cd/CfLh.Q1M[3_");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64("]Gav!XFE=");
      base64_0.decode("");
      base64_0.decode("");
      byte[] byteArray1 = base64_0.decode("Input array too big, the output array would be bigger (");
      base64_0.isUrlSafe();
      Base64.isBase64((byte)1);
      base64_0.avail();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, (int) (byte)1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (46) than the specified maxium size of 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "b-(Ml)j";
      Base64.isBase64("b-(Ml)j");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      Base64 base64_1 = new Base64((byte)0, byteArray0);
      byte[] byteArray2 = new byte[3];
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      Base64.discardWhitespace(byteArray2);
      Object object0 = base64_0.decode((Object) "b-(Ml)j");
      base64_0.encode(object0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = new BigInteger(byteArray3);
      Base64.toIntegerBytes(bigInteger2);
      base64_1.decode((Object) "");
      Object object1 = new Object();
      try { 
        base64_1.decode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      boolean boolean0 = Base64.isBase64("R0{9bGeFZCgG");
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(3, byteArray0, false);
      base64_0.readResults(byteArray0, (byte)0, (-2687));
      base64_0.decode((Object) "[xYD7>");
      Base64 base64_1 = new Base64(10, byteArray0, false);
      base64_1.encode(byteArray0, 395, (int) (byte)0);
      assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.decodeInteger(byteArray3);
      base64_0.encodeToString(byteArray2);
      Base64.isBase64(byteArray2);
      base64_0.encodeToString(byteArray3);
      base64_0.hasData();
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)124;
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 53, 79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)120;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1053);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)0;
      Base64.decodeInteger(byteArray1);
      base64_0.encodeToString(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte) (-1);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64((byte[]) null, false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray1, (byte) (-80), (byte) (-80));
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64Chunked(byteArray3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(8168, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64("|S&hF`,axy <m N-");
      Base64.discardWhitespace(byteArray1);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      base64_0.encode(byteArray0);
      byteArray0[6] = (byte)84;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      bigInteger2.toByteArray();
      bigInteger1.nextProbablePrime();
      bigInteger2.toByteArray();
      bigInteger2.divideAndRemainder(bigInteger1);
      bigInteger0.equals(bigInteger2);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray3, 43, 1120);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true, true);
      Base64.encodeBase64(byteArray4, false);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[4] = (byte) (-31);
      base64_0.decode(byteArray0);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
      base64_0.avail();
      base64_0.hasData();
      Base64.isArrayByteBase64(byteArray0);
      Base64.isBase64((byte) (-84));
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte) (-31));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -31
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)29;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray1, (int) (byte) (-31), (int) (byte)0);
      base64_0.avail();
      base64_0.hasData();
      Base64.isArrayByteBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-545));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -545
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)38;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[5];
      Base64.decodeBase64("'GBB");
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte) (-1);
      Base64.decodeBase64(byteArray0);
      base64_0.decode(": ");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte) (-80);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)1;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.decodeBase64((String) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte) (-54);
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray3);
      base64_0.encodeToString(byteArray1);
      Base64.isBase64(byteArray1);
      base64_0.encodeToString(byteArray1);
      base64_0.hasData();
      Base64.isBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-4582));
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)96;
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = (byte)0;
      Base64.isBase64((byte)0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, 2, 680);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64();
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)84;
      byteArray0[0] = (byte)84;
      byte byte1 = (byte) (-106);
      byteArray0[1] = (byte) (-106);
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte)1;
      byteArray0[3] = (byte)1;
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1641, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [T\uFFFD\u0000\u0001]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte) (-80);
      Base64 base64_0 = new Base64((byte) (-80), byteArray1);
      Base64.encodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      try { 
        base64_0.encode((Object) ";aCGsC)JC+");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64(byteArray0, false, false);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)120;
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)0;
      base64_0.decode(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
      base64_0.avail();
      base64_0.hasData();
      Base64.isArrayByteBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (int) (byte) (-31));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -31
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte) (-110);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-73);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)37;
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64((-259), byteArray0);
      int int0 = (-19);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-76);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = base64_0.decode("");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode(byteArray1, (int) (byte) (-122), (int) (byte) (-76));
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      Base64.isBase64("");
      base64_0.readResults(byteArray0, (-1495), 1);
      base64_0.encode(byteArray2, 659, 66);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      int int0 = 0;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byte byte0 = (byte) (-111);
      byteArray0[1] = (byte) (-111);
      byte byte1 = (byte)38;
      byteArray0[2] = (byte)38;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte) (-1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)38, 395);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-13);
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      Base64 base64_0 = new Base64(0, byteArray0, true);
      byte[] byteArray1 = base64_0.decode("Parameter supplied to Base64 encode is not a byte[]");
      assertEquals(30, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte)127;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode((Object) "AQAAAfslPoR_");
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Base64 base64_0 = new Base64(41);
      byte[] byteArray0 = new byte[7];
      Base64.decodeInteger(byteArray0);
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)123;
      base64_0.encodeToString(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Base64.isBase64("b-(Ml)j");
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byte byte0 = (byte)96;
      byteArray1[1] = (byte)96;
      byte byte1 = (byte)115;
      base64_0.encode(byteArray0);
      String string0 = "org.apache.commons.codec.EncoderException";
      base64_0.decode("org.apache.commons.codec.EncoderException");
      try { 
        base64_0.encode((Object) "b-(Ml)j");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2752), byteArray0);
      boolean boolean0 = Base64.isBase64("p");
      assertTrue(boolean0);
      
      base64_0.decode((Object) "[xYD7>");
      base64_0.encode((byte[]) null, (-2752), (-2752));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-126);
      byte byte0 = (byte) (-73);
      byteArray0[7] = (byte) (-73);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-845), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000R9\u0019\u0000(\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-23);
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1);
      String string0 = null;
      MockRandom mockRandom0 = new MockRandom((-1383L));
      // Undeclared exception!
      try { 
        BigInteger.probablePrime(0, mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)84;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      bigInteger2.toByteArray();
      bigInteger1.nextProbablePrime();
      bigInteger2.toByteArray();
      bigInteger2.divideAndRemainder(bigInteger1);
      bigInteger0.equals(bigInteger2);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.decodeInteger(byteArray2);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("AQ", string0);
      
      byte[] byteArray3 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray3, 43, 1120);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true, true);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)13, (byte)10}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-20);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      Base64 base64_0 = new Base64(51, byteArray0);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte) (-20));
      base64_0.decode(byteArray0, (int) (byte)0, 0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-2978));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -2978
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
