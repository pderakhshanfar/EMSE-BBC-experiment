/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:17:33 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(8176);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(0);
      // Undeclared exception!
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(8176);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(8088);
      bigInteger0.shortValueExact();
      bigInteger0.multiply(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((short)10);
      base64_0.decode(byteArray0, (int) (short)10, 102);
      base64_0.encode(byteArray0, (-2148), (-2148));
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(0);
      bigInteger1.shortValueExact();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, (int) (short)1, 95);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)33;
      base64_0.encode(byteArray2, (-2429), 939);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shiftLeft(8088);
      BigInteger bigInteger1 = bigInteger0.pow(8088);
      bigInteger0.shortValueExact();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray0);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)14);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 45, 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(8140);
      bigInteger0.shortValueExact();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, (int) (short)10, 103);
      base64_0.encode(byteArray0, (-2111), (-2111));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.divideAndRemainder(bigInteger0);
      BigInteger bigInteger2 = bigInteger0.pow(8140);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.divideAndRemainder(bigInteger0);
      int int0 = 8120;
      BigInteger bigInteger2 = bigInteger0.pow(8120);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.divideAndRemainder(bigInteger0);
      int int0 = 8120;
      BigInteger bigInteger2 = bigInteger0.pow(8120);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.divideAndRemainder(bigInteger0);
      BigInteger bigInteger2 = bigInteger0.pow(8120);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      // Undeclared exception!
      base64_0.encode(byteArray1, 47, 8120);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertEquals(37, byteArray0.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      MockRandom mockRandom0 = new MockRandom(28L);
      BigInteger bigInteger1 = BigInteger.probablePrime(1348, mockRandom0);
      bigInteger0.divideAndRemainder(bigInteger1);
      bigInteger1.pow(50);
      Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(250, byteArray0);
      Object object0 = base64_0.decode((Object) "#6x}}A##5]_V");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(8165);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(338);
      Base64.toIntegerBytes(bigInteger1);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8165);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 0, 61);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)75, (byte)48, (byte)61}, byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(8165);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)85;
      byteArray3[1] = (byte) (-59);
      Base64.encodeBase64(byteArray2, false);
      assertEquals(54, byteArray1.length);
      
      byteArray3[2] = (byte) (-49);
      byteArray3[3] = (byte)102;
      int int0 = base64_0.readResults(byteArray0, 1, (byte)85);
      assertEquals(0, int0);
      
      byteArray3[4] = (byte) (-1);
      byteArray3[5] = (byte)83;
      byteArray3[6] = (byte)1;
      base64_0.encode(byteArray3, 3412, (int) (byte) (-49));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)7;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)81, (byte)99, (byte)61, (byte)0, (byte) (-83)}, byteArray1);
      
      base64_0.avail();
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      //  // Unstable assertion: assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-86);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)113, (byte)103, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      Base64.encodeBase64((byte[]) null, false, true);
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)10;
      Base64.isBase64(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte)10;
      byteArray2[3] = (byte)10;
      byteArray2[4] = (byte)10;
      byteArray2[5] = (byte)10;
      byteArray2[6] = (byte)10;
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)10, (int) (byte)10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64(byteArray1, true, true, (int) (byte)102);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0, false, false, 8192);
      Base64.decodeBase64("A7'qwFgsC2ii");
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)21;
      byteArray1[4] = (byte)49;
      byteArray1[5] = (byte)38;
      byteArray1[2] = (byte)123;
      byteArray1[7] = (byte)10;
      byteArray1[8] = (byte)1;
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 1, 530);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.decodeBase64("N|@J8B\"Q|4na-E");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("UTF-16BE");
      Base64.encodeBase64Chunked(byteArray1);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true, true, 8180);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (int) (byte)4, (int) (byte)4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("eZpW`hs:CRbfR");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(11);
      Base64.encodeBase64URLSafe(byteArray1);
      int int0 = 205;
      Base64.isBase64("lineSeperator mu9t not contain base64 characters: [");
      Base64.encodeBase64(byteArray0, false, false, 64);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 205);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("BtCku.]Nnj//S%");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("x;#Sw&!w&LE<");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.shortValueExact();
      Base64.decodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(1603, (byte[]) null);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte) (-121), 318);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)30;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeInteger(byteArray1);
      Random.setNextRandom((-24));
      Base64 base64_0 = new Base64((byte)1);
      base64_0.decode("");
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray1, true, true);
      Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray0);
      Base64.isBase64((byte)124);
      Base64.isBase64((byte)117);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray0, (int) (byte)4, (int) (byte)4);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray1, (int) (byte)105, (int) (byte)0);
      Base64.encodeBase64(byteArray1, false);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray0 = Base64.decodeBase64("*");
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64 base64_0 = new Base64(37);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.decode((Object) "*");
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray3);
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64.isBase64((byte)61);
      Base64 base64_0 = new Base64();
      base64_0.avail();
      Base64.isBase64((byte) (-96));
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, true, false, 88);
      base64_0.decode(byteArray1, (int) (byte)0, 18);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray0, (-971), (int) (byte)0);
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.decode(object0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("BtCku.]Nnj//S%");
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64("aV7@/");
      Base64.isBase64("lghq?6,`");
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 68, (-18));
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)97;
      byteArray2[1] = (byte)97;
      byteArray2[2] = (byte)97;
      byteArray2[3] = (byte) (-45);
      byteArray2[5] = (byte)0;
      base64_0.encode(byteArray2, (int) (byte)97, (int) (byte) (-45));
      Base64.encodeBase64(byteArray0, false);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, true, false, 88);
      base64_0.decode(byteArray1, 1, 18);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray0, (-971), (int) (byte)0);
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.decode(object0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("BtCku.]Nnj//S%");
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64("Hp=/9}5[Y");
      Base64 base64_1 = new Base64((-479));
      base64_1.encode(byteArray2);
      Base64.encodeBase64Chunked(byteArray1);
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("x;#Sw&!w&LE<");
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 8165);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      base64_0.avail();
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64((-325), byteArray0, true);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64("[R<PoK>");
      base64_0.decode(byteArray0);
      Base64.isBase64("[R<PoK>");
      Base64.encodeBase64(byteArray0, true);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(55);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)102;
      byteArray4[1] = (byte) (-73);
      byteArray4[2] = (byte)1;
      byteArray4[3] = (byte) (-47);
      byteArray4[4] = (byte) (-115);
      base64_0.encodeToString(byteArray4);
      Base64.encodeBase64(byteArray0, false, true);
      Base64.isBase64(byteArray1);
      Base64.isBase64("ZrcB0Y0=\r\n");
      Base64.decodeBase64("org.apache.commons.codec.binary.StringUtils");
      base64_0.hasData();
      base64_0.encode(byteArray3, 718, (int) (byte) (-73));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(55);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray2);
      BigInteger bigInteger2 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte) (-19);
      byteArray3[2] = (byte)45;
      byteArray3[3] = (byte)65;
      byteArray3[4] = (byte) (-92);
      byteArray3[5] = (byte)114;
      byteArray3[6] = (byte)110;
      byteArray3[7] = (byte) (-22);
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "x;#Sw&!w&LE<";
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      Base64.encodeBase64(byteArray0, false, false, 64);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 205);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(55);
      Base64.isBase64("UTF-16");
      Base64 base64_1 = new Base64(0, byteArray0);
      base64_1.encodeToString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64(byteArray1);
      Base64.isBase64("Cg");
      byte[] byteArray2 = base64_0.decode(byteArray1);
      base64_1.hasData();
      base64_0.encode(byteArray2, (int) (byte)123, (-1459));
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64((-351), byteArray0, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.isBase64("[R<PoK>");
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.isBase64("[R<PoK>");
      Base64 base64_2 = new Base64(64, byteArray0);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)123;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      base64_2.encodeToString(byteArray3);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.isBase64(byteArray3);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.max(bigInteger1);
      Base64.isBase64((byte)0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false);
      Base64.discardWhitespace(byteArray4);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, false);
      Base64.decodeInteger(byteArray5);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-9);
      base64_0.encode(byteArray0, 1593, (-521));
      base64_0.decode(byteArray0, 0, (-3047));
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (byte)0, (byte) (-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("x;#Sw&!w&LE<");
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8165);
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-33);
      Base64.decodeInteger(byteArray0);
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)105;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, (int) (byte)105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.pow(3);
      bigInteger1.multiply(bigInteger0);
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (int) (byte) (-114), 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      boolean boolean0 = false;
      base64_0.decode(byteArray0, (-2510), 0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      String string0 = "lineSeperator must not contain base64 characters: [";
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      base64_0.encode(byteArray1, (-2510), (-572));
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64((-351), byteArray0, false);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64("[R<PoK>");
      base64_0.decode(byteArray1);
      Base64.isBase64("[R<PoK>");
      Base64 base64_2 = new Base64(64, byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)123;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      base64_2.encodeToString(byteArray2);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.isBase64(byteArray2);
      Base64.isBase64("");
      byte[] byteArray3 = base64_0.decode(byteArray2);
      base64_0.hasData();
      base64_2.encode(byteArray0, 948, (int) (byte)0);
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = "/=m$r:Y5H~V7";
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("/=m$r:Y5H~V7");
      base64_0.decode("Input array too big, the output array would be bigger (");
      byte byte0 = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      byteArray0[0] = (byte)0;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      try { 
        base64_0.encode((Object) "/=m$r:Y5H~V7");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64();
      int int0 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.decodeBase64(",");
      int int1 = 1263;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 1263);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64(byteArray0);
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64(byteArray0, false);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Object object0 = base64_0.decode((Object) "oT[7~Izm)CLC{V>");
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
      byteArray0[7] = (byte) (-9);
      base64_0.encode(byteArray0, 1593, (-521));
      base64_0.decode(byteArray0, 0, (-3047));
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.discardWhitespace(byteArray0);
      base64_0.hasData();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      base64_0.encode(byteArray1, 40, 40);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Base64 base64_0 = new Base64(1279, byteArray0);
      byte[] byteArray1 = new byte[2];
      Base64.decodeInteger(byteArray0);
      byteArray1[0] = (byte) (-121);
      byteArray1[1] = (byte)32;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.isBase64("");
      base64_0.decode("");
      Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64((-325), byteArray0, true);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64("[R<PoK>");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.isBase64("[R<PoK>");
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray1, true, false);
      Base64.isBase64(byteArray0);
      Base64.isBase64("!J>xJ:]='^i<)Q9t");
      byte[] byteArray2 = base64_0.decode(byteArray0);
      base64_0.hasData();
      base64_0.encode(byteArray2, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-114);
      base64_0.decode("DZ!HUa");
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)14;
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.pow(694);
      bigInteger0.multiply(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray1, 49, (-654));
      byte[] byteArray2 = base64_0.decode("8&9;F1f|mu3GaW,V2z");
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64URLSafe(byteArray3);
      Object object0 = base64_0.decode((Object) "DZ!HUa");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      base64_0.decode(byteArray0, 0, (int) (byte) (-39));
      byteArray0[0] = (byte) (-39);
      base64_0.encode(byteArray0, 0, (-1));
      int int0 = (-411);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, (-411));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -411
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = "/=m$r:Y5H~V7";
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("/=m$r:Y5H~V7");
      base64_0.decode("Input array too big, the output array would be bigger (");
      byte byte0 = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      byteArray0[0] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      try { 
        base64_0.encode((Object) "/=m$r:Y5H~V7");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64.isBase64((byte)9);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)9;
      Base64.decodeInteger(byteArray0);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)44;
      byteArray0[0] = (byte)44;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)61;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1762), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [,\u0000=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)0;
      Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)117);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      Base64 base64_0 = new Base64((-1139), byteArray0, true);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true);
      Base64.isBase64((byte)87);
      Base64 base64_0 = new Base64();
      base64_0.decode("");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)121;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(469, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0012\u0000y]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1);
      base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 7);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      int int0 = 0;
      bigInteger0.setBit(0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64(92, (byte[]) null);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)124;
      byteArray0[3] = (byte)124;
      byte byte2 = (byte) (-117);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)43;
      byte byte3 = (byte)1;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byte byte4 = (byte)115;
      byteArray0[8] = (byte)115;
      base64_0.readResults(byteArray0, (-404), 99);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.abs();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(55);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1, true);
      Base64.isArrayByteBase64(byteArray1);
      Base64.decodeInteger(byteArray2);
      Base64.decodeBase64("+DLb6QH@");
      base64_0.readResults(byteArray0, 103, 103);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      base64_0.encode((byte[]) null, 0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encodeToString((byte[]) null);
      base64_0.decode((String) null);
      base64_0.encode((byte[]) null, 0, (-95));
      Base64.decodeBase64("c'N?QG:[S:Zm+L7");
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("x;#Sw&!w&LE<");
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64("lineSeperator must not contain base64 characters: [");
      Base64.encodeBase64(byteArray0, false, false, 64);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 205);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      Base64.encodeBase64String(byteArray0);
      base64_0.decode((byte[]) null);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-106);
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)96;
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null);
      String string0 = "An3NUr/5s\"l\\Gj]";
      byte[] byteArray0 = base64_0.decode("An3NUr/5s\"lGj]");
      Base64.encodeBase64((byte[]) null, false, true, 64);
      base64_0.hasData();
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode((byte[]) null);
      try { 
        base64_0.encode((Object) "An3NUr/5s\"lGj]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-32);
      Base64.encodeBase64String(byteArray0);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)56;
      Base64.isBase64("+OAAAAAA");
      base64_0.readResults(byteArray0, 0, (byte)56);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, false, false);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-47);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray0);
      base64_0.decode("DjnY6h~SP");
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.readResults(byteArray1, (-638), (byte) (-1));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      base64_0.readResults(byteArray0, (byte) (-1), 826);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      base64_0.decode(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)1;
      Base64.encodeBase64Chunked(byteArray1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64(111);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64(byteArray0, false);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-9);
      base64_0.encode(byteArray0, 1593, (-521));
      base64_0.decode(byteArray0, 0, (-3047));
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-4);
      byteArray0[0] = (byte) (-4);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64((byte) (-4));
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64 base64_0 = new Base64(54, byteArray1);
      base64_0.avail();
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-4);
      byteArray2[1] = (byte) (-4);
      byteArray2[2] = (byte) (-4);
      byteArray2[3] = (byte) (-4);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[0];
      Base64.decodeBase64(byteArray1);
      byte[] byteArray2 = new byte[0];
      Base64.decodeBase64(byteArray2);
      base64_0.decode((byte[]) null);
      base64_0.encode((byte[]) null, 0, 0);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true, 64);
      Object object0 = base64_0.decode((Object) "xIr].p3xBO");
      base64_0.decode(object0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      Base64.toIntegerBytes(bigInteger2);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      Base64 base64_0 = new Base64(1279, byteArray0);
      byte[] byteArray1 = new byte[2];
      Base64.decodeInteger(byteArray0);
      byteArray1[0] = (byte) (-121);
      byteArray1[1] = (byte)32;
      Base64.decodeBase64(byteArray1);
      Base64.isBase64("");
      base64_0.decode("");
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-7);
      Base64 base64_0 = new Base64(1, byteArray0, false);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.bitCount();
      Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.multiply(bigInteger1);
      BigInteger bigInteger2 = bigInteger0.shiftLeft(38);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[3];
      BigInteger.valueOf((byte)40);
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-7);
      byteArray1[2] = (byte)63;
      bigInteger0.or(bigInteger2);
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray0, true);
      base64_0.decode((String) null);
      base64_0.hasData();
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      try { 
        base64_0.encode((Object) "lineSeperator must not contain base64 characters: [");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("'dkZx}*C1tw.l>");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)88;
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("WAAA", string0);
      
      base64_0.encode(byteArray0, (int) (byte)88, 1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)88;
      byteArray2[2] = (byte)107;
      base64_0.encode(byteArray2, (int) (byte)0, (int) (byte)88);
      base64_0.decode((Object) "WAAA");
      byteArray1[1] = (byte)122;
      base64_0.encode(byteArray1);
      byteArray1[2] = (byte)123;
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      assertEquals(1, byteArray3.length);
      
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      boolean boolean0 = Base64.isBase64("WAAA");
      assertTrue(boolean0);
      
      byte[] byteArray4 = Base64.decodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)118, (byte)70, (byte)113, (byte)11, (byte)91, (byte)112}, byteArray0);
      assertEquals(3, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("$#9=");
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      assertSame(byteArray2, byteArray1);
      
      Object object0 = base64_0.decode((Object) "$#9=");
      Object object1 = base64_0.decode(object0);
      assertSame(object1, object0);
  }
}
