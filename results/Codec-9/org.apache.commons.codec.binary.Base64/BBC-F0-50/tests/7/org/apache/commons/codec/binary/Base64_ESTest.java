/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 31 08:30:12 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.NoSuchElementException;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)100;
      byteArray0[1] = (byte)100;
      byte byte1 = (byte)81;
      byteArray0[2] = (byte)81;
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("5x5(wQwvH|Roh.%");
      base64_0.encode(byteArray0, (int) (byte)81, (int) (byte)81);
      base64_0.isUrlSafe();
      byte[] byteArray1 = new byte[9];
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-7);
      Base64.encodeBase64(byteArray0, true, false);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      base64_0.readResults(byteArray0, (byte)19, (byte) (-78));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      base64_0.hasData();
      Base64 base64_1 = new Base64(0);
      Object object0 = base64_1.encode((Object) "n-[5SkPERYc");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.encode(object1);
      try { 
        base64_0.encode(object2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64(232, byteArray0, false);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte)110;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)110;
      byteArray1[4] = (byte)110;
      byteArray1[5] = (byte)110;
      byteArray1[6] = (byte)110;
      byteArray1[7] = (byte)0;
      base64_0.decode(byteArray1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte)0;
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.decode("");
      Base64.encodeBase64String(byteArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      int int0 = 1;
      Base64 base64_0 = new Base64(1, byteArray0, false);
      String string0 = "";
      byte[] byteArray3 = base64_0.decode(byteArray0);
      base64_0.decode("");
      Base64.encodeBase64(byteArray2, false, false);
      base64_0.decode(byteArray1, (-458), 2270);
      Base64.decodeBase64(string0);
      base64_0.decode(byteArray3);
      base64_0.avail();
      Object object0 = null;
      base64_0.encode(object0);
      byte[] byteArray4 = new byte[2];
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isBase64((byte) (-108));
      Base64.decodeBase64(byteArray1);
      String string0 = "9sR";
      byte[] byteArray2 = Base64.decodeBase64("9sR");
      Base64 base64_0 = new Base64((byte)106, byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.hasData();
      Base64.isBase64(string0);
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-94);
      Base64 base64_0 = new Base64(1918, byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = base64_0.decode("B,3V'ZY");
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.avail();
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.isUrlSafe();
      Base64.isBase64(byteArray2);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)103;
      Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(4090, byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64String(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Zg]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Base64 base64_0 = new Base64(2295, (byte[]) null);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte) (-25);
      byteArray0[4] = (byte) (-25);
      Base64 base64_0 = new Base64(101, byteArray0);
      int int0 = (-962);
      int int1 = 2741;
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, boolean0, boolean0);
      BigInteger bigInteger0 = null;
      try {  
      bigInteger0 = BigInteger.TEN;
      } catch(MockIllegalArgumentException e) {}
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null);
      base64_0.readResults((byte[]) null, 0, (-3765));
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.isBase64("+$LuP|f-Qdil^7Ua");
      Base64.isBase64((byte) (-81));
      Base64.decodeBase64("");
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      base64_0.readResults((byte[]) null, 1353, 0);
      Base64.decodeInteger((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("#t\"}");
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes(bigInteger0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.decode("/Dy55a)-CKm");
      base64_0.decode("/Dy55a)-CKm");
      base64_0.decode((Object) "/Dy55a)-CKm");
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Base64.toIntegerBytes((BigInteger) null);
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encodeToString(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Base64.isBase64("p{:)U#gqa");
      Base64 base64_0 = new Base64((-3664));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)1;
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64 base64_0 = new Base64(1227, (byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = (-1633);
      Base64 base64_0 = new Base64((-1633));
      String string0 = "";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)0;
      base64_0.encode(byteArray0);
      base64_0.decode((Object) null);
      base64_0.decode(string0);
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)10;
      byteArray1[0] = byte0;
      base64_0.encode(byteArray1, (int) byte0, int0);
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, false, false);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, false);
      int int0 = (-1419);
      Base64 base64_0 = new Base64((-1419), (byte[]) null);
      base64_0.encode((byte[]) null);
      Object object0 = base64_0.decode((Object) null);
      base64_0.encode(object0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64Chunked(byteArray1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-51);
      byte byte0 = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)43;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(0, byteArray1, true);
      base64_0.encode(byteArray0, (int) byteArray0[0], (int) byte0);
      Base64.encodeBase64(byteArray0);
      base64_0.decode(byteArray0);
      int int0 = (-3795);
      int int1 = (-607);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Base64 base64_0 = new Base64(3947);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      Base64.isBase64("%hFY\"");
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-70);
      base64_0.decode(byteArray0, 71, (-579));
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-87);
      base64_0.encodeToString(byteArray0);
      String string0 = "X&X&YW$g";
      byte[] byteArray1 = Base64.decodeBase64("X&X&YW$g");
      byte[] byteArray2 = Base64.decodeBase64((String) null);
      base64_0.encodeToString(byteArray1);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = Base64.decodeInteger((byte[]) null);
      bigInteger0.longValue();
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray2, boolean0);
      byte[] byteArray3 = new byte[3];
      byte byte0 = (byte)1;
      Base64.encodeBase64Chunked(byteArray2);
      byteArray3[0] = byte0;
      byte byte1 = (byte)0;
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-85);
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      base64_0.decode(byteArray2, (int) (byte)0, (int) (byte)0);
      base64_0.readResults(byteArray1, 0, (byte)0);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64(1);
      base64_0.encodeToString(byteArray1);
      base64_0.decode((Object) "QU1jQQ==");
      base64_0.isUrlSafe();
      byte[] byteArray2 = new byte[5];
      byte[] byteArray3 = base64_0.decode(byteArray1);
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-57);
      byteArray2[4] = (byte) (-57);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray4, false, false);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64(byteArray4, false, true, (int) (byte) (-57));
      Base64.encodeBase64(byteArray2);
      base64_0.isUrlSafe();
      base64_0.avail();
      Base64.isBase64(byteArray3);
      Base64.decodeInteger(byteArray5);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -57
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      base64_0.readResults(byteArray0, 472, 942);
      Base64.decodeBase64((String) null);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      Base64.encodeBase64(byteArray0, false, true);
      byte byte0 = (byte)18;
      byteArray0[2] = (byte)18;
      Base64.isBase64((String) null);
      byte byte1 = (byte)0;
      byteArray0[3] = byte1;
      int int0 = (-961);
      base64_0.encode(byteArray0, int0, (int) byte0);
      byte byte2 = (byte)0;
      byteArray0[4] = byte2;
      byte byte3 = (byte) (-72);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)1, byteArray2);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray2);
      base64_0.decode((Object) "dvtVFe:xy");
      base64_0.readResults(byteArray1, (byte)1, 400);
      Base64.isArrayByteBase64(byteArray3);
      Base64.isBase64("");
      base64_0.decode((Object) "dvtVFe:xy");
      Base64.decodeBase64("dvtVFe:xy");
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray4, true, false, 0);
      base64_0.decode("");
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0, true);
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      base64_0.readResults(byteArray1, 0, 0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      bigInteger0.intValueExact();
      base64_0.encode(byteArray1);
      bigInteger0.intValue();
      base64_0.readResults(byteArray0, 1676, 0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      base64_0.avail();
      base64_0.decode((Object) "QUE");
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      Base64.encodeBase64(byteArray4, true);
      bigInteger0.nextProbablePrime();
      Base64.encodeBase64(byteArray2, true, false);
      base64_0.avail();
      Base64.isBase64(byteArray3);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64.isBase64(":X$BQfL<+ug?");
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.subtract(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeInteger(bigInteger1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64.isBase64("p{:)U#gqa");
      byte[] byteArray0 = Base64.decodeBase64("p{:)U#gqa");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)38;
      byteArray1[1] = (byte) (-87);
      byteArray1[2] = (byte)63;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.abs();
      bigInteger0.subtract(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((byte)63, byteArray1, true);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.discardWhitespace(byteArray2);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64((-355));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)33;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)119;
      byteArray1[1] = (byte)119;
      byteArray1[2] = (byte) (-66);
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-66);
      byteArray1[5] = (byte)33;
      byteArray1[6] = (byte)119;
      byteArray1[7] = (byte) (-66);
      base64_0.decode(byteArray1, (int) (byte)119, (-355));
      base64_0.readResults(byteArray0, 123, 48);
      Base64.isBase64((byte)73);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-94);
      Base64 base64_0 = new Base64(1905, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      String string0 = "B,3V'ZY";
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)60);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.decodeBase64("9sR");
      Base64 base64_1 = new Base64((byte) (-108), byteArray1, false);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_1.hasData();
      Base64.isBase64(string0);
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)81;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray1, false, true);
      Base64.isBase64("+$LuP|f-Qdil^7Ua");
      Base64.isBase64((byte)100);
      byte[] byteArray2 = Base64.decodeBase64("5-w@V|nn(cDBnw");
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64String((byte[]) null);
      base64_0.readResults(byteArray0, (byte)0, 3432);
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64.encodeBase64String((byte[]) null);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, (byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.encode((byte[]) null, 0, 0);
      base64_0.readResults((byte[]) null, 0, 0);
      Base64.isBase64((String) null);
      int int1 = 4;
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.decode(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((String) null);
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null);
      base64_0.readResults((byte[]) null, 0, (-3765));
      base64_0.encode((byte[]) null, 0, 114);
      Base64.decodeBase64(byteArray0);
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, boolean0, boolean0);
      byte byte0 = (byte) (-70);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("t*SU&lQ");
      base64_0.encode(byteArray0, 0, (int) (byte)100);
      base64_0.isUrlSafe();
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false, 3494);
      Base64.discardWhitespace(byteArray3);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)46;
      Base64.encodeBase64(byteArray0, false, true, 1802);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)81;
      Base64.encodeBase64(byteArray0, true, false, (int) (byte)100);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.isBase64("#");
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      base64_0.encode(byteArray0);
      base64_0.readResults(byteArray0, (byte) (-70), 68);
      Base64.isBase64("+-A$d,'@SY&H");
      Base64 base64_1 = new Base64(981);
      base64_0.readResults(byteArray0, (byte)0, 68);
      base64_0.encode(byteArray1, 68, (-6449));
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafe(byteArray0);
      base64_1.encodeToString(byteArray0);
      base64_1.hasData();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64(0, (byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      base64_0.encode((byte[]) null, 0, 0);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false, 685);
      base64_0.decode((byte[]) null, 41, 0);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.isUrlSafe();
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(78, byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64((byte) (-108));
      Base64.decodeBase64(byteArray0);
      Base64.decodeBase64("B,3V'ZY");
      Base64 base64_1 = new Base64(64, byteArray0, false);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte) (-108));
      Base64.isBase64("B,3V'ZY");
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)60;
      byteArray3[1] = (byte) (-108);
      Base64.encodeBase64(byteArray3);
      base64_1.encode(byteArray2, 64, (-3290));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.decodeBase64(byteArray0);
      Base64.decodeBase64("9sR");
      Base64.isBase64("9sR");
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.decodeBase64(byteArray1);
      Base64.decodeBase64("9sR");
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(8184, byteArray0, false);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64(byteArray0, false, false, 8184);
      base64_0.encode(byteArray0, 8184, (-2814));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64.isBase64("p{:)U#gqa");
      Base64 base64_0 = new Base64((-3664));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.hasData();
      Base64 base64_1 = new Base64(35);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray4 = base64_0.decode("n-[5SkPERYc");
      base64_1.encode((byte[]) null);
      base64_0.avail();
      Base64.encodeBase64(byteArray4, true, false);
      base64_0.isUrlSafe();
      Base64.isBase64(byteArray2);
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64.isBase64(":X$BQfL<+ug?");
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.subtract(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger2);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-26);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      Base64.decodeBase64(byteArray2);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64((byte) (-26), byteArray0);
      base64_1.encodeToString(byteArray1);
      Base64.isArrayByteBase64(byteArray4);
      int int0 = 2771;
      base64_1.readResults(byteArray3, int0, byteArray2[0]);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      Base64 base64_0 = new Base64(8184, byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, (int) (byte)10);
      Base64.isBase64((byte)10);
      Base64.decodeBase64((byte[]) null);
      Base64.decodeBase64("9sR");
      Base64 base64_1 = new Base64(8, byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_1.encode(byteArray1);
      Base64.discardWhitespace((byte[]) null);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray2, (int) (byte)0, (-2814));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64.isBase64("p{:)U#gqa");
      Base64.decodeBase64("p{:)U#gqa");
      Base64.encodeBase64((byte[]) null, false);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64();
      base64_1.encode((byte[]) null, (-760), (-1));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64.isBase64("p{:)U#gqa");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-76);
      byteArray0[8] = (byte)6;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      Base64.isBase64("G");
      Base64.isBase64((byte)3);
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray3);
      base64_0.decode(byteArray2, (int) (byte)3, (int) (byte)26);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64.isBase64("");
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)33;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.hasData();
      Base64 base64_1 = new Base64(873);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeBase64(byteArray0);
      base64_1.decode("");
      base64_0.encode((byte[]) null);
      base64_1.avail();
      Base64.encodeBase64((byte[]) null, true, true);
      base64_0.isUrlSafe();
      Base64.isBase64((byte[]) null);
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte byte0 = (byte)10;
      Base64 base64_0 = new Base64(2045222521, byteArray0, false);
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 76);
      byte byte1 = (byte)111;
      Base64.isBase64((byte)111);
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray2 = Base64.decodeBase64("9sR");
      int int0 = 8;
      Base64 base64_1 = new Base64((-510), byteArray0, false);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)10;
      byte byte2 = (byte)41;
      byteArray3[1] = (byte)41;
      byteArray3[2] = (byte)10;
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray3);
      base64_1.encode(byteArray2);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
      Base64 base64_2 = new Base64(int0, byteArray1, boolean0);
      Base64.decodeBase64(byteArray5);
      base64_2.hasData();
      byte[] byteArray6 = new byte[8];
      byte byte3 = (byte) (-1);
      byteArray6[0] = byte3;
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-3664));
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)43;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.hasData();
      Base64 base64_1 = new Base64(123);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = base64_1.decode("n-[5SkPERYc");
      base64_0.encode(byteArray0);
      base64_1.avail();
      Object object0 = base64_1.decode((Object) "n-[5SkPERYc");
      base64_1.decode(object0);
      base64_1.decode("n-[5SkPERYc");
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true, false);
      base64_1.isUrlSafe();
      Base64.isBase64(byteArray2);
      Base64.decodeInteger(byteArray3);
      base64_0.encodeToString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(1227, (byte[]) null);
      base64_0.decode((byte[]) null, 8186, 1227);
      Base64.encodeBase64URLSafe(byteArray0);
      byte byte0 = (byte) (-59);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64.isBase64("qAm-C");
      Base64 base64_0 = new Base64((-3664));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.hasData();
      Base64 base64_1 = new Base64(35);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false);
      Base64 base64_2 = new Base64(true);
      Base64.encodeBase64URLSafeString(byteArray4);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.isBase64("G");
      Base64.isBase64((byte)123);
      Base64.decodeBase64("VTFaR1FsRlZSa0pSVkRCdlFVRTlQU2dB");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray0);
      base64_2.decode(byteArray2, 52, 64);
      base64_2.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64.isBase64("8");
      byte[] byteArray0 = Base64.decodeBase64("US-ASCII");
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64(byteArray0, false, true, 942);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-1);
      Base64 base64_0 = new Base64(1905, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-94);
      byteArray1[3] = (byte)1;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64((byte)0);
      Base64.decodeBase64(byteArray3);
      Base64.decodeBase64("9sR");
      Base64 base64_1 = new Base64(1666, byteArray1, false);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray0);
      Base64.discardWhitespace(byteArray3);
      Base64 base64_2 = new Base64((byte) (-1));
      base64_2.hasData();
      base64_1.hasData();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      Base64.decodeInteger(byteArray0);
      Base64.isBase64((byte)3);
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64String(byteArray2);
      base64_0.decode(byteArray1, (int) (byte)0, 145);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, 0, (int) (byte)100);
      byte byte0 = (byte)1;
      base64_0.decode(byteArray0, (int) byte0, (int) byte0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.encodeBase64(byteArray0, false, false, 3276);
      Base64.isBase64(byteArray0);
      BigInteger bigInteger2 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger2);
      bigInteger2.abs();
      Base64 base64_0 = new Base64(8);
      Object object0 = base64_0.decode((Object) "R;l-K nR2+)-OkmKLX");
      base64_0.encode(object0);
      Base64.encodeInteger(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(104, byteArray0, true);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64(byteArray0, true, true);
      Base64.isBase64("5");
      Base64.isBase64((byte)61);
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((byte[]) null);
      String string0 = ") than the specified maxium size of ";
      byte[] byteArray0 = base64_0.decode(") than the specified maxium size of ");
      Base64.encodeInteger((BigInteger) null);
      boolean boolean0 = false;
      Base64.isBase64(string0);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(base64_0.MIME_CHUNK_SIZE, byteArray0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)33;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)33, byteArray2);
      Base64.decodeBase64("");
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-76);
      byteArray3[1] = (byte) (-21);
      byteArray3[2] = (byte)6;
      byteArray3[3] = (byte)6;
      byteArray3[4] = (byte) (-76);
      Base64.encodeBase64(byteArray3, true, false);
      Base64.isBase64("encodeInteger called with null parameter");
      Base64.decodeBase64("");
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray1, 1, (int) (byte) (-21));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(3941, byteArray0);
      base64_0.decode((String) null);
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8);
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64("@(/ 8t&|=");
      Base64.encodeBase64(byteArray1, true, false);
      base64_0.avail();
      base64_0.decode(byteArray1, 0, 8168);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("");
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64((-1158), byteArray1, false);
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64.isBase64("p{:)U#gqa");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)69;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-76);
      byteArray0[8] = (byte)6;
      byte[] byteArray1 = Base64.decodeBase64("p{:)U#gqa");
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.encode(byteArray0, (int) (byte)3, 71);
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.decodeBase64(")^xH85D#|yykTX/'S");
      base64_0.encode(byteArray0, (-1171), (-1171));
      base64_0.decode(byteArray0, (-1171), (-1171));
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64((byte) (-84));
      base64_0.readResults(byteArray1, (-1171), 17);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Base64.isBase64("K'WFOCQkjyoa(XT");
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(519, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)41;
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte)97;
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte)53;
      byteArray1[5] = (byte) (-66);
      byteArray1[6] = (byte)117;
      byteArray1[7] = (byte)91;
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-89);
      byteArray2[1] = (byte)95;
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)33;
      byteArray2[4] = (byte)9;
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "Parameter supplied to Base64 decde is not a byte[] or a Sgring";
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decde is not a byte[] or a Sgring");
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 0, 0);
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decde is not a byte[] or a Sgring");
      Base64.isBase64("rdsc}:S7vT=ZV");
      Base64.encodeBase64String((byte[]) null);
      base64_0.encode(byteArray0, 31, 31);
      base64_0.decode((Object) string0);
      Base64.encodeBase64(byteArray1);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (-1171), (-1171));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decde is not a byte[] or a Sgring");
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64(byteArray2);
      Base64 base64_1 = new Base64(19);
      base64_1.decode(byteArray1, 19, 1);
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8);
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64("@(/ 8t&|=");
      Base64.encodeBase64(byteArray1, true, false);
      base64_0.avail();
      base64_0.decode(byteArray1, 0, 79);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 8);
      Base64 base64_0 = new Base64(8);
      Base64.decodeBase64("@(/ 8t&|=");
      Base64.isBase64("");
      Base64.encodeBase64(byteArray1, true, false);
      base64_0.avail();
      base64_0.decode(byteArray1, 0, 79);
      Base64.isBase64(byteArray1);
      base64_0.encode(byteArray1, 79, (-3881));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decde is not a byte[] or a Sgring");
      byte[] byteArray1 = Base64.decodeBase64("Parameter supplied to Base64 decde is not a byte[] or a Sgring");
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      int int0 = 19;
      Base64 base64_0 = new Base64(19);
      base64_0.encode(byteArray3);
      base64_0.encode((Object) "Parameter supplied to Base64 decde is not a byte[] or a Sgring");
      int int1 = 112;
      base64_0.decode(byteArray1);
      base64_0.decode(byteArray0, int0, int1);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray3);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decde is not a byte[] or a Sgring");
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray2, 0, 76);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(938, mockRandom0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2608, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.avail();
      base64_0.decode(byteArray1, 1, 2608);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)81;
      Base64.isBase64(byteArray0);
      BigInteger bigInteger0 = null;
      Base64.toIntegerBytes((BigInteger) null);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      boolean boolean0 = true;
      int int0 = (-225);
      Base64.encodeBase64(byteArray0, boolean0, boolean0, int0);
      int int1 = 83;
      Random.setNextRandom(int1);
      Base64 base64_0 = new Base64(byteArray0[2], byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64URLSafeString(byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isArrayByteBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-72);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte) (-72));
      Base64 base64_0 = new Base64((byte)10, byteArray1, true);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)5;
      byteArray2[1] = (byte) (-72);
      byteArray2[2] = (byte)18;
      byteArray2[3] = (byte) (-53);
      byteArray2[4] = (byte) (-72);
      byteArray2[5] = (byte) (-53);
      byteArray2[6] = (byte)10;
      byteArray2[7] = (byte)79;
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8080, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8080, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.avail();
      mockRandom0.doubles(910L);
      base64_0.decode(byteArray0, 0, 66);
      base64_0.encode(byteArray1, 8080, (-1));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8085, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8085, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.avail();
      base64_0.decode(byteArray1, 0, 701);
      Base64 base64_1 = new Base64((-3061));
      base64_1.encode(byteArray1, (-1), (-3061));
      base64_1.readResults(byteArray0, 112, 701);
      base64_0.readResults(byteArray1, 0, 112);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-25);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)10);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8062, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(8062);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8080, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      mockRandom0.doubles(910L);
      base64_0.decode(byteArray0, 76, 66);
      base64_0.encode(byteArray1, 8080, (-1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(1073741824, mockRandom0);
      Base64.encodeInteger(bigInteger1);
      boolean boolean0 = true;
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8068, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8068, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 8068);
      BigInteger bigInteger2 = new BigInteger(byteArray1);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = base64_1.encode(byteArray1);
      Base64.encodeInteger(bigInteger2);
      byte byte0 = (byte)109;
      Base64.encodeBase64(byteArray1, false, false);
      Base64.isBase64((byte)109);
      base64_1.encode(byteArray2);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = byte0;
      byteArray3[1] = byte0;
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)54;
      byte byte0 = (byte) (-71);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)13;
      byte byte1 = (byte) (-112);
      byteArray0[7] = (byte) (-112);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)88);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = byte0;
      byteArray1[1] = byte1;
      byteArray1[2] = byte0;
      int int0 = 1;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, int0, (int) byteArray0[7]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8080, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(8080);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.gcd(bigInteger1);
      base64_0.decode(byteArray0, 76, 47);
      base64_0.encode(byteArray0, (-2309), (-2309));
  }
}
