/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 03 16:27:12 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-49);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64(byteArray0, false, false, (int) (byte)14);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "j");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      base64_0.decode(byteArray0, (int) (byte)43, 0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger called wth null paameter");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, 13, 6);
      base64_0.readResults(byteArray0, 21, 21);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray1, true, false);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1318, byteArray0, false);
      Object object0 = base64_0.decode((Object) "ahYH571Ql_dkuR");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-113);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)43;
      byteArray0[5] = (byte)55;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Base64.decodeBase64((String) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)50;
      Base64 base64_0 = new Base64(0);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger called wth null paameter");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 301);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(2931, byteArray2);
      base64_0.decode(byteArray1, 13, 6);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64(122);
      base64_0.encode(byteArray0, (int) (byte) (-1), (-1552));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 1924, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 308, 109);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1789, byteArray0);
      byte[] byteArray1 = new byte[3];
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 76, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-110), byteArray0);
      byte[] byteArray1 = base64_0.decode("");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (-1), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Cg==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(83);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger called wth null paameter");
      Base64.encodeBase64(byteArray0, true, true, 254);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, true, 4);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, false, false, 14);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Base64 base64_0 = new Base64(115, (byte[]) null, true);
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)90;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u0000\u0000Z\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64.isBase64((byte)108);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64.isBase64((byte)123);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Base64.isBase64((byte) (-116));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger called wth null paameter");
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(2931, byteArray1);
      base64_0.decode(byteArray0, 13, 6);
      base64_0.decode(byteArray1, (-2858), (-2858));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 308);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray2, 0, 20);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeIteger called wth null paametur");
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 13, 6);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 308);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray2, 0, 20);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.decode((byte[]) null, (-1), (-1631));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)80, (int) (byte) (-113));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, (int) (byte)52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64 base64_0 = new Base64(12);
      byte[] byteArray0 = new byte[8];
      Base64 base64_1 = new Base64(8192, byteArray0, true);
      byte[] byteArray1 = base64_1.decode("Input array too big, the output array would be bigger (");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 20, 60);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      base64_0.encode(byteArray0, (-934), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("enc!deIntjger call-d wth null paameter");
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray0, 0, (-1329));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger called wth null paameter");
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray1, 13, 6);
      base64_0.encode(byteArray0, 13, (-4410));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger called wth null paameter");
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 13, 5);
      base64_0.encode(byteArray0, 6, (-1));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger called wth null paameter");
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 13, 6);
      base64_0.encode(byteArray0, 13, (-4410));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger qaqld wthChull paameter");
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 13, 6);
      base64_0.encode(byteArray0, 13, (-4410));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.decodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, false);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      try { 
        base64_0.encode((Object) "]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)32;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)9;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(4, byteArray0, true);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(1318, byteArray0, false);
      Object object0 = base64_0.decode((Object) "ahYH571Ql_dkuR");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2401), byteArray0, false);
      Object object0 = base64_0.decode((Object) "+23tPgJcE/YiKLz");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64.isBase64("j");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Base64.isBase64((byte)61);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(6);
      byte[] byteArray0 = new byte[6];
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64(115, (byte[]) null, true);
      base64_0.decode("Input array too big, the output array would be bigger (");
      base64_0.encode((byte[]) null, 2049, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.readResults(byteArray1, 0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((-434), byteArray0, false);
      base64_0.readResults(byteArray0, (-434), 99);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64((byte) (-116), byteArray0, false);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64(122);
      base64_0.encode(byteArray0, (int) (byte) (-1), (-1552));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2558), byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQ==\r
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Base64 base64_0 = new Base64(2789, (byte[]) null);
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("enc!deIntjger call-d wth null paameter");
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64.isBase64("encodeInteger called wth null paameter");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger qaqld wthChull paameter");
      Base64 base64_0 = new Base64(true);
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(483, mockRandom0);
      Base64.encodeInteger(bigInteger0);
  }
}
