/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:04:49 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 6);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("wg|eOI[^jDsia&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64((-1924), byteArray0, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = base64_0.decode("Qd1H`{=");
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-35), (byte)71}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-2955L));
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(32, 76, mockRandom0);
      assertEquals((byte)11, bigInteger0.byteValue());
      assertEquals((short)11, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((byte)11, bigInteger0.byteValue());
      assertEquals((short)11, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)103, (byte)65, (byte)65, (byte)65, (byte)67, (byte)119, (byte)61, (byte)61}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64String(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, false);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)104;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)24, bigInteger0.byteValue());
      assertEquals((short) (-31208), bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)104, (byte)104, (byte)104, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[6] = (byte)76;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)44, bigInteger0.byteValue());
      assertEquals((short)44, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)76, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)76}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)95;
      byteArray0[3] = (byte)71;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte) (-4), bigInteger0.byteValue());
      assertEquals((short)252, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)0, (byte)71, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)104);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(37, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(37, byteArray0.length);
      assertEquals(54, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(37, byteArray0.length);
      assertEquals(54, byteArray1.length);
      assertEquals(37, byteArray2.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = BigInteger.probablePrime(3056, mockRandom0);
      assertEquals((short)24335, bigInteger0.shortValue());
      assertEquals((byte)15, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals((short)24335, bigInteger0.shortValue());
      assertEquals((byte)15, bigInteger0.byteValue());
      assertEquals(512, byteArray0.length);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals((short)24335, bigInteger0.shortValue());
      assertEquals((byte)15, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(512, byteArray0.length);
      assertEquals(382, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied7t# Base64adecode is not a byte[] or a String");
      assertEquals(38, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(38, byteArray0.length);
      assertEquals(52, byteArray1.length);
      assertNotNull(byteArray1);
      
      Base64 base64_1 = new Base64(true);
      assertTrue(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_1);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(38, byteArray0.length);
      assertEquals(52, byteArray1.length);
      assertEquals(74, byteArray2.length);
      assertNotNull(byteArray2);
      
      base64_1.decode(byteArray2, 64, 64);
      assertFalse(base64_0.isUrlSafe());
      assertTrue(base64_1.isUrlSafe());
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(38, byteArray0.length);
      assertEquals(52, byteArray1.length);
      assertEquals(74, byteArray2.length);
      
      // Undeclared exception!
      try { 
        base64_1.readResults((byte[]) null, (-1), 76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = base64_0.decode("");
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Base64 base64_1 = new Base64(4340, byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(base64_1);
      
      // Undeclared exception!
      try { 
        base64_1.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-1825), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((byte)8, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = base64_0.decode(") than the specified maxium size of ");
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(21, byteArray1.length);
      assertNotNull(byteArray1);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 457, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1528, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [h]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1669, byteArray0, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      String string0 = base64_0.encodeToString(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Base64 base64_0 = new Base64(992, (byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 2702);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, (-261));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, true, (int) (byte)1);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1669, byteArray0, false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(base64_0);
      
      byte[] byteArray1 = Base64.decodeBase64("");
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)104);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)62);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-19));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(52, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      
      Base64 base64_1 = new Base64(32, byteArray2, true);
      //  // Unstable assertion: assertTrue(base64_1.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertNotNull(base64_1);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, false);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(52, byteArray1.length);
      //  // Unstable assertion: assertEquals(74, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      
      base64_1.decode(byteArray3, 64, 64);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertTrue(base64_1.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(52, byteArray1.length);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertEquals(74, byteArray3.length);
      
      int int0 = base64_1.avail();
      //  // Unstable assertion: assertTrue(base64_1.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = new byte[7];
      base64_0.decode(byteArray0, (int) (byte)76, 0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(8, byteArray0, true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(base64_0);
      
      base64_0.decode(byteArray0, 0, (-1));
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)104);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(37, byteArray0.length);
      assertNotNull(byteArray0);
      
      base64_0.decode(byteArray0, 1, 1968526677);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(37, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64(10, byteArray1, true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 10, 76);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertNotNull(base64_0);
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      base64_0.encode(byteArray0, 45, (-3776));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-428), 2492);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertNotNull(base64_0);
      
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(37, byteArray0.length);
      assertNotNull(byteArray0);
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.isUrlSafe());
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertNotNull(base64_1);
      
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 32, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(3056, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(684, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null, true);
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_0 = new Base64(false);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64(179);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      assertSame(object1, object0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)9, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("dI!cgIzHMnaZR");
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, true, (-1686));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -1686
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64(5525);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(179);
      Object object0 = base64_0.decode((Object) "");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("aLGgaImi4K@\"F=x");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("0c9FBi}F_!<PgA&7G");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 1, (int) (byte)94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)104);
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(32, byteArray3, true);
      base64_1.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64URLSafeString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64(179);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray0, 179, (-1903));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1669, byteArray0, false);
      byte[] byteArray1 = base64_0.decode("$dRVD:E\"Qj:");
      assertArrayEquals(new byte[] {(byte)117, (byte)21, (byte)67, (byte)17, (byte)8}, byteArray1);
      assertEquals(5, byteArray1.length);
      
      base64_0.encode(byteArray0, 76, 1669);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1669, byteArray0, false);
      byte[] byteArray1 = base64_0.decode("wg|eOI[^jDsia&");
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)7, (byte) (-114), (byte)34, (byte)48, (byte) (-20), (byte) (-119)}, byteArray1);
      
      int int0 = base64_0.readResults(byteArray0, (-2632), 1656);
      assertEquals((-1), int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[2];
      base64_0.readResults(byteArray0, (byte) (-19), 1690);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)104);
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(32, byteArray2, true);
      base64_1.decode(byteArray1, 1, 1968526677);
      base64_1.hasData();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-19), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [V\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64((-2816), (byte[]) null, true);
      byte[] byteArray0 = new byte[7];
      base64_0.encode(byteArray0, (-347), (int) (byte)0);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)104);
      byte[] byteArray0 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(50, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("I P`8P_bU}8");
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte) (-1), (byte)15, (byte) (-3), (byte) (-75), (byte)60}, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("aLGgaImi4K@\"F=x");
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("aLGgaImi4KE=", string0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Base64 base64_0 = new Base64(368);
      byte[] byteArray0 = base64_0.decode((String) null);
      assertNull(byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }
}
