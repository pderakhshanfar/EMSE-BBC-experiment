/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:17:20 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2383);
      BigInteger bigInteger0 = BigInteger.probablePrime(2383, mockRandom0);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      Base64.encodeBase64(byteArray4);
      Object object0 = new Object();
      base64_0.encode(byteArray4, 64, 64);
      byte[] byteArray5 = base64_0.encode(byteArray4);
      base64_0.encode(byteArray5);
      byte[] byteArray6 = new byte[9];
      byteArray6[0] = (byte) (-19);
      byteArray6[1] = (byte)35;
      byteArray6[2] = (byte)5;
      byteArray6[3] = (byte)0;
      byteArray6[4] = (byte)0;
      byteArray6[6] = (byte)1;
      byteArray6[7] = (byte)18;
      byteArray6[8] = (byte)29;
      base64_0.encode(byteArray6, 287, (int) (byte)5);
      base64_0.decode(byteArray5);
      assertEquals(760, byteArray4.length);
      assertEquals(412, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, 1367);
      assertEquals(28, byteArray1.length);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-54);
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)0;
      int int0 = base64_0.readResults(byteArray2, 1, (byte)1);
      assertArrayEquals(new byte[] {(byte) (-54), (byte)0, (byte)0}, byteArray2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.readResults((byte[]) null, 84, 84);
      byte[] byteArray0 = new byte[1];
      base64_0.encode(byteArray0, (-1211), (-1211));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 93, 84);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, (int) (byte)54);
      base64_0.encode(byteArray0, 8192, (int) (byte)54);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64 base64_1 = new Base64(118, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-91);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)73;
      byteArray1[5] = (byte)40;
      byteArray1[6] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.decodeBase64("c|yyZtww-w");
      Base64.encodeBase64(byteArray1, true, true, 26);
      Base64 base64_0 = new Base64(26);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, (int) (byte)54);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (byte)54, (byte)54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)13);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 342);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2352);
      BigInteger bigInteger0 = BigInteger.probablePrime(2352, mockRandom0);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, (int) (byte)54);
      assertEquals(16, byteArray1.length);
      
      int int0 = base64_0.avail();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-80);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)61);
      Base64 base64_1 = new Base64(false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-80);
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte) (-31);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)96;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)26;
      Base64 base64_0 = new Base64(16, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)32;
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertEquals(10, byteArray2.length);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      base64_0.decode(byteArray0);
      byteArray0[0] = (byte)9;
      base64_0.encode(byteArray0, (-1), 3);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("");
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray1, 1, (int) (byte)54);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.decodeBase64("Parameter suppliedKto8Basew4 decodeVis not a byte[] or a String");
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.encodeToString(byteArray2);
      Base64.decodeBase64("UGFyYW1ldGVyc3VwcGxpZWRLdG84QmFzZXc0ZGVjb2RlVmlzbm90YWJ5dGVvcmFTdHJpbg0K\r\n");
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)9;
      byteArray3[1] = (byte) (-117);
      byteArray3[2] = (byte)1;
      Base64.discardWhitespace(byteArray3);
      Random.setNextRandom((-3687));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64(1869);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64((byte)9);
      base64_1.encodeToString(byteArray0);
      base64_0.readResults(byteArray1, 1869, 2981);
      base64_0.decode(byteArray0, (-1275), 76);
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64 base64_0 = new Base64(1869);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray0, 1869, (-1));
      Base64 base64_1 = new Base64();
      base64_0.hasData();
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      Base64.isBase64("!{!B5[x.07Uy>");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.remainder(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)126);
      String string0 = "v5] Us*";
      Base64 base64_0 = new Base64((byte)13, byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)9;
      Base64 base64_0 = new Base64(8184, byteArray0, true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-311), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [{H2\u0001\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)86;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 1, (int) (byte)54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64.isBase64((byte) (-87));
      Base64 base64_0 = new Base64(605);
      base64_0.isUrlSafe();
      Base64 base64_1 = new Base64();
      base64_1.hasData();
      Base64.isBase64("~7v2bc9xcW");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.clearBit(8165);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "encodeInteger called with null parameter";
      Base64.decodeBase64("encodeInteger called with null parameter");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValueExact();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-222), byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      Object object0 = base64_0.decode((Object) "<boB5E{YS4LMb}>sY");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true, true, 76);
      byte[] byteArray1 = new byte[5];
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)58;
      byteArray2[1] = (byte)73;
      byteArray2[2] = (byte)76;
      byteArray2[3] = (byte)38;
      byteArray2[4] = (byte) (-19);
      byteArray2[5] = (byte)65;
      byteArray2[6] = (byte) (-18);
      byteArray2[7] = (byte) (-69);
      byteArray2[8] = (byte) (-79);
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      base64_0.decode(byteArray4);
      Base64.decodeBase64("EJ/l[k)mKo4Zn,2Ip");
      Base64.decodeInteger(byteArray1);
      base64_1.encode(byteArray3, 1, (-4196));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.decodeBase64("*}SeZ]2#d@$5jLZW");
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)64;
      byteArray3[1] = (byte)60;
      byteArray3[0] = (byte)97;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte) (-78);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 1, (int) (byte)97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger called with null parameter");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValueExact();
      bigInteger0.signum();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(0, byteArray1);
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray0, true, false);
      byte[] byteArray2 = new byte[3];
      bigInteger0.toByteArray();
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.max(bigInteger1);
      bigInteger0.add(bigInteger0);
      int int0 = Base64.PEM_CHUNK_SIZE;
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      Object object0 = new Object();
      Base64.encodeBase64String(byteArray1);
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValueExact();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = false;
      int int0 = 1388;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 64);
      Base64 base64_1 = new Base64();
      base64_1.encodeToString(byteArray2);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)96;
      Base64 base64_1 = new Base64((-1822), byteArray0, false);
      base64_1.readResults(byteArray0, 965, 64);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64((byte[]) null, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)96;
      byteArray1[1] = (byte)1;
      Base64.decodeBase64(byteArray1);
      base64_1.decode((byte[]) null);
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("encodeInteger called with null parameter");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValueExact();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false, false, 1388);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64 base64_1 = new Base64();
      Base64.isBase64("encodeInteger called with null parameter");
      base64_1.readResults(byteArray1, 406, 64);
      Base64.encodeBase64(byteArray2, true, false, 76);
      Object object0 = new Object();
      try { 
        base64_0.decode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-31);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Object object0 = base64_0.decode((Object) "");
      base64_0.encode(object0);
      Base64.encodeBase64((byte[]) null, true, true);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 21, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)96;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.hasData();
      base64_0.readResults(byteArray1, (byte)7, 68);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 56, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Random.setNextRandom((-1));
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64((-1));
      Base64.encodeBase64((byte[]) null, false, false);
      base64_0.decode((byte[]) null);
      base64_0.encode((byte[]) null, (-1), (-2460));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)105;
      Base64.encodeBase64(byteArray0, true, false, 76);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray1);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toByteArray();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.add(bigInteger1);
      BigInteger bigInteger3 = bigInteger1.modInverse(bigInteger2);
      BigInteger bigInteger4 = bigInteger3.divide(bigInteger0);
      Base64.toIntegerBytes(bigInteger3);
      Base64.decodeBase64((byte[]) null);
      bigInteger4.shiftRight((-1));
      base64_0.decode((byte[]) null, 0, (-1));
      Base64.isBase64((byte)121);
      try { 
        base64_0.encode((Object) "*}SeZ]2#d@$5jLZW");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = base64_0.decode("ISO-8859-1");
      Base64.discardWhitespace(byteArray1);
      Object object0 = new Object();
      base64_0.decode((Object) "*}SeZ]2#d@$5jLZW");
      base64_0.readResults(byteArray2, 0, 2406);
      Base64.encodeBase64(byteArray3, false, false);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_1 = new Base64((-1));
      base64_1.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[5];
      Base64 base64_0 = new Base64((-2241), byteArray1, true);
      byte[] byteArray2 = base64_0.decode("");
      base64_0.encode(byteArray2);
      base64_0.decode("t");
      Base64 base64_1 = new Base64();
      try { 
        base64_1.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-47);
      Base64.encodeBase64String(byteArray0);
      Base64.discardWhitespace(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-61));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -61
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64.isBase64((byte) (-87));
      Base64 base64_0 = new Base64(605);
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-87);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 7);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-87);
      base64_0.encodeToString(byteArray2);
      byteArray2[1] = (byte) (-87);
      byteArray2[2] = (byte) (-87);
      byteArray2[3] = (byte) (-87);
      byteArray2[4] = (byte) (-87);
      Base64.encodeBase64(byteArray2, false, false);
      byteArray2[5] = (byte) (-87);
      byteArray2[6] = (byte) (-87);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      base64_0.decode(byteArray0);
      byteArray2[7] = (byte) (-75);
      base64_0.decode(byteArray2, (int) (byte) (-87), 605);
      base64_0.decode(byteArray1, 83, 1717986918);
      base64_0.encodeToString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)50;
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)29;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte)29;
      byteArray1[3] = (byte) (-102);
      byteArray1[4] = (byte)29;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertEquals(0, byteArray2.length);
      
      byteArray0[0] = (byte)29;
      base64_0.readResults(byteArray0, (byte)29, (byte)29);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      assertArrayEquals(new byte[] {(byte)72, (byte)81, (byte)61, (byte)61}, byteArray3);
      assertEquals(4, byteArray3.length);
      
      byte[] byteArray4 = base64_0.encode((byte[]) null);
      assertNull(byteArray4);
      assertFalse(base64_0.isUrlSafe());
      
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64(byteArray2, false, false);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64("*}SeZ]2#d@$5jLZW");
      Base64.decodeInteger(byteArray2);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)64;
      byteArray4[1] = (byte)60;
      byteArray4[2] = (byte)97;
      byteArray4[3] = (byte)60;
      byteArray4[4] = (byte)0;
      Base64.decodeInteger(byteArray3);
      base64_0.hasData();
      base64_0.decode(byteArray1, (int) (byte)60, (-944));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64(50, (byte[]) null);
      Base64.isBase64("");
      Base64.encodeBase64Chunked((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = bigInteger0.toByteArray();
      Base64.encodeBase64((byte[]) null, false);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false, 64);
      MockRandom mockRandom0 = new MockRandom((-121L));
      BigInteger.probablePrime(76, mockRandom0);
      byte[] byteArray1 = new byte[1];
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.min(bigInteger2);
      bigInteger0.divideAndRemainder(bigInteger1);
      byteArray1[0] = (byte)0;
      Base64.encodeBase64(byteArray1);
      base64_0.isUrlSafe();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode("");
      base64_0.avail();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-188), 1684);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("");
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.toString();
      byte[] byteArray0 = bigInteger0.toByteArray();
      bigInteger2.add(bigInteger0);
      bigInteger0.modInverse(bigInteger2);
      bigInteger0.divide(bigInteger2);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.decodeBase64(byteArray1);
      bigInteger0.shiftRight(2398);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte)21;
      BigInteger bigInteger1 = BigInteger.valueOf((-470L));
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      bigInteger0.equals("");
      byteArray1[4] = (byte)110;
      byteArray1[5] = (byte)87;
      byteArray1[6] = (byte)5;
      Base64.encodeBase64(byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray3 = base64_0.decode("");
      base64_0.avail();
      Base64.decodeInteger(byteArray1);
      base64_0.hasData();
      base64_0.decode(byteArray3, (-5605), (-1));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64(50, (byte[]) null);
      Base64.isBase64("");
      Base64.encodeBase64Chunked((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = bigInteger0.toByteArray();
      Base64.encodeBase64((byte[]) null, false);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false, 64);
      MockRandom mockRandom0 = new MockRandom((-121L));
      BigInteger.probablePrime(76, mockRandom0);
      byte[] byteArray1 = new byte[1];
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.min(bigInteger2);
      bigInteger0.divideAndRemainder(bigInteger1);
      byteArray1[0] = (byte)0;
      Base64.encodeBase64(byteArray1);
      base64_0.isUrlSafe();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode("");
      base64_0.avail();
      base64_0.hasData();
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)0;
      base64_0.decode(byteArray2, 0, (int) (byte)0);
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray2, false, false, 3708);
      Base64 base64_0 = new Base64();
      String string0 = "US-ASCII";
      Base64.encodeBase64(byteArray1, true);
      try { 
        base64_0.encode((Object) "US-ASCII");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Klu`Zdot@*hm0 KCzj");
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)48;
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byteArray1[1] = (byte)54;
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64("MDY=");
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode(byteArray2, 629, 2732);
      Base64.isBase64((byte)48);
      Base64 base64_1 = new Base64(77);
      try { 
        base64_1.encode((Object) "MDY");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-28);
      byteArray2[2] = (byte) (-28);
      byteArray2[3] = (byte) (-28);
      byteArray2[4] = (byte) (-28);
      byteArray1[1] = (byte) (-28);
      Base64 base64_0 = new Base64((byte) (-28), byteArray2, true);
      byte[] byteArray3 = base64_0.decode("NUE");
      base64_0.decode("NUE");
      Object object0 = new Object();
      Base64.encodeBase64(byteArray3, true);
      base64_0.readResults(byteArray2, (byte) (-28), 0);
      base64_0.avail();
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte) (-112));
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      Base64 base64_0 = new Base64(78, byteArray1);
      int int0 = Base64.MIME_CHUNK_SIZE;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte) (-1), 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)38;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger0.gcd(bigInteger1);
      bigInteger2.min(bigInteger0);
      base64_0.isUrlSafe();
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)96;
      byteArray2[1] = (byte) (-31);
      byteArray2[2] = (byte)123;
      byteArray2[3] = (byte)84;
      byteArray2[4] = (byte)38;
      byteArray2[5] = (byte)96;
      byteArray2[6] = (byte) (-80);
      byteArray2[7] = (byte)101;
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      BigInteger bigInteger3 = BigInteger.TEN;
      BigInteger bigInteger4 = BigInteger.ONE;
      bigInteger4.modInverse(bigInteger0);
      Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64String(byteArray3);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray1);
      base64_0.decode((Object) "");
      Base64.isBase64((byte)96);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false);
      base64_0.encode(byteArray2, 1675, (int) (byte) (-47));
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[4] = (byte)96;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)0;
      boolean boolean0 = Base64.isBase64((byte) (-80));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.encode(byteArray1, (-447), (int) (byte)0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)21;
      BigInteger.valueOf((-470L));
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      bigInteger0.equals("");
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)15;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, true, 1841);
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = bigInteger0.max(bigInteger1);
      bigInteger0.equals("z1e}eQD");
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeInteger(bigInteger1);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Object object0 = new Object();
      base64_0.encodeToString(byteArray0);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-77);
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64("2H_:gbW>?X%m");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-109);
      byteArray1[3] = (byte) (-85);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray2);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray2, true);
      base64_0.decode("APtWsw==");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray1);
      base64_0.decode((Object) "");
      Base64.isBase64((byte)96);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = new BigInteger(byteArray1);
      bigInteger1.gcd(bigInteger2);
      bigInteger0.min(bigInteger1);
      base64_0.isUrlSafe();
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(byteArray2);
      BigInteger bigInteger3 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigInteger3.modInverse(bigInteger0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Base64 base64_0 = new Base64(50, (byte[]) null);
      Base64.isBase64("");
      Base64.encodeBase64Chunked((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = bigInteger0.toByteArray();
      Base64.encodeBase64((byte[]) null, false);
      base64_0.decode((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false, 64);
      MockRandom mockRandom0 = new MockRandom((-121L));
      BigInteger.probablePrime(76, mockRandom0);
      byte[] byteArray2 = new byte[1];
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.min(bigInteger2);
      bigInteger0.divideAndRemainder(bigInteger1);
      byteArray2[0] = (byte)0;
      Base64.encodeBase64(byteArray2);
      base64_0.isUrlSafe();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.decode("");
      base64_0.avail();
      Base64.decodeInteger(byteArray0);
      base64_0.hasData();
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      base64_0.decode(byteArray3, 0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-1);
      base64_0.encode(byteArray0, 1048, (int) (byte) (-1));
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-96);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.isUrlSafe();
      Base64 base64_1 = new Base64(0, byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      Base64.decodeBase64("*}SeZ]2#d@$5jLZW");
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)64;
      byteArray3[1] = (byte)60;
      byteArray3[2] = (byte)97;
      byteArray3[3] = (byte)60;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte) (-78);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 1, (int) (byte)97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      base64_0.decode(byteArray0, (-4062), (-4062));
      Base64.isBase64((byte)0);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-28);
      byteArray2[2] = (byte) (-28);
      byteArray2[3] = (byte) (-28);
      byteArray2[4] = (byte) (-28);
      byteArray2[5] = (byte) (-28);
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((byte) (-28), byteArray2, true);
      base64_0.decode("NUE");
      base64_0.encode(byteArray0);
      base64_0.decode("NUE");
      try { 
        base64_0.encode((Object) "NUE");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true, 1784);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true, 1784);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true, 1784);
      Base64 base64_0 = new Base64(1784, (byte[]) null, true);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte) (-31);
      byteArray0[8] = (byte)98;
      base64_0.readResults(byteArray0, (byte) (-67), 119);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-83);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((byte) (-102));
      byte[] byteArray2 = base64_0.decode("(");
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray3, (int) (byte)0, (int) (byte) (-102));
      Base64.encodeBase64URLSafeString(byteArray2);
      base64_0.encodeToString(byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.intValue();
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger((-370), 0, (java.util.Random) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Klu`Zdot@*hm0 KCzj");
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)48;
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byteArray1[1] = (byte)54;
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.isBase64("MDY=");
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true);
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, true, true);
      base64_0.encode(byteArray2);
      Base64.isArrayByteBase64(byteArray5);
      Object object0 = base64_0.decode((Object) "MDY");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64((byte[]) null, false, true);
      base64_0.decode((String) null);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-107);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray1, true, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(32, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [w5D/lQ==\u0001
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)101;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)101, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [9\u0001\u0018\uFFFD\u0000\uFFFDe]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.isBase64("");
      base64_0.avail();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.subtract(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.toString();
      byte[] byteArray0 = bigInteger0.toByteArray();
      bigInteger2.add(bigInteger0);
      bigInteger0.modInverse(bigInteger2);
      BigInteger bigInteger3 = bigInteger0.divide(bigInteger2);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.decodeBase64(byteArray1);
      bigInteger0.shiftRight(2398);
      Base64.isBase64("0C_3G%V~s`X?~kW&");
      bigInteger0.intValueExact();
      base64_0.readResults(byteArray0, (-1896), 0);
      try { 
        base64_0.encode((Object) bigInteger3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AA==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray1);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64((-1));
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-1);
      Base64 base64_0 = new Base64(78, byteArray1);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64.isBase64("K;$Cza>k:p,");
      Base64 base64_0 = new Base64(1192);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)70;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      assertEquals(14, byteArray1.length);
      
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-114);
      byteArray2[1] = (byte) (-28);
      byteArray2[2] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1, byteArray0, false);
      Object object0 = new Object();
      base64_0.decode(byteArray0, 1, (-4176));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1), byteArray0, true);
      byte[] byteArray1 = base64_0.decode("Oq-eyo<<z}Wc");
      assertArrayEquals(new byte[] {(byte)58, (byte) (-81), (byte) (-98), (byte) (-54), (byte) (-116), (byte) (-42)}, byteArray1);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-89);
      Base64 base64_0 = new Base64(114, byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-16);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-89);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-89);
      byteArray1[6] = (byte) (-1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)120;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u0000\u0003\u001F\uFFFD!\u0000x]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.encode(object0);
      Object object2 = base64_0.decode(object1);
      Object object3 = base64_0.decode(object2);
      base64_0.decode(object3);
      assertSame(object3, object0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = "encodeInteger called with null parameter";
      Base64.decodeBase64("encodeInteger called with null parameter");
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValueExact();
      bigInteger0.signum();
      // Undeclared exception!
      try { 
        bigInteger0.modPow((BigInteger) null, (BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64(2720);
      byte[] byteArray0 = new byte[2];
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64(byteArray0, false, true, 64);
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      base64_0.decode("AAA=");
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)20;
      byteArray0[1] = (byte)20;
      Base64.discardWhitespace(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
