/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:05:32 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[110];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(110, byteArray0.length);
      assertEquals(152, byteArray1.length);
      assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64(4, byteArray0, false);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(110, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(110, byteArray0.length);
      assertEquals(152, byteArray1.length);
      assertEquals(5814, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(76);
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(110, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertNotNull(byteArray3);
      
      String string0 = base64_1.encodeToString(byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(110, byteArray0.length);
      assertEquals(152, byteArray1.length);
      assertEquals(5814, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      int int0 = base64_1.readResults(byteArray1, 4, 0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals((-1), int0);
      assertEquals(110, byteArray0.length);
      assertEquals(152, byteArray1.length);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) string0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, object0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, object0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(110, byteArray0.length);
      assertEquals(152, byteArray1.length);
      assertEquals(5814, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(object0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      base64_1.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[110];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(110, byteArray0.length);
      assertEquals(152, byteArray1.length);
      assertNotNull(byteArray1);
      
      int int0 = 4;
      Base64 base64_0 = new Base64(4, byteArray0, false);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(110, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(110, byteArray0.length);
      assertEquals(152, byteArray1.length);
      assertEquals(5814, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(76);
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(110, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertNotNull(byteArray3);
      
      String string0 = base64_1.encodeToString(byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(110, byteArray0.length);
      assertEquals(152, byteArray1.length);
      assertEquals(5814, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) string0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, object0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, object0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(110, byteArray0.length);
      assertEquals(152, byteArray1.length);
      assertEquals(5814, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(object0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = new byte[5];
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)object0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      byteArray4[0] = (byte) (-47);
      byteArray4[1] = (byte) (-98);
      byteArray4[2] = (byte)89;
      byteArray4[3] = (byte)117;
      byte byte0 = (byte)33;
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[110];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(110, byteArray0.length);
      assertEquals(152, byteArray1.length);
      assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64(4, byteArray0, false);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(110, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(110, byteArray0.length);
      assertEquals(152, byteArray1.length);
      assertEquals(5814, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(110, byteArray0.length);
      assertEquals(152, byteArray1.length);
      assertEquals(5814, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(string0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[95];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(95, byteArray0.length);
      assertEquals(132, byteArray1.length);
      assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64(4, byteArray0, true);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(95, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(95, byteArray0.length);
      assertEquals(132, byteArray1.length);
      assertEquals(4356, byteArray2.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(true);
      assertFalse(base64_1.equals((Object)base64_0));
      assertTrue(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(95, byteArray0.length);
      assertEquals(132, byteArray1.length);
      assertEquals(182, byteArray3.length);
      assertNotNull(byteArray3);
      
      String string0 = base64_1.encodeToString(byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(95, byteArray0.length);
      assertEquals(132, byteArray1.length);
      assertEquals(4356, byteArray2.length);
      assertTrue(base64_0.isUrlSafe());
      assertTrue(base64_1.isUrlSafe());
      assertNotNull(string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) string0);
      assertNotSame(byteArray0, object0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, object0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, object0);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(95, byteArray0.length);
      assertEquals(132, byteArray1.length);
      assertEquals(4356, byteArray2.length);
      assertTrue(base64_0.isUrlSafe());
      assertTrue(base64_1.isUrlSafe());
      assertNotNull(object0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      base64_1.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[95];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(95, byteArray0.length);
      assertEquals(132, byteArray1.length);
      assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64(4, byteArray0, true);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(95, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(95, byteArray0.length);
      assertEquals(132, byteArray1.length);
      assertEquals(4356, byteArray2.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(true);
      assertFalse(base64_1.equals((Object)base64_0));
      assertTrue(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = base64_1.encode(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertEquals(95, byteArray0.length);
      assertEquals(132, byteArray1.length);
      assertEquals(4356, byteArray2.length);
      assertEquals(5962, byteArray3.length);
      assertTrue(base64_0.isUrlSafe());
      assertTrue(base64_1.isUrlSafe());
      assertNotNull(byteArray3);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_2 = new Base64();
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.isUrlSafe());
      assertNotNull(base64_2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = base64_2.decode(byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_0, base64_1);
      assertNotSame(base64_0, base64_2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(base64_1, base64_2);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(base64_2, base64_1);
      assertNotSame(base64_2, base64_0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(base64_0.equals((Object)base64_2));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertEquals(95, byteArray0.length);
      assertEquals(132, byteArray1.length);
      assertEquals(4356, byteArray2.length);
      assertEquals(5962, byteArray3.length);
      assertEquals(4356, byteArray4.length);
      assertTrue(base64_0.isUrlSafe());
      assertTrue(base64_1.isUrlSafe());
      assertFalse(base64_2.isUrlSafe());
      assertNotNull(byteArray4);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      Base64.decodeBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[103];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(103, byteArray0.length);
      assertEquals(144, byteArray1.length);
      assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64(4, byteArray0, true);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(103, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(103, byteArray0.length);
      assertEquals(144, byteArray1.length);
      assertEquals(5136, byteArray2.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(64);
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = base64_1.encode(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(103, byteArray0.length);
      assertEquals(144, byteArray1.length);
      assertEquals(198, byteArray3.length);
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(byteArray3);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true, true);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray4);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertEquals(103, byteArray0.length);
      assertEquals(144, byteArray1.length);
      assertEquals(5136, byteArray2.length);
      assertEquals(7030, byteArray4.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(byteArray4);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      // Undeclared exception!
      base64_1.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 2, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 9, (-3327));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64(5);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(49, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(49, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray1);
      
      base64_0.encode(byteArray0, 5, 5);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(49, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      int int0 = Base64.PEM_CHUNK_SIZE;
      assertEquals(64, int0);
      
      base64_0.encode(byteArray0, 5, (-3342));
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(49, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64(7);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 7, 7);
      assertEquals(49, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int0 = base64_0.readResults(byteArray0, 7, 7);
      assertEquals(7, int0);
      assertEquals(49, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 7, (-3352));
      assertEquals(49, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.decode(byteArray0, (-2332), (-2776));
      assertEquals(49, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int1 = base64_0.avail();
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      assertEquals(49, byteArray0.length);
      
      Base64 base64_0 = new Base64(16);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 16, 16);
      assertEquals(49, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      int int0 = base64_0.readResults(byteArray0, 16, 16);
      assertEquals(16, int0);
      assertEquals(49, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64(7, byteArray0, true);
      //  // Unstable assertion: assertEquals(49, byteArray0.length);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)32, (byte)124}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      
      base64_0.encode(byteArray0, 7, 7);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(49, byteArray0.length);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 7, (-3352));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(49, byteArray0.length);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(49, byteArray0.length);
      //  // Unstable assertion: assertEquals(49, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[100];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(100, byteArray0.length);
      assertEquals(140, byteArray1.length);
      assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64(4, byteArray0, false);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(100, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(100, byteArray0.length);
      assertEquals(140, byteArray1.length);
      assertEquals(4888, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(4);
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.valueOf(1174L);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte) (-106), bigInteger1.byteValue());
      assertEquals((short)1174, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      int int0 = bigInteger0.bitCount();
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertEquals(2, int0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)10}, byteArray3);
      assertEquals(1, byteArray3.length);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotNull(byteArray3);
      
      base64_1.encode(byteArray1, 4, 85);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(100, byteArray0.length);
      assertEquals(140, byteArray1.length);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_1.decode(byteArray1, 85, 4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(base64_1, base64_0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(100, byteArray0.length);
      assertEquals(140, byteArray1.length);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2, 4, 8085);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4888
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[88];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(88, byteArray0.length);
      //  // Unstable assertion: assertEquals(124, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64(4, byteArray0, false);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(88, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(88, byteArray0.length);
      //  // Unstable assertion: assertEquals(124, byteArray1.length);
      //  // Unstable assertion: assertEquals(3864, byteArray2.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(4);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray3 = base64_1.encode(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(88, byteArray0.length);
      //  // Unstable assertion: assertEquals(124, byteArray1.length);
      //  // Unstable assertion: assertEquals(3864, byteArray2.length);
      //  // Unstable assertion: assertEquals(7728, byteArray3.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_2 = new Base64(64);
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(base64_2.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(base64_2.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_2);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = base64_1.encodeToString(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_1, base64_2);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_2));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals("QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QSB8 |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |QUFB |PT0g |fA== |", string0);
      //  // Unstable assertion: assertEquals(88, byteArray0.length);
      //  // Unstable assertion: assertEquals(124, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)32, (byte)124}, byteArray4);
      //  // Unstable assertion: assertEquals(2, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      
      String string1 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals("QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQSB8QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBPT0gfA==", string1);
      //  // Unstable assertion: assertEquals(88, byteArray0.length);
      //  // Unstable assertion: assertEquals(124, byteArray1.length);
      //  // Unstable assertion: assertNotNull(string1);
      
      // Undeclared exception!
      Base64.encodeBase64(byteArray3, false, false);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      Base64 base64_0 = new Base64(7, byteArray0, false);
      //  // Unstable assertion: assertEquals(49, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(49, byteArray0.length);
      //  // Unstable assertion: assertEquals(68, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      
      base64_0.encode(byteArray0, 7, 7);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(49, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)32, (byte)124}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      
      base64_0.encode(byteArray2, 7, (-3335));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)32, (byte)124}, byteArray2);
      //  // Unstable assertion: assertEquals(49, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)32, (byte)124}, byteArray2);
      //  // Unstable assertion: assertEquals("IHw=\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      //  // Unstable assertion: assertEquals(49, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) "DQo=\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, object0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(49, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.decodeBase64("DQo=\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      //  // Unstable assertion: assertNotSame(byteArray3, object0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)13, (byte)10}, byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[85];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(85, byteArray0.length);
      //  // Unstable assertion: assertEquals(120, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64(4, byteArray0, true);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(85, byteArray0.length);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(85, byteArray0.length);
      //  // Unstable assertion: assertEquals(120, byteArray1.length);
      //  // Unstable assertion: assertEquals(3560, byteArray2.length);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64();
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = base64_1.encodeToString(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals("QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQSB8QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE9PSB8", string0);
      //  // Unstable assertion: assertEquals(85, byteArray0.length);
      //  // Unstable assertion: assertEquals(120, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray3 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(85, byteArray0.length);
      //  // Unstable assertion: assertEquals(120, byteArray1.length);
      //  // Unstable assertion: assertEquals(3560, byteArray2.length);
      //  // Unstable assertion: assertEquals(105642, byteArray3.length);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string1 = base64_1.encodeToString(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==", string1);
      //  // Unstable assertion: assertEquals(85, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)124);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)43;
      byteArray0[0] = (byte)124;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)124;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 14);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)124, (byte)43, (byte)0, (byte)124, (byte)124, (byte)124, (byte)124, (byte)124}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(11, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)124, (byte)43, (byte)0, (byte)124, (byte)124, (byte)124, (byte)124, (byte)124}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(14, byteArray2.length);
      assertNotNull(byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)124);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)124, (byte)43, (byte)0, (byte)124, (byte)124, (byte)124, (byte)124, (byte)124}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(13, byteArray3.length);
      assertNotNull(byteArray3);
      
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)124, (byte)43, (byte)0, (byte)124, (byte)124, (byte)124, (byte)124, (byte)124}, byteArray0);
      assertFalse(boolean1);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[63];
      Base64 base64_0 = new Base64(4, byteArray0, false);
      assertEquals(63, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(63, byteArray0.length);
      assertEquals(1407, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(63, byteArray0.length);
      assertEquals(1407, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(string0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      base64_0.decode((Object) string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      
      Base64 base64_0 = new Base64((-319), byteArray0, true);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 64);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotNull(byteArray1);
      
      Object object0 = base64_0.decode((Object) "~AokE4n3");
      assertSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, object0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(object0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[67];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(67, byteArray0.length);
      assertEquals(96, byteArray1.length);
      assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64(4, byteArray0, true);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(67, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(67, byteArray0.length);
      assertEquals(96, byteArray1.length);
      assertEquals(2272, byteArray2.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(67, byteArray0.length);
      assertEquals(96, byteArray1.length);
      assertEquals(2272, byteArray2.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(string0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      Base64.decodeBase64(string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[67];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(67, byteArray0.length);
      assertEquals(96, byteArray1.length);
      assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64(4, byteArray0, true);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(67, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(67, byteArray0.length);
      assertEquals(96, byteArray1.length);
      assertEquals(2272, byteArray2.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray2);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(67, byteArray0.length);
      assertEquals(96, byteArray1.length);
      assertEquals(2272, byteArray2.length);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(string0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(67, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray3 = Base64.decodeBase64("");
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray3.length);
      assertNotNull(byteArray3);
      
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = null;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      int int0 = base64_0.readResults((byte[]) null, 1908874353, 127);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte) (-125);
      byteArray1[3] = (byte) (-4);
      byteArray1[4] = (byte)3;
      byteArray1[5] = (byte)1;
      base64_0.encode((byte[]) null, 709, (int) (byte) (-4));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byteArray1[6] = (byte) (-28);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)15, (byte) (-125), (byte) (-4), (byte)3, (byte)1, (byte) (-28)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(7, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      
      base64_0.decode((byte[]) null, 92, 0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 92, (-1348));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)32, (byte)124}, byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)32, (byte)124}, byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertEquals(18, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray2, 13, 13);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)32, (byte)124}, byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertEquals(18, byteArray2.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[55];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(55, byteArray0.length);
      assertEquals(78, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(55, byteArray0.length);
      assertEquals(78, byteArray2.length);
      assertNotNull(byteArray2);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(64, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertEquals(55, byteArray0.length);
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = new byte[0];
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals("", string0);
      assertEquals(0, byteArray3.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray2, (-2128), 93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2128
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[52];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(52, byteArray0.length);
      assertEquals(74, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals(52, byteArray0.length);
      assertEquals(74, byteArray2.length);
      assertNotNull(byteArray2);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray1, (int) (byte)3, (int) (byte)75);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(52, byteArray0.length);
      assertEquals(74, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("cn4<wA<N2(Hu!'A]I");
      assertArrayEquals(new byte[] {(byte)114, (byte)126, (byte)48, (byte)0, (byte) (-35), (byte) (-121), (byte) (-72), (byte)2}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)79;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)61;
      byteArray1[5] = (byte)75;
      byteArray1[6] = (byte)3;
      base64_0.decode(byteArray1, 0, (int) (byte)13);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)71, (byte)13, (byte)79, (byte)4, (byte)61, (byte)75, (byte)3}, byteArray1);
      assertEquals(7, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 5, 5);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      int int0 = base64_0.avail();
      assertEquals(4, int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, (-1), (-1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(10, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(10, byteArray0.length);
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (-1), 42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[49];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(49, byteArray0.length);
      assertEquals(70, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(49, byteArray0.length);
      assertEquals(70, byteArray1.length);
      assertEquals(49, byteArray2.length);
      assertNotNull(byteArray2);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = base64_0.encode(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertEquals(49, byteArray0.length);
      assertEquals(70, byteArray1.length);
      assertEquals(96, byteArray3.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray3);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertEquals(49, byteArray0.length);
      assertEquals(70, byteArray1.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      Base64 base64_1 = new Base64(false);
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_2 = new Base64(false);
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(base64_2.isUrlSafe());
      assertNotNull(base64_2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_2.encode(byteArray1, 0, 64);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(base64_2, base64_0);
      assertNotSame(base64_2, base64_1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.equals((Object)base64_1));
      assertEquals(49, byteArray0.length);
      assertEquals(70, byteArray1.length);
      assertFalse(base64_2.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Random.setNextRandom(8184);
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
      
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)61, (int) (byte)61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)28;
      Base64 base64_0 = new Base64((byte)28, byteArray0, false);
      assertEquals(21, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("HAAAAAAAAAAAAAAAAAAAAAAAAAAA\u001C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertEquals(21, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(string0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)8;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertArrayEquals(new byte[] {(byte)38, (byte)6, (byte)1, (byte) (-1), (byte) (-66), (byte)13, (byte) (-60), (byte)8}, byteArray0);
      assertEquals("JgYB/74NxAg=", string0);
      assertEquals(8, byteArray0.length);
      assertNotNull(string0);
      
      base64_0.encode(byteArray0, (-295), (-54));
      assertArrayEquals(new byte[] {(byte)38, (byte)6, (byte)1, (byte) (-1), (byte) (-66), (byte)13, (byte) (-60), (byte)8}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)127;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)127}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)66, (byte)47, (byte)32, (byte)124}, byteArray1);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = new byte[2];
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)127;
      byteArray2[1] = (byte)127;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)127, (byte)127}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = base64_0.hasData();
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 0, (int) (byte)127);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-94);
      base64_0.decode(byteArray0, (int) (byte)48, (int) (byte) (-90));
      assertArrayEquals(new byte[] {(byte)86, (byte) (-90), (byte)48, (byte)37, (byte)0, (byte) (-4), (byte)93, (byte) (-94)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Base64 base64_0 = new Base64(725);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-108);
      byte[] byteArray1 = new byte[0];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      //  // Unstable assertion: assertSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)4, (byte) (-108)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)83, (byte)85, (byte)32, (byte)124}, byteArray3);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      
      Base64 base64_1 = new Base64((-5896), byteArray1, false);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_1.encodeToString(byteArray3);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-36);
      byteArray1[6] = (byte)51;
      byteArray1[7] = (byte)11;
      byteArray1[8] = (byte)56;
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)110, (byte)123, (byte)1, (byte)10, (byte)0, (byte) (-36), (byte)51, (byte)11, (byte)56}, byteArray1);
      assertFalse(boolean0);
      assertEquals(9, byteArray1.length);
      
      Base64 base64_1 = new Base64((byte)56, byteArray0, false);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)110, (byte)123, (byte)1, (byte)10, (byte)0, (byte) (-36), (byte)51, (byte)11, (byte)56}, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals((short) (-24705), bigInteger0.shortValue());
      assertEquals((byte)127, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertTrue(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString((byte[]) null);
      assertTrue(base64_0.isUrlSafe());
      assertNull(string0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertTrue(base64_0.isUrlSafe());
      assertNull(byteArray0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.decode((byte[]) null, (-676), (-676));
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode((byte[]) null, 39, 17);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[52];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(52, byteArray0.length);
      //  // Unstable assertion: assertEquals(74, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(52, byteArray0.length);
      //  // Unstable assertion: assertEquals(74, byteArray1.length);
      //  // Unstable assertion: assertEquals(52, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray3 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(52, byteArray0.length);
      //  // Unstable assertion: assertEquals(74, byteArray1.length);
      //  // Unstable assertion: assertEquals(100, byteArray3.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertEquals(52, byteArray0.length);
      //  // Unstable assertion: assertEquals(74, byteArray1.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertEquals(52, byteArray0.length);
      //  // Unstable assertion: assertEquals(74, byteArray1.length);
      //  // Unstable assertion: assertEquals(73, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      
      base64_0.encode(byteArray3, 21, 21);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertEquals(52, byteArray0.length);
      //  // Unstable assertion: assertEquals(74, byteArray1.length);
      //  // Unstable assertion: assertEquals(100, byteArray3.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(52, byteArray0.length);
      
      Base64 base64_1 = new Base64((-941), byteArray0, false);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertEquals(52, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertEquals(52, byteArray0.length);
      //  // Unstable assertion: assertEquals(74, byteArray1.length);
      //  // Unstable assertion: assertEquals(73, byteArray4.length);
      //  // Unstable assertion: assertEquals(100, byteArray5.length);
      //  // Unstable assertion: assertNotNull(byteArray5);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binay.Base64");
      assertEquals(24, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(24, byteArray0.length);
      assertEquals(23, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_1.encode(byteArray0);
      assertSame(byteArray0, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertSame(byteArray2, byteArray0);
      assertFalse(base64_1.equals((Object)base64_0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64((String) null);
      assertNull(byteArray0);
      
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      byteArray0[1] = (byte)19;
      byte byte0 = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)1;
      Base64 base64_0 = new Base64((-1));
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(33, byteArray0.length);
      assertEquals(46, byteArray1.length);
      assertNotNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray2);
      
      Random.setNextRandom((-1153));
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)1, 1825);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      Base64 base64_0 = new Base64(10);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)103;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte) (-128);
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)115;
      byteArray1[6] = (byte) (-60);
      byteArray1[7] = (byte) (-39);
      byteArray1[8] = (byte)35;
      base64_0.encode(byteArray1, (int) (byte)103, (-561));
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)123, (byte)103, (byte)1, (byte) (-128), (byte)1, (byte)115, (byte) (-60), (byte) (-39), (byte)35}, byteArray1);
      assertEquals(9, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)123, (byte)103, (byte)1, (byte) (-128), (byte)1, (byte)115, (byte) (-60), (byte) (-39), (byte)35}, byteArray1);
      assertFalse(boolean0);
      assertEquals(9, byteArray1.length);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64((byte)1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean1 = base64_0.hasData();
      assertNotSame(base64_0, base64_1);
      assertTrue(boolean1 == boolean0);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(boolean1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)19;
      Base64 base64_0 = new Base64((byte)19, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)28, (byte)19, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)28, (byte)19, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(14, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)28, (byte)19, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(14, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = new byte[1];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = (byte)28;
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)28, (byte)19, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(14, byteArray2.length);
      assertEquals(14, byteArray4.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray4);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(75, byteArray3, true);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray4));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(base64_1.equals((Object)base64_0));
      assertArrayEquals(new byte[] {(byte)28}, byteArray3);
      assertEquals(1, byteArray3.length);
      assertTrue(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray2);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertArrayEquals(new byte[] {(byte)0, (byte)28, (byte)19, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("QUJ3VEFBQUEAHBMA\u0000\u001C\u0013\u0000\u0000\u0000AAA=\u0000\u001C\u0013\u0000\u0000\u0000", string0);
      assertEquals(6, byteArray0.length);
      assertEquals(14, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(string0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      assertEquals(24, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(32, byteArray1.length);
      assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 8168);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)28;
      byteArray0[4] = (byte)19;
      byteArray0[2] = (byte) (-55);
      Base64 base64_0 = new Base64(92);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 1, 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      assertNotNull(bigInteger1);
      
      int int0 = bigInteger0.compareTo(bigInteger1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals(1, int0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertEquals((short)0, bigInteger1.shortValue());
      
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertNotSame(bigInteger0, bigInteger1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = null;
      int int1 = base64_0.readResults((byte[]) null, (-929), (-2530));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray2 = base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray2);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)0);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = Base64.decodeBase64((String) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_1 = new Base64((-1), (byte[]) null, true);
      assertFalse(base64_1.equals((Object)base64_0));
      assertTrue(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = base64_0.hasData();
      assertNotSame(base64_0, base64_1);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(boolean0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray2);
      
      byte[] byteArray3 = Base64.decodeBase64((String) null);
      assertNull(byteArray3);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64(455);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = null;
      int int0 = base64_0.readResults((byte[]) null, 455, 455);
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-1650), 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)127;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)127}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)66, (byte)47, (byte)32, (byte)124}, byteArray1);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)127}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray3 = base64_0.decode((String) null);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNull(byteArray3);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)127}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)66, (byte)47}, byteArray4);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      
      byte[] byteArray5 = new byte[5];
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      
      byteArray5[0] = (byte)127;
      byteArray5[1] = (byte)127;
      byteArray5[2] = (byte)127;
      byteArray5[3] = (byte)0;
      byte[] byteArray6 = Base64.encodeBase64URLSafe(byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)127, (byte)127, (byte)127, (byte)0, (byte)0}, byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)51, (byte)57, (byte)95, (byte)65, (byte)65, (byte)65}, byteArray6);
      //  // Unstable assertion: assertEquals(5, byteArray5.length);
      //  // Unstable assertion: assertEquals(7, byteArray6.length);
      //  // Unstable assertion: assertNotNull(byteArray6);
      
      byte[] byteArray7 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)10}, byteArray7);
      //  // Unstable assertion: assertEquals(1, byteArray7.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray7);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)28;
      byteArray0[4] = (byte)19;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)28;
      Base64 base64_0 = new Base64(10);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, (int) (byte)19, (-1));
      assertEquals(21, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      assertEquals(21, byteArray0.length);
      
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(21, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(21, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      assertSame(bigInteger1, bigInteger0);
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = bigInteger0.divide(bigInteger1);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger1, bigInteger2);
      assertSame(bigInteger1, bigInteger0);
      assertNotSame(bigInteger2, bigInteger0);
      assertNotSame(bigInteger2, bigInteger1);
      assertTrue(bigInteger2.equals((Object)bigInteger1));
      assertTrue(bigInteger2.equals((Object)bigInteger0));
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      assertEquals((byte)1, bigInteger2.byteValue());
      assertEquals((short)1, bigInteger2.shortValue());
      assertNotNull(bigInteger2);
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertTrue(bigInteger0.equals((Object)bigInteger2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)1}, byteArray3);
      assertEquals(1, byteArray3.length);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertEquals(21, byteArray0.length);
      assertEquals(30, byteArray4.length);
      assertNotNull(byteArray4);
      
      boolean boolean1 = Base64.isBase64(byteArray2);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray4);
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray4);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray0.equals((Object)byteArray4));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray4));
      assertFalse(byteArray2.equals((Object)byteArray3));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertTrue(boolean1);
      assertEquals(21, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray5 = base64_0.decode("");
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray1);
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray5);
      assertEquals(0, byteArray5.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray5);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray6 = Base64.encodeBase64URLSafe(byteArray5);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray4);
      assertNotSame(byteArray5, byteArray1);
      assertSame(byteArray5, byteArray6);
      assertSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray3);
      assertNotSame(byteArray6, byteArray2);
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertEquals(0, byteArray5.length);
      assertEquals(0, byteArray6.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray6);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray7 = base64_0.decode("");
      assertNotSame(byteArray7, byteArray0);
      assertNotSame(byteArray7, byteArray6);
      assertNotSame(byteArray7, byteArray4);
      assertNotSame(byteArray7, byteArray1);
      assertNotSame(byteArray7, byteArray5);
      assertNotSame(byteArray7, byteArray3);
      assertNotSame(byteArray7, byteArray2);
      assertFalse(byteArray7.equals((Object)byteArray0));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray7);
      assertEquals(0, byteArray7.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray7);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      Base64 base64_0 = new Base64((byte)0);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertNotNull(byteArray2);
      
      Base64 base64_1 = new Base64();
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertEquals(22, byteArray0.length);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      byte[] byteArray3 = null;
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, (int) (byte)0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = null;
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      //  // Unstable assertion: assertNull(byteArray1);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)38;
      byteArray2[1] = (byte) (-14);
      byteArray2[2] = (byte)10;
      byteArray2[3] = (byte)1;
      byte byte0 = (byte) (-8);
      byteArray2[4] = (byte) (-8);
      byteArray2[5] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)38, (byte) (-14), (byte)10, (byte)1, (byte) (-8), (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = bigInteger0.clearBit(686);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertTrue(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)38, (byte) (-14), (byte)10, (byte)1, (byte) (-8), (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger1.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      
      Base64 base64_0 = new Base64((byte) (-14), (byte[]) null, true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = true;
      byte[] byteArray3 = base64_0.encode((byte[]) null);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNull(byteArray3);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = true;
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true, true);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)74, (byte)118, (byte)73, (byte)75, (byte)65, (byte)102, (byte)103, (byte)65, (byte)32, (byte)124}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)38, (byte) (-14), (byte)10, (byte)1, (byte) (-8), (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(10, byteArray4.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
      
      boolean boolean2 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray5 = Base64.encodeBase64URLSafe((byte[]) null);
      //  // Unstable assertion: assertNull(byteArray5);
      
      byte[] byteArray6 = Base64.encodeBase64URLSafe((byte[]) null);
      //  // Unstable assertion: assertNull(byteArray6);
      
      try { 
        base64_0.decode((Object) bigInteger0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)12;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)9, (byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(9, byteArray1.length);
      assertEquals(8, byteArray2.length);
      assertNotNull(byteArray2);
      
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertArrayEquals(new byte[] {(byte)9, (byte)12, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      assertNotNull(bigInteger1);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, (int) (byte)12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)12;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals((byte)12, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-244), bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertTrue(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals((short) (-244), bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)12, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      
      base64_0.encode(byteArray1, (int) (byte)9, (-84));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      byte[] byteArray2 = base64_0.decode(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)119, (byte)61, (byte)32, (byte)124}, byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      
      BigInteger bigInteger2 = BigInteger.ONE;
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals((short)1, bigInteger2.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger2.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray4);
      //  // Unstable assertion: assertEquals(1, byteArray4.length);
      //  // Unstable assertion: assertEquals((short)1, bigInteger2.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger2.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray4);
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)119, (byte)61, (byte)32, (byte)124}, byteArray5);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray5.length);
      //  // Unstable assertion: assertNotNull(byteArray5);
      
      boolean boolean1 = Base64.isBase64(byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)119, (byte)61, (byte)32, (byte)124}, byteArray3);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      
      byte[] byteArray6 = base64_0.decode("");
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray6);
      //  // Unstable assertion: assertEquals(0, byteArray6.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray7 = Base64.encodeBase64URLSafe(byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)76, (byte)51, (byte)100, (byte)51, (byte)80, (byte)83, (byte)66, (byte)56}, byteArray7);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-1), (byte)12}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)119, (byte)61, (byte)32, (byte)124}, byteArray5);
      //  // Unstable assertion: assertEquals(8, byteArray7.length);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray5.length);
      //  // Unstable assertion: assertNotNull(byteArray7);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-22);
      Base64 base64_0 = new Base64(0, byteArray0, false);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)54, (byte)103, (byte)61, (byte)61, (byte)32, (byte)124}, byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertNotNull(byteArray1);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)54, (byte)103, (byte)61, (byte)61, (byte)32, (byte)124}, byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals((byte) (-22), bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)234, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray2 = base64_0.decode("");
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)54, (byte)103, (byte)61, (byte)61, (byte)32, (byte)124}, byteArray1);
      //  // Unstable assertion: assertEquals("Nmc9PSB8", string0);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertNotNull(string0);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)54, (byte)103, (byte)61, (byte)61, (byte)32, (byte)124}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)54, (byte)103, (byte)61, (byte)61}, byteArray3);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      //  // Unstable assertion: assertEquals((byte) (-22), bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)234, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true, false, 64);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-22)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)54, (byte)103, (byte)61, (byte)61, (byte)32, (byte)124}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)78, (byte)109, (byte)99, (byte)57, (byte)80, (byte)83, (byte)66, (byte)56, (byte)32, (byte)124}, byteArray4);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals(10, byteArray4.length);
      //  // Unstable assertion: assertNotNull(byteArray4);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false, 62);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)32, (byte)124}, byteArray2);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      
      byte[] byteArray3 = Base64.decodeBase64("|$K$xs]<d|JBiZCIt:7");
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)43, (byte)27, (byte)29, (byte)36, (byte)24, (byte) (-103), (byte)8, (byte) (-117), (byte)123}, byteArray3);
      //  // Unstable assertion: assertEquals(9, byteArray3.length);
      //  // Unstable assertion: assertNotNull(byteArray3);
      
      boolean boolean0 = Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray4 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray4);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(3, byteArray4.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64 base64_0 = new Base64((-297));
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-53);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte) (-27), (byte) (-53)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)117, (byte)88, (byte)76}, byteArray1);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      short short0 = bigInteger0.shortValueExact();
      //  // Unstable assertion: assertEquals((short)0, short0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray2);
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger1 = BigInteger.ONE;
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals((short)1, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger2.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger2.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte) (-27), (byte) (-53)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)117, (byte)88, (byte)76}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)98, (byte)51, (byte)86, (byte)89, (byte)84, (byte)65}, byteArray3);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = base64_0.hasData();
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger1));
      //  // Unstable assertion: assertTrue(bigInteger3.equals((Object)bigInteger2));
      //  // Unstable assertion: assertTrue(bigInteger3.equals((Object)bigInteger0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte) (-27), (byte) (-53)}, byteArray0);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger3.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger3.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger3);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false, false);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertTrue(bigInteger0.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray4);
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)111, (byte)117, (byte)88, (byte)76, (byte)32, (byte)124}, byteArray5);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-94), (byte) (-27), (byte) (-53)}, byteArray0);
      //  // Unstable assertion: assertEquals(6, byteArray5.length);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertNotNull(byteArray5);
      
      byte[] byteArray6 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertTrue(bigInteger0.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray6);
      //  // Unstable assertion: assertEquals(0, byteArray6.length);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertNotNull(byteArray6);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Base64 base64_0 = new Base64(0, byteArray0, false);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64String(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      
      byte[] byteArray1 = base64_0.decode("");
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      assertNotNull(byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertSame(byteArray3, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray3);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false);
      assertNotSame(byteArray0, byteArray4);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray3);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray4);
      assertSame(byteArray1, byteArray3);
      assertSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertSame(byteArray4, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray3));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray4.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray4);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      Base64 base64_0 = new Base64((-1));
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)1, 1832);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(base64_0);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[0];
      int int0 = base64_0.readResults(byteArray0, 76, 76);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, int0);
      assertEquals(0, byteArray0.length);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(0, byteArray0);
      assertFalse(base64_1.equals((Object)base64_0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(base64_1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_1.encode(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotSame(base64_1, base64_0);
      assertSame(byteArray1, byteArray0);
      assertFalse(base64_1.equals((Object)base64_0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(byteArray1);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 76);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotSame(base64_1, base64_0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertFalse(base64_1.isUrlSafe());
      assertNotNull(byteArray2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Base64 base64_2 = new Base64(76);
      assertFalse(base64_2.equals((Object)base64_1));
      assertFalse(base64_2.equals((Object)base64_0));
      assertFalse(base64_2.isUrlSafe());
      assertNotNull(base64_2);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64("org.apache.commons.codec.binary.Base64");
      assertFalse(boolean0);
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      assertNotSame(base64_0, base64_1);
      assertNotSame(base64_0, base64_2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray3, byteArray1);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray3, byteArray0);
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(base64_0.equals((Object)base64_2));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
      assertFalse(base64_0.isUrlSafe());
      assertNotNull(byteArray3);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean1 = Base64.isArrayByteBase64(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray2);
      assertNotSame(base64_1, base64_2);
      assertNotSame(base64_1, base64_0);
      assertSame(byteArray1, byteArray3);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertFalse(base64_1.equals((Object)base64_2));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertTrue(boolean1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray0);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray1);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray4);
      assertEquals(0, byteArray4.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(byteArray4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray0);
      
      BigInteger bigInteger1 = BigInteger.TEN;
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      
      BigInteger[] bigIntegerArray0 = bigInteger0.divideAndRemainder(bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger1, bigInteger0);
      //  // Unstable assertion: assertEquals(2, bigIntegerArray0.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger1.shortValue());
      //  // Unstable assertion: assertNotNull(bigIntegerArray0);
      
      boolean boolean0 = Base64.isBase64((byte)108);
      //  // Unstable assertion: assertTrue(boolean0);
      
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)61, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)15677, bigInteger2.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      
      int int0 = bigInteger2.intValue();
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertEquals(1130839357, int0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)61, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)15677, bigInteger2.shortValue());
      
      BigInteger bigInteger3 = bigInteger0.multiply(bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger0);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)61, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)15677, bigInteger2.shortValue());
      //  // Unstable assertion: assertEquals((short)25698, bigInteger3.shortValue());
      //  // Unstable assertion: assertEquals((byte)98, bigInteger3.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger3);
      
      BigInteger bigInteger4 = bigInteger3.min(bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger0);
      //  // Unstable assertion: assertSame(bigInteger4, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger4, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger4, bigInteger2);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger4.equals((Object)bigInteger2));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)61, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)15677, bigInteger2.shortValue());
      //  // Unstable assertion: assertEquals((short)25698, bigInteger3.shortValue());
      //  // Unstable assertion: assertEquals((byte)98, bigInteger3.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger4.shortValue());
      //  // Unstable assertion: assertEquals((byte)10, bigInteger4.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger4);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61, (byte)32, (byte)124}, byteArray1);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray1);
      
      BigInteger bigInteger5 = bigInteger0.multiply(bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger5);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger5);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger5);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger3, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger5, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger5, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger5, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger5, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger5, bigInteger0);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger4));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger4));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger3.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger5.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger5.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger5.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger5.equals((Object)bigInteger4));
      //  // Unstable assertion: assertFalse(bigInteger5.equals((Object)bigInteger0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)61, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)15677, bigInteger2.shortValue());
      //  // Unstable assertion: assertEquals((short)25698, bigInteger3.shortValue());
      //  // Unstable assertion: assertEquals((byte)98, bigInteger3.byteValue());
      //  // Unstable assertion: assertEquals((short) (-5164), bigInteger5.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-44), bigInteger5.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger5);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger5);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger5));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)32, (byte)124}, byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger5);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger5));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)32, (byte)124}, byteArray2);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(8, byteArray2.length);
      //  // Unstable assertion: assertEquals(11, byteArray3.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger5);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger5));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81}, byteArray4);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray4.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray4);
      
      BigInteger bigInteger6 = bigInteger0.max(bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger5);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger6);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger3);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger0, bigInteger4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger5);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertSame(bigInteger2, bigInteger6);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger3);
      //  // Unstable assertion: assertNotSame(bigInteger6, bigInteger0);
      //  // Unstable assertion: assertNotSame(bigInteger6, bigInteger5);
      //  // Unstable assertion: assertSame(bigInteger6, bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger6, bigInteger4);
      //  // Unstable assertion: assertNotSame(bigInteger6, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger6, bigInteger3);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger5));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger2));
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger5));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger4));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger3));
      //  // Unstable assertion: assertFalse(bigInteger6.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(bigInteger6.equals((Object)bigInteger5));
      //  // Unstable assertion: assertFalse(bigInteger6.equals((Object)bigInteger4));
      //  // Unstable assertion: assertFalse(bigInteger6.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger6.equals((Object)bigInteger3));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals((byte)10, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)10, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)61, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)15677, bigInteger2.shortValue());
      //  // Unstable assertion: assertEquals((byte)61, bigInteger6.byteValue());
      //  // Unstable assertion: assertEquals((short)15677, bigInteger6.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger6);
      
      byte[] byteArray5 = Base64.decodeBase64("");
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray5);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
      //  // Unstable assertion: assertNotNull(byteArray5);
      
      byte[] byteArray6 = Base64.encodeBase64((byte[]) null, false, true, 1130839357);
      //  // Unstable assertion: assertNull(byteArray6);
      
      byte[] byteArray7 = Base64.discardWhitespace(byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray7);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray5);
      //  // Unstable assertion: assertEquals(0, byteArray7.length);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
      //  // Unstable assertion: assertNotNull(byteArray7);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[9];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)9;
      byteArray1[3] = (byte)42;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)42;
      byteArray1[7] = (byte)95;
      byteArray1[8] = (byte)42;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)12, (byte)9, (byte)42, (byte) (-1), (byte)0, (byte)42, (byte)95, (byte)42}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)12, (byte)42, (byte) (-1), (byte)0, (byte)42, (byte)95, (byte)42}, byteArray2);
      //  // Unstable assertion: assertEquals(9, byteArray1.length);
      //  // Unstable assertion: assertEquals(7, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray2);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger0);
      
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)12, (byte)9, (byte)42, (byte) (-1), (byte)0, (byte)42, (byte)95, (byte)42}, byteArray1);
      //  // Unstable assertion: assertEquals(9, byteArray1.length);
      //  // Unstable assertion: assertEquals((short)24362, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)42, bigInteger1.byteValue());
      //  // Unstable assertion: assertNotNull(bigInteger1);
      
      byte[] byteArray3 = new byte[1];
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)42;
      base64_0.encode(byteArray3, (-84), (-644));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)42}, byteArray3);
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)12, (byte)9, (byte)42, (byte) (-1), (byte)0, (byte)42, (byte)95, (byte)42}, byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(9, byteArray1.length);
      
      byte[] byteArray4 = base64_0.decode(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)12, (byte)9, (byte)42, (byte) (-1), (byte)0, (byte)42, (byte)95, (byte)42}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)12, (byte)42, (byte) (-1), (byte)0, (byte)42, (byte)95, (byte)42}, byteArray2);
      //  // Unstable assertion: assertEquals(9, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertEquals(7, byteArray2.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)12, (byte)9, (byte)42, (byte) (-1), (byte)0, (byte)42, (byte)95, (byte)42}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)12, (byte)42, (byte) (-1), (byte)0, (byte)42, (byte)95, (byte)42}, byteArray2);
      //  // Unstable assertion: assertEquals(9, byteArray1.length);
      //  // Unstable assertion: assertEquals(14, byteArray5.length);
      //  // Unstable assertion: assertEquals(7, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray5);
      
      BigInteger bigInteger2 = BigInteger.ONE;
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals((byte)1, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger2.shortValue());
      //  // Unstable assertion: assertNotNull(bigInteger2);
      
      byte[] byteArray6 = Base64.toIntegerBytes(bigInteger2);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger1);
      //  // Unstable assertion: assertNotSame(bigInteger2, bigInteger0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(bigInteger2.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray6);
      //  // Unstable assertion: assertEquals(1, byteArray6.length);
      //  // Unstable assertion: assertEquals((byte)1, bigInteger2.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger2.shortValue());
      //  // Unstable assertion: assertNotNull(byteArray6);
      
      byte[] byteArray7 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61, (byte)32, (byte)124}, byteArray7);
      //  // Unstable assertion: assertEquals(4, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray7.length);
      //  // Unstable assertion: assertNotNull(byteArray7);
      
      boolean boolean1 = Base64.isBase64(byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)12, (byte)9, (byte)42, (byte) (-1), (byte)0, (byte)42, (byte)95, (byte)42}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)12, (byte)42, (byte) (-1), (byte)0, (byte)42, (byte)95, (byte)42}, byteArray2);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertEquals(9, byteArray1.length);
      //  // Unstable assertion: assertEquals(0, byteArray4.length);
      //  // Unstable assertion: assertEquals(7, byteArray2.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray8 = base64_0.decode("");
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray5);
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray5));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray8);
      //  // Unstable assertion: assertEquals(0, byteArray8.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray8);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray9 = Base64.encodeBase64(byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray9);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray9);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray9, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray9);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray8));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray8));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray8));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray9.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray8));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)9, (byte)12, (byte)9, (byte)42, (byte) (-1), (byte)0, (byte)42, (byte)95, (byte)42}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)12, (byte)42, (byte) (-1), (byte)0, (byte)42, (byte)95, (byte)42}, byteArray2);
      //  // Unstable assertion: assertEquals(9, byteArray1.length);
      //  // Unstable assertion: assertEquals(14, byteArray5.length);
      //  // Unstable assertion: assertEquals(20, byteArray9.length);
      //  // Unstable assertion: assertEquals(7, byteArray2.length);
      //  // Unstable assertion: assertNotNull(byteArray9);
      
      byte[] byteArray10 = Base64.encodeBase64URLSafe(byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray2);
      //  // Unstable assertion: assertSame(byteArray8, byteArray10);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray9);
      //  // Unstable assertion: assertNotSame(byteArray8, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray9);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray4);
      //  // Unstable assertion: assertSame(byteArray10, byteArray8);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray10, byteArray0);
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray9));
      //  // Unstable assertion: assertFalse(byteArray8.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray9));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray10.equals((Object)byteArray0));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray8);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray10);
      //  // Unstable assertion: assertEquals(0, byteArray8.length);
      //  // Unstable assertion: assertEquals(0, byteArray10.length);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertNotNull(byteArray10);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.clearBit(0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(0, mockRandom0);
      bigInteger1.longValueExact();
      bigInteger0.gcd(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      
      Base64.isBase64((byte) (-77));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = base64_0.decode("");
      base64_0.encode(byteArray1, 0, (-1863));
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertSame(byteArray3, byteArray2);
      
      byte[] byteArray4 = base64_0.decode("encodeInteger called with null parameter");
      assertEquals(27, byteArray4.length);
      
      base64_0.decode(byteArray1, 89, (-2473));
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(0, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.min(bigInteger0);
      bigInteger0.divideAndRemainder(bigInteger1);
      boolean boolean0 = Base64.isBase64((byte)87);
      Base64 base64_0 = new Base64((byte)87);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      int int0 = bigInteger2.intValue();
      assertEquals(1130839357, int0);
      
      BigInteger bigInteger3 = bigInteger0.multiply(bigInteger2);
      bigInteger3.abs();
      BigInteger bigInteger4 = bigInteger3.min(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
      bigInteger0.multiply(bigInteger3);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = new Base64();
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      assertEquals(1, byteArray3.length);
      
      Base64.encodeBase64(byteArray2, true);
      boolean boolean1 = base64_1.isUrlSafe();
      assertFalse(boolean1);
      
      boolean boolean2 = base64_1.hasData();
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)87;
      byteArray4[1] = (byte)87;
      byteArray4[2] = (byte)77;
      byteArray4[3] = (byte)87;
      byteArray4[4] = (byte)87;
      byteArray4[5] = (byte)87;
      byteArray4[6] = (byte)87;
      byteArray4[7] = (byte)87;
      byteArray4[8] = (byte)74;
      BigInteger bigInteger5 = Base64.decodeInteger(byteArray4);
      assertEquals((short)26006, bigInteger5.shortValue());
      
      Base64.encodeBase64(byteArray0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray0);
      assertSame(bigInteger0, bigInteger4);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray1, true);
      base64_0.isUrlSafe();
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(0, byteArray0, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte)52;
      byteArray1[3] = (byte) (-47);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64 base64_0 = new Base64((-38));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)32);
      Base64 base64_1 = new Base64((byte) (-115));
      Base64.isBase64("=4\"(f");
      byte[] byteArray2 = base64_1.decode(byteArray1);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)32, (byte)0, (byte)0}, byteArray2);
      assertEquals(3, byteArray2.length);
      
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)100;
      byteArray3[1] = (byte)82;
      byteArray3[2] = (byte) (-66);
      byteArray3[3] = (byte) (-101);
      byteArray3[4] = (byte)1;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte) (-66);
      byteArray3[7] = (byte)0;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 20);
      assertEquals(13, byteArray1.length);
      
      Base64 base64_0 = new Base64((-1339));
      base64_0.decode(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)100;
      byteArray2[2] = (byte)81;
      byteArray2[3] = (byte) (-115);
      byteArray2[4] = (byte)72;
      byteArray2[5] = (byte) (-115);
      byteArray2[6] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2);
      assertEquals(12, byteArray3.length);
      
      Base64.isBase64("");
      base64_0.decode(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((short)29953, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)14;
      byte[] byteArray1 = Base64.decodeBase64("");
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, false, 89);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertEquals(34, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64((byte)0);
      base64_0.readResults(byteArray0, 2075, (byte)0);
      base64_0.decode(byteArray0, 2075, (-750));
      Base64.encodeBase64URLSafeString(byteArray0);
      String string0 = base64_0.encodeToString(byteArray0);
      assertEquals("AAAA", string0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      assertEquals(4, byteArray1.length);
      assertTrue(boolean0);
      
      base64_0.encode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray2, true);
      assertSame(byteArray2, byteArray1);
      
      Base64.isBase64((byte)127);
      Base64 base64_2 = new Base64((byte)127);
      boolean boolean0 = base64_2.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64((-38));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byte byte0 = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byte byte1 = (byte) (-8);
      byteArray0[2] = (byte) (-8);
      base64_0.decode(byteArray0, 62, (int) (byte) (-8));
      base64_0.decode(byteArray0, 2467, 8184);
      base64_0.encode(byteArray0, 14, (int) (byte) (-8));
      base64_0.decode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.decodeBase64("~MZ{%J");
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("MVFBc2FnQnpBQQ==", string0);
      
      byte[] byteArray3 = Base64.decodeBase64("MVFBc2FnQnpBQQ==");
      Base64.isBase64((byte)8);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((short)29440, bigInteger0.shortValue());
      
      base64_0.encode(byteArray3);
      assertEquals(10, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-110)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)77, (byte)90, (byte)73, (byte)61}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.clearBit(0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = new BigInteger(0, mockRandom0);
      bigInteger1.longValueExact();
      bigInteger0.gcd(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray0);
      
      Base64.isBase64((byte) (-77));
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = new byte[0];
      Base64.isArrayByteBase64(byteArray4);
      byte[] byteArray5 = Base64.encodeBase64(byteArray2);
      assertEquals(24, byteArray2.length);
      assertEquals(32, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64((byte)32, byteArray0, false);
      base64_0.decode((Object) "");
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean1 = Base64.isBase64((byte) (-59));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byte byte0 = (byte)1;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      Object object1 = base64_0.decode((Object) "X!b1/tRp^J");
      Object object2 = base64_0.decode(object1);
      base64_0.encode(object2);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, (-4199));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -4199
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(235, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQEA |]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      Base64 base64_0 = new Base64((-1), byteArray0);
      base64_0.encode(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 1179);
      Base64 base64_1 = new Base64(95);
      Base64.isBase64("3!pHWb:");
      byte[] byteArray2 = base64_1.decode(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)28, (byte)19, (byte) (-55), (byte)0, (byte)1}, byteArray2);
      //  // Unstable assertion: assertEquals(5, byteArray2.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)12;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray2, true);
      assertEquals(0, byteArray2.length);
      
      Base64 base64_1 = new Base64((byte)127);
      base64_1.isUrlSafe();
      boolean boolean0 = base64_1.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-83);
      base64_0.encode(byteArray0, (int) (byte)0, (-1));
      byteArray0[6] = (byte) (-19);
      base64_0.decode(byteArray0, (-1312), 0);
      base64_0.decode((byte[]) null, 0, 0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.encode(byteArray1, 2, (-1646));
      base64_0.readResults(byteArray1, 0, 2558);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64((-2708));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[4];
      Base64.isBase64(",`>B\"r>Oe!{k3");
      base64_0.encode(byteArray2, (int) (byte)0, (int) (byte)0);
      byteArray2[0] = (byte)0;
      Base64.decodeInteger(byteArray2);
      Base64.decodeBase64(byteArray2);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      byteArray2[3] = (byte)0;
      base64_0.readResults(byteArray2, (byte)0, 0);
      base64_0.decode(byteArray3);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, false, (-1583));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -1583
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Base64 base64_0 = new Base64((-2708));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[4];
      Base64.isBase64(",`>B\"r>Oe!{k3");
      base64_0.encode(byteArray2, (int) (byte)0, (int) (byte)0);
      byteArray2[0] = (byte)0;
      Base64.decodeInteger(byteArray2);
      Base64.decodeBase64(byteArray2);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      byteArray2[3] = (byte)0;
      base64_0.readResults(byteArray2, (byte)0, 0);
      base64_0.decode(byteArray3);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64.isBase64((byte)126);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((byte)126);
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 953, 82);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 953
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)83;
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)70, (byte)84}, byteArray1);
      
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.avail();
      byte[] byteArray2 = base64_0.decode(".7s.w}hnRiu>o");
      assertArrayEquals(new byte[] {(byte) (-18), (byte) (-52), (byte)33, (byte) (-99), (byte)24, (byte) (-82)}, byteArray2);
      assertEquals(6, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-19);
      base64_0.decode(byteArray0, (-1312), 0);
      base64_0.decode((byte[]) null, 0, 0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.encode(byteArray1, 2, (-1646));
      assertEquals(12, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-8);
      byteArray0[0] = (byte) (-8);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)107;
      byte byte2 = (byte)4;
      byteArray0[4] = (byte)4;
      Base64.isBase64(byteArray0);
      Base64.decodeBase64("?$F)9~4R'})");
      Base64 base64_0 = new Base64((byte) (-8));
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-8);
      byteArray1[2] = (byte)4;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)1;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(1, byteArray1.length);
      
      byteArray0[8] = (byte)124;
      Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.pow(24);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray2);
      
      base64_0.decode((byte[]) null);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      Base64 base64_0 = new Base64((-1), byteArray0);
      base64_0.encode(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null);
      base64_0.encode((byte[]) null, 111, 0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-43);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = Base64.decodeBase64("~MZ{%J");
      assertArrayEquals(new byte[] {(byte)49, (byte) (-110)}, byteArray3);
      
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("MVFBc2FnQnpBQQ==", string0);
      
      int int0 = base64_0.readResults(byteArray0, 0, 52);
      assertEquals((-1), int0);
      
      base64_0.encode(byteArray2, 52, 0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray2);
      assertArrayEquals(new byte[] {(byte)49, (byte)81, (byte)65, (byte)115, (byte)97, (byte)103, (byte)66, (byte)122, (byte)65, (byte)65}, byteArray4);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("MVFBc2FnQnpBQQ", string1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-68);
      byteArray0[0] = (byte) (-68);
      byte byte1 = (byte)124;
      byteArray0[1] = (byte)124;
      Base64 base64_0 = new Base64((-4199), byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        bigInteger0.add((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divideAndRemainder(bigInteger1);
      Base64.isBase64((byte)87);
      Base64 base64_0 = new Base64((byte)87);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger2.intValue();
      BigInteger bigInteger3 = bigInteger0.multiply(bigInteger2);
      bigInteger3.min(bigInteger0);
      Base64.encodeBase64Chunked(byteArray0);
      bigInteger0.multiply(bigInteger3);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.isUrlSafe();
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)14;
      Base64.encodeBase64(byteArray0, true);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)127;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)76, (byte)74, (byte)47, (byte)0, (byte)0}, byteArray1);
      
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      
      boolean boolean0 = base64_0.isUrlSafe();
      //  // Unstable assertion: assertFalse(boolean0);
      
      boolean boolean1 = base64_0.hasData();
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)71;
      base64_0.decode(byteArray0, (int) (byte)124, (int) (byte)0);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byte byte0 = (byte)12;
      byteArray0[1] = (byte)12;
      byte byte1 = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.remainder(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte) (-1), (int) (byte)73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeInteger(bigInteger0);
      boolean boolean0 = false;
      bigInteger0.bitLength();
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.remainder(bigInteger1);
      base64_0.encodeToString(byteArray1);
      BigInteger bigInteger2 = BigInteger.ONE;
      try { 
        base64_0.encode((Object) "UVZFOVBRPT0=\r\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)0;
      base64_0.decode(byteArray0, 2291, (int) (byte) (-106));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 20);
      assertEquals(13, byteArray1.length);
      
      Base64 base64_0 = new Base64((-1339));
      Base64.isBase64("");
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)65}, byteArray2);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-116);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)115, (byte)57, (byte)48, (byte)95, (byte)113, (byte)45, (byte)83, (byte)77}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)102;
      byteArray1[5] = (byte)79;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)102;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-84), byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFD\u0000\uFFFDfO\u0000f]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte) (-110);
      byteArray0[8] = (byte)18;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\u0000\u0000\u00002\u0000-\uFFFD\u0012]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)71;
      byteArray0[0] = (byte)71;
      byte byte1 = (byte)72;
      byteArray0[1] = (byte)72;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)71, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [GH]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(451, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [aI&\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      base64_0.readResults(byteArray0, (-1906), (-1906));
      base64_0.decode(byteArray0, 0, (-26));
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
      
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)42;
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-36);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(1862);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-36);
      Base64.encodeBase64(byteArray0, false, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)42, 1862);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-100);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-5);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)1;
      Base64.encodeBase64(byteArray1);
      base64_0.readResults(byteArray0, (byte)0, (byte)0);
      base64_0.avail();
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-5);
      byteArray2[1] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(0, byteArray0, false);
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null, false);
      Base64 base64_0 = new Base64();
      base64_0.avail();
      base64_0.readResults((byte[]) null, 0, 0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(7, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-76), (byte) (-117), (byte) (-55), (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }
}
