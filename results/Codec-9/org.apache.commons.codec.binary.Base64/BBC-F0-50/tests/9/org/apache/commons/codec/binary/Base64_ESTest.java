/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:06:20 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64(4, byteArray1);
      Object object0 = base64_0.decode((Object) "o#w\",Bd(!@K");
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte) (-114);
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte) (-30);
      byteArray1[4] = (byte)43;
      byteArray1[5] = (byte)38;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-1);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(3175, mockRandom0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = new Base64(3175, byteArray0, true);
      base64_0.avail();
      Base64 base64_1 = new Base64((-2427));
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 3093);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(1073741824, byteArray0);
      Base64.encodeBase64(byteArray0, true, true, 6);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray1 = new byte[0];
      base64_0.encodeToString(byteArray1);
      Base64 base64_2 = new Base64();
      Base64.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      bigInteger1.xor(bigInteger0);
      Base64 base64_1 = new Base64(38, byteArray0, false);
      base64_1.decode(byteArray1, 0, 56);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed((-11L));
      BigInteger bigInteger0 = BigInteger.probablePrime(3175, mockRandom0);
      bigInteger0.bitLength();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 38, 3175);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[8];
      base64_0.decode(byteArray2, 1, 1);
      byteArray2[3] = (byte) (-49);
      byteArray2[3] = (byte) (-49);
      byteArray2[4] = (byte)96;
      byteArray2[5] = (byte)57;
      byteArray2[1] = (byte)121;
      base64_0.encode(byteArray1, 336, (int) (byte) (-49));
      Base64.isBase64(byteArray2);
      Base64.encodeBase64(byteArray2, false, false, (int) (byte)121);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 8192);
      Base64.isBase64((byte) (-26));
      Base64 base64_0 = new Base64(99, byteArray0);
      base64_0.encode(byteArray1, 72, (int) (byte) (-26));
      base64_0.encodeToString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64 base64_0 = new Base64((byte)40);
      base64_0.encode(byteArray1, (int) (byte)0, (-2424));
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.divide(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 719, (int) (byte)62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(3175, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((-330));
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(397, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64((-2547));
      Base64.decodeBase64("x-WYD&WO'h.sSBu");
      base64_0.encode(byteArray0, 495, (-2547));
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.encode(byteArray0, 508, 2494);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 2494, 42);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base64 base64_0 = new Base64(17, byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_1 = new Base64(27, byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.decodeInteger(byteArray2);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1244L);
      BigInteger bigInteger0 = BigInteger.probablePrime(332, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      boolean boolean0 = false;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte)3;
      byteArray1[3] = (byte)11;
      byteArray1[4] = (byte)32;
      byteArray1[5] = (byte)112;
      byteArray1[6] = (byte) (-128);
      byteArray1[7] = (byte)104;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, (int) (byte) (-128));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -128
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      Base64 base64_0 = new Base64(781);
      base64_0.avail();
      Base64 base64_1 = new Base64(76);
      int int0 = 1;
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 1, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64("");
      Base64 base64_0 = new Base64(1350, byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-52);
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)111;
      byteArray1[3] = (byte)31;
      byteArray1[4] = (byte)53;
      byteArray1[5] = (byte)57;
      byteArray1[6] = (byte)121;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 1, 21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(19, mockRandom0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(true);
      Object object0 = base64_1.decode((Object) "AAAAAAAA");
      base64_1.encode(object0);
      Object object1 = new Object();
      try { 
        base64_1.decode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(32, mockRandom0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64((byte)0);
      mockRandom0.nextBytes(byteArray2);
      base64_0.encode(byteArray2, 19, (-21));
      assertArrayEquals(new byte[] {(byte)61, (byte)0, (byte)0, (byte)0, (byte)62, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(8, byteArray2.length);
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.toString();
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      assertArrayEquals(new byte[] {}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64((-1467));
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("T}9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.shortValueExact();
      bigInteger0.floatValue();
      Base64 base64_0 = new Base64((short)0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true, 76);
      assertSame(byteArray2, byteArray3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-17);
      byteArray0[2] = (byte) (-12);
      Base64 base64_0 = new Base64((byte) (-41), byteArray0);
      base64_0.decode(byteArray0, 2, (int) (byte)1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(16, byteArray1.length);
      
      Base64.isBase64((byte) (-41));
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64((-1467));
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte) (-118), byteArray0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_1 = new Base64((-2743), byteArray1);
      Base64.encodeBase64(byteArray1);
      Base64.decodeInteger(byteArray1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.commons.codec.binary.Base64");
      assertEquals(24, byteArray1.length);
      
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(true);
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      base64_0.decode((byte[]) null);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)34, (byte)0}, byteArray1);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(19, mockRandom0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals("AAAAAAAA", string0);
      
      Base64 base64_0 = new Base64((byte)42);
      Base64 base64_1 = new Base64(true);
      boolean boolean0 = base64_1.isUrlSafe();
      Base64 base64_2 = new Base64((byte)0, byteArray2, true);
      String string1 = base64_2.encodeToString(byteArray3);
      //  // Unstable assertion: assertEquals("QkFBRA", string1);
      
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeInteger(bigInteger0);
      boolean boolean1 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      BigInteger bigInteger0 = BigInteger.valueOf((-2466L));
      bigInteger0.toByteArray();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64((-1406));
      base64_1.isUrlSafe();
      base64_1.encodeToString(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeInteger(bigInteger0);
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 3147;
      BigInteger bigInteger0 = BigInteger.probablePrime(3147, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      int int1 = 74;
      Base64 base64_0 = new Base64(int1);
      Base64.encodeInteger(bigInteger0);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      BigInteger bigInteger0 = BigInteger.valueOf((-1));
      byte[] byteArray1 = bigInteger0.toByteArray();
      Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("/w==", string0);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("XAAAAA", string1);
      
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray0);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      Object object0 = base64_0.decode((Object) "");
      Object object1 = base64_0.decode(object0);
      assertSame(object1, object0);
      
      base64_0.encode(byteArray0, 972, (-3472));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-17);
      byteArray0[0] = (byte) (-17);
      byte byte1 = (byte)1;
      byteArray0[1] = (byte)1;
      byte byte2 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte3 = (byte) (-41);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-41), byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.isBase64(byteArray1);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-41);
      byteArray2[1] = (byte) (-41);
      byteArray2[2] = (byte)22;
      byteArray2[3] = (byte)22;
      byteArray2[4] = (byte) (-41);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(3147, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (-2423), 2558);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2423
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(19, mockRandom0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 588);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-41), byteArray1);
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 2, (int) (byte)22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.ONE;
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
      base64_0.decode((Object) "");
      byte[] byteArray0 = new byte[1];
      String string0 = base64_0.encodeToString(byteArray0);
      //  // Unstable assertion: assertEquals("AA\"\u0000", string0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      base64_0.readResults(byteArray0, 43, 43);
      byteArray0[0] = (byte)41;
      base64_0.decode(byteArray0, (int) (byte)41, 1);
      base64_0.avail();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)75, (byte)81, (byte)61, (byte)61, (byte)34, (byte)0}, byteArray1);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.readResults(byteArray2, (-665), 715);
      base64_0.decode("}oxhb2/D&m+");
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.intValue();
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray3 = Base64.decodeBase64("#Q71b!kH");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte) (-67), (byte)91, (byte) (-112)}, byteArray3);
      
      Random.setNextRandom((-1));
      byte[] byteArray4 = base64_0.decode(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)41}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)57);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1464, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [U>\uFFFD\uFFFD9\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      BigInteger bigInteger0 = BigInteger.valueOf((-1));
      byte[] byteArray1 = bigInteger0.toByteArray();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64("I{r");
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("", string0);
      
      Base64.encodeBase64URLSafeString(byteArray2);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray3);
      assertEquals(2, byteArray5.length);
      assertArrayEquals(new byte[] {(byte)73, (byte)103}, byteArray5);
      
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray6 = Base64.decodeBase64("");
      byte[] byteArray7 = Base64.encodeBase64(byteArray6);
      byte[] byteArray8 = new byte[5];
      byteArray8[0] = (byte)1;
      byteArray8[1] = (byte)92;
      byteArray8[2] = (byte)92;
      byteArray8[3] = (byte)92;
      byteArray8[4] = (byte)1;
      base64_0.encodeToString(byteArray8);
      Base64.isArrayByteBase64(byteArray7);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      Base64 base64_1 = new Base64(757);
      String string1 = Base64.encodeBase64String(byteArray8);
      assertEquals("AVxcXAE=", string1);
      
      byte[] byteArray9 = Base64.encodeBase64(byteArray4, false, false);
      assertSame(byteArray9, byteArray4);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(19, mockRandom0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(4, byteArray3.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertEquals("AAAAAAAA", string0);
      
      Base64 base64_0 = new Base64((byte)42);
      base64_0.encode(byteArray1, (int) (byte)0, (-2423));
      assertEquals(10, byteArray1.length);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, false, false, 616);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)99;
      byteArray2[1] = (byte)99;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)99;
      byteArray2[4] = (byte)99;
      byteArray2[5] = (byte)12;
      Base64.encodeBase64String(byteArray2);
      Base64.isBase64(byteArray1);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte) (-118), byteArray0);
      base64_0.decode((Object) "");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 972);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64 base64_0 = new Base64(1384, (byte[]) null);
      Base64.decodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-118);
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)0;
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-7);
      byteArray0[0] = (byte) (-7);
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.isProbablePrime((byte) (-7));
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.getLowestSetBit();
      BigInteger.valueOf((byte)0);
      bigInteger0.shiftLeft(76);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.readResults(byteArray1, 2401, 780);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.encode(byteArray1);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      bigInteger1.longValueExact();
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      Base64.discardWhitespace(byteArray2);
      Base64.discardWhitespace(byteArray3);
      Base64.encodeBase64(byteArray2);
      Base64.decodeInteger(byteArray3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64((-1067));
      base64_0.avail();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64((byte)122);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-41), byteArray1);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 2, (int) (byte)22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)92;
      byteArray0[0] = (byte)92;
      byte byte1 = (byte)1;
      BigInteger bigInteger0 = BigInteger.valueOf((-1));
      byte[] byteArray1 = bigInteger0.toByteArray();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray1);
      Base64.decodeBase64("I{r");
      Base64 base64_0 = new Base64();
      base64_0.isUrlSafe();
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.max(bigInteger1);
      Base64 base64_1 = new Base64((byte) (-119), byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte) (-119);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-119);
      byteArray1[1] = (byte)9;
      Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray1, (int) (byte)0, (-971));
      base64_0.encode(byteArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte)12;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)1;
      Object object0 = new Object();
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-1560), byteArray2, false);
      base64_0.decode(byteArray1);
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.TEN;
      byte[] byteArray1 = bigInteger0.toByteArray();
      Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
      Base64.decodeBase64("eS\fJi-6[qZT");
      base64_0.isUrlSafe();
      base64_0.encodeToString(byteArray1);
      Base64.decodeBase64("iQ");
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.avail();
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64(byteArray0, true, false);
      byteArray0[6] = (byte) (-99);
      Base64.decodeInteger(byteArray0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-119);
      byteArray0[0] = (byte) (-119);
      Base64.isBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.max(bigInteger1);
      byte[] byteArray1 = bigInteger0.toByteArray();
      Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("eS\fJi-6[qZT");
      base64_0.isUrlSafe();
      base64_0.encodeToString(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [+\uFFFDq\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-2081), byteArray0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte)89;
      byteArray1[3] = (byte) (-104);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte) (-104), (int) (byte)22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -104
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-368), byteArray0, true);
      base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger0.gcd(bigInteger2);
      Base64.toIntegerBytes(bigInteger0);
      bigInteger2.shiftRight(76);
      bigInteger2.gcd(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      Base64.toIntegerBytes(bigInteger2);
      // Undeclared exception!
      try { 
        bigInteger2.divideAndRemainder(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.getLowestSetBit();
      BigInteger.valueOf((byte)0);
      bigInteger0.shiftLeft(76);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = base64_0.encode(byteArray0);
      base64_0.readResults(byteArray3, 2401, 780);
      String string0 = Base64.encodeBase64URLSafeString(byteArray3);
      //  // Unstable assertion: assertEquals("QUE6AA", string0);
      
      base64_0.encode(byteArray3);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      bigInteger1.longValueExact();
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray4);
      Base64.discardWhitespace(byteArray4);
      byte[] byteArray6 = Base64.discardWhitespace(byteArray5);
      base64_0.decode(byteArray6, (int) (byte)0, (-2091));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103}, byteArray6);
      //  // Unstable assertion: assertEquals(2, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-7);
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.isProbablePrime((byte) (-7));
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray1);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.floatValue();
      String string0 = "Ooyw";
      Base64.isBase64("Ooyw");
      Base64 base64_0 = new Base64(0, byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      int int0 = 123;
      base64_0.decode((Object) "Ooyw");
      base64_0.readResults(byteArray1, 123, 0);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger2 = bigInteger1.xor(bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger2.divide(bigInteger1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0, true);
      assertTrue(base64_0.isUrlSafe());
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64((-1467));
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-41);
      byteArray1[4] = (byte)22;
      byteArray1[5] = (byte)1;
      Base64.decodeBase64(byteArray1);
      base64_0.decode(byteArray0, (-1), (-1));
      Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)36;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 4459);
      assertArrayEquals(new byte[] {(byte)113, (byte)68, (byte)69, (byte)65, (byte)65, (byte)65, (byte)65, (byte)107}, byteArray1);
      
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = base64_0.decode(byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)98);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      base64_0.hasData();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(14, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      base64_0.avail();
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("QUNxY1lnQUE=", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64(1255, byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      int int0 = base64_0.readResults(byteArray0, 1805, (-530));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-56);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("Pcg=", string0);
      
      boolean boolean0 = Base64.isBase64("Pcg=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)11;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)64;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)0;
      Base64 base64_0 = new Base64((-1), byteArray0);
      Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray0, 366, 0);
      base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)92, (byte)1, (byte)9, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      int int0 = base64_0.readResults(byteArray0, (-3165), (byte) (-1));
      assertEquals(0, int0);
      
      Base64.isBase64("ak?");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-6);
      byteArray1[4] = (byte) (-54);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)86;
      byteArray1[7] = (byte) (-13);
      byteArray1[8] = (byte)0;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-19);
      byte byte0 = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byte byte1 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byte byte2 = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-88);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.decode((Object) "");
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte) (-88));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -88
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, (int) (byte)79);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)76, (byte)119, (byte)66, (byte)80, (byte)95, (byte)119, (byte)65, (byte) (-118), (byte)0}, byteArray1);
      
      byte[] byteArray2 = new byte[1];
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertEquals("AA", string0);
      
      byteArray2[0] = (byte)19;
      String string1 = base64_0.encodeToString(byteArray2);
      //  // Unstable assertion: assertEquals("Ew==", string1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)118;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64((-1067));
      base64_0.avail();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64(byteArray0);
      base64_0.encodeToString(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray1);
      assertArrayEquals(new byte[] {(byte)101, (byte)103, (byte)65}, byteArray1);
      assertEquals("ZWdB", string0);
      
      byteArray0[1] = (byte) (-16);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      int int0 = base64_0.readResults(byteArray2, (byte) (-16), 0);
      assertEquals((-1), int0);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)39;
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      Base64.encodeBase64Chunked(byteArray0);
      Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = "";
      byte[] byteArray0 = base64_0.decode("");
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte)30;
      byteArray1[0] = (byte)30;
      byte byte1 = (byte)0;
      byteArray1[1] = (byte)0;
      base64_0.encode(byteArray1);
      base64_0.decode((Object) "");
      Base64.encodeBase64URLSafe(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(1, (byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.decodeBase64("");
      base64_0.readResults((byte[]) null, 1428, 82);
      Base64.encodeBase64((byte[]) null, false, false);
      byte byte0 = (byte) (-22);
      Base64.isBase64((byte) (-22));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-22);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64((-821), byteArray0);
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte) (-118));
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-4);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-81);
      byte byte1 = (byte) (-57);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)45;
      byte byte2 = (byte)0;
      byteArray0[5] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-2560), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\uFFFD\uFFFD\uFFFD-\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, false, false);
      String string0 = null;
      base64_0.encode((byte[]) null);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)48;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (int) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte) (-42);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("D1wAAPTUG9Y=", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte)1;
      Base64 base64_0 = new Base64((-949), byteArray1);
      base64_0.decode("");
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true, (int) (byte)37);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (int) (byte)1, (int) (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
