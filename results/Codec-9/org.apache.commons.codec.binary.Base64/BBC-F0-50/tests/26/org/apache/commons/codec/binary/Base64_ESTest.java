/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:06:48 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte byte0 = (byte)76;
      Base64.isBase64((byte)76);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Base64.isBase64((byte)70);
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)70, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1208);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = bigInteger1.divide(bigInteger2);
      bigInteger1.compareTo(bigInteger3);
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      int int0 = Base64.MIME_CHUNK_SIZE;
      base64_0.decode(byteArray0, 38, 1208);
      base64_0.encode(byteArray1, (int) (byte)70, 2153);
      base64_0.encode(byteArray1, (-887), (-1569));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Base64.isBase64((byte)76);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger((byte)62, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1300);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64 base64_0 = new Base64(2153);
      base64_0.decode(byteArray0, (int) (byte)62, 2153);
      base64_0.encode(byteArray0, (int) (byte)76, (int) (byte)62);
      base64_0.encode(byteArray0, (-3787), (-3787));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray1, 1040, (-3787));
      base64_0.encode(byteArray0, (int) (byte)62, 1514);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64.isBase64((byte)70);
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)70, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1208);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = bigInteger1.divide(bigInteger2);
      bigInteger1.compareTo(bigInteger3);
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      int int0 = Base64.MIME_CHUNK_SIZE;
      base64_0.decode(byteArray0, 38, 1208);
      base64_0.encode(byteArray1, (int) (byte)70, 2153);
      base64_0.encode(byteArray1, 64, 1208);
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray3, 76, (-2187));
      base64_0.encode(byteArray0, (-557), 1074);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(422, byteArray0, false);
      base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64(64, byteArray0, true);
      base64_0.encodeToString(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64String(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Object object0 = base64_1.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base64.isBase64((byte)76);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger((byte)62, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1300);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      int int0 = Base64.PEM_CHUNK_SIZE;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64((byte)62);
      String string0 = base64_0.encodeToString(byteArray0);
      base64_0.encode(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(string0);
      Base64.isBase64(byteArray2);
      base64_0.encode(byteArray1, 64, 64);
      // Undeclared exception!
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte byte0 = (byte)70;
      Base64.isBase64((byte)70);
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)70, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1208);
      bigInteger0.and(bigInteger1);
      bigInteger1.isProbablePrime(1208);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger2.not();
      bigInteger2.max(bigInteger0);
      bigInteger1.divide(bigInteger2);
      Base64 base64_0 = new Base64(1208);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)70);
      base64_0.encode((byte[]) null, (-981), (-1));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (byte)70, 1702);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64.isBase64((byte)70);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger((byte)62, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1220);
      Base64.isBase64((byte)62);
      mockRandom0.longs();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64.isBase64((byte)70);
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)70, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1208);
      bigInteger1.isProbablePrime(567);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger1.divide(bigInteger2);
      Base64 base64_0 = new Base64(1208);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      // Undeclared exception!
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64.isBase64((byte)70);
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)62, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1220);
      bigInteger1.getLowestSetBit();
      Base64.isBase64((byte)62);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64.isBase64((byte)70);
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)70, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1208);
      bigInteger1.isProbablePrime(567);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger1.divide(bigInteger2);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte byte0 = (byte)70;
      Base64.isBase64((byte)70);
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)70, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1208);
      bigInteger1.isProbablePrime(567);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      bigInteger1.divide(bigInteger2);
      Base64 base64_0 = new Base64(1208);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.readResults(byteArray0, (-2147483646), (-1));
      Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      base64_0.encode(byteArray1, 26, 2153);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64.isBase64((byte)70);
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)62, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1208);
      Base64.isBase64((byte)62);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)37;
      Base64.isBase64((byte)123);
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)122);
      Base64 base64_1 = new Base64(1);
      BigInteger bigInteger1 = BigInteger.ONE;
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Base64.isBase64((byte)70);
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)62, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1208);
      bigInteger1.isProbablePrime(567);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64((byte)70);
      base64_0.encode(byteArray0, 1208, (int) (byte)70);
      Random.setNextRandom(76);
      base64_0.decode(byteArray0, (int) (byte)62, 1769);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64.isBase64((byte)70);
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)70, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1208);
      bigInteger1.isProbablePrime(567);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(1208);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)62;
      Base64 base64_0 = new Base64(498, byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Base64 base64_0 = new Base64(15, (byte[]) null, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte) (-61);
      base64_0.encode(byteArray0, (-2813), (int) (byte) (-85));
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.decode((byte[]) null, 15, 15);
      byte[] byteArray1 = base64_0.decode(".xb&,BZEsz");
      Base64.isBase64((byte)8);
      base64_0.decode((byte[]) null, 15, 7682);
      Object object0 = base64_0.decode((Object) "fxTOv4;;t");
      base64_0.decode(object0);
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64.isBase64((byte)70);
      byte byte0 = (byte)62;
      MockRandom mockRandom0 = new MockRandom((byte)70);
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger((byte)62, mockRandom0);
      int int0 = 1208;
      mockRandom0.longs();
      BigInteger bigInteger1 = bigInteger0.pow(1208);
      bigInteger1.isProbablePrime(567);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      // Undeclared exception!
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.isProbablePrime(8192);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      int int0 = 893;
      base64_0.encode(byteArray0, 893, (-2604));
      base64_0.hasData();
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (-1), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64.isBase64((byte)70);
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)62, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1208);
      mockRandom0.nextBoolean();
      bigInteger1.isProbablePrime(567);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)62, 71);
      base64_0.hasData();
      Base64.decodeInteger(byteArray0);
      base64_0.decode(byteArray0, (int) (byte)70, (-86));
      base64_0.encode(byteArray0, (-943), (int) (byte)70);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64.isBase64((byte)70);
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)62, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1208);
      mockRandom0.nextBoolean();
      bigInteger1.isProbablePrime(567);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      base64_0.encode(byteArray0, (int) (byte)62, 71);
      base64_0.hasData();
      Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte)70;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 567, (int) (byte)70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 567
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Base64.isBase64((byte)7);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)97;
      byte byte0 = (byte) (-2);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte) (-2));
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-103);
      byteArray0[8] = (byte) (-103);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64Chunked(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow((byte)0);
      bigInteger0.longValue();
      bigInteger1.isProbablePrime((-1));
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)90;
      byteArray2[1] = (byte) (-103);
      Base64.encodeBase64(byteArray2, false);
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray1);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray3 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64.isBase64((byte)70);
      byte byte0 = (byte)91;
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)62, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(1208);
      bigInteger1.isProbablePrime(567);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte byte0 = (byte)70;
      Base64.isBase64((byte)70);
      byte byte1 = (byte)97;
      byte byte2 = (byte)62;
      byte byte3 = (byte) (-16);
      MockRandom mockRandom0 = new MockRandom((byte)70);
      BigInteger bigInteger0 = new BigInteger((byte)97, mockRandom0);
      BigInteger bigInteger1 = bigInteger0.pow(8192);
      bigInteger0.isProbablePrime(1);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(919);
      bigInteger0.isProbablePrime((-2447));
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true);
      assertEquals(702, byteArray4.length);
      
      Base64.encodeBase64URLSafe(byteArray3);
      byte[] byteArray5 = Base64.encodeBase64(byteArray2);
      assertEquals(0, byteArray5.length);
      
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray3, 76, 919);
      base64_1.encode(byteArray3, (-943), 76);
      assertEquals(512, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(919);
      bigInteger1.isProbablePrime((byte)0);
      bigInteger1.subtract(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(14, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      Base64 base64_0 = new Base64();
      Base64.isBase64(byteArray0);
      base64_0.decode(byteArray0, 7817, (int) (byte)0);
      byte[] byteArray5 = Base64.discardWhitespace(byteArray4);
      assertEquals(375, byteArray5.length);
      assertEquals(512, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_0 = new Base64(323);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 250);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-103);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-103);
      byteArray2[3] = (byte) (-103);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.discardWhitespace(byteArray2);
      Base64.isBase64(byteArray0);
      Random.setNextRandom(24);
      Base64 base64_0 = new Base64((byte)0);
      Base64 base64_1 = new Base64((byte) (-103));
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, 0, 24);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray1);
      byte[] byteArray2 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray2.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)14, (byte) (-54)}, byteArray1);
      
      Base64 base64_1 = new Base64(false);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      base64_1.encode(byteArray3, 67, (-1469));
      boolean boolean0 = base64_1.hasData();
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte byte0 = (byte)0;
      Base64.isBase64((byte)0);
      byte byte1 = (byte)97;
      byte byte2 = (byte)62;
      byte byte3 = (byte)1;
      Base64.encodeBase64Chunked((byte[]) null);
      Base64 base64_0 = new Base64((byte)91);
      Base64 base64_1 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, (int) (byte)91, 378);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)122;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAAAegAAAAAA", string0);
      
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64Chunked((byte[]) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(1);
      bigInteger0.subtract(bigInteger1);
      bigInteger0.isProbablePrime(48);
      Base64.encodeBase64Chunked((byte[]) null);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertEquals(8, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      assertArrayEquals(new byte[] {(byte)81, (byte)50, (byte)99, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray2);
      
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64.isBase64((byte)90);
      boolean boolean0 = Base64.isBase64((byte)122);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64(919, (byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true, 64);
      base64_0.decode((Object) "Og}=0");
      base64_0.encodeToString((byte[]) null);
      base64_0.readResults((byte[]) null, 919, 919);
      base64_0.decode((byte[]) null);
      base64_0.encode((byte[]) null);
      base64_0.decode((byte[]) null);
      base64_0.readResults((byte[]) null, 0, 8192);
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, true, 76);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64.isBase64((byte)70);
      byte byte0 = (byte)62;
      byte byte1 = (byte)91;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)62;
      Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64((byte)91);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      Base64 base64_0 = new Base64(52, byteArray0, false);
      base64_0.decode((Object) "org.apache.cSmmons.codec.DecoderException");
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.cSmmons.codec.DecoderException");
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64Chunked(byteArray2);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      bigInteger0.doubleValue();
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_1 = new Base64(false);
      base64_0.encodeToString(byteArray3);
      Base64.decodeBase64(byteArray0);
      Base64.discardWhitespace(byteArray2);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      Base64.encodeBase64(byteArray0, false, true);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      assertTrue(bigInteger1.equals((Object)bigInteger0));
      assertSame(byteArray0, byteArray1);
      
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)52;
      byteArray3[1] = (byte)32;
      byteArray3[2] = (byte)35;
      byteArray3[3] = (byte) (-15);
      byteArray3[4] = (byte)119;
      byteArray3[5] = (byte) (-110);
      byteArray3[6] = (byte) (-15);
      byteArray3[7] = (byte) (-72);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      Base64.isBase64(byteArray4);
      assertArrayEquals(new byte[] {(byte)52, (byte)35, (byte) (-15), (byte)119, (byte) (-110), (byte) (-15), (byte) (-72)}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      Base64 base64_0 = new Base64(52, byteArray0, false);
      base64_0.decode((Object) "org.apache.cSmmons.codec.DecoderException");
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = Base64.decodeBase64("org.apache.cSmmons.codec.DecoderException");
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      Base64.decodeInteger(byteArray3);
      byte[] byteArray4 = new byte[1];
      Base64.encodeBase64URLSafe(byteArray4);
      Base64.encodeBase64(byteArray2, false, false);
      Base64.encodeBase64URLSafeString((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-37);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.decodeBase64("EWw`");
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1);
      Base64.encodeBase64(byteArray1, false, false);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray4 = Base64.decodeBase64("");
      Base64.decodeBase64(byteArray4);
      Base64.isBase64((byte)61);
      Base64.encodeBase64URLSafeString(byteArray3);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(74, byteArray0, false);
      base64_0.decode((Object) "org.apache.cSmmons.codec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.encodeBase64(byteArray1, false, true);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray2);
      Base64.decodeInteger(byteArray3);
      byte[] byteArray5 = new byte[6];
      byteArray5[0] = (byte) (-22);
      byteArray5[1] = (byte) (-18);
      byteArray5[2] = (byte)81;
      byteArray5[3] = (byte)77;
      byteArray5[4] = (byte) (-94);
      byteArray5[5] = (byte)91;
      Base64.encodeBase64URLSafe(byteArray5);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)122;
      byteArray0[5] = (byte)87;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64(false);
      base64_0.decode((String) null);
      Base64.isBase64("h+N!M<}3x(\"JS,0");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)87);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byte[] byteArray1 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)122;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)122;
      Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)122;
      byteArray0[5] = (byte)87;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)87);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      bigInteger0.longValue();
      bigInteger0.signum();
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      base64_0.decode(byteArray1, (int) (byte)0, 712);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_1 = new Base64((-398), byteArray2, false);
      base64_1.decode(byteArray0);
      Base64.encodeBase64String(byteArray0);
      Object object0 = new Object();
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-3);
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      boolean boolean1 = true;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      Base64 base64_0 = new Base64(80, byteArray3, true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = bigInteger0.pow(919);
      bigInteger1.isProbablePrime((byte)0);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray2, false);
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray3);
      Base64.encodeBase64(byteArray4, true, false);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      BigInteger bigInteger1 = bigInteger0.pow(919);
      bigInteger1.isProbablePrime((byte)0);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray2, false);
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray3);
      // Undeclared exception!
      Base64.encodeBase64(byteArray4, true, false);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      Base64.decodeInteger(byteArray3);
      byte[] byteArray5 = new byte[2];
      byteArray5[0] = (byte)25;
      byteArray5[1] = (byte)89;
      Base64.discardWhitespace(byteArray5);
      Base64.isBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      Base64 base64_0 = new Base64(52, byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.longValueExact();
      Base64.encodeInteger(bigInteger0);
      boolean boolean0 = true;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte)14;
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte)14;
      byteArray1[5] = (byte)14;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      bigInteger0.signum();
      byte[] byteArray3 = new byte[0];
      Base64 base64_1 = new Base64((-196), byteArray3, true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 0, 3542);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64((byte[]) null, true);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.decodeInteger(byteArray1);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64(52, byteArray0, true);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      Base64.encodeBase64(byteArray0, true);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray1, (-1193), (-2420));
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 1;
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(1, (byte[]) null);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64(1412);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byte byte0 = (byte) (-103);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte) (-103);
      byteArray1[2] = (byte) (-21);
      byte byte1 = (byte)113;
      byteArray1[3] = (byte)113;
      Base64.encodeBase64(byteArray1);
      Base64 base64_1 = new Base64();
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-21);
      byteArray2[1] = (byte) (-103);
      byteArray2[2] = (byte) (-103);
      base64_0.decode(byteArray2);
      Object object0 = base64_0.decode((Object) "UTF-16LE");
      base64_1.encode(object0);
      try { 
        base64_1.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.testBit(1293);
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Object object0 = new Object();
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)73;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)62;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)73;
      byteArray1[1] = (byte) (-10);
      byteArray1[2] = (byte) (-10);
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)31);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)62, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u001F\u0000I\uFFFD\u001F>]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((-1), byteArray1, false);
      byte[] byteArray2 = base64_0.decode("DNmSZ{my5-F");
      Base64.encodeBase64(byteArray2, false, false, 64);
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.hasData();
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_1 = new Base64(64, byteArray1, false);
      base64_0.encode((byte[]) null);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray2);
      bigInteger1.pow(76);
      bigInteger2.isProbablePrime((-2518));
      Base64.encodeBase64Chunked(byteArray4);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray4, true);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((-1L));
      bigInteger1.longValueExact();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      bigInteger1.signum();
      Base64 base64_0 = new Base64((byte)0, byteArray0, false);
      base64_0.decode(byteArray0, (-847), (int) (byte)0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray3, false);
      base64_0.decode(byteArray2);
      Object object0 = new Object();
      base64_0.decode((Object) "Q2c9PQ");
      base64_0.decode(byteArray2);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64 base64_0 = new Base64((-5216));
      base64_0.decode("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)33;
      Base64.encodeBase64(byteArray0, false);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      int int0 = 109;
      int int1 = 46;
      Base64 base64_0 = new Base64(46, byteArray0, false);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Base64.isBase64((byte)70);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)70;
      Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-103);
      byteArray3[1] = (byte) (-103);
      byteArray3[2] = (byte) (-103);
      byteArray3[3] = (byte)70;
      byteArray3[4] = (byte)70;
      byteArray3[5] = (byte) (-103);
      byteArray3[6] = (byte) (-103);
      Base64.decodeInteger(byteArray3);
      Base64.discardWhitespace(byteArray2);
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger.valueOf((-1L));
      bigInteger0.longValueExact();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, false);
      byteArray0[0] = (byte) (-14);
      bigInteger0.signum();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)44;
      base64_0.decode(byteArray0, 0, (int) (byte) (-14));
      byteArray0[5] = (byte)0;
      bigInteger0.setBit(0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      base64_0.encode(byteArray3, (-65), (int) (byte)44);
      Base64.isBase64("8gAALAAA");
      Base64.encodeBase64(byteArray2, false, false);
      Base64.decodeInteger(byteArray2);
      Base64.discardWhitespace(byteArray3);
      Base64.isBase64(byteArray2);
      try { 
        base64_0.encode((Object) "8gAALAAA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray2);
      Base64 base64_0 = new Base64();
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      base64_0.encode(byteArray0, (int) (byte)38, (int) (byte)38);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeInteger(byteArray2);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("z8[Z6xm6|lQ");
      Base64.isBase64(byteArray3);
      Base64.encodeBase64(byteArray2);
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte) (-98);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte) (-103);
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte)0;
      Base64 base64_0 = new Base64((byte) (-103), byteArray4, false);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, 0, 0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Object object0 = new Object();
      byte[] byteArray2 = new byte[2];
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true, false);
      Base64.decodeInteger(byteArray3);
      Base64.discardWhitespace(byteArray4);
      boolean boolean0 = Base64.isBase64(byteArray4);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, 0, 0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Object object0 = new Object();
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)110;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (-1), (int) (byte)110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64((-2518), byteArray1, true);
      base64_0.encode(byteArray0);
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.decodeInteger(byteArray4);
      BigInteger bigInteger2 = bigInteger1.pow(76);
      bigInteger1.isProbablePrime((byte)1);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray4);
      byte[] byteArray6 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray7 = Base64.encodeBase64(byteArray2, false);
      String string0 = base64_0.encodeToString(byteArray6);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray6);
      assertEquals("QVE9PQ", string0);
      
      Base64.encodeBase64(byteArray7, true, true);
      assertSame(byteArray2, byteArray4);
      assertSame(byteArray0, byteArray5);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      Base64 base64_0 = new Base64(52, byteArray0, false);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray5 = Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray6 = Base64.encodeBase64Chunked(byteArray3);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray6);
      byte[] byteArray7 = new byte[1];
      bigInteger1.pow(147);
      byteArray7[0] = (byte)1;
      bigInteger1.isProbablePrime(76);
      Base64.encodeBase64Chunked(byteArray7);
      byte[] byteArray8 = Base64.encodeInteger(bigInteger1);
      assertArrayEquals(new byte[] {(byte)82, (byte)71, (byte)99, (byte)57, (byte)80, (byte)81, (byte)52, (byte)61}, byteArray8);
      assertEquals(8, byteArray8.length);
      
      Base64.encodeBase64(byteArray1, true);
      String string0 = base64_0.encodeToString(byteArray5);
      assertEquals("UkdjOVBRPT0=\u000E", string0);
      
      Base64.encodeBase64(byteArray3, true, true);
      base64_0.decode(byteArray4, (int) (byte)1, (int) (byte)1);
      assertEquals(0, byteArray4.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0, (-1009), 0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)0;
      base64_0.decode(byteArray1, 97, (-820));
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byteArray1[5] = (byte) (-1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = bigInteger0.pow(114);
      MockRandom mockRandom0 = new MockRandom(4L);
      BigInteger.probablePrime((byte)34, mockRandom0);
      bigInteger1.isProbablePrime((byte)0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      assertEquals(18, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray5 = Base64.encodeBase64(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray5);
      
      String string0 = base64_0.encodeToString(byteArray4);
      assertEquals("", string0);
      
      byte[] byteArray6 = Base64.encodeBase64(byteArray4, false, true);
      assertSame(byteArray4, byteArray6);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      boolean boolean0 = base64_0.hasData();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-6);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.decode("");
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-6);
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-42);
      boolean boolean1 = Base64.isBase64(byteArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64(1412);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte) (-48);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray1, 961, (-166));
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-97);
      Base64.decodeInteger(byteArray2);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64((String) null);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte)1;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger.valueOf((-1L));
      bigInteger0.longValueExact();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, false);
      byteArray0[0] = (byte) (-14);
      bigInteger0.signum();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)44;
      base64_0.decode(byteArray0, 0, (int) (byte) (-14));
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)0;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte)10}, byteArray2);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("8gAALEEA", string0);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true);
      base64_0.encode(byteArray3, (-65), (int) (byte)44);
      boolean boolean0 = Base64.isBase64("8gAALEEA");
      Base64.encodeBase64(byteArray1, true, true);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray1);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray4);
      assertEquals(26, byteArray5.length);
      
      byte[] byteArray6 = new byte[2];
      byteArray6[0] = (byte) (-14);
      byteArray6[1] = (byte)44;
      String string1 = Base64.encodeBase64String(byteArray6);
      assertEquals("8iw=", string1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte) (-62), byteArray0);
      base64_0.encode(byteArray0, 0, (int) (byte) (-62));
      base64_0.isUrlSafe();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-73);
      byteArray0[0] = (byte) (-73);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)16;
      byteArray0[2] = (byte)16;
      byte byte3 = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      Base64 base64_0 = new Base64(0, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((short)27453, bigInteger0.shortValue());
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      boolean boolean1 = Base64.isBase64(byteArray3);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-103)}, byteArray3);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)75, (byte)119, (byte)61, (byte)61, (byte) (-76), (byte) (-54)}, byteArray1);
      
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, (byte)43, 1739);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)43;
      byteArray3[1] = (byte)43;
      byteArray3[2] = (byte)43;
      byteArray3[3] = (byte) (-70);
      byteArray3[4] = (byte)43;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      //  // Unstable assertion: assertEquals((byte) (-66), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode((Object) "xoN)ui% }iAUWk~m_EI");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(18, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64(0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(109, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 109, 109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 109
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      base64_0.readResults(byteArray1, (byte) (-37), 1);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.andNot(bigInteger1);
      base64_0.decode(byteArray1, 0, 1);
      Base64.decodeBase64(byteArray1);
      String string0 = "org.apache.commons.codec.EncoderException";
      base64_0.decode("org.apache.commons.codec.EncoderException");
      bigInteger0.nextProbablePrime();
      Base64.encodeBase64(byteArray0);
      Base64.encodeInteger(bigInteger0);
      try { 
        base64_0.encode((Object) "~V[W68L[");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64(byteArray0, false, false);
      Object object0 = new Object();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte)40;
      base64_0.decode(byteArray1);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0, (-1009), 0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)0;
      base64_0.decode(byteArray1, 97, (-820));
      Base64.encodeBase64Chunked(byteArray1);
      byteArray1[5] = (byte) (-1);
      Base64.encodeBase64URLSafe(byteArray1);
      String string0 = "org.apache.commons.codec.EncoderException";
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.EncoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      base64_0.encode(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-114);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-114);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-114);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-21);
      byteArray1[6] = (byte) (-21);
      byteArray1[7] = (byte) (-21);
      byteArray1[8] = (byte) (-114);
      Base64.decodeBase64(byteArray1);
      byteArray0[2] = (byte) (-21);
      boolean boolean0 = true;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.avail();
      byte[] byteArray3 = new byte[0];
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      base64_0.decode(byteArray2);
      base64_0.readResults(byteArray0, 0, (-1796));
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray4);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-54);
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.mod(bigInteger1);
      bigInteger0.not();
      int int1 = 93;
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [n\uFFFDL\uFFFD\u0000\uFFFD\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Base64 base64_0 = new Base64((-592));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)49;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 64);
      Base64.isBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)89;
      byteArray2[1] = (byte) (-123);
      byteArray2[2] = (byte)32;
      Base64.encodeBase64URLSafe(byteArray1);
      byteArray2[3] = (byte)35;
      byteArray2[4] = (byte)11;
      byteArray2[5] = (byte)112;
      base64_0.encodeToString(byteArray2);
      Base64.isBase64((byte) (-120));
      Base64.isArrayByteBase64(byteArray2);
      Base64.decodeBase64("WYUgIwtw");
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)19;
      byteArray0[0] = (byte)19;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)29;
      byteArray0[2] = (byte)29;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.bitLength();
      Base64.encodeInteger(bigInteger0);
      int int0 = 13;
      // Undeclared exception!
      try { 
        bigInteger0.byteValueExact();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger out of byte range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte) (-37);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1195, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFDD\uFFFDm\u0000\uFFFD)\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-35);
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      try { 
        base64_0.encode((Object) ":T`eS;{}l`a:");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = BigInteger.TEN;
      bigInteger2.toString();
      bigInteger2.compareTo(bigInteger3);
      bigInteger0.toString();
      bigInteger0.modPow(bigInteger2, bigInteger2);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64((byte) (-10));
      Base64.isBase64((byte) (-10));
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQ==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("/1sEAA==", string0);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray2.length);
      
      base64_0.decode(byteArray1, (int) (byte) (-1), (-128));
      assertEquals(14, byteArray1.length);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(12, byteArray3.length);
      
      Base64.isBase64(byteArray0);
      Base64.isBase64((byte) (-1));
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte) (-90);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte) (-90);
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)39;
      base64_0.encode(byteArray4);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }
}
