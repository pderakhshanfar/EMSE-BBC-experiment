/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:18:23 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1795);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(76);
      base64_1.encode(byteArray2, 64, 76);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3476);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)100;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3281);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      bigInteger1.remainder(bigInteger0);
      Base64 base64_1 = new Base64(76);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)100;
      byteArray0[0] = (byte)100;
      byteArray0[3] = (byte)100;
      Base64.discardWhitespace(byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3281);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      bigInteger1.remainder(bigInteger0);
      // Undeclared exception!
      Base64.encodeBase64URLSafe(byteArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1791);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(76);
      base64_1.encode(byteArray2, 64, 76);
      Base64.toIntegerBytes(bigInteger0);
      base64_1.encode(byteArray2, 76, 1791);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)26;
      byteArray4[1] = (byte)86;
      byteArray4[2] = (byte) (-31);
      byteArray4[3] = (byte) (-1);
      byteArray4[4] = (byte) (-42);
      byteArray4[5] = (byte) (-116);
      base64_1.encode(byteArray4, (int) (byte) (-116), (-245));
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1795);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64();
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(76);
      base64_1.encode(byteArray2, 64, 76);
      Base64.toIntegerBytes(bigInteger0);
      base64_1.encode(byteArray2, 76, 1795);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)26;
      byteArray4[1] = (byte)86;
      byteArray4[2] = (byte) (-31);
      byteArray4[3] = (byte) (-1);
      byteArray4[4] = (byte) (-42);
      byteArray4[5] = (byte) (-116);
      base64_1.encode(byteArray4, (int) (byte) (-116), (-245));
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)85;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      int int0 = 3307;
      BigInteger bigInteger1 = bigInteger0.pow(3307);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)85;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3307);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      bigInteger0.shiftLeft(3307);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-1);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)76;
      byteArray0[2] = (byte)97;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3281);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      bigInteger1.multiply(bigInteger0);
      Base64 base64_1 = new Base64((byte)0);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)85;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3299);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      bigInteger0.shiftLeft(3299);
      Base64 base64_1 = new Base64();
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, true);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0, 3, 3);
      base64_0.encode(byteArray0, (-1897), (-1897));
      base64_0.avail();
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 0, (-1897));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)97;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3281);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      bigInteger0.pow((byte)85);
      bigInteger0.bitCount();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)85;
      byte byte0 = (byte)97;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)97;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3281);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64 base64_2 = new Base64();
      // Undeclared exception!
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)97;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3281);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)97;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(3281);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger2 = BigInteger.ZERO;
      // Undeclared exception!
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1795);
      bigInteger1.isProbablePrime(9);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      Base64.toIntegerBytes(bigInteger1);
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray2, 64, 76);
      Base64.encodeInteger(bigInteger0);
      base64_1.encode(byteArray2, 76, 1795);
      // Undeclared exception!
      try { 
        base64_1.readResults((byte[]) null, 76, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)37;
      byteArray1[4] = (byte)85;
      byteArray1[5] = (byte)97;
      byteArray1[6] = (byte)97;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(3281);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger2 = BigInteger.ZERO;
      Base64 base64_2 = new Base64();
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)37;
      byteArray1[4] = (byte)85;
      byteArray1[5] = (byte)97;
      byteArray1[6] = (byte)97;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(3281);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64();
      Base64.decodeInteger(byteArray1);
      Base64 base64_2 = new Base64();
      base64_2.encode(byteArray0);
      // Undeclared exception!
      base64_0.decode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
          byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
          BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
          int int0 = 1795;
          BigInteger bigInteger1 = bigInteger0.pow(1795);
          byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
          Base64 base64_0 = new Base64(false);
          Base64 base64_1 = new Base64();
          Base64.decodeInteger(byteArray0);
          Base64.encodeBase64(byteArray2);
          // Undeclared exception!
          base64_0.encode(byteArray2);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1795);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64();
      Base64.decodeInteger(byteArray0);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.decode(byteArray2);
      // Undeclared exception!
      base64_1.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      BigInteger.valueOf(25L);
      BigInteger bigInteger1 = bigInteger0.pow(1795);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow(1795);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray1);
      Base64.encodeInteger(bigInteger2);
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = bigInteger0.pow((byte)76);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64();
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertTrue(bigInteger2.equals((Object)bigInteger1));
      //  // Unstable assertion: assertEquals(180, byteArray1.length);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)119, (byte)103, (byte)73, (byte)61, (byte) (-62), (byte)2}, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(13);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)9;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)23;
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)13);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(13);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)116;
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)13);
      assertFalse(base64_0.isUrlSafe());
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte)127, (byte)116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(13);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)116;
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)13);
      base64_0.avail();
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(13);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)116;
      base64_0.decode(byteArray0, (int) (byte)1, (int) (byte)13);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-3);
      byteArray1[1] = (byte) (-11);
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-12);
      byteArray1[6] = (byte)12;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)12;
      Base64 base64_0 = new Base64((byte)12);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      assertEquals(24, byteArray2.length);
      
      byte[] byteArray3 = base64_0.encode(byteArray0);
      assertEquals(28, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      BigInteger bigInteger1 = bigInteger0.pow(1773);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray3, 1773, 4);
      //  // Unstable assertion: assertEquals((byte)2, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(4612, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)119, (byte)103, (byte)73, (byte)61, (byte) (-62), (byte)2}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("", string0);
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte)83;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte) (-9);
      byteArray1[5] = (byte)23;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)44;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertEquals(7, byteArray2.length);
      assertArrayEquals(new byte[] {(byte) (-62), (byte)2, (byte)83, (byte) (-9), (byte)23, (byte)0, (byte)44}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 6);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-10);
      byteArray2[1] = (byte) (-10);
      byteArray2[2] = (byte) (-10);
      byteArray2[3] = (byte) (-10);
      byteArray2[4] = (byte) (-10);
      byteArray2[5] = (byte) (-10);
      byteArray2[6] = (byte) (-10);
      byteArray2[7] = (byte) (-10);
      byteArray2[8] = (byte) (-10);
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)31, (byte)62}, byteArray3);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)125;
      boolean boolean0 = Base64.isBase64((byte)125);
      assertFalse(boolean0);
      
      Base64 base64_0 = new Base64();
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)32;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.decode(byteArray0);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64((byte)122);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null, 3070, (-1035));
      base64_0.encodeToString((byte[]) null);
      Base64.isBase64(byteArray0);
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.decodeInteger(byteArray0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)0;
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64.encodeBase64URLSafeString((byte[]) null);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64(false);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)11;
      byte byte0 = (byte) (-25);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64 base64_0 = new Base64((byte)11, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 2, 2474);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray1, 76, (-1423));
      base64_0.decode(byteArray1, 0, 0);
      Base64.isBase64("{W_E|c");
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      base64_0.encode(byteArray2);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)92;
      byteArray3[1] = (byte)63;
      byteArray3[2] = (byte) (-1);
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)27;
      byteArray3[5] = (byte)12;
      Base64.encodeBase64URLSafeString(byteArray3);
      Base64.isBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, (-1423), (-1423));
      Object object0 = base64_0.decode((Object) "n");
      base64_0.decode(byteArray2);
      base64_0.encode(object0);
      base64_0.encodeToString(byteArray1);
      base64_0.isUrlSafe();
      base64_0.encodeToString(byteArray2);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray1, 76, (-1406));
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)15;
      byteArray2[1] = (byte) (-114);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)119;
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray2, (byte) (-114), (byte)119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte)125;
      byteArray1[4] = (byte)109;
      byteArray1[5] = (byte) (-72);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)112;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 1201);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(965, (byte[]) null, true);
      base64_0.encode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte) (-103);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64("");
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64("sDx,vo$!7W'Msyfy");
      Base64.isBase64(byteArray2);
      Base64 base64_0 = new Base64(46, byteArray3);
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte) (-103);
      byteArray4[2] = (byte) (-103);
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte) (-103);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeBase64((byte[]) null, true);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64((-71), (byte[]) null, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)13;
      base64_0.encode(byteArray0, 0, (int) (byte) (-19));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[6];
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64 base64_0 = new Base64((byte)0);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      Base64.encodeBase64((byte[]) null, false);
      byteArray0[3] = (byte)64;
      base64_0.decode(byteArray0);
      byte[] byteArray1 = new byte[6];
      Base64.decodeBase64("P=F-q*$h$J3/6");
      Base64.encodeBase64Chunked(byteArray1);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64("M!\"MB;!;");
      Base64.isBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      Base64 base64_1 = new Base64(64);
      base64_1.decode((byte[]) null, 76, (-2549));
      base64_0.decode(byteArray0, (-315), (-315));
      Base64.isBase64((byte)95);
      Base64.encodeBase64((byte[]) null, false, true, 0);
      base64_1.readResults((byte[]) null, 64, 4022);
      base64_0.decode((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Base64 base64_0 = new Base64(101);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)55;
      base64_0.encode(byteArray0);
      base64_0.readResults(byteArray0, (byte)98, (byte)55);
      base64_0.decode((Object) "");
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_1 = new Base64(64, byteArray0);
      Base64.isBase64((byte)74);
      base64_1.isUrlSafe();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (-842));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -842
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = (byte)14;
      byte byte1 = (byte)73;
      byte byte2 = (byte) (-10);
      byte byte3 = (byte) (-109);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 557, 214);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64((byte)1, byteArray0);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0, true, false, 8183);
      base64_0.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64.isBase64((byte)24);
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64(byteArray2, false, false);
      Base64.encodeBase64Chunked(byteArray3);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger1.pow(69);
      bigInteger2.isProbablePrime((byte)1);
      Base64.encodeBase64Chunked(byteArray3);
      Base64.encodeInteger(bigInteger2);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false);
      base64_0.encodeToString(byteArray2);
      Base64.encodeBase64(byteArray4, true, false);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64("");
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)0;
      Base64.encodeBase64Chunked(byteArray1);
      byteArray1[5] = (byte) (-1);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = new Base64((-36));
      Object object0 = base64_0.decode((Object) "M");
      base64_0.decode(object0);
      Object object1 = new Object();
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte) (-103);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64("");
      Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64("sDx,vo$!7W'Msyfy");
      Base64.isBase64(byteArray2);
      Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray3, false);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte) (-25), byteArray0);
      base64_0.encode(byteArray0, (int) (byte) (-1), (-1009));
      base64_0.isUrlSafe();
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, false, false);
      Base64.decodeInteger(byteArray3);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      Base64.isBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[6];
      byte byte0 = (byte) (-25);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(2474, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 568);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-3);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(">A&=#69rfq,Q?^vj '");
      Base64.isBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray1, 2014, (-1423));
      Base64.decodeInteger(byteArray1);
      Object object0 = base64_0.decode((Object) "M");
      base64_0.encode(object0);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Object object0 = new Object();
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(76, (byte[]) null);
      // Undeclared exception!
      try { 
        base64_1.encode((byte[]) null, 76, 3388);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-3);
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeBase64("OkUO,a\"{RNq=Zw6<Qe");
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isBase64("OkUO,a\"{RNq=Zw6<Qe");
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-98);
      byteArray0[0] = (byte) (-98);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)125;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)122;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      byte byte3 = (byte)1;
      BigInteger bigInteger1 = bigInteger0.pow((byte)79);
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger2.isProbablePrime((byte)125);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      boolean boolean0 = true;
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)125;
      byte byte4 = (byte)37;
      byteArray3[1] = (byte)37;
      byteArray3[2] = (byte)1;
      Base64.encodeBase64(byteArray3, false);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)37, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AgAFeEU99MDAhDI9i+6YQt41l23CfghUuhaRItQs7LPLzltn30KStsxm91Fwj4XhSFfsjaMbohOT0VVhb91zseimdTMRWR5lTZkzKcaTq93qjVbLj65d4vwK+FwZz/3YQtGijv+tis76pqY/vvnSa0JROmUooLFJJIgxL4WebTncci6fQEmNfMflvq1o5ctCXArldQDpGUeldH0t0HW7yEl9HB309zXVdB6txuaI81f+ZcWO1rV2o5z8B1/C4cvL/UaG0UkELzXmmD3auMaiQ2QBf4SFdeBJE3AkxGLLmFDb6sK8St+1Xf9W3MRcRFJSWUIrloXg7tw00khB2zgRzVWoykWukPHIf2I/yjFhgc5vh4GRrvDdUVSZQicPcP0HD5szsxLjsQrnRPjqg
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, false, false);
      Object object0 = new Object();
      Base64 base64_0 = new Base64(56);
      Base64.isBase64("");
      Base64 base64_1 = new Base64(1, byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Object object0 = new Object();
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.decodeBase64("");
      Base64.encodeBase64String(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitCount();
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64("");
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64((-46));
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      Base64 base64_0 = new Base64(52, byteArray0, false);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false, false);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray2);
      Base64.encodeBase64(byteArray3);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray5);
      byte[] byteArray6 = new byte[1];
      bigInteger1.pow(147);
      byteArray6[0] = (byte)1;
      bigInteger1.isProbablePrime(76);
      Base64.encodeInteger(bigInteger1);
      base64_0.encode(byteArray0);
      base64_0.hasData();
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64String(byteArray4);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeInteger(byteArray2);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64(byteArray3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, 286, 0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.encode(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      Base64 base64_1 = new Base64();
      base64_1.encode(byteArray2, (-694), (-1));
      Base64.isBase64("");
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.encode(byteArray3);
      base64_1.hasData();
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      Base64.encodeBase64String(byteArray4);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "";
      Base64.decodeBase64("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte) (-97), 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -97
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-62);
      byteArray1[1] = (byte) (-25);
      byteArray1[2] = (byte) (-62);
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64((byte) (-1), byteArray0);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-15);
      byteArray2[1] = (byte) (-62);
      byteArray2[2] = (byte) (-62);
      byteArray2[3] = (byte) (-25);
      byteArray2[4] = (byte) (-62);
      byteArray2[5] = (byte) (-78);
      byteArray2[6] = (byte) (-62);
      byteArray2[7] = (byte) (-62);
      byteArray2[8] = (byte) (-62);
      base64_0.encode(byteArray2, (int) (byte) (-62), (int) (byte) (-78));
      base64_0.encode(byteArray1, (int) (byte)1, 0);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray0, false, false, 2225);
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      Base64 base64_0 = new Base64(52, byteArray0, false);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.signum();
      base64_0.decode(byteArray0, 2, (int) (byte)14);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = new byte[0];
      base64_0.encode(byteArray3, (-368), 52);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64(byteArray2, true, false);
      byte[] byteArray4 = base64_0.encode(byteArray3);
      base64_0.hasData();
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64String(byteArray4);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Object object0 = new Object();
      Base64 base64_0 = new Base64(56);
      base64_0.decode(byteArray1);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-10);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-109);
      base64_0.decode(byteArray1, (int) (byte) (-10), (int) (byte) (-10));
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)62;
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)31);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-109);
      byteArray2[1] = (byte) (-10);
      byteArray2[2] = (byte) (-10);
      byteArray2[3] = (byte)73;
      Base64 base64_1 = null;
      try {
        base64_1 = new Base64(91, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u001F\u0000I\uFFFD\uFFFD>]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.hasData();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-6);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.decode("");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-6);
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-42);
      Base64.isBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Base64 base64_0 = new Base64(1412);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte) (-48);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray1, 961, (-166));
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-97);
      Base64.decodeInteger(byteArray2);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      Base64.decodeBase64((String) null);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-2);
      byteArray0[8] = (byte)1;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger.valueOf((-1L));
      bigInteger0.longValueExact();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0, false);
      byteArray0[0] = (byte) (-14);
      bigInteger0.signum();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)44;
      base64_0.decode(byteArray0, 0, (int) (byte) (-14));
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)0;
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true);
      base64_0.encode(byteArray2, (-65), (int) (byte)44);
      Base64.isBase64("8gAALEEA");
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      base64_0.hasData();
      Base64.encodeBase64Chunked(byteArray3);
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte) (-14);
      byteArray4[1] = (byte)44;
      Base64.encodeBase64String(byteArray4);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-1);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((byte) (-62), byteArray0);
      base64_0.encode(byteArray0, 0, (int) (byte) (-62));
      base64_0.isUrlSafe();
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-73);
      byteArray0[0] = (byte) (-73);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)16;
      byteArray0[2] = (byte)16;
      byte byte3 = (byte) (-111);
      byteArray0[3] = (byte) (-111);
      Base64 base64_0 = new Base64(0, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Base64.isBase64((byte)0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-103);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)75, (byte)119, (byte)61, (byte)61, (byte) (-76), (byte) (-54)}, byteArray1);
      
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, (byte)43, 1739);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)43;
      byteArray3[1] = (byte)43;
      byteArray3[2] = (byte)43;
      byteArray3[3] = (byte) (-70);
      byteArray3[4] = (byte)43;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray3);
      //  // Unstable assertion: assertEquals((short) (-4162), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)3;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.decode((Object) "xoN)ui% }iAUWk~m_EI");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(18, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      Base64 base64_0 = new Base64(0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(109, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 109, 109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 109
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      base64_0.readResults(byteArray1, (byte) (-37), 1);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.andNot(bigInteger1);
      base64_0.decode(byteArray1, 0, 1);
      Base64.decodeBase64(byteArray1);
      String string0 = "org.apache.commons.codec.EncoderException";
      base64_0.decode("org.apache.commons.codec.EncoderException");
      bigInteger0.nextProbablePrime();
      Base64.encodeBase64(byteArray0);
      Base64.encodeInteger(bigInteger0);
      try { 
        base64_0.encode((Object) "~V[W68L[");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("");
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, 0, 0);
      Base64.encodeBase64(byteArray0, false, false);
      Object object0 = new Object();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)110;
      byteArray1[1] = (byte)40;
      base64_0.decode(byteArray1);
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0, (-1009), 0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)38;
      byteArray1[4] = (byte)0;
      base64_0.decode(byteArray1, 97, (-820));
      Base64.encodeBase64Chunked(byteArray1);
      byteArray1[5] = (byte) (-1);
      Base64.encodeBase64URLSafe(byteArray1);
      String string0 = "org.apache.commons.codec.EncoderException";
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.EncoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[3];
      base64_0.encode(byteArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-114);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-114);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-114);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-21);
      byteArray1[6] = (byte) (-21);
      byteArray1[7] = (byte) (-21);
      byteArray1[8] = (byte) (-114);
      Base64.decodeBase64(byteArray1);
      byteArray0[2] = (byte) (-21);
      boolean boolean0 = true;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.avail();
      byte[] byteArray3 = new byte[0];
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray3);
      base64_0.decode(byteArray2);
      base64_0.readResults(byteArray0, 0, (-1796));
      Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray4);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-54);
      Base64 base64_0 = new Base64(0, byteArray0);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.mod(bigInteger1);
      bigInteger0.not();
      int int1 = 93;
      try { 
        base64_0.decode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      Base64 base64_0 = new Base64(52, byteArray0, false);
      base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false, false);
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray3);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray5);
      byte[] byteArray6 = new byte[1];
      bigInteger1.pow(147);
      byteArray6[0] = (byte)1;
      bigInteger1.isProbablePrime(76);
      Base64.encodeBase64Chunked(byteArray6);
      Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64(byteArray1, true);
      base64_0.encodeToString(byteArray4);
      Base64.encodeBase64(byteArray3, true, true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-1);
      byte byte0 = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((-1), byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [n\uFFFDL\uFFFD\u0000\uFFFD\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Base64 base64_0 = new Base64((-592));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)49;
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 64);
      Base64.isBase64("Input array too big, the output array would be bigger (");
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)89;
      byteArray2[1] = (byte) (-123);
      byteArray2[2] = (byte)32;
      Base64.encodeBase64URLSafe(byteArray1);
      byteArray2[3] = (byte)35;
      byteArray2[4] = (byte)11;
      byteArray2[5] = (byte)112;
      base64_0.encodeToString(byteArray2);
      Base64.isBase64((byte) (-120));
      Base64.isArrayByteBase64(byteArray2);
      Base64.decodeBase64("WYUgIwtw");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)19;
      byteArray0[0] = (byte)19;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte2 = (byte)29;
      byteArray0[2] = (byte)29;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.bitLength();
      Base64.encodeInteger(bigInteger0);
      int int0 = 13;
      // Undeclared exception!
      try { 
        bigInteger0.byteValueExact();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger out of byte range
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte) (-37);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1195, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFD\uFFFDD\uFFFDm\u0000\uFFFD)\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-35);
      Base64.encodeBase64(byteArray0, true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      try { 
        base64_0.encode((Object) ":T`eS;{}l`a:");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.compareTo(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = BigInteger.TEN;
      bigInteger2.toString();
      bigInteger2.compareTo(bigInteger3);
      bigInteger0.toString();
      bigInteger0.modPow(bigInteger2, bigInteger2);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64.isBase64((byte) (-10));
      Base64.isBase64((byte) (-10));
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AQ==]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("/1sEAA==", string0);
      
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray2.length);
      
      base64_0.decode(byteArray1, (int) (byte) (-1), (-128));
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(12, byteArray3.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      Base64.isBase64((byte) (-1));
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte) (-90);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte) (-90);
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)39;
      byte[] byteArray5 = base64_0.encode(byteArray4);
      assertArrayEquals(new byte[] {(byte)112, (byte)103, (byte)67, (byte)109, (byte)65, (byte)65, (byte)65, (byte)110, (byte)13, (byte)10}, byteArray5);
      
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
