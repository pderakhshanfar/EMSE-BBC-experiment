/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:06:46 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(2147483647L);
      BigInteger bigInteger1 = bigInteger0.pow(2884);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf(3679L);
      bigInteger1.mod(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.pow(2884);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 1908874353);
      Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      base64_0.decode(byteArray1, 107, 2884);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf(3679L);
      bigInteger1.mod(bigInteger0);
      BigInteger bigInteger2 = bigInteger1.pow(2884);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 1908874353);
      bigInteger2.floatValue();
      Base64 base64_0 = new Base64((-1));
      boolean boolean0 = false;
      // Undeclared exception!
      Base64.encodeBase64(byteArray1, false, false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf(3679L);
      BigInteger bigInteger1 = bigInteger0.pow(2884);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64 base64_0 = new Base64(12);
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((-3823), byteArray0);
      Object object0 = base64_0.decode((Object) "-9Ra)L,YTLjc?6B62DW");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.valueOf(3679L);
      BigInteger bigInteger3 = bigInteger2.pow(2884);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      int int0 = Base64.MIME_CHUNK_SIZE;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1908874353);
      BigInteger bigInteger4 = BigInteger.ONE;
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.valueOf(3679L);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64((byte) (-99));
      Base64.encodeBase64(byteArray0, false, false, 10);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(4, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [RGw4PQ==\u0000
         // ]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.negate();
      bigInteger0.bitLength();
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)87;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)1;
      Base64.encodeBase64(byteArray0, true, false, 1748);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)9;
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)9, byteArray0, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, (int) (byte)9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.valueOf(12L);
      BigInteger bigInteger2 = bigInteger1.pow(2315);
      bigInteger1.pow(2315);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      Base64.isBase64(byteArray0);
      bigInteger0.longValue();
      Base64 base64_0 = new Base64(false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte) (-81);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)123;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, (int) (byte)123);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger1.signum();
      BigInteger bigInteger2 = BigInteger.valueOf(1912L);
      BigInteger bigInteger3 = bigInteger2.pow(2884);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      bigInteger3.subtract(bigInteger1);
      int int0 = Base64.MIME_CHUNK_SIZE;
      Base64.encodeBase64(byteArray0, true, true, 1908874353);
      BigInteger bigInteger4 = BigInteger.TEN;
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      base64_0.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger1.signum();
      BigInteger bigInteger2 = BigInteger.valueOf(1912L);
      BigInteger bigInteger3 = bigInteger2.pow(2884);
      BigInteger.valueOf(1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      bigInteger3.subtract(bigInteger1);
      int int0 = Base64.MIME_CHUNK_SIZE;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 1908874353);
      BigInteger bigInteger4 = BigInteger.TEN;
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64((byte)94);
      // Undeclared exception!
      Base64.encodeBase64URLSafeString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger0.shiftRight(4);
      bigInteger1.signum();
      BigInteger bigInteger2 = BigInteger.valueOf(1912L);
      BigInteger bigInteger3 = bigInteger2.pow(2884);
      BigInteger.valueOf(1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      bigInteger3.subtract(bigInteger1);
      int int0 = Base64.MIME_CHUNK_SIZE;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 1908874353);
      BigInteger bigInteger4 = BigInteger.TEN;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)97;
      byteArray2[1] = (byte)54;
      byteArray2[2] = (byte)102;
      byteArray2[3] = (byte)98;
      byteArray2[4] = (byte) (-84);
      Base64.encodeBase64(byteArray2);
      Base64.decodeInteger(byteArray1);
      Base64.isBase64((byte)94);
      // Undeclared exception!
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.valueOf((byte)116);
      BigInteger bigInteger2 = bigInteger1.pow(2315);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      BigInteger bigInteger3 = Base64.decodeInteger(byteArray1);
      bigInteger3.longValue();
      Base64 base64_0 = new Base64(true);
      bigInteger2.clearBit(763);
      Base64.encodeBase64(byteArray1, true);
      base64_0.decode(byteArray1, (int) (byte)116, (int) (byte)116);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, false, 50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (3626) than the specified maxium size of 50
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.valueOf((-1L));
      BigInteger bigInteger1 = bigInteger0.pow(76);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      bigInteger1.longValue();
      Base64 base64_1 = new Base64(true);
      base64_0.decode(byteArray0, 1, 2315);
      Base64.toIntegerBytes(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger1.signum();
      BigInteger bigInteger2 = BigInteger.valueOf(1900L);
      BigInteger bigInteger3 = bigInteger2.pow(2884);
      bigInteger0.modInverse(bigInteger1);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      bigInteger3.subtract(bigInteger1);
      bigInteger3.getLowestSetBit();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 1908874353);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(1908874353);
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.negate();
      bigInteger0.bitLength();
      bigInteger0.nextProbablePrime();
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger1.signum();
      BigInteger bigInteger2 = BigInteger.valueOf(1883L);
      BigInteger bigInteger3 = bigInteger2.pow(2884);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      bigInteger3.subtract(bigInteger1);
      bigInteger3.getLowestSetBit();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 1908874353);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode((Object) "");
      Base64.isBase64(byteArray1);
      base64_0.decode((Object) "");
      base64_0.readResults(byteArray1, (-2888), 2884);
      // Undeclared exception!
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger1.signum();
      BigInteger bigInteger2 = BigInteger.valueOf(1900L);
      BigInteger bigInteger3 = bigInteger2.pow(2884);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      bigInteger3.subtract(bigInteger1);
      bigInteger3.getLowestSetBit();
      Base64.encodeBase64(byteArray0, true, true, 1908874353);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(1908874353);
      String string0 = "";
      // Undeclared exception!
      Base64.encodeBase64String(byteArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.valueOf(12L);
      BigInteger bigInteger2 = bigInteger1.pow(2315);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      bigInteger2.longValue();
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, 40, 40);
      Base64.toIntegerBytes(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger1.signum();
      BigInteger bigInteger2 = BigInteger.valueOf(1883L);
      BigInteger bigInteger3 = bigInteger2.pow(2884);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      BigInteger bigInteger4 = bigInteger3.subtract(bigInteger1);
      bigInteger3.getLowestSetBit();
      bigInteger3.or(bigInteger4);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1908874353);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode((Object) "");
      Base64.isBase64(byteArray1);
      base64_0.decode((Object) "");
      // Undeclared exception!
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.valueOf((-2736L));
      int int0 = 2874;
      BigInteger bigInteger1 = bigInteger0.pow(2874);
      BigInteger bigInteger2 = bigInteger0.xor(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger2);
      bigInteger2.subtract(bigInteger1);
      BigInteger bigInteger3 = BigInteger.TEN;
      bigInteger3.nextProbablePrime();
      Base64.encodeInteger(bigInteger2);
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
      bigInteger1.signum();
      BigInteger bigInteger2 = BigInteger.valueOf(1883L);
      BigInteger bigInteger3 = bigInteger2.pow(2874);
      bigInteger0.xor(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
      bigInteger3.subtract(bigInteger1);
      bigInteger3.getLowestSetBit();
      Base64.encodeBase64(byteArray0, false, false, 1908874353);
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      Base64.decodeInteger(byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          BigInteger bigInteger0 = BigInteger.TEN;
          bigInteger0.bitLength();
          BigInteger bigInteger1 = bigInteger0.nextProbablePrime();
          bigInteger1.signum();
          bigInteger1.nextProbablePrime();
          BigInteger bigInteger2 = BigInteger.valueOf(1883L);
          BigInteger bigInteger3 = bigInteger2.pow(2874);
          bigInteger0.xor(bigInteger1);
          byte[] byteArray0 = Base64.encodeInteger(bigInteger3);
          bigInteger3.subtract(bigInteger1);
          bigInteger3.getLowestSetBit();
          Base64.encodeBase64(byteArray0, false, false, 1908874353);
          bigInteger3.shiftRight(2874);
          // Undeclared exception!
          Base64.encodeBase64(byteArray0, true, false, 1908874353);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64String((byte[]) null);
      int int0 = (-743);
      Random.setNextRandom((-743));
      Base64 base64_0 = new Base64((-743), (byte[]) null, true);
      base64_0.encode((byte[]) null);
      base64_0.decode((String) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.decodeInteger(byteArray0);
      base64_0.readResults(byteArray1, 375, (byte)60);
      base64_0.decode(byteArray1, 0, 375);
      Base64.isBase64(byteArray1);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)32;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      bigInteger0.nextProbablePrime();
      Base64.encodeBase64String(byteArray1);
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)31;
      byteArray2[2] = (byte)31;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte) (-81);
      byteArray2[5] = (byte)32;
      byteArray2[6] = (byte)3;
      byteArray2[7] = (byte)1;
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = null;
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false, 76);
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = Base64.decodeBase64("/g=g");
      base64_0.encode(byteArray2, (int) (byte) (-51), (int) (byte) (-51));
      Base64.encodeBase64(byteArray1, false);
      byteArray1[0] = (byte) (-51);
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray1, true, true);
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 0, (-3326));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((byte)32);
      BigInteger bigInteger2 = bigInteger1.pow(2315);
      bigInteger1.nextProbablePrime();
      bigInteger2.pow((byte)32);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)32;
      byteArray2[1] = (byte) (-99);
      Base64.encodeBase64Chunked(byteArray2);
      Base64.isBase64((byte) (-99));
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, 54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (2644) than the specified maxium size of 54
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-67);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64(byteArray0, true, true, 285);
      base64_0.decode((Object) "vQ==");
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.avail();
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-67);
      byteArray2[1] = (byte)113;
      byteArray2[2] = (byte) (-67);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode(byteArray0);
      Base64.decodeBase64("OSq{:;j2LOpt");
      base64_0.decode(byteArray2, 1073741824, (-1929));
      base64_0.decode(byteArray1, 61, 1073741824);
      base64_0.readResults(byteArray0, 69, 285);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64(11, byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray2, 11, (byte)60);
      Base64.encodeBase64(byteArray2, true, true);
      base64_0.decode(byteArray0, 1859, (-269));
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte)61);
      byte[] byteArray3 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray3);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1), byteArray0, true);
      byte[] byteArray1 = base64_0.decode("");
      base64_0.encode(byteArray1, (-2746), 2043);
      base64_0.encodeToString(byteArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((byte)60);
      BigInteger bigInteger2 = bigInteger1.pow(2315);
      bigInteger1.nextProbablePrime();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(3120, byteArray2.length);
      
      Base64 base64_0 = new Base64(false);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)60;
      byteArray3[1] = (byte) (-1);
      byteArray3[2] = (byte)60;
      byteArray3[3] = (byte)60;
      byteArray3[4] = (byte)60;
      byteArray3[5] = (byte)60;
      byteArray3[6] = (byte)60;
      byteArray3[7] = (byte)60;
      byteArray3[8] = (byte)60;
      byte[] byteArray4 = base64_0.encode(byteArray3);
      assertEquals(14, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      Base64 base64_0 = new Base64((byte)127, byteArray0);
      Base64 base64_1 = new Base64(1);
      Base64.decodeBase64(byteArray0);
      byte[] byteArray1 = base64_1.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray2 = base64_1.encode(byteArray1);
      BigInteger bigInteger2 = Base64.decodeInteger(byteArray2);
      assertEquals(52, byteArray2.length);
      assertEquals((short) (-7522), bigInteger2.shortValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.valueOf((byte)60);
      BigInteger bigInteger2 = bigInteger1.pow(2315);
      bigInteger1.nextProbablePrime();
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)80, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)10}, byteArray2);
      
      bigInteger1.longValue();
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true, 1908874353);
      //  // Unstable assertion: assertEquals(3120, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      byte byte0 = (byte)35;
      int int0 = 36;
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(36, (byte[]) null);
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-67);
      Base64.encodeBase64(byteArray0, true, false);
      byteArray0[0] = (byte) (-67);
      byte byte1 = (byte)12;
      byteArray0[1] = (byte)12;
      byte byte2 = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)88;
      base64_1.readResults(byteArray0, (-2015), 22);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      base64_0.encode((byte[]) null, 1, (-4199));
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      base64_0.encode((byte[]) null, 1, (-4194));
      byte[] byteArray0 = new byte[0];
      base64_0.decode(byteArray0, 1, (-4194));
      byte[] byteArray1 = Base64.decodeBase64((String) null);
      assertNull(byteArray1);
      
      boolean boolean0 = base64_0.hasData();
      assertTrue(base64_0.isUrlSafe());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.byteValueExact();
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      Base64 base64_0 = new Base64((byte)60, (byte[]) null, true);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 1, (int) (byte)60);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      base64_0.encode((byte[]) null, 1, (-4199));
      byte[] byteArray0 = Base64.decodeBase64("UTF-16LE");
      assertArrayEquals(new byte[] {(byte)81, (byte)49, (byte)126, (byte) (-41), (byte) (-94), (byte) (-60)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = BigInteger.ONE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = base64_0.encode((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, true, true, 0);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = base64_0.decode((byte[]) null);
      assertNull(byteArray0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Base64 base64_0 = new Base64(6);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      String string0 = "3.,5c";
      Base64.isBase64("3.,5c");
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = null;
      byte[] byteArray2 = new byte[0];
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 653, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      byte[] byteArray0 = new byte[12];
      byteArray0[5] = (byte)105;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-67);
      BigInteger bigInteger2 = BigInteger.ONE;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-23);
      byteArray1[2] = (byte) (-23);
      byteArray1[3] = (byte) (-67);
      byteArray1[4] = (byte) (-23);
      Base64 base64_0 = new Base64((-529), byteArray1, false);
      byte[] byteArray2 = base64_0.decode((String) null);
      assertFalse(base64_0.isUrlSafe());
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.valueOf((byte)60);
      BigInteger bigInteger2 = bigInteger1.pow(2315);
      bigInteger1.nextProbablePrime();
      Base64.encodeInteger(bigInteger2);
      Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = Base64.isBase64((byte) (-92));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray1 = Base64.decodeBase64("c`dBG.Mw&l19}5");
      Base64.discardWhitespace(byteArray1);
      boolean boolean0 = Base64.isBase64((byte) (-3));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)124);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true, 57);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)0, (byte)10}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.readResults(byteArray1, 76, (byte)60);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = new Base64((byte)60, byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.readResults(byteArray2, 340, (byte)60);
      base64_0.decode(byteArray2, 0, 340);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)33;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)33, (byte)0}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      
      Base64.isBase64((byte)33);
      Base64 base64_0 = new Base64();
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)16;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.isProbablePrime((byte)16);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.pow((byte)0);
      bigInteger2.abs();
      bigInteger0.subtract(bigInteger2);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray2);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger3 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger3);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 1, (int) (byte)16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)16;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.isProbablePrime((byte)16);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.pow((byte)16);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger2);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      assertEquals(100, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray0);
      assertEquals(8, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)66, (byte)66, (byte)65, (byte)65, (byte)65, (byte)65, (byte)61, (byte)61}, byteArray3);
      
      Base64 base64_0 = new Base64((byte)16);
      base64_0.encode(byteArray0, 0, (-1355));
      assertNotSame(byteArray0, byteArray3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Base64.isBase64((byte)123);
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.decodeBase64("/g=g");
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (int) (byte) (-51), (int) (byte) (-51));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64 base64_1 = new Base64(false);
      base64_1.encodeToString(byteArray1);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray0, true, true);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray2, 8192, 35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)1;
      Base64 base64_0 = new Base64(38, byteArray0, true);
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = new Base64((-2218), byteArray0);
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0);
      Base64 base64_1 = new Base64(8189);
      int int0 = (-1493);
      base64_1.readResults(byteArray0, 76, (-1493));
      int int1 = (-2923);
      base64_0.decode(byteArray0, 8189, (-2923));
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        base64_0.decode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)16;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.isProbablePrime((byte)16);
      Base64 base64_0 = new Base64((byte)41, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      base64_0.decode(byteArray2);
      Base64.isBase64((byte)1);
      Base64.decodeInteger(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      Base64.encodeBase64(byteArray0, false, false);
      Base64.decodeBase64("lineSeperator must not contain base64 characters: [");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      Base64 base64_0 = new Base64((-2485), (byte[]) null);
      base64_0.decode("lineSeperator must not contain base64 characters: [");
      Base64.encodeBase64((byte[]) null, false, true);
      Base64.discardWhitespace(byteArray1);
      try { 
        base64_0.encode((Object) "XM4");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)16;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.isProbablePrime((byte)16);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.pow((byte)0);
      bigInteger0.subtract(bigInteger2);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)4);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 1, (int) (byte)16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)16;
      byteArray0[3] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.isBase64((byte)4);
      bigInteger0.shiftLeft((byte)16);
      BigInteger bigInteger1 = BigInteger.ZERO;
      MockRandom mockRandom0 = new MockRandom(1L);
      BigInteger.probablePrime(60, mockRandom0);
      bigInteger0.subtract(bigInteger0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64.isBase64((byte)87);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)87;
      byteArray2[1] = (byte)87;
      byteArray2[2] = (byte)87;
      byteArray2[3] = (byte)87;
      Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, false);
      Object object0 = new Object();
      Base64.encodeBase64Chunked(byteArray3);
      Base64 base64_0 = new Base64((-2161), byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)54);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte)54;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)54);
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("NjY2NjY2NjY2", string0);
      
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = base64_0.decode("/v`:BX{");
      assertEquals(3, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-82), (byte) (-70), (byte) (-21), (byte) (-82), (byte) (-70)}, byteArray3);
      
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1 == boolean0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)54;
      byteArray4[1] = (byte)54;
      byteArray4[2] = (byte)54;
      byteArray4[3] = (byte)54;
      byteArray4[4] = (byte) (-122);
      byteArray4[5] = (byte)54;
      byteArray4[6] = (byte)54;
      byteArray4[7] = (byte)45;
      byteArray4[8] = (byte)54;
      byte[] byteArray5 = Base64.decodeBase64(byteArray4);
      assertEquals(6, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      Base64 base64_1 = new Base64(33, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      assertEquals(8, byteArray1.length);
      
      base64_0.decode((Object) "XM4");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(6, byteArray2.length);
      
      Object object0 = base64_0.decode((Object) "XM4");
      Object object1 = base64_1.encode(object0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64((byte)60, byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, false);
      base64_0.readResults(byteArray3, 340, (byte)60);
      int int0 = 100;
      base64_0.decode(byteArray2, 0, 340);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray0 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = Base64.decodeBase64("/g=g");
      base64_0.encode(byteArray2, (int) (byte) (-51), (int) (byte) (-51));
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false);
      byteArray1[0] = (byte) (-51);
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("zQ==", string0);
      
      Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray1, true, true);
      base64_0.readResults((byte[]) null, 0, (-3326));
      base64_0.decode(byteArray1, 0, 1);
      Base64.isArrayByteBase64(byteArray1);
      int int0 = base64_0.readResults(byteArray2, (byte) (-51), (-1));
      assertArrayEquals(new byte[] {(byte) (-2)}, byteArray2);
      assertEquals((-1), int0);
      
      Base64.encodeBase64((byte[]) null, true);
      BigInteger bigInteger0 = new BigInteger(byteArray3);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.or(bigInteger1);
      byte[] byteArray4 = Base64.encodeInteger(bigInteger0);
      assertEquals(8, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray3);
      assertEquals(10, byteArray5.length);
      
      base64_0.decode((Object) "/g=g");
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-10);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      byte[] byteArray3 = Base64.decodeBase64("");
      Base64 base64_1 = new Base64(27, byteArray3, true);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)96;
      byteArray1[2] = (byte)96;
      byteArray1[3] = (byte)96;
      byteArray1[4] = (byte)96;
      byteArray1[5] = (byte)96;
      byteArray1[6] = (byte)96;
      byteArray1[7] = (byte)96;
      Base64 base64_0 = new Base64(8192, byteArray1, true);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)96;
      byteArray3[1] = (byte)82;
      byteArray3[2] = (byte)82;
      byteArray3[3] = (byte) (-11);
      byteArray3[4] = (byte)82;
      byteArray3[6] = (byte)96;
      byteArray3[7] = (byte)96;
      byteArray3[8] = (byte)0;
      base64_0.decode(byteArray3);
      base64_0.encode(byteArray0);
      byte[] byteArray4 = base64_0.decode(byteArray2);
      Base64.isBase64((byte)82);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray4);
      Object object0 = new Object();
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byte byte0 = (byte) (-22);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)27, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Base64 base64_0 = new Base64(12);
      Object object0 = base64_0.decode((Object) "WbV6z]+I:U1mfg(GDv");
      base64_0.decode(object0);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)57;
      base64_0.encode(byteArray1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)82;
      base64_0.decode(byteArray1);
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[0];
      base64_0.decode(byteArray2);
      Base64.isBase64((byte)0);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)9;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      Base64.discardWhitespace(byteArray2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-119);
      base64_0.decode(byteArray0, (int) (byte)127, 0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Base64 base64_0 = new Base64(12);
      Object object0 = base64_0.decode((Object) "WbV6z]+I:U1mfg(GDv");
      base64_0.decode(object0);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)57;
      base64_0.encode(byteArray1);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)82;
      base64_0.decode(byteArray1);
      byteArray0[0] = (byte)0;
      base64_0.encode(byteArray0);
      byte[] byteArray2 = new byte[0];
      base64_0.decode(byteArray2);
      Base64.isBase64((byte)0);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)9;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)57;
      byteArray3[5] = (byte)57;
      byteArray3[6] = (byte)0;
      Base64.decodeInteger(byteArray3);
      Object object1 = new Object();
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byteArray0[0] = (byte) (-126);
      bigInteger0.flipBit(0);
      bigInteger0.setBit(0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      Base64.encodeInteger(bigInteger0);
      byteArray0[5] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.decode(byteArray0);
      Base64.decodeBase64(" yS~[&C+M");
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, false, 76);
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.decodeBase64("/g=g");
      base64_0.encode(byteArray1, (int) (byte) (-51), (int) (byte) (-51));
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      byteArray0[0] = (byte) (-51);
      base64_0.encodeToString(byteArray0);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64(byteArray0, true, true);
      base64_0.readResults((byte[]) null, 0, (-3326));
      base64_0.decode(byteArray0, 0, 1);
      Base64.isArrayByteBase64(byteArray0);
      base64_0.readResults(byteArray1, (byte) (-51), (-1));
      Base64.encodeBase64((byte[]) null, true);
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = bigInteger0.or(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64Chunked(byteArray2);
      base64_0.isUrlSafe();
      try { 
        base64_0.decode((Object) bigInteger2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-96);
      byteArray0[0] = (byte) (-96);
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      Base64.decodeInteger(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)0, 883);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Base64 base64_0 = new Base64(1817);
      byte[] byteArray0 = Base64.decodeBase64("");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)103;
      Base64.encodeBase64URLSafeString(byteArray1);
      byteArray1[1] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      try { 
        base64_0.encode((Object) "ZwAAAAAA");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-96);
      Base64.isBase64(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte) (-96);
      byteArray1[2] = (byte)29;
      byteArray1[3] = (byte)1;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(12, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [z\uFFFD\u001D\u0001]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("");
      boolean boolean0 = Base64.isBase64("vaph_");
      byte[] byteArray0 = base64_0.decode("|o*ot)LB+bn:(qe/D");
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-117), (byte)75, (byte)7, (byte) (-26), (byte) (-25), (byte) (-87), (byte) (-17), (byte) (-61)}, byteArray0);
      
      base64_0.decode("");
      boolean boolean1 = Base64.isBase64(" NiRI[L_{VGUP");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64.isBase64((byte)87);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)87;
      byteArray2[1] = (byte)87;
      byteArray2[2] = (byte)87;
      byteArray2[3] = (byte)87;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)87, byteArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [WWWW]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte) (-1));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      Base64 base64_0 = new Base64(4802, byteArray0);
      int int0 = base64_0.readResults(byteArray0, (-1788), (byte) (-1));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-113);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64.isBase64("RQk%@:");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)65;
      byteArray1[3] = (byte) (-28);
      byteArray1[4] = (byte) (-97);
      byteArray1[5] = (byte) (-97);
      byteArray1[6] = (byte) (-113);
      byteArray1[7] = (byte)0;
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-876));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -876
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-8);
      byteArray1[2] = (byte) (-8);
      byteArray1[3] = (byte) (-8);
      byteArray1[4] = (byte) (-8);
      String string0 = base64_0.encodeToString(byteArray1);
      assertEquals("APj4+Pg=", string0);
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)111;
      byteArray0[0] = (byte)111;
      byte byte1 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byte byte2 = (byte)52;
      byteArray0[2] = (byte)52;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [o\uFFFD4]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-948), byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (-948), (-237));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.isProbablePrime(956);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      bigInteger0.toString(26);
      Base64 base64_0 = new Base64(956, byteArray1, false);
      BigInteger bigInteger1 = null;
      try {
        bigInteger1 = new BigInteger(byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-125);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)13;
      byteArray2[1] = (byte)13;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)13;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      assertFalse(boolean0);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray3.length);
      
      Base64 base64_0 = new Base64((byte)13, byteArray3);
      byte[] byteArray4 = base64_0.decode(byteArray1);
      assertEquals(0, byteArray1.length);
      assertSame(byteArray4, byteArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-46);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(84, (byte[]) null, false);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.decode((Object) "");
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-12);
      Base64.encodeBase64(byteArray0, false, false, 299);
      byteArray0[3] = (byte)80;
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("1AD0UAAA", string0);
      
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)93;
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 105);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals(16, byteArray2.length);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.negate();
      bigInteger0.bitLength();
      bigInteger0.toString((int) (byte)117);
      bigInteger0.isProbablePrime((byte)9);
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.pow(391);
      bigInteger0.subtract(bigInteger1);
      bigInteger0.bitLength();
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(0, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = Base64.isBase64(byteArray4);
      assertTrue(boolean0);
      assertEquals(14, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)89;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)41, bigInteger0.shortValue());
      
      Base64 base64_0 = new Base64((byte)89);
      assertFalse(base64_0.isUrlSafe());
      
      boolean boolean0 = Base64.isBase64("*tq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)0;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.equals("p3Us");
      Base64 base64_0 = new Base64();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.min(bigInteger1);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(") than the specified maxium size of ");
      base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)57;
      base64_0.encode(byteArray0, 98, (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = bigInteger0.shiftRight(84);
      bigInteger2.add(bigInteger1);
      bigInteger1.doubleValue();
      bigInteger1.and(bigInteger0);
      bigInteger0.min(bigInteger1);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.min(bigInteger2);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.isBase64("[nS,}sbKI&B9Kh");
      byte[] byteArray1 = Base64.decodeBase64("_J#/X");
      Base64 base64_0 = new Base64(84);
      int int0 = 495;
      Base64.encodeBase64(byteArray1, false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 495);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)84;
      byteArray0[8] = (byte)83;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)117;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertArrayEquals(new byte[] {(byte)52, (byte)105, (byte)88, (byte)47, (byte)100, (byte)81, (byte)61, (byte)61}, byteArray1);
      
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)126;
      byteArray2[2] = (byte)23;
      byteArray2[3] = (byte)44;
      byteArray2[4] = (byte)109;
      byteArray2[5] = (byte)112;
      byteArray2[6] = (byte)113;
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      assertEquals(14, byteArray3.length);
      
      byte[] byteArray4 = new byte[0];
      Base64.encodeBase64String(byteArray4);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.toByteArray();
      bigInteger0.multiply(bigInteger1);
      bigInteger0.byteValueExact();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.isUrlSafe();
      base64_0.encode(byteArray0);
      base64_0.encodeToString(byteArray1);
      base64_0.isUrlSafe();
      try { 
        base64_0.encode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Base64.isBase64((byte)123);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)123;
      Base64 base64_0 = new Base64((byte)123, byteArray0, false);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Object object0 = base64_0.decode((Object) "AHt7e3t7ew==\u0000{{{{{{");
      byte[] byteArray2 = base64_0.decode("");
      base64_0.decode(object0);
      base64_0.encode(byteArray2, (int) (byte)123, 1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      base64_0.readResults(byteArray0, 0, 1);
      base64_0.hasData();
      base64_0.isUrlSafe();
      byte[] byteArray4 = new byte[3];
      base64_0.readResults(byteArray3, (-252), (-1));
      Base64.isBase64("AHt7e3t7ew==\u0000{{{{{{");
      byteArray4[0] = (byte)123;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)123;
      Base64.isBase64(byteArray4);
      Base64.encodeBase64(byteArray1, false, true, (-3527));
      Base64.encodeBase64(byteArray2, false);
      byte[] byteArray5 = base64_0.decode(byteArray4);
      assertFalse(byteArray5.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)1;
      Base64 base64_0 = new Base64(0, byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      base64_0.decode((Object) "XM4");
      Base64.discardWhitespace(byteArray1);
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
