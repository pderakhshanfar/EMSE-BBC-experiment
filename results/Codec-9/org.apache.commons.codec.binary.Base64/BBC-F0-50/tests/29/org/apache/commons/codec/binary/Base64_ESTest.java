/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 19:10:55 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8230, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8230, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafe(byteArray2);
      // Undeclared exception!
      Base64.encodeBase64String(byteArray2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8230, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8230, mockRandom0);
      bigInteger1.shiftRight(116);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      mockRandom0.nextGaussian();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray3);
      Base64 base64_0 = new Base64(8230);
      Object object0 = base64_0.decode((Object) string0);
      Base64.isBase64(byteArray2);
      // Undeclared exception!
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8230, mockRandom0);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)38;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, (int) (byte)38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8230, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8230, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      mockRandom0.nextGaussian();
      byte[] byteArray2 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray3);
      Base64 base64_0 = new Base64(8230);
      Object object0 = base64_0.decode((Object) string0);
      Base64.isBase64(byteArray2);
      // Undeclared exception!
      base64_0.encode(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8230, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8230, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      String string0 = Base64.encodeBase64String(byteArray3);
      Base64 base64_0 = new Base64(8230);
      base64_0.decode((Object) string0);
      // Undeclared exception!
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8230, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8230, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64String(byteArray3);
      Base64 base64_0 = new Base64(8230);
      // Undeclared exception!
      Base64.encodeBase64(byteArray2, false);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8234, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8234, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, 1, 60);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)74;
      byteArray2[1] = (byte) (-29);
      byteArray2[2] = (byte) (-38);
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte)43;
      byteArray2[5] = (byte)66;
      base64_0.encode(byteArray2, (int) (byte) (-1), (-2442));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-94);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger bigInteger0 = new BigInteger(8215, mockRandom0);
      BigInteger bigInteger1 = new BigInteger(8215, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      Base64.encodeBase64URLSafe(byteArray0);
      bigInteger1.divide(bigInteger0);
      Base64.encodeInteger(bigInteger1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      base64_0.encode(byteArray1, 6, 1657);
      base64_0.readResults(byteArray1, 93, 12);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1887, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(1887);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0, 63, 248);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.encode((byte[]) null, (-562), (-562));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, (-562), (-295));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((-1123), byteArray0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray1, 1, 62);
      base64_0.encode(byteArray0, 0, 0);
      Base64.encodeBase64(byteArray0);
      Random.setNextRandom(62);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.min(bigInteger1);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger2 = new BigInteger(1982292598, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, (-956), (-956));
      base64_0.decode(byteArray0, 1982292598, 16);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(64, 64, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray0, 76, (-439));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      mockRandom0.ints((long) 8192);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 390, 2506);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1360
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)59;
      Base64 base64_0 = new Base64(16, byteArray0, true);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false);
      base64_0.decode(byteArray0, (-2828), (-2435));
      Base64.isBase64((byte)54);
      base64_0.decode(byteArray0, 1009, 1004);
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1851, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64.decodeBase64(") than the specified maxium size of ");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(1851, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      Base64 base64_1 = new Base64();
      try { 
        base64_1.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Random.setNextRandom(1210);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte) (-29);
      Base64.encodeBase64(byteArray0, true, true, (int) (byte)113);
      Base64.isBase64((byte)61);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)113, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0002q\u0007\u0001\uFFFD,\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      MockRandom mockRandom0 = new MockRandom(2872);
      BigInteger bigInteger0 = new BigInteger(8148, mockRandom0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte)13);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.encodeBase64(byteArray2, false, false, 2872);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)13, byteArray2, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0007\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000B\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u000E\u0000\u0000\u0000\u000F\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0011\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0013\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0016\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0019\u0000\u0000\u0000\u001A\u0000\u0000\u0000\u001B\u0000\u0000\u0000\u001C\u0000\u0000\u0000\u001D\u0000\u0000\u0000\u001E\u0000\u0000\u0000\u001F\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\"\u0000\u0000\u0000#\u0000\u0000\u0000$\u0000\u0000\u0000%\u0000\u0000\u0000&\u0000\u0000\u0000'\u0000\u0000\u0000(\u0000\u0000\u0000)\u0000\u0000\u0000*\u0000\u0000\u0000+\u0000\u0000\u0000,\u0000\u0000\u0000-\u0000\u0000\u0000.\u0000\u0000\u0000/\u0000\u0000\u00000\u0000\u0000\u00001\u0000\u0000\u00002\u0000\u0000\u00003\u0000\u0000\u00004\u0000\u0000\u00005\u0000\u0000\u00006\u0000\u0000\u00007\u0000\u0000\u00008\u0000\u0000\u00009\u0000\u0000\u0000:\u0000\u0000\u0000;\u0000\u0000\u0000<\u0000\u0000\u0000=\u0000\u0000\u0000>\u0000\u0000\u0000?\u0000\u0000\u0000@\u0000\u0000\u0000A\u0000\u0000\u0000B\u0000\u0000\u0000C\u0000\u0000\u0000D\u0000\u0000\u0000E\u0000\u0000\u0000F\u0000\u0000\u0000G\u0000\u0000\u0000H\u0000\u0000\u0000I\u0000\u0000\u0000J\u0000\u0000\u0000K\u0000\u0000\u0000L\u0000\u0000\u0000M\u0000\u0000\u0000N\u0000\u0000\u0000O\u0000\u0000\u0000P\u0000\u0000\u0000Q\u0000\u0000\u0000R\u0000\u0000\u0000S\u0000\u0000\u0000T\u0000\u0000\u0000U\u0000\u0000\u0000V\u0000\u0000\u0000W\u0000\u0000\u0000X\u0000\u0000\u0000Y\u0000\u0000\u0000Z\u0000\u0000\u0000[\u0000\u0000\u0000\\\u0000\u0000\u0000]\u0000\u0000\u0000^\u0000\u0000\u0000_\u0000\u0000\u0000`\u0000\u0000\u0000a\u0000\u0000\u0000b\u0000\u0000\u0000c\u0000\u0000\u0000d\u0000\u0000\u0000e\u0000\u0000\u0000f\u0000\u0000\u0000g\u0000\u0000\u0000h\u0000\u0000\u0000i\u0000\u0000\u0000j\u0000\u0000\u0000k\u0000\u0000\u0000l\u0000\u0000\u0000m\u0000\u0000\u0000n\u0000\u0000\u0000o\u0000\u0000\u0000p\u0000\u0000\u0000q\u0000\u0000\u0000r\u0000\u0000\u0000s\u0000\u0000\u0000t\u0000\u0000\u0000u\u0000\u0000\u0000v\u0000\u0000\u0000w\u0000\u0000\u0000x\u0000\u0000\u0000y\u0000\u0000\u0000z\u0000\u0000\u0000{\u0000\u0000\u0000|\u0000\u0000\u0000}\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\uFFFD\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.avail();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      byte byte0 = (byte)85;
      byteArray0[1] = (byte)85;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray1, (byte)53, (-2443));
      Base64.encodeBase64(byteArray0, true);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-12);
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)53);
      Base64.isBase64("");
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 5, 2376);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64((byte)48);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)48;
      Base64.encodeBase64(byteArray1, true, true, 10);
      boolean boolean1 = Base64.isBase64((byte)48);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64String(byteArray1);
      Base64 base64_0 = new Base64((-2283));
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.encodeBase64String(byteArray0);
      base64_0.decode(byteArray1, 1, 387);
      Base64.isBase64((byte) (-3));
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, false, (-2283));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (54) than the specified maxium size of -2283
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.abs();
      Base64.toIntegerBytes(bigInteger1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (int) (byte)0, 8156);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Base64 base64_0 = new Base64((-1910), byteArray0, true);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)0);
      Base64.isBase64((byte)0);
      base64_0.decode(byteArray1, 1, 40);
      boolean boolean0 = Base64.isBase64((byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = Base64.decodeBase64("2y#O%!T#3");
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-108);
      base64_0.readResults(byteArray1, (byte)1, 1815);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, true, 76);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.decodeInteger(byteArray2);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)31;
      Base64 base64_0 = new Base64((byte)31, byteArray0, true);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode("Parameter supplied to Base64 decode is not a byte[] or a String");
      base64_0.decode(byteArray1, 24, 1);
      base64_0.decode(byteArray1, (int) (byte)31, (-94));
      Base64.isBase64((byte) (-82));
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      assertEquals(12, byteArray4.length);
      
      byte[] byteArray5 = base64_0.encode(byteArray3);
      assertEquals(37, byteArray3.length);
      assertEquals(68, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.decodeBase64("Q.H;RlDU3<K#ue8S");
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, true, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (104) than the specified maxium size of 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64 base64_1 = new Base64(64);
      base64_1.encode(byteArray0, 76, (-1130));
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)61, (byte)61}, byteArray1);
      
      boolean boolean0 = base64_1.hasData();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1157), byteArray0, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)26;
      byte byte0 = (byte)0;
      Base64.isBase64("FZ!%y#<Bbq");
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)80;
      byte byte1 = (byte)8;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64(false);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 72, 75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64 base64_0 = new Base64((-535));
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      
      byte[] byteArray3 = Base64.CHUNK_SEPARATOR;
      String string0 = Base64.encodeBase64String((byte[]) null);
      //  // Unstable assertion: assertNull(string0);
      
      byte[] byteArray4 = base64_0.encode(byteArray3);
      //  // Unstable assertion: assertEquals(4, byteArray4.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)111, (byte)61}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray1 = Base64.decodeBase64("H,6slT+6HRp|_+P]OJ");
      Base64.isBase64(byteArray1);
      Base64.isBase64("H,6slT+6HRp|_+P]OJ");
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-126);
      byteArray2[2] = (byte)46;
      byteArray2[3] = (byte) (-1);
      Base64 base64_0 = new Base64((byte)46, byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("lineSeperator must not contain base64 characters: [");
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-33);
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)12;
      Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte)0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)78, (byte)56, (byte)103, (byte)68, (byte)65, (byte)0, (byte)10}, byteArray2);
      
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte) (-33), (byte)12}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.divide(bigInteger0);
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger1);
      Base64 base64_0 = new Base64(0);
      base64_0.encode(byteArray2, (int) (byte) (-100), (-3421));
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = base64_0.encode(byteArray1);
      assertFalse(base64_0.isUrlSafe());
      assertSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64(byteArray0);
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-3606);
      Base64.decodeBase64("Input array too big, the output array would be bigger (");
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64((-2446));
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      Base64.isBase64(") than the specified maxium size of ");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      assertEquals(14, byteArray2.length);
      assertArrayEquals(new byte[] {(byte)79, (byte)119, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      
      boolean boolean0 = Base64.isBase64("}MtqbZz4=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("H,6slT+6HRp|_+P]OJ");
      Base64.isBase64(byteArray2);
      assertEquals(11, byteArray2.length);
      
      Base64 base64_0 = new Base64(0, byteArray0, false);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      Base64.isBase64((byte)123);
      Base64.encodeBase64(byteArray3, false, false);
      base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray5 = Base64.decodeBase64("/Hu##(7");
      boolean boolean0 = Base64.isBase64(byteArray3);
      boolean boolean1 = Base64.isBase64(byteArray5);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)123, (byte) (-69)}, byteArray5);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-72);
      byteArray0[8] = (byte)123;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((byte)48, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(10, (byte[]) null);
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.isBase64(";)Gf$lv'Rm'S* {(+\"");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      bigInteger0.bitLength();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      base64_0.decode(byteArray0, 1, 0);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.gcd(bigInteger1);
      base64_0.encode(byteArray0);
      Base64.encodeBase64((byte[]) null);
      bigInteger0.intValue();
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64Chunked((byte[]) null);
      base64_0.encode((byte[]) null);
      Base64.encodeInteger(bigInteger0);
      BigInteger.valueOf((-1L));
      base64_0.readResults(byteArray0, 383, 10);
      Base64.encodeBase64((byte[]) null, false, false, (-3092));
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.modPow(bigInteger0, bigInteger0);
      bigInteger1.divide(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(5);
      base64_0.encode(byteArray1, 16, (int) (byte) (-100));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, (byte)0, (byte) (-100));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Base64 base64_0 = new Base64((-2431));
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)59;
      byteArray0[0] = (byte)59;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      Base64.decodeBase64(byteArray1);
      Base64 base64_1 = new Base64(12);
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray1, 8192, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8192
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      boolean boolean0 = Base64.isBase64("*ftL&|");
      Base64 base64_0 = new Base64((byte)109);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      base64_0.readResults(byteArray1, (byte)109, 0);
      assertEquals(52, byteArray1.length);
      
      boolean boolean1 = base64_0.hasData();
      assertTrue(boolean1 == boolean0);
      
      base64_0.decode(byteArray0, 0, 233);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray0);
      assertEquals(37, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.divide(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true, 1);
      Base64 base64_0 = new Base64((byte) (-100));
      base64_0.decode(byteArray2, (-3894), (-542));
      String string0 = "UTF-16LE";
      Object object0 = base64_0.decode((Object) "UTF-16LE");
      base64_0.encode(object0);
      Object object1 = new Object();
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64((-2446));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)59);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.divide(bigInteger0);
      Base64.decodeBase64(byteArray2);
      Base64 base64_1 = new Base64((byte)59);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 0, (int) (byte)59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(80);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      
      base64_0.avail();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      byte[] byteArray4 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      //  // Unstable assertion: assertEquals(32, byteArray4.length);
      
      boolean boolean0 = Base64.isBase64(byteArray3);
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Base64 base64_0 = new Base64((-2446));
      base64_0.decode((String) null);
      Base64.encodeBase64((byte[]) null, false);
      byte byte0 = (byte) (-7);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)96;
      base64_0.decode(byteArray0);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64(byteArray0, false, true);
      Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-27);
      byteArray1[1] = (byte) (-27);
      byteArray1[2] = (byte) (-27);
      byteArray1[3] = (byte) (-27);
      byteArray1[4] = (byte) (-27);
      byteArray1[5] = (byte) (-27);
      byteArray1[6] = (byte) (-27);
      byteArray1[7] = (byte) (-27);
      Base64 base64_0 = new Base64(0, byteArray1, true);
      base64_0.encode(byteArray1, 57, (int) (byte) (-27));
      assertEquals(8, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((-2146546290));
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode(byteArray0, (-1), (-1736));
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger1);
      int int0 = base64_0.readResults(byteArray2, 3910, (byte) (-1));
      assertEquals((-1), int0);
      assertEquals(0, byteArray2.length);
      
      base64_0.hasData();
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      assertEquals(4, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.signum();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-78);
      bigInteger1.divide(bigInteger0);
      byteArray1[4] = (byte) (-1);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(7, byteArray2.length);
      
      Base64.toIntegerBytes(bigInteger0);
      int int0 = base64_0.readResults(byteArray0, (-1148), (-124));
      assertEquals(0, int0);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61}, byteArray3);
      assertEquals(4, byteArray3.length);
      
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte) (-78);
      byteArray4[1] = (byte) (-78);
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byte[] byteArray5 = Base64.encodeBase64Chunked(byteArray4);
      assertEquals(10, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)65, (byte)65, (byte)61}, byteArray1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(61, byteArray0);
      String string0 = base64_0.encodeToString(byteArray2);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64((-2446));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)59, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      Base64.isBase64((byte)59);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals("T3dBQUFBQUEACg==", string0);
      
      Base64 base64_1 = new Base64(1431655765);
      Base64.encodeBase64(byteArray2, true, true);
      base64_0.avail();
      byte[] byteArray3 = base64_0.decode(byteArray0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      byte[] byteArray5 = Base64.decodeBase64("Input array too big, the output array would be bigger (");
      //  // Unstable assertion: assertEquals(32, byteArray5.length);
      
      String string1 = Base64.encodeBase64URLSafeString(byteArray4);
      //  // Unstable assertion: assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray2.length);
      
      byte[] byteArray3 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray3);
      base64_0.decode(byteArray1, 76, (int) (byte)55);
      assertEquals(6, byteArray1.length);
      
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)55;
      byteArray4[1] = (byte)55;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)55;
      byteArray4[5] = (byte)56;
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray3);
      assertEquals((short)14080, bigInteger1.shortValue());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divide(bigInteger1);
      bigInteger1.intValueExact();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger1);
      String string0 = Base64.encodeBase64String(byteArray0);
      //  // Unstable assertion: assertEquals("NgAAAA==", string0);
      
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = base64_0.decode("lineSeperator must not contain base64 characters: [");
      Base64.encodeBase64(byteArray0, false);
      Base64 base64_1 = new Base64((byte)0);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray4 = base64_0.decode(byteArray2);
      //  // Unstable assertion: assertEquals(8, byteArray4.length);
      
      Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64(") than the specified maxium size of ");
      boolean boolean0 = Base64.isBase64(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)61, (byte)61, (byte)0, (byte)10}, byteArray3);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger1.divide(bigInteger0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64(5);
      base64_0.encode(byteArray2, 16, (int) (byte) (-100));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)0, (byte)10}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(2750);
      base64_0.avail();
      Base64.decodeBase64((String) null);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64.decodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-75);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 1852);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      assertEquals(27, byteArray3.length);
      
      Base64 base64_0 = new Base64(true);
      base64_0.decode("");
      base64_0.avail();
      boolean boolean0 = Base64.isBase64("70,UU'uK?pu");
      assertFalse(boolean0);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true);
      assertEquals(26, byteArray4.length);
      assertEquals(18, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)111;
      byteArray0[8] = (byte)8;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 59);
      String string0 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertEquals("YVh0QWlVQVFBRzhJAAo=", string0);
      
      Base64.encodeBase64URLSafe(byteArray1);
      boolean boolean0 = Base64.isBase64(byteArray1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)39;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 929);
      assertEquals(13, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray2.length);
      
      byte[] byteArray3 = Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      assertEquals(27, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64(695);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.isBase64("S+dK9");
      Base64.encodeBase64URLSafeString(byteArray0);
      int int0 = 87;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(87, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [S]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      Base64.encodeBase64String(byteArray0);
      byteArray0[1] = (byte) (-100);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64("4gA=");
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-30), (byte)0}, byteArray2);
      
      base64_0.readResults(byteArray0, (-642), (byte) (-30));
      byte[] byteArray3 = new byte[0];
      byte[] byteArray4 = Base64.decodeBase64("rKJ8cVF=@101C<n");
      //  // Unstable assertion: assertEquals(5, byteArray4.length);
      
      Base64.encodeBase64String(byteArray3);
      byte[] byteArray5 = new byte[8];
      byteArray5[0] = (byte) (-100);
      byteArray5[1] = (byte) (-30);
      byteArray5[2] = (byte) (-30);
      byteArray5[3] = (byte) (-100);
      byteArray5[4] = (byte) (-100);
      byteArray5[5] = (byte) (-100);
      byteArray5[6] = (byte) (-100);
      byteArray5[7] = (byte) (-30);
      Base64.decodeBase64(byteArray5);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray3, true);
      Base64.discardWhitespace(byteArray3);
      byte[] byteArray6 = new byte[1];
      byteArray6[0] = (byte) (-30);
      byte[] byteArray7 = Base64.encodeBase64Chunked(byteArray6);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)52, (byte)103, (byte)61, (byte)61, (byte)0, (byte)10}, byteArray7);
      //  // Unstable assertion: assertEquals(6, byteArray7.length);
      
      base64_0.readResults(byteArray6, 1, 6);
      String string0 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertEquals("", string0);
      
      int int0 = base64_0.readResults((byte[]) null, 0, 920);
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray2);
      Base64 base64_0 = new Base64(0);
      base64_0.decode((Object) "AA==");
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)0;
      bigInteger0.shortValueExact();
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      Base64.decodeBase64(byteArray1);
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)0;
      Base64.isBase64("");
      Base64.encodeBase64(byteArray0, true);
      base64_0.readResults(byteArray3, 103, (-3827));
      base64_0.encodeToString(byteArray2);
      base64_0.isUrlSafe();
      Base64.decodeBase64(byteArray1);
      base64_0.readResults(byteArray0, 0, 2862);
      try { 
        base64_0.decode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)0;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((-2298), byteArray0, true);
      base64_0.readResults(byteArray0, (byte)0, (-1702));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.binary.Base64");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString(0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode(byteArray1, (-721), (int) (byte)55);
      Base64.encodeBase64(byteArray2);
      boolean boolean0 = Base64.isBase64("");
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)55;
      byteArray3[1] = (byte)55;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)55;
      byteArray3[5] = (byte)56;
      Base64.encodeBase64URLSafe(byteArray3);
      boolean boolean1 = Base64.isBase64("");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte) (-1);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64.isBase64("JZc<u5`;rS*+SLW)");
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.isProbablePrime((-327));
      bigInteger0.doubleValue();
      Base64 base64_0 = new Base64((-222));
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.decode((String) null);
      base64_0.hasData();
      Base64.decodeBase64((byte[]) null);
      boolean boolean0 = base64_0.isUrlSafe();
      Base64.decodeBase64((byte[]) null);
      boolean boolean1 = Base64.isBase64("JZc<u5`;rS*+SLW)");
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)92;
      byteArray3[1] = (byte) (-107);
      byteArray3[2] = (byte)122;
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte)0;
      int int0 = base64_0.readResults(byteArray3, 0, (byte) (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)14;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      //  // Unstable assertion: assertEquals(16, byteArray3.length);
      
      int int0 = base64_0.avail();
      //  // Unstable assertion: assertEquals(0, int0);
      
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertEquals((short)15677, bigInteger0.shortValue());
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)73, (byte)48, (byte)112, (byte)47, (byte)110, (byte)100, (byte)56, (byte)79, (byte)0, (byte)10}, byteArray1);
      
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      Object object1 = base64_0.decode(object0);
      //  // Unstable assertion: assertNotSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-118);
      Base64 base64_0 = new Base64((-1781), byteArray0);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte byte0 = (byte) (-117);
      Base64.isBase64((byte) (-117));
      String string0 = "encodeInteger called with null parameter";
      Base64.isBase64("encodeInteger called with null parameter");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      bigInteger0.longValueExact();
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.gcd(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray1);
      try { 
        base64_0.encode((Object) ",F`z9g'<0fBah");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(2, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64((-2446));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.EncoderException");
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-17);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertEquals(36, byteArray2.length);
      
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)117;
      base64_0.decode(byteArray0);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      assertEquals(27, byteArray3.length);
      
      byte[] byteArray4 = Base64.decodeBase64("Q.H;RlDU3<K#ue8S");
      assertArrayEquals(new byte[] {(byte)64, (byte)116, (byte)101, (byte)13, (byte)77, (byte) (-54), (byte) (-71), (byte) (-17), (byte)18}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = "org.apache.commons.codec.DecoderException";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger1);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = 67;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(67, byteArray0);
      byte[] byteArray1 = new byte[5];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      base64_0.decode(byteArray0);
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray1[3] = (byte)83;
      byte byte0 = (byte)0;
      Base64.decodeBase64(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-3315), 98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      String string0 = "H,6slT+6HRp|_+\\P]OJ";
      byte[] byteArray2 = Base64.decodeBase64("H,6slT+6HRp|_+P]OJ");
      Base64.isBase64(byteArray2);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      byte[] byteArray3 = new byte[3];
      Base64.encodeBase64(byteArray1, true, true);
      byte byte0 = (byte) (-27);
      Base64.encodeBase64(byteArray0);
      byteArray3[0] = (byte) (-27);
      String string1 = "org.apache.commons.codec.DecoderException";
      Base64.encodeBase64(byteArray0, false);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      int int1 = 562;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 0, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      Base64 base64_0 = new Base64((-1));
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64.isBase64((byte)86);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)86;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)86, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [VVVVVVV]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      bigInteger1.mod(bigInteger0);
      Base64.isBase64("");
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      //  // Unstable assertion: assertEquals(12, byteArray3.length);
      //  // Unstable assertion: assertEquals((short) (-26112), bigInteger1.shortValue());
      
      String string0 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals("UVVGQ2VVUkllR1ZCV205QkdnbxoK", string0);
      
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte) (-102);
      byteArray4[1] = (byte)12;
      byteArray4[2] = (byte)0;
      String string1 = Base64.encodeBase64String(byteArray4);
      //  // Unstable assertion: assertEquals("mgwA", string1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Base64.decodeBase64("Go0H");
      base64_0.readResults((byte[]) null, (-2360), 1689);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)52;
      byteArray0[2] = (byte)52;
      byte byte1 = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(64, byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      int int0 = 0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [=\uFFFD\u0699\uFFFD^\uFFFD\u02E9\uFFFDX\uFFFDv\uFFFD\u0001j\u01FA\uFFFD\u05DC\uFFFD\u05E2\uFFFDz-i\uFFFD\uFFFDz\uFFFD\uFFFDJ\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64((-3606));
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-62);
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)37;
      byte byte1 = (byte)27;
      byteArray0[4] = (byte)27;
      byte byte2 = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)61;
      byte byte3 = (byte) (-91);
      byteArray0[8] = (byte) (-91);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(4574, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDf\uFFFD%\u001B\uFFFD\u0000=\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64(1152);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)0;
      int int0 = base64_0.readResults(byteArray0, (-3589), (-3589));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)39;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 929);
      assertEquals(11, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divideAndRemainder(bigInteger1);
      bigInteger0.signum();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      try { 
        base64_0.decode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 0;
      bigInteger0.isProbablePrime(0);
      bigInteger0.byteValueExact();
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.modInverse((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Base64 base64_0 = new Base64(508);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)71;
      Base64.encodeBase64String(byteArray0);
      base64_0.avail();
      byte[] byteArray1 = Base64.decodeBase64("");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64(byteArray2);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Base64 base64_0 = new Base64(1448);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[5];
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("AAAAAAA=", string0);
      
      byteArray2[0] = (byte)56;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)45;
      byteArray2[3] = (byte)109;
      byteArray2[4] = (byte)70;
      String string1 = base64_0.encodeToString(byteArray2);
      assertEquals("OP8tbUY=\r\n", string1);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertFalse(boolean0);
      
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)109;
      byteArray3[2] = (byte)56;
      byteArray3[3] = (byte)70;
      byteArray3[4] = (byte)70;
      byteArray3[5] = (byte)70;
      byteArray3[6] = (byte)45;
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-63), (byte)69, (byte)23}, byteArray4);
      assertEquals(4, byteArray4.length);
      
      base64_0.encode(byteArray1, (-625), 0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Base64 base64_0 = new Base64(65, (byte[]) null, false);
      byte byte0 = (byte)0;
      base64_0.encode((byte[]) null);
      Base64.isBase64((byte)0);
      base64_0.decode((byte[]) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 0, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)53;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -115
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
