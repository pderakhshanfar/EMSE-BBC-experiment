/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:06:50 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.stream.DoubleStream;
import java.util.stream.LongStream;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-28);
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)0, (byte)96, (byte)76, (byte) (-28)}, byteArray0);
      assertEquals("iQBgTOQ", string0);
      assertEquals(5, byteArray0.length);
      
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte) (-75);
      byteArray1[2] = (byte) (-121);
      byteArray1[3] = (byte) (-118);
      byteArray1[4] = (byte) (-79);
      byteArray1[5] = (byte) (-23);
      byteArray1[6] = (byte) (-55);
      boolean boolean0 = Base64.isBase64(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-75), (byte) (-121), (byte) (-118), (byte) (-79), (byte) (-23), (byte) (-55)}, byteArray1);
      assertFalse(boolean0);
      assertEquals(7, byteArray1.length);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-75), (byte) (-121), (byte) (-118), (byte) (-79), (byte) (-23), (byte) (-55)}, byteArray2);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-75), (byte) (-121), (byte) (-118), (byte) (-79), (byte) (-23), (byte) (-55)}, byteArray1);
      assertEquals(6, byteArray2.length);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8170, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      
      BigInteger bigInteger1 = new BigInteger(8170, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertFalse(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertEquals((byte)1, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short) (-255), bigInteger1.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals(1360, byteArray0.length);
      
      Base64 base64_0 = new Base64(8);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(1360, byteArray0.length);
      //  // Unstable assertion: assertEquals(2270, byteArray1.length);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(1360, byteArray0.length);
      //  // Unstable assertion: assertEquals(2270, byteArray1.length);
      //  // Unstable assertion: assertEquals(3786, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(1360, byteArray0.length);
      //  // Unstable assertion: assertEquals(2270, byteArray1.length);
      //  // Unstable assertion: assertEquals(3786, byteArray2.length);
      //  // Unstable assertion: assertEquals(5182, byteArray3.length);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short) (-256), bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(1360, byteArray0.length);
      //  // Unstable assertion: assertEquals(2270, byteArray1.length);
      //  // Unstable assertion: assertEquals(2270, byteArray4.length);
      
      // Undeclared exception!
      Base64.encodeBase64Chunked(byteArray2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, false, false, 6);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 2482, 2482);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2482
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8169, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = BigInteger.ZERO;
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)0, bigInteger1.shortValue());
      assertEquals((byte)0, bigInteger1.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1360, byteArray0.length);
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 122, 122);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(1360, byteArray0.length);
      
      base64_0.encode(byteArray0, 117, (-594));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(1360, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1360, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8169, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      BigInteger bigInteger1 = new BigInteger(8169, mockRandom0);
      assertNotNull(bigInteger1);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short) (-255), bigInteger1.shortValue());
      assertEquals((byte)1, bigInteger1.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1360, byteArray0.length);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 122, 122);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(1360, byteArray0.length);
      
      base64_0.encode(byteArray0, 117, (-594));
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertNotSame(bigInteger0, bigInteger1);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(1360, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((short) (-256), bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1360, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8152, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals(1356, byteArray0.length);
      
      Base64 base64_0 = new Base64(8152);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(1356, byteArray0.length);
      //  // Unstable assertion: assertEquals(1810, byteArray1.length);
      
      byte[] byteArray2 = base64_0.encode(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(1356, byteArray0.length);
      //  // Unstable assertion: assertEquals(1810, byteArray1.length);
      //  // Unstable assertion: assertEquals(2418, byteArray2.length);
      
      Base64 base64_1 = new Base64(8152);
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray3 = base64_1.encode(byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(1356, byteArray0.length);
      //  // Unstable assertion: assertEquals(1810, byteArray1.length);
      //  // Unstable assertion: assertEquals(2418, byteArray2.length);
      //  // Unstable assertion: assertEquals(3226, byteArray3.length);
      
      byte[] byteArray4 = base64_1.encode(byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(1356, byteArray0.length);
      //  // Unstable assertion: assertEquals(1810, byteArray1.length);
      //  // Unstable assertion: assertEquals(2418, byteArray2.length);
      //  // Unstable assertion: assertEquals(3226, byteArray4.length);
      
      byte[] byteArray5 = base64_1.decode(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(1356, byteArray0.length);
      //  // Unstable assertion: assertEquals(1015, byteArray5.length);
      
      byte[] byteArray6 = Base64.discardWhitespace(byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(base64_0.equals((Object)base64_1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(base64_0, base64_1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray6);
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(1356, byteArray0.length);
      //  // Unstable assertion: assertEquals(1810, byteArray1.length);
      //  // Unstable assertion: assertEquals(2418, byteArray2.length);
      //  // Unstable assertion: assertEquals(3226, byteArray4.length);
      //  // Unstable assertion: assertEquals(3226, byteArray6.length);
      
      int int0 = mockRandom0.nextInt(76);
      //  // Unstable assertion: assertEquals(27, int0);
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      byte[] byteArray7 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray7);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals(1356, byteArray0.length);
      //  // Unstable assertion: assertEquals(1356, byteArray7.length);
      
      // Undeclared exception!
      base64_0.encode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(8152, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1356, byteArray0.length);
      
      Base64 base64_0 = new Base64(8152);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(1356, byteArray0.length);
      assertEquals(1810, byteArray1.length);
      
      Base64 base64_1 = new Base64(true);
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertTrue(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.encode(byteArray1, (-2861), (-3491));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(1356, byteArray0.length);
      assertEquals(1810, byteArray1.length);
      
      base64_0.encode(byteArray1, 59, 59);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_0.equals((Object)base64_1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_0, base64_1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(1356, byteArray0.length);
      assertEquals(1810, byteArray1.length);
      
      byte[] byteArray2 = base64_1.decode(byteArray0);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(base64_1, base64_0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(1356, byteArray0.length);
      assertEquals(1015, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      MockRandom mockRandom0 = new MockRandom((-765L));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      BigInteger bigInteger1 = new BigInteger(7553, mockRandom1);
      assertNotNull(bigInteger1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertNotNull(byteArray0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertEquals(1256, byteArray0.length);
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 1, 1243);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(1256, byteArray0.length);
      
      base64_0.encode(byteArray0, 1, (-2373));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(1256, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      MockRandom mockRandom0 = new MockRandom((-782L));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      BigInteger bigInteger1 = new BigInteger(7553, mockRandom1);
      assertNotNull(bigInteger1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertNotNull(byteArray0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertEquals(1256, byteArray0.length);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      BigInteger bigInteger2 = bigInteger1.gcd(bigInteger0);
      assertNotNull(bigInteger2);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertFalse(bigInteger2.equals((Object)bigInteger0));
      assertNotSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(mockRandom1, mockRandom0);
      assertSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertSame(bigInteger2, bigInteger1);
      assertNotSame(bigInteger2, bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertEquals((byte) (-20), bigInteger2.byteValue());
      assertEquals((short)236, bigInteger2.shortValue());
      
      base64_0.encode(byteArray0, 1, 1243);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom1, mockRandom0);
      assertSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(1256, byteArray0.length);
      
      base64_0.encode(byteArray0, 1, (-2373));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom1, mockRandom0);
      assertSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(1256, byteArray0.length);
      
      Random.setNextRandom((-1));
      int int0 = base64_0.readResults(byteArray0, 16, 16);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom1, mockRandom0);
      assertSame(bigInteger1, bigInteger2);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(16, int0);
      assertEquals(1256, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      BigInteger bigInteger0 = new BigInteger(7576, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1260, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1260, byteArray1.length);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      try { 
        base64_0.encode((Object) bigInteger0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(2900, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(480, byteArray0.length);
      
      int int0 = bigInteger0.signum();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1, int0);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertNotNull(string0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals("QVFBQUFBSUFBQUFEQUFBQUJBQUFBQVVBQUFBR0FBQUFCd0FBQUFnQUFBQUpBQUFBQ2dBQUFBc0FBQUFNQUFBQURRQUFBQTRBQUFBUEFBQUFFQUFBQUJFQUFBQVNBQUFBRXdBQUFCUUFBQUFWQUFBQUZnQUFBQmNBQUFBWUFBQUFHUUFBQUJvQUFBQWJBQUFBSEFBQUFCMEFBQUFlQUFBQUh3QUFBQ0FBQUFBaEFBQUFJZ0FBQUNNQUFBQWtBQUFBSlFBQUFDWUFBQUFuQUFBQUtBQUFBQ2tBQUFBcUFBQUFLd0FBQUN3QUFBQXRBQUFBTGdBQUFDOEFBQUF3QUFBQU1RQUFBRElBQUFBekFBQUFOQUFBQURVQUFBQTJBQUFBTndBQUFEZ0FBQUE1QUFBQU9nQUFBRHNBQUFBOEFBQUFQUUFBQUQ0QUFBQS9BQUFBUUFBQUFFRUFBQUJDQUFBQVF3QUFBRVFBQUFCRkFBQUFSZ0FBQUVjQUFBQklBQUFBU1FBQUFFb0FBQUJMQUFBQVRBQUFBRTBBQUFCT0FBQUFUd0FBQUZBQUFBQlJBQUFBVWdBQUFGTUFBQUJVQUFBQVZRQUFBRllBQUFCWEFBQUFXQUFBQUZrQUFBQmFBQUE9", string0);
      assertEquals(480, byteArray0.length);
      
      Base64 base64_0 = new Base64(false);
      mockRandom0.nextBytes(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 101, 2900);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 480
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      MockRandom mockRandom0 = new MockRandom((-758L));
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      BigInteger bigInteger1 = new BigInteger(7553, mockRandom1);
      assertNotNull(bigInteger1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertNotNull(byteArray0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertEquals(1256, byteArray0.length);
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 1, 399);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(1256, byteArray0.length);
      
      base64_0.encode(byteArray0, (-514), (-1));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(1256, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      MockRandom mockRandom0 = new MockRandom((-758L));
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      BigInteger bigInteger1 = new BigInteger(7553, mockRandom1);
      assertNotNull(bigInteger1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertEquals((short)236, bigInteger1.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      assertNotNull(byteArray0);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertEquals((short)236, bigInteger1.shortValue());
      assertEquals(1256, byteArray0.length);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray0, 1, 1243);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertEquals((short)236, bigInteger1.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(1256, byteArray0.length);
      
      base64_0.encode(byteArray0, 1, (-2373));
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom1, mockRandom0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte) (-20), bigInteger1.byteValue());
      assertEquals((short)236, bigInteger1.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(1256, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Random.setNextRandom(76);
      boolean boolean0 = Base64.isBase64((byte)61);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      BigInteger bigInteger0 = new BigInteger(2900, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(480, byteArray0.length);
      
      int int0 = bigInteger0.signum();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1, int0);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertNotNull(string0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals("QVFBQUFBSUFBQUFEQUFBQUJBQUFBQVVBQUFBR0FBQUFCd0FBQUFnQUFBQUpBQUFBQ2dBQUFBc0FBQUFNQUFBQURRQUFBQTRBQUFBUEFBQUFFQUFBQUJFQUFBQVNBQUFBRXdBQUFCUUFBQUFWQUFBQUZnQUFBQmNBQUFBWUFBQUFHUUFBQUJvQUFBQWJBQUFBSEFBQUFCMEFBQUFlQUFBQUh3QUFBQ0FBQUFBaEFBQUFJZ0FBQUNNQUFBQWtBQUFBSlFBQUFDWUFBQUFuQUFBQUtBQUFBQ2tBQUFBcUFBQUFLd0FBQUN3QUFBQXRBQUFBTGdBQUFDOEFBQUF3QUFBQU1RQUFBRElBQUFBekFBQUFOQUFBQURVQUFBQTJBQUFBTndBQUFEZ0FBQUE1QUFBQU9nQUFBRHNBQUFBOEFBQUFQUUFBQUQ0QUFBQS9BQUFBUUFBQUFFRUFBQUJDQUFBQVF3QUFBRVFBQUFCRkFBQUFSZ0FBQUVjQUFBQklBQUFBU1FBQUFFb0FBQUJMQUFBQVRBQUFBRTBBQUFCT0FBQUFUd0FBQUZBQUFBQlJBQUFBVWdBQUFGTUFBQUJVQUFBQVZRQUFBRllBQUFCWEFBQUFXQUFBQUZrQUFBQmFBQUE9", string0);
      assertEquals(480, byteArray0.length);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64();
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_1.decode(byteArray0, 98, 8192);
      assertFalse(base64_1.equals((Object)base64_0));
      assertNotSame(base64_1, base64_0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_1.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(480, byteArray0.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertTrue(boolean0);
      assertEquals(480, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      BigInteger bigInteger0 = new BigInteger(2900, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(480, byteArray0.length);
      
      int int0 = bigInteger0.signum();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(1, int0);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertNotNull(string0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals("QVFBQUFBSUFBQUFEQUFBQUJBQUFBQVVBQUFBR0FBQUFCd0FBQUFnQUFBQUpBQUFBQ2dBQUFBc0FBQUFNQUFBQURRQUFBQTRBQUFBUEFBQUFFQUFBQUJFQUFBQVNBQUFBRXdBQUFCUUFBQUFWQUFBQUZnQUFBQmNBQUFBWUFBQUFHUUFBQUJvQUFBQWJBQUFBSEFBQUFCMEFBQUFlQUFBQUh3QUFBQ0FBQUFBaEFBQUFJZ0FBQUNNQUFBQWtBQUFBSlFBQUFDWUFBQUFuQUFBQUtBQUFBQ2tBQUFBcUFBQUFLd0FBQUN3QUFBQXRBQUFBTGdBQUFDOEFBQUF3QUFBQU1RQUFBRElBQUFBekFBQUFOQUFBQURVQUFBQTJBQUFBTndBQUFEZ0FBQUE1QUFBQU9nQUFBRHNBQUFBOEFBQUFQUUFBQUQ0QUFBQS9BQUFBUUFBQUFFRUFBQUJDQUFBQVF3QUFBRVFBQUFCRkFBQUFSZ0FBQUVjQUFBQklBQUFBU1FBQUFFb0FBQUJMQUFBQVRBQUFBRTBBQUFCT0FBQUFUd0FBQUZBQUFBQlJBQUFBVWdBQUFGTUFBQUJVQUFBQVZRQUFBRllBQUFCWEFBQUFXQUFBQUZrQUFBQmFBQUE9", string0);
      assertEquals(480, byteArray0.length);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.decode(byteArray0, 80, 2900);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(480, byteArray0.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertTrue(boolean0);
      assertEquals(480, byteArray0.length);
      
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(476, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(76, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals("QUFBPQAA", string0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      
      base64_0.decode(byteArray2, 1, 80);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61, (byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      BigInteger bigInteger0 = new BigInteger(2900, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(480, byteArray0.length);
      
      int int0 = bigInteger0.signum();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1, int0);
      
      LongStream longStream0 = mockRandom0.longs(85L);
      assertNotNull(longStream0);
      
      Base64 base64_0 = new Base64(17);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(480, byteArray0.length);
      assertEquals(720, byteArray1.length);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-128);
      byteArray2[1] = (byte)88;
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte)31;
      byteArray2[4] = (byte)32;
      byteArray2[5] = (byte) (-68);
      byteArray2[6] = (byte)49;
      byteArray2[7] = (byte)89;
      base64_0.encode(byteArray2, 354, (int) (byte) (-128));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)88, (byte)1, (byte)31, (byte)32, (byte) (-68), (byte)49, (byte)89}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(8, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("@Wm!erya*Y*e{%");
      assertFalse(boolean0);
      
      boolean boolean1 = Base64.isBase64("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = 0;
      Base64 base64_0 = new Base64((byte)62);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = null;
      int int1 = 61;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, 61, 320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      BigInteger bigInteger0 = new BigInteger(2900, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(480, byteArray0.length);
      
      int int0 = bigInteger0.signum();
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1, int0);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, false, 2900);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(480, byteArray0.length);
      assertEquals(658, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 2900);
      assertNotNull(byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(480, byteArray0.length);
      assertEquals(658, byteArray1.length);
      assertEquals(880, byteArray2.length);
      
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 1, 2900);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 880
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)89;
      byteArray0[0] = (byte)89;
      byte byte1 = (byte)40;
      byteArray0[1] = (byte)40;
      byte byte2 = (byte)103;
      byteArray0[2] = (byte)103;
      byte byte3 = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byte byte4 = (byte)9;
      byteArray0[4] = (byte)9;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)89, (byte)40, (byte)103, (byte) (-1), (byte)9}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)89, (byte)40, (byte)103, (byte) (-1)}, byteArray1);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      
      Base64 base64_0 = new Base64((-1305));
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)89, (byte)40, (byte)103, (byte) (-1), (byte)9}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)87, (byte)83, (byte)104, (byte)110, (byte)47, (byte)119, (byte)107, (byte)61, (byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)89, (byte)40, (byte)103, (byte) (-1), (byte)9}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)89, (byte)40, (byte)103, (byte) (-1)}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)98}, byteArray3);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)89, (byte)40, (byte)103, (byte) (-1), (byte)9}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)89, (byte)40, (byte)103, (byte) (-1)}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)87, (byte)83, (byte)104, (byte)110, (byte)47, (byte)119, (byte)61, (byte)61}, byteArray4);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(8, byteArray4.length);
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      int int0 = base64_0.readResults(byteArray3, (byte) (-1), (byte)9);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)89, (byte)40, (byte)103, (byte) (-1), (byte)9}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)89, (byte)40, (byte)103, (byte) (-1)}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)98}, byteArray3);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertEquals(5, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(1, byteArray3.length);
      
      try { 
        base64_0.encode(object0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)123;
      Base64 base64_0 = new Base64(1252, byteArray0, true);
      assertNotNull(base64_0);
      assertArrayEquals(new byte[] {(byte)123, (byte)123, (byte)123, (byte)123, (byte)123, (byte) (-33), (byte)123, (byte)123, (byte)123}, byteArray0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(9, byteArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 104);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(5, byteArray1.length);
      
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      base64_0.encode(byteArray1, 104, (-180));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(5, byteArray1.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(5, byteArray1.length);
      
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 36, 104);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true, true, (-5506));
      assertNull(byteArray0);
      
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.decodeBase64((byte[]) null);
      assertNull(byteArray1);
      
      String string1 = Base64.encodeBase64String((byte[]) null);
      assertNull(string1);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null, true);
      assertNull(byteArray2);
      
      byte[] byteArray3 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray3);
      
      String string2 = "";
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      byte[] byteArray4 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray4);
      
      base64_0.decode((byte[]) null, 4206, (-5506));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(14, byteArray1.length);
      
      byte byte0 = (byte) (-120);
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      Base64 base64_0 = new Base64(480, byteArray2);
      assertNotNull(base64_0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, byteArray2.length);
      
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray2.length);
      
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(2021161082, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short) (-15613), bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)3, bigInteger0.byteValue());
      
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      //  // Unstable assertion: assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      //  // Unstable assertion: assertNotNull(doubleStream0);
      
      BigInteger bigInteger0 = new BigInteger(2900, mockRandom0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(480, byteArray0.length);
      
      byte[] byteArray1 = new byte[6];
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)125;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)1;
      byteArray1[3] = (byte)87;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)125, (byte)90, (byte)1, (byte)87, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)102, (byte)86, (byte)111, (byte)66, (byte)86, (byte)119, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertEquals(10, byteArray2.length);
      
      byte[] byteArray3 = new byte[17];
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)32;
      byteArray3[1] = (byte)1;
      byteArray3[2] = (byte)90;
      byte[] byteArray4 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertEquals(17, byteArray3.length);
      //  // Unstable assertion: assertEquals(16, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      BigInteger bigInteger0 = new BigInteger(2900, mockRandom0);
      assertNotNull(bigInteger0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(480, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 2900);
      assertNotNull(byteArray1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(480, byteArray0.length);
      assertEquals(658, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false, 2900);
      assertNotNull(byteArray2);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(480, byteArray0.length);
      assertEquals(658, byteArray1.length);
      assertEquals(904, byteArray2.length);
      
      Base64 base64_0 = new Base64(false);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      base64_0.encode(byteArray2, 8, 8);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(480, byteArray0.length);
      assertEquals(658, byteArray1.length);
      assertEquals(904, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64((-2446));
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)121, (byte)95, (byte) (-29), (byte)96, (byte) (-4), (byte) (-24), (byte)114, (byte)0, (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertEquals((short) (-13318), bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-6), bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)121, (byte)95, (byte) (-29), (byte)96, (byte) (-4), (byte) (-24), (byte)114, (byte)0, (byte) (-1)}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-53), (byte) (-6)}, byteArray1);
      //  // Unstable assertion: assertEquals((short) (-13318), bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte) (-6), bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(9, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = new byte[6];
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      
      byteArray2[1] = (byte)40;
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false, true, 12);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)67, (byte)103, (byte)65, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(8, byteArray4.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = base64_0.decode((String) null);
      assertNull(byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte) (-97);
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte)72;
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte)120;
      byteArray1[6] = (byte)2;
      byteArray1[7] = (byte)85;
      byteArray1[8] = (byte)76;
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-97), (byte)6, (byte)72, (byte)46, (byte)120, (byte)2, (byte)85, (byte)76}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-97), (byte)6, (byte)72, (byte)46, (byte)120, (byte)2, (byte)85, (byte)76}, byteArray2);
      assertEquals(9, byteArray1.length);
      assertEquals(9, byteArray2.length);
      
      byte[] byteArray3 = Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertEquals(27, byteArray3.length);
      
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64();
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-91);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, 111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64((byte)64);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      base64_0.decode(byteArray0, (int) (byte)53, 0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      Object object0 = new Object();
      //  // Unstable assertion: assertNotNull(object0);
      
      try { 
        base64_0.encode(object0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64 base64_0 = new Base64((-2446));
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray0 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true, true, (int) (byte)40);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      BigInteger bigInteger0 = new BigInteger(1, mockRandom0);
      assertNotNull(bigInteger0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      Base64 base64_0 = new Base64((-9));
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64("6G|b=b5J65eGx%");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)52;
      byteArray0[4] = (byte) (-1);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-12);
      boolean boolean1 = Base64.isBase64(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)40, (byte)52, (byte)0, (byte)103, (byte)52, (byte) (-12)}, byteArray0);
      assertFalse(boolean1);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles();
      assertNotNull(doubleStream0);
      
      MockRandom mockRandom1 = new MockRandom();
      assertNotNull(mockRandom1);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      
      BigInteger bigInteger0 = new BigInteger(2900, mockRandom0);
      assertNotNull(bigInteger0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray0);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertNotSame(mockRandom0, mockRandom1);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(480, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 2900);
      assertNotNull(byteArray1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(480, byteArray0.length);
      assertEquals(658, byteArray1.length);
      
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      assertNotNull(bigInteger1);
      assertFalse(mockRandom0.equals((Object)mockRandom1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertNotSame(mockRandom0, mockRandom1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(bigInteger1, bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)61, bigInteger1.byteValue());
      assertEquals((short)16701, bigInteger1.shortValue());
      assertEquals(480, byteArray0.length);
      assertEquals(658, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertNotNull(byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      Base64 base64_0 = new Base64(2021161080);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray3 = base64_0.encode(byteArray0);
      assertNotNull(byteArray3);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray3, byteArray1);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray3.length);
      
      base64_0.encode(byteArray0, (-757), (int) (byte) (-100));
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, false, false, 76);
      assertNotNull(byteArray4);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray3);
      assertSame(byteArray0, byteArray4);
      assertSame(byteArray1, byteArray3);
      assertSame(byteArray1, byteArray4);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray4, byteArray2);
      assertSame(byteArray4, byteArray0);
      assertSame(byteArray4, byteArray1);
      assertSame(byteArray4, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray4.length);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byte[] byteArray1 = Base64.encodeBase64URLSafe((byte[]) null);
      assertNull(byteArray1);
      
      Base64 base64_0 = new Base64((-1275), (byte[]) null, true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      byte[] byteArray1 = Base64.encodeBase64((byte[]) null, true, true);
      assertNull(byteArray1);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray2 = bigInteger0.toByteArray();
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(1, byteArray2.length);
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, byteArray3.length);
      
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      assertNotNull(base64_0);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = Base64.encodeBase64((byte[]) null, true);
      assertNull(byteArray0);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
      
      String string0 = Base64.encodeBase64String((byte[]) null);
      assertNull(string0);
      
      String string1 = base64_0.encodeToString((byte[]) null);
      assertNull(string1);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      int int0 = base64_0.avail();
      assertTrue(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, int0);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)61;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, (int) (byte)61, (int) (byte)61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      assertNotNull(byteArray2);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      Base64 base64_0 = new Base64(1);
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray0);
      assertNotNull(string0);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      
      Base64 base64_1 = new Base64((byte)103, byteArray1, false);
      assertNotNull(base64_1);
      assertFalse(base64_1.equals((Object)base64_0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(base64_1.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertArrayEquals(new byte[] {}, byteArray3);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64((byte)64);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 64);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, false);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)61, (byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals((short)0, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)0, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)69, (byte)61, (byte)0, (byte)0}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)85, (byte)86, (byte)86, (byte)70, (byte)80, (byte)81, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray2.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      
      Base64 base64_0 = new Base64();
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray1);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64("H,6slT+6HRp|_+P]OJ");
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertEquals(11, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(11, byteArray2.length);
      
      Base64 base64_0 = new Base64(0, byteArray0, false);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      
      byte[] byteArray3 = new byte[3];
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      
      byte[] byteArray4 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray4);
      //  // Unstable assertion: assertEquals(2, byteArray4.length);
      
      byte[] byteArray5 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray5);
      //  // Unstable assertion: assertEquals(0, byteArray0.length);
      //  // Unstable assertion: assertEquals(0, byteArray5.length);
      
      byteArray3[0] = (byte) (-27);
      byte[] byteArray6 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray6);
      //  // Unstable assertion: assertEquals(2, byteArray6.length);
      
      byte[] byteArray7 = Base64.decodeBase64("H,6slT+6HRp|_+P]OJ");
      //  // Unstable assertion: assertNotNull(byteArray7);
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertEquals(11, byteArray7.length);
      
      boolean boolean1 = Base64.isBase64(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray7));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertSame(byteArray4, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray4);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertEquals(2, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)103;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-41), (byte)103}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)49, (byte)50, (byte)99}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      
      Base64 base64_0 = new Base64(30);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      String string0 = base64_0.encodeToString(byteArray1);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-41), (byte)103}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)49, (byte)50, (byte)99}, byteArray1);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals("MTJj\u0000\u0000", string0);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-41), (byte)103}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)49, (byte)50, (byte)99}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)77, (byte)84, (byte)74, (byte)106}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-41), (byte)103}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)49, (byte)50, (byte)99}, byteArray1);
      //  // Unstable assertion: assertEquals((short) (-10393), bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)103, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, true, true);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-41), (byte)103}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)49, (byte)50, (byte)99}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)77, (byte)84, (byte)74, (byte)106, (byte)0, (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      //  // Unstable assertion: assertEquals(6, byteArray3.length);
      
      byte[] byteArray4 = new byte[1];
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      
      byteArray4[0] = (byte)103;
      base64_0.encode(byteArray4, 30, 3);
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)103}, byteArray4);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(1, byteArray4.length);
      
      base64_0.decode(byteArray0, (int) (byte)103, (int) (byte) (-41));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-41), (byte)103}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      boolean boolean0 = base64_0.hasData();
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertFalse(boolean0);
      
      base64_0.encode(byteArray0, (int) (byte) (-41), 30);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-41), (byte)103}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-41), (byte)103}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)49, (byte)50, (byte)99}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)49, (byte)50, (byte)99}, byteArray5);
      //  // Unstable assertion: assertEquals(2, byteArray0.length);
      //  // Unstable assertion: assertEquals(3, byteArray1.length);
      //  // Unstable assertion: assertEquals(3, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertNotNull(byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      boolean boolean0 = Base64.isArrayByteBase64(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      
      byte[] byteArray2 = new byte[5];
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-17);
      byteArray2[1] = (byte) (-17);
      byteArray2[2] = (byte) (-17);
      byteArray2[3] = (byte) (-17);
      byteArray2[4] = (byte) (-17);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17)}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)55, (byte)43, (byte)47, (byte)118, (byte)55, (byte)43, (byte)56, (byte)61, (byte)0, (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(5, byteArray2.length);
      //  // Unstable assertion: assertEquals(10, byteArray3.length);
      
      Base64 base64_0 = new Base64(false);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray4 = base64_0.decode(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      //  // Unstable assertion: assertEquals(37, byteArray4.length);
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17)}, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17), (byte) (-17)}, byteArray5);
      //  // Unstable assertion: assertEquals(5, byteArray2.length);
      //  // Unstable assertion: assertEquals(5, byteArray5.length);
      
      byte[] byteArray6 = Base64.decodeBase64((String) null);
      //  // Unstable assertion: assertNull(byteArray6);
      
      byte[] byteArray7 = base64_0.encode(byteArray4);
      //  // Unstable assertion: assertNotNull(byteArray7);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray7);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(37, byteArray0.length);
      //  // Unstable assertion: assertEquals(54, byteArray1.length);
      //  // Unstable assertion: assertEquals(37, byteArray4.length);
      //  // Unstable assertion: assertEquals(54, byteArray7.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      assertNotNull(byteArray2);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      Base64 base64_0 = new Base64((-1));
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertTrue(boolean0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      String string0 = Base64.encodeBase64URLSafeString(byteArray2);
      assertNotNull(string0);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      byte byte0 = (byte)117;
      int int0 = base64_0.readResults(byteArray1, 3231, (-2560));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(3, byteArray0.length);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (-726), 1);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -726
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      //  // Unstable assertion: assertNotNull(bigInteger0);
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      
      int int0 = bigInteger0.intValueExact();
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(1, int0);
      
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray2);
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      
      double double0 = bigInteger0.doubleValue();
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(1.0, double0, 0.01);
      
      byte[] byteArray3 = Base64.discardWhitespace(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray3);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)0, (byte)0}, byteArray3);
      //  // Unstable assertion: assertEquals(1, byteArray0.length);
      //  // Unstable assertion: assertEquals(4, byteArray1.length);
      //  // Unstable assertion: assertEquals(4, byteArray3.length);
      
      byte[] byteArray4 = new byte[7];
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      
      byteArray4[0] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray4[2] = (byte)123;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte)0;
      byte[] byteArray5 = Base64.encodeBase64(byteArray4, true);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)123, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray4);
      //  // Unstable assertion: assertEquals(14, byteArray5.length);
      //  // Unstable assertion: assertEquals(7, byteArray4.length);
      
      BigInteger bigInteger1 = new BigInteger(byteArray2);
      //  // Unstable assertion: assertNotNull(bigInteger1);
      //  // Unstable assertion: assertTrue(bigInteger1.equals((Object)bigInteger0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray5));
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray2);
      //  // Unstable assertion: assertEquals((short)1, bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger1.byteValue());
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(1, byteArray2.length);
      
      byte[] byteArray6 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertTrue(bigInteger0.equals((Object)bigInteger1));
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(bigInteger0, bigInteger1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)1}, byteArray6);
      //  // Unstable assertion: assertEquals((short)1, bigInteger0.shortValue());
      //  // Unstable assertion: assertEquals((byte)1, bigInteger0.byteValue());
      //  // Unstable assertion: assertEquals(1, byteArray6.length);
      
      Base64 base64_0 = new Base64((byte)123);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Object object0 = base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      //  // Unstable assertion: assertNotNull(object0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      Base64 base64_1 = new Base64(292);
      //  // Unstable assertion: assertNotNull(base64_1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      Object object1 = base64_1.decode((Object) "org.apache.commons.codec.binary.Base64");
      //  // Unstable assertion: assertNotNull(object1);
      //  // Unstable assertion: assertFalse(base64_1.equals((Object)base64_0));
      //  // Unstable assertion: assertFalse(object1.equals((Object)object0));
      //  // Unstable assertion: assertNotSame(base64_1, base64_0);
      //  // Unstable assertion: assertNotSame(object1, object0);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      
      byte[] byteArray7 = new byte[5];
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      
      byteArray7[0] = (byte)123;
      byteArray7[1] = (byte)123;
      byteArray7[2] = (byte)0;
      byteArray7[3] = (byte)123;
      byteArray7[4] = (byte)123;
      boolean boolean0 = Base64.isBase64(byteArray7);
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)object0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)object1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray7.equals((Object)byteArray3));
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray7, object0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray7, object1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray7, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)123, (byte)123, (byte)0, (byte)123, (byte)123}, byteArray7);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(5, byteArray7.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64 base64_0 = new Base64((-2446));
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray0 = new byte[18];
      byteArray0[5] = (byte)59;
      byte[] byteArray1 = Base64.encodeBase64Chunked((byte[]) null);
      assertNull(byteArray1);
      
      byte[] byteArray2 = Base64.encodeBase64((byte[]) null);
      assertNull(byteArray2);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      BigInteger bigInteger0 = new BigInteger(76, mockRandom0);
      assertNotNull(bigInteger0);
      assertEquals((short)512, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray3, byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)81, (byte)65, (byte)65, (byte)65, (byte)65, (byte)73, (byte)65}, byteArray3);
      assertEquals((short)512, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals(8, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertNotNull(byteArray1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = Base64.decodeBase64("H,6slT+6HRp|_+P]OJ");
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(11, byteArray2.length);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(boolean0);
      assertEquals(11, byteArray2.length);
      
      byte[] byteArray3 = new byte[2];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-102);
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      assertNotNull(byteArray4);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-102)}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertEquals(2, byteArray3.length);
      assertEquals(0, byteArray4.length);
      
      Base64 base64_0 = new Base64((byte) (-100));
      assertNotNull(base64_0);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      
      byte[] byteArray5 = new byte[0];
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      
      byte[] byteArray6 = base64_0.encode(byteArray5);
      assertNotNull(byteArray6);
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray0));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertSame(byteArray5, byteArray6);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertNotSame(byteArray6, byteArray0);
      assertNotSame(byteArray6, byteArray4);
      assertNotSame(byteArray6, byteArray2);
      assertSame(byteArray6, byteArray5);
      assertNotSame(byteArray6, byteArray1);
      assertNotSame(byteArray6, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertArrayEquals(new byte[] {}, byteArray6);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, byteArray5.length);
      assertEquals(0, byteArray6.length);
      
      base64_0.encode(byteArray5, (-1), (-1));
      assertFalse(byteArray5.equals((Object)byteArray0));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertNotSame(byteArray5, byteArray0);
      assertNotSame(byteArray5, byteArray1);
      assertNotSame(byteArray5, byteArray4);
      assertSame(byteArray5, byteArray6);
      assertNotSame(byteArray5, byteArray2);
      assertNotSame(byteArray5, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray5);
      assertFalse(base64_0.isUrlSafe());
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
      assertEquals(76, Base64.MIME_CHUNK_SIZE);
      assertEquals(0, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = Base64.decodeBase64("Q!tD8Of(OHTY/2iZu{");
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(11, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertNotNull(byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertEquals(11, byteArray1.length);
      assertEquals(16, byteArray2.length);
      
      byte[] byteArray3 = Base64.decodeBase64("encodeInteger called with null parameter");
      assertNotNull(byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertEquals(27, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = Base64.isBase64(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(8, byteArray0.length);
      
      Base64 base64_0 = new Base64((byte)5, byteArray0, false);
      //  // Unstable assertion: assertNotNull(base64_0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(8, byteArray0.length);
      
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      //  // Unstable assertion: assertNotNull(byteArray1);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      //  // Unstable assertion: assertNotNull(byteArray2);
      //  // Unstable assertion: assertFalse(byteArray1.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray2.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray1, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray2, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray2);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      //  // Unstable assertion: assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = new byte[3];
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      
      byteArray3[0] = (byte) (-27);
      byteArray3[1] = (byte)5;
      byte[] byteArray4 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertNotNull(byteArray4);
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray4.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray4, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertEquals(8, byteArray0.length);
      //  // Unstable assertion: assertEquals(12, byteArray4.length);
      
      byteArray3[2] = (byte) (-1);
      byte[] byteArray5 = Base64.encodeBase64(byteArray3, false);
      //  // Unstable assertion: assertNotNull(byteArray5);
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray3.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray5.equals((Object)byteArray2));
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray3, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray5, byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte) (-27), (byte)5, (byte) (-1)}, byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)53, (byte)81, (byte)88, (byte)47}, byteArray5);
      //  // Unstable assertion: assertEquals(3, byteArray3.length);
      //  // Unstable assertion: assertEquals(4, byteArray5.length);
      
      byte[] byteArray6 = Base64.decodeBase64("");
      //  // Unstable assertion: assertNotNull(byteArray6);
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray1));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray0));
      //  // Unstable assertion: assertFalse(byteArray6.equals((Object)byteArray4));
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray1);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray0);
      //  // Unstable assertion: assertNotSame(byteArray6, byteArray4);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray6);
      //  // Unstable assertion: assertEquals(0, byteArray6.length);
      
      base64_0.encode(byteArray0, (int) (byte) (-1), (int) (byte) (-1));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray6));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray3));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray4));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray5));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray2));
      //  // Unstable assertion: assertFalse(byteArray0.equals((Object)byteArray1));
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray6);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray3);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray4);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray5);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray2);
      //  // Unstable assertion: assertNotSame(byteArray0, byteArray1);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      //  // Unstable assertion: assertFalse(base64_0.isUrlSafe());
      //  // Unstable assertion: assertEquals(64, Base64.PEM_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(76, Base64.MIME_CHUNK_SIZE);
      //  // Unstable assertion: assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64((-2446));
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)59;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(10, byteArray1.length);
      
      byteArray0[1] = (byte)40;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)59;
      byte[] byteArray2 = base64_0.decode(byteArray0);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(2203, mockRandom0);
      byte[] byteArray3 = Base64.encodeInteger(bigInteger0);
      assertEquals(364, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-97);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      Base64.isBase64(byteArray1);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((short) (-24673), bigInteger0.shortValue());
      assertEquals(6, byteArray2.length);
      
      String string0 = Base64.encodeBase64String(byteArray1);
      assertEquals("n5+f", string0);
      
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-83);
      byteArray3[1] = (byte) (-97);
      byteArray3[2] = (byte) (-97);
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte) (-97);
      byteArray3[5] = (byte) (-97);
      byteArray3[6] = (byte) (-97);
      String string1 = base64_0.encodeToString(byteArray3);
      assertEquals("rZ+f/5+fnw==", string1);
      
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger1);
      assertEquals(3, byteArray4.length);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)123;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)0;
      Base64.encodeBase64(byteArray3, true);
      Base64.isBase64(byteArray2);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (-119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -119
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)14;
      byteArray2[1] = (byte)104;
      byteArray2[2] = (byte)48;
      byteArray2[3] = (byte)97;
      byteArray2[4] = (byte)76;
      byteArray2[5] = (byte) (-100);
      byteArray2[6] = (byte)64;
      byteArray2[7] = (byte)0;
      String string0 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals("DmgwYUycQAA=", string0);
      
      Base64 base64_0 = new Base64((-4732));
      base64_0.decode((Object) "Parameter supplied to Base64 decode is not a byte[] or a String");
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      short short0 = bigInteger1.shortValueExact();
      //  // Unstable assertion: assertEquals((short)0, short0);
      
      Base64.encodeBase64(byteArray1, false, true, 2631);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65}, byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, false, false);
      //  // Unstable assertion: assertEquals(12, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)119;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(14, byteArray1.length);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)106;
      byteArray2[1] = (byte)3;
      byteArray2[2] = (byte)81;
      byteArray2[3] = (byte)28;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray2);
      assertEquals((byte) (-115), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      String string0 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals("AQ==", string0);
      
      Base64 base64_0 = new Base64(0);
      base64_0.decode((Object) "AA==");
      Base64.decodeInteger(byteArray0);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)0;
      bigInteger0.shortValueExact();
      byteArray3[1] = (byte)0;
      byte[] byteArray4 = Base64.encodeBase64(byteArray1, true, true, 510);
      String string1 = Base64.encodeBase64String(byteArray4);
      //  // Unstable assertion: assertEquals("UVVFQUFBAAA=", string1);
      
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray5 = Base64.encodeBase64(byteArray3, true, true);
      //  // Unstable assertion: assertEquals(12, byteArray5.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Base64 base64_0 = new Base64((-866));
      Base64 base64_1 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = base64_1.decode("org.apache.commons.codec.EncoderException");
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertEquals(36, byteArray2.length);
      
      byte[] byteArray3 = base64_0.decode(byteArray0);
      byte[] byteArray4 = Base64.discardWhitespace(byteArray0);
      assertEquals(7, byteArray4.length);
      
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray5 = base64_0.encode(byteArray3);
      assertSame(byteArray5, byteArray3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)0;
      Base64 base64_0 = new Base64((byte)0);
      byte[] byteArray1 = base64_0.decode("");
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64.isBase64((byte)86);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)86;
      Base64 base64_0 = new Base64((byte)86);
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)86);
      base64_0.decode(byteArray0, (int) (byte)86, (-4011));
      String string0 = "XxX";
      try { 
        base64_0.encode((Object) "XxX");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64((-3606));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-1);
      base64_0.encode(byteArray0);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      assertEquals(11, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray2.length);
      
      Base64.encodeBase64((byte[]) null, true);
      base64_0.decode((Object) "");
      Object object0 = base64_0.decode((Object) "F'7g*");
      Object object1 = base64_0.decode(object0);
      Object object2 = base64_0.decode(object1);
      Object object3 = base64_0.encode(object2);
      assertNotSame(object3, object0);
      assertSame(object3, object1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      Base64.decodeInteger(byteArray0);
      Base64.isBase64(byteArray0);
      Base64.isBase64("S+dK9");
      Base64.encodeBase64URLSafeString(byteArray0);
      int int0 = 87;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(87, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [S]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-30);
      Base64.encodeBase64String(byteArray0);
      byteArray0[1] = (byte) (-100);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeBase64("4gA=");
      int int0 = base64_0.readResults(byteArray0, (-642), (byte) (-30));
      byte[] byteArray2 = new byte[0];
      Base64.decodeBase64("rKJ8cVF=@101C<n");
      Base64.encodeBase64String(byteArray2);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-100);
      byteArray3[1] = (byte) (-30);
      byteArray3[2] = (byte) (-30);
      byteArray3[3] = (byte) (-100);
      byteArray3[4] = (byte) (-100);
      byteArray3[5] = (byte) (-100);
      byteArray3[6] = (byte) (-100);
      byteArray3[7] = (byte) (-30);
      Base64.decodeBase64(byteArray3);
      base64_0.isUrlSafe();
      Base64.encodeBase64(byteArray2, true);
      Base64.discardWhitespace(byteArray2);
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte) (-30);
      Base64.encodeBase64Chunked(byteArray4);
      base64_0.readResults(byteArray4, 1, 6);
      Base64.encodeBase64String(byteArray1);
      int int1 = base64_0.readResults((byte[]) null, 0, 920);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.intValueExact();
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64String(byteArray2);
      Base64 base64_0 = new Base64(0);
      base64_0.decode((Object) "AA==");
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)0;
      bigInteger0.shortValueExact();
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      Base64.decodeBase64(byteArray1);
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)0;
      Base64.isBase64("");
      Base64.encodeBase64(byteArray0, true);
      base64_0.readResults(byteArray3, 103, (-3827));
      base64_0.encodeToString(byteArray2);
      base64_0.isUrlSafe();
      Base64.decodeBase64(byteArray1);
      base64_0.readResults(byteArray0, 0, 2862);
      try { 
        base64_0.decode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)0;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64((-2298), byteArray0, true);
      base64_0.readResults(byteArray0, (byte)0, (-1702));
      byte[] byteArray1 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.binary.Base64");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray1, false);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.toString(0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = base64_0.encode(byteArray0);
      Base64.encodeBase64URLSafe(byteArray2);
      base64_0.decode(byteArray1, (-721), (int) (byte)55);
      Base64.encodeBase64(byteArray2);
      Base64.isBase64("");
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)55;
      byteArray3[1] = (byte)55;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)55;
      byteArray3[5] = (byte)56;
      Base64.encodeBase64URLSafe(byteArray3);
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte) (-1);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64.isBase64("JZc<u5`;rS*+SLW)");
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      bigInteger0.isProbablePrime((-327));
      bigInteger0.doubleValue();
      Base64 base64_0 = new Base64((-222));
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      base64_0.decode((String) null);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      Base64.decodeBase64((byte[]) null);
      boolean boolean1 = base64_0.isUrlSafe();
      Base64.decodeBase64((byte[]) null);
      boolean boolean2 = Base64.isBase64("JZc<u5`;rS*+SLW)");
      assertTrue(boolean2 == boolean1);
      
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte)92;
      byteArray3[1] = (byte) (-107);
      byteArray3[2] = (byte)122;
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte)0;
      int int0 = base64_0.readResults(byteArray3, 0, (byte) (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)14;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1);
      assertEquals(16, byteArray3.length);
      
      int int0 = base64_0.avail();
      assertEquals(0, int0);
      
      BigInteger bigInteger0 = new BigInteger(byteArray2);
      byte[] byteArray4 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(16, byteArray4.length);
      assertEquals((short)15677, bigInteger0.shortValue());
      
      Object object0 = base64_0.decode((Object) "org.apache.commons.codec.DecoderException");
      Object object1 = base64_0.decode(object0);
      assertNotSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-118);
      Base64 base64_0 = new Base64((-1781), byteArray0);
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte byte0 = (byte) (-117);
      Base64.isBase64((byte) (-117));
      String string0 = "encodeInteger called with null parameter";
      Base64.isBase64("encodeInteger called with null parameter");
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.bitCount();
      bigInteger0.longValueExact();
      byte[] byteArray0 = bigInteger0.toByteArray();
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.gcd(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray1);
      try { 
        base64_0.encode((Object) ",F`z9g'<0fBah");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64((-2446));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byte[] byteArray1 = base64_0.decode("org.apache.commons.codec.EncoderException");
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-17);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      assertEquals(36, byteArray2.length);
      
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)117;
      byte[] byteArray3 = base64_0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-102)}, byteArray3);
      
      byte[] byteArray4 = Base64.discardWhitespace(byteArray1);
      assertEquals(27, byteArray4.length);
      
      byte[] byteArray5 = Base64.decodeBase64("Q.H;RlDU3<K#ue8S");
      assertArrayEquals(new byte[] {(byte)64, (byte)116, (byte)101, (byte)13, (byte)77, (byte) (-54), (byte) (-71), (byte) (-17), (byte)18}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = "org.apache.commons.codec.DecoderException";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger1);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 67;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(67, byteArray0);
      byte[] byteArray1 = new byte[5];
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      base64_0.decode(byteArray0);
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
      byteArray1[3] = (byte)83;
      byte byte0 = (byte)0;
      Base64.decodeBase64(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, (-3315), 98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      String string0 = "H,6slT+6HRp|_+\\P]OJ";
      byte[] byteArray2 = Base64.decodeBase64("H,6slT+6HRp|_+P]OJ");
      Base64.isBase64(byteArray2);
      int int0 = 0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      byte[] byteArray3 = new byte[3];
      Base64.encodeBase64(byteArray1, true, true);
      byte byte0 = (byte) (-27);
      Base64.encodeBase64(byteArray0);
      byteArray3[0] = (byte) (-27);
      String string1 = "org.apache.commons.codec.DecoderException";
      Base64.encodeBase64(byteArray0, false);
      Base64.decodeBase64("org.apache.commons.codec.DecoderException");
      int int1 = 562;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray3, 0, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      Base64 base64_0 = new Base64((-1));
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Base64.isBase64((byte)86);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)86;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)86, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [VVVVVVV]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true, true);
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray1);
      bigInteger1.mod(bigInteger0);
      Base64.isBase64("");
      byte[] byteArray3 = Base64.encodeInteger(bigInteger1);
      //  // Unstable assertion: assertEquals((short) (-26112), bigInteger1.shortValue());
      //  // Unstable assertion: assertEquals(12, byteArray3.length);
      
      String string0 = Base64.encodeBase64String(byteArray2);
      //  // Unstable assertion: assertEquals("UVVGQ2VVUkllR1ZCV205QkdnbxoK", string0);
      
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte) (-102);
      byteArray4[1] = (byte)12;
      byteArray4[2] = (byte)0;
      String string1 = Base64.encodeBase64String(byteArray4);
      //  // Unstable assertion: assertEquals("mgwA", string1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64();
      base64_0.encode((byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Base64.decodeBase64("Go0H");
      base64_0.readResults((byte[]) null, (-2360), 1689);
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64.isBase64("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)52;
      byteArray0[2] = (byte)52;
      byte byte1 = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(64, byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      int int0 = 0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [=\uFFFD\u0699\uFFFD^\uFFFD\u02E9\uFFFDX\uFFFDv\uFFFD\u0001j\u01FA\uFFFD\u05DC\uFFFD\u05E2\uFFFDz-i\uFFFD\uFFFDz\uFFFD\uFFFDJ\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Base64 base64_0 = new Base64((-3606));
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-62);
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)37;
      byte byte1 = (byte)27;
      byteArray0[4] = (byte)27;
      byte byte2 = (byte) (-34);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)61;
      byte byte3 = (byte) (-91);
      byteArray0[8] = (byte) (-91);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(4574, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\uFFFDf\uFFFD%\u001B\uFFFD\u0000=\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64(1152);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)0;
      int int0 = base64_0.readResults(byteArray0, (-3589), (-3589));
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)39;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, 929);
      assertEquals(11, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divideAndRemainder(bigInteger1);
      bigInteger0.signum();
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.encodeBase64(byteArray2, true);
      try { 
        base64_0.decode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      int int0 = 0;
      bigInteger0.isProbablePrime(0);
      bigInteger0.byteValueExact();
      Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.modInverse((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Base64 base64_0 = new Base64(508);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte) (-83);
      byteArray0[7] = (byte)71;
      Base64.encodeBase64String(byteArray0);
      base64_0.avail();
      byte[] byteArray1 = Base64.decodeBase64("");
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      Base64.decodeBase64(byteArray2);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Base64 base64_0 = new Base64(1448);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = new byte[5];
      String string0 = Base64.encodeBase64String(byteArray2);
      assertEquals("AAAAAAA=", string0);
      
      byteArray2[0] = (byte)56;
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte)45;
      byteArray2[3] = (byte)109;
      byteArray2[4] = (byte)70;
      String string1 = base64_0.encodeToString(byteArray2);
      assertEquals("OP8tbUY=\r\n", string1);
      
      boolean boolean0 = Base64.isBase64(byteArray2);
      assertFalse(boolean0);
      
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)109;
      byteArray3[2] = (byte)56;
      byteArray3[3] = (byte)70;
      byteArray3[4] = (byte)70;
      byteArray3[5] = (byte)70;
      byteArray3[6] = (byte)45;
      byte[] byteArray4 = Base64.decodeBase64(byteArray3);
      assertEquals(4, byteArray4.length);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-63), (byte)69, (byte)23}, byteArray4);
      
      base64_0.encode(byteArray1, (-625), 0);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)65, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Base64 base64_0 = new Base64(65, (byte[]) null, false);
      byte byte0 = (byte)0;
      base64_0.encode((byte[]) null);
      Base64.isBase64((byte)0);
      base64_0.decode((byte[]) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 0, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)53;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) (-115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of -115
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
