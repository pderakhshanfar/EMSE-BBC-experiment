/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:17:36 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)1;
      mockRandom0.nextBytes(byteArray0);
      BigInteger bigInteger0 = new BigInteger(8285, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      mockRandom0.nextDouble();
      Base64 base64_0 = new Base64(7);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      Base64.decodeInteger(byteArray3);
      base64_0.encode(byteArray2, 7, 7);
      // Undeclared exception!
      base64_0.decode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8285, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64(7);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.decodeInteger(byteArray2);
      // Undeclared exception!
      Base64.decodeInteger(byteArray2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (-224), (-224));
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 82, 82);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(66, byteArray0);
      Object object0 = base64_0.decode((Object) "UTF-16BE");
      // Undeclared exception!
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Base64.encodeBase64(byteArray0, false, false, (int) (byte)14);
      Random.setNextRandom(61);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.remainder(bigInteger0);
      Base64 base64_0 = new Base64(8192);
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger1);
      bigInteger1.or(bigInteger0);
      base64_0.encode(byteArray0, 8192, (-695));
      base64_0.encode(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte)3;
      byteArray1[3] = (byte)87;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)2;
      Base64.isArrayByteBase64(byteArray1);
      Random.setNextRandom((byte)11);
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      BigInteger bigInteger0 = new BigInteger(8192, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      bigInteger0.remainder(bigInteger0);
      Base64 base64_0 = new Base64(8192);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray2);
      // Undeclared exception!
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base64 base64_0 = new Base64(8);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)1;
      byte byte0 = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)125;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)1, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray1);
      base64_0.decode(byteArray2, 0, 76);
      base64_0.encode(byteArray3, 76, (int) (byte) (-88));
      int int0 = base64_0.readResults(byteArray3, 5, 24);
      assertEquals(7, int0);
      assertEquals(19, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      base64_0.readResults(byteArray0, 20, 64);
      base64_0.decode(byteArray1, 20, 20);
      byte[] byteArray3 = Base64.decodeBase64("");
      Base64.encodeBase64String(byteArray3);
      base64_0.encode(byteArray0, 4, 1156);
      int int0 = base64_0.avail();
      assertEquals(1, int0);
      
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)65;
      byte[] byteArray5 = Base64.encodeBase64URLSafe(byteArray4);
      assertArrayEquals(new byte[] {(byte)81, (byte)81}, byteArray5);
      
      Base64.decodeInteger(byteArray3);
      byte[] byteArray6 = base64_0.encode(byteArray1);
      byte[] byteArray7 = base64_0.decode(byteArray6);
      assertEquals(26, byteArray7.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      int int1 = Base64.MIME_CHUNK_SIZE;
      byte[] byteArray8 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray8.length);
      assertEquals(26, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64 base64_1 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_2 = new Base64(false);
      base64_2.decode(byteArray1, 1, 74);
      //  // Unstable assertion: assertEquals(10, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)110, (byte)72, (byte)106, (byte)102, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-6), (byte) (-87)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      BigInteger bigInteger0 = new BigInteger(byteArray3);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, 0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 58
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64 base64_1 = new Base64(12);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)4;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)118;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)118;
      byteArray1[4] = (byte)4;
      byteArray1[5] = (byte)118;
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte)4;
      byteArray1[8] = (byte)4;
      String string0 = base64_1.encodeToString(byteArray1);
      //  // Unstable assertion: assertEquals("dgT/dgR2/wQE\uFFFD\uFFFD", string0);
      
      byteArray0[4] = (byte)111;
      base64_1.encode(byteArray0, (-699), 426);
      //  // Unstable assertion: assertFalse(base64_1.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[20];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray1, 20, 20);
      try { 
        base64_0.encode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[28];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      assertFalse(boolean0);
      
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.encodeBase64(byteArray2, false, false);
      assertEquals(42, byteArray1.length);
      
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray3 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 1411);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64(20);
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-3502), (int) (byte)94);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64(40);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-26);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-26);
      byteArray1[1] = (byte) (-9);
      byteArray1[2] = (byte) (-26);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-9);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, (int) (byte)0, 2774);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = Base64.isBase64((byte)123);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-21);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)1, (int) (byte)81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(40);
      base64_0.encode(byteArray0, (-197), (-1));
      boolean boolean0 = base64_0.hasData();
      assertFalse(base64_0.isUrlSafe());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[28];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      Base64 base64_1 = new Base64(true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
      //  // Unstable assertion: assertEquals(84, byteArray3.length);
      
      Base64 base64_2 = new Base64((-27));
      base64_2.decode("");
      base64_0.avail();
      Base64 base64_3 = new Base64();
      Base64.encodeBase64String(byteArray0);
      String string0 = base64_3.encodeToString(byteArray2);
      //  // Unstable assertion: assertEquals("UVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVFOVBmcXD6qQ==", string0);
      
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)10;
      byteArray4[1] = (byte)10;
      byteArray4[2] = (byte)71;
      byteArray4[3] = (byte) (-125);
      boolean boolean1 = Base64.isBase64((byte)42);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64((byte)61);
      Random.setNextRandom(76);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = Base64.isBase64((byte)118);
      Base64 base64_0 = new Base64(10);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(16, byteArray1.length);
      
      base64_0.hasData();
      boolean boolean1 = base64_0.hasData();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Base64 base64_1 = new Base64(true);
      base64_1.decode(byteArray1, 20, 20);
      //  // Unstable assertion: assertTrue(base64_1.isUrlSafe());
      
      Base64.decodeBase64("");
      String string0 = Base64.encodeBase64String(byteArray1);
      //  // Unstable assertion: assertEquals("QUFBQUFBQUFBQUFBQUFBQUFBQUFBQT09+qk=", string0);
      //  // Unstable assertion: assertEquals(26, byteArray1.length);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)6;
      byteArray2[1] = (byte) (-114);
      byteArray2[2] = (byte)32;
      byteArray2[3] = (byte) (-27);
      byteArray2[4] = (byte)40;
      byteArray2[5] = (byte)103;
      byteArray2[6] = (byte)116;
      byteArray2[7] = (byte)43;
      byteArray2[8] = (byte)62;
      byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)6, (byte) (-114), (byte) (-27), (byte)40, (byte)103, (byte)116, (byte)43, (byte)62}, byteArray3);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2);
      //  // Unstable assertion: assertEquals(12, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      int int0 = base64_0.avail();
      assertFalse(base64_0.isUrlSafe());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)11;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)56, (byte)0, (byte)44, (byte)11}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = null;
      Base64.encodeBase64Chunked((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_1 = new Base64(true);
      Base64.decodeBase64("");
      base64_0.readResults(byteArray0, 20, 885);
      base64_1.decode(byteArray1, 20, 20);
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64.encodeBase64String(byteArray2);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 4, 1156);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_1 = new Base64((byte)15, byteArray1, true);
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      Base64.isBase64(" M)Ldb+sI.X*T");
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.encodeBase64(byteArray1, true, true, 70);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      byte[] byteArray3 = base64_0.decode("-k");
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, false, 15);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)43, (byte)103, (byte)61, (byte)61, (byte) (-63), (byte) (-87)}, byteArray4);
      
      base64_0.decode(byteArray0, (int) (byte)0, 26);
      Base64.isBase64((byte)0);
      base64_0.decode((Object) "-k");
      Base64.encodeBase64URLSafeString(byteArray1);
      //  // Unstable assertion: assertEquals(6, byteArray1.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-63), (byte) (-87)}, byteArray1);
      
      base64_0.encode(byteArray0);
      base64_0.hasData();
      base64_0.avail();
      Base64.toIntegerBytes(bigInteger0);
      base64_0.encode(byteArray2, 107, 107);
      byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
      //  // Unstable assertion: assertArrayEquals(new byte[] {}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = true;
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[16];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_2 = new Base64(true);
      base64_2.decode(byteArray1, 20, 20);
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64.encodeBase64String(byteArray2);
      int int0 = 1156;
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 4, 1156);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 3413;
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(3413, (byte[]) null, false);
      Base64.decodeBase64((byte[]) null);
      base64_0.readResults((byte[]) null, 4, 2508);
      Base64.encodeBase64((byte[]) null);
      String string0 = "";
      base64_0.decode((byte[]) null);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      base64_0.decode(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      boolean boolean0 = Base64.isBase64(byteArray1);
      Base64 base64_1 = new Base64(30, byteArray0, true);
      Base64 base64_2 = new Base64(30);
      boolean boolean1 = base64_2.isUrlSafe();
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64.decodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(579, byteArray0, false);
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      //  // Unstable assertion: assertEquals(14, byteArray3.length);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)80, (byte)99, (byte)71, (byte)112}, byteArray2);
      
      base64_0.avail();
      String string0 = base64_0.encodeToString((byte[]) null);
      //  // Unstable assertion: assertNull(string0);
      
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)5;
      byteArray4[1] = (byte)39;
      byteArray4[2] = (byte) (-121);
      byteArray4[3] = (byte)5;
      byteArray4[4] = (byte) (-95);
      byteArray4[5] = (byte) (-1);
      byteArray4[6] = (byte)0;
      byteArray4[7] = (byte)66;
      byteArray4[8] = (byte)66;
      boolean boolean0 = Base64.isBase64(byteArray4);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64 base64_0 = new Base64();
      boolean boolean0 = true;
      Base64 base64_1 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64(byteArray0, true);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_2 = new Base64(true);
      int int0 = 1156;
      // Undeclared exception!
      try { 
        base64_1.encode(byteArray0, 4, 1156);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byte byte0 = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      byte byte1 = (byte)9;
      byteArray0[2] = (byte)9;
      byte byte2 = (byte) (-24);
      byteArray0[3] = (byte) (-24);
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte) (-87), byteArray0);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.isBase64("org.apache.commons.codec.DecoderException");
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0, true, true, (-1));
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)15;
      byteArray0[1] = (byte)94;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)15;
      Base64.encodeBase64(byteArray0);
      byteArray1[1] = (byte)94;
      byteArray1[2] = (byte)94;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)15, byteArray2, false);
      base64_0.avail();
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-93);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.isBase64("iuUf|%:<%viuSY.Y");
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.encode(byteArray2);
      Base64 base64_1 = new Base64(false);
      base64_1.decode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.decodeBase64("`<Qc&h]~L[fk=");
      Base64 base64_1 = new Base64(64);
      Base64.encodeBase64(byteArray0, false);
      Object object0 = base64_0.decode((Object) "`<Qc&h]~L[fk=");
      Base64.encodeBase64URLSafeString(byteArray0);
      Object object1 = base64_0.decode(object0);
      base64_0.encode(object1);
      base64_0.avail();
      base64_1.avail();
      Object object2 = new Object();
      try { 
        base64_0.decode(object2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.isArrayByteBase64(byteArray2);
      Base64 base64_1 = new Base64(true);
      base64_1.encode(byteArray2, 64, (-2042));
      base64_0.avail();
      base64_1.encodeToString(byteArray1);
      Base64.encodeBase64String(byteArray1);
      Base64.encodeBase64(byteArray0, true, true, 76);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 103, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      base64_0.decode(byteArray0, (int) (byte)101, (-4460));
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)51;
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_1 = new Base64(false);
      Base64.encodeBase64(byteArray0);
      base64_1.avail();
      Base64.encodeBase64(byteArray0, true, true, 64);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64(byteArray0, true, true, 64);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)15;
      byteArray0[0] = (byte)15;
      byte byte1 = (byte)94;
      byteArray0[1] = (byte)94;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 2886);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[1];
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray2, 322, 0);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      int int0 = 8;
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode((String) null);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      base64_0.encode(byteArray1);
      base64_0.encode(byteArray0, 8, (-2250));
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = bigInteger0.flipBit(64);
      Base64.isBase64(byteArray2);
      bigInteger0.intValueExact();
      bigInteger0.testBit(8);
      BigInteger bigInteger2 = bigInteger0.remainder(bigInteger1);
      bigInteger2.nextProbablePrime();
      Base64.toIntegerBytes(bigInteger2);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray2, 8, 2108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64((-34));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      String string0 = ":z=WR";
      base64_0.decode(":z=WR");
      base64_0.readResults(byteArray1, 1, (byte)0);
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)0;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.isUrlSafe();
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)11;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64(true);
      Base64.decodeInteger(byteArray1);
      base64_0.avail();
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)29;
      byteArray2[1] = (byte)1;
      Base64.encodeBase64(byteArray2, true, true, (int) (byte)11);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      int int0 = 0;
      String string0 = "}:=U9Rr[yKFA/GH";
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)107;
      Base64.discardWhitespace(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      int int0 = 0;
      String string0 = "}:=U9Rr[yKFA/GH";
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 64);
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)107;
      Base64.discardWhitespace(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      Base64 base64_0 = new Base64((byte) (-103), byteArray0, true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.setBit((byte)92);
      bigInteger0.negate();
      Base64.encodeInteger(bigInteger0);
      Base64.encodeBase64(byteArray0);
      byte[] byteArray1 = base64_0.decode("ZZn3qxa,4J[8vtV*G{");
      base64_0.encode(byteArray1, (int) (byte) (-103), (int) (byte)92);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_1 = new Base64(true);
      base64_1.avail();
      Base64.encodeBase64(byteArray1, true, false, 3530);
      byte[] byteArray2 = new byte[0];
      Base64.encodeBase64(byteArray2, false, true, 8188);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[5];
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-123);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-123);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-123);
      byteArray2[5] = (byte)78;
      byteArray2[6] = (byte) (-123);
      byteArray2[7] = (byte) (-123);
      byte[] byteArray3 = base64_0.decode(byteArray2);
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte) (-123);
      byteArray1[2] = (byte) (-123);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)78;
      base64_0.encode(byteArray1);
      base64_0.encode(byteArray3);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray0, 19, (int) (byte)0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.decodeBase64("\u0000?|");
      byteArray0[0] = (byte)0;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = new Base64((-2422), byteArray0);
      Object object0 = base64_1.decode((Object) "");
      Object object1 = base64_1.decode(object0);
      base64_0.decode(object1);
      Base64.encodeBase64String(byteArray2);
      base64_1.encodeToString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("AAAA");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64();
      base64_0.decode("org.apache.commons.codec.binary.Base64");
      base64_0.readResults(byteArray1, (byte)0, (byte) (-103));
      base64_0.decode("fR`");
      Base64.encodeBase64URLSafe((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)15;
      byteArray0[1] = (byte)94;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)15;
      Base64.encodeBase64(byteArray1, true, false);
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte)94;
      byteArray1[3] = (byte)15;
      byteArray1[4] = (byte)94;
      byteArray1[5] = (byte)94;
      base64_0.decode(byteArray1);
      base64_0.decode(byteArray0, 52, 888);
      byteArray0[2] = (byte)42;
      base64_0.decode(byteArray0, (int) (byte)94, 1771);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-123);
      Base64.decodeBase64((String) null);
      byteArray0[7] = (byte)78;
      base64_0.encode(byteArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-52);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64((byte) (-103));
      Base64 base64_0 = new Base64((byte) (-103), byteArray2, false);
      base64_0.decode(byteArray1);
      Base64.decodeBase64("Xz5VpE?");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger1.subtract(bigInteger2);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64("UTF-16BE");
      base64_0.decode(byteArray1);
      Base64.isBase64("UTF-16BE");
      base64_0.readResults(byteArray2, 17, 286);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)118;
      byteArray0[0] = (byte)118;
      byte byte1 = (byte)5;
      byteArray0[1] = (byte)5;
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64((byte[]) null, false, true, 8192);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      base64_0.isUrlSafe();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Base64.isBase64((byte)9);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      Base64 base64_0 = new Base64((byte)9, byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.readResults(byteArray0, (byte)9, (byte)9);
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0);
      base64_0.hasData();
      byte[] byteArray1 = new byte[0];
      Base64.encodeBase64Chunked(byteArray1);
      base64_0.encode(byteArray1, 0, 0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeBase64("");
      base64_0.decode("CQ");
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger0);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-32);
      Base64 base64_0 = new Base64(0, byteArray0, true);
      base64_0.decode("org.apache.commons.codec.binary.Base64");
      base64_0.encode(byteArray0, 1920, 1205);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)92;
      byte byte0 = (byte) (-52);
      byteArray0[2] = (byte) (-52);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64("org.apache.commons.codec.binary.Base64");
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-52), byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [mVzM]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64 base64_0 = new Base64(1, (byte[]) null, true);
      Object object0 = new Object();
      Base64.decodeBase64("");
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)86;
      byteArray1[1] = (byte)43;
      Base64.encodeBase64Chunked(byteArray1);
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.bitLength();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.and(bigInteger1);
      bigInteger0.shiftRight((-1));
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean0 = Base64.isBase64((byte)52);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      base64_0.decode(byteArray0, 19, (int) (byte)0);
      Base64.encodeBase64URLSafeString(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64("\u0000?|");
      byteArray0[0] = (byte)0;
      Base64.encodeBase64Chunked(byteArray1);
      byteArray0[1] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64.decodeBase64("AAAAAAAAAA==");
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)9;
      Base64.encodeBase64(byteArray2, true, true);
      byteArray0[5] = (byte)0;
      byte[] byteArray3 = base64_0.decode("org.apache.commons.codec.binary.Base64");
      byteArray0[6] = (byte)63;
      base64_0.readResults(byteArray0, 1554, (byte)0);
      Base64.encodeBase64URLSafe(byteArray3);
      Base64.decodeInteger(byteArray3);
      base64_0.decode((Object) "AAAAAAAAAA==");
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)99;
      byte byte0 = (byte)33;
      byteArray0[2] = (byte)33;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(104, byteArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000c!]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.isBase64("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)0;
      Base64.encodeBase64(byteArray0, true, false, (int) (byte)53);
      base64_0.decode((String) null);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)35;
      byteArray1[5] = (byte) (-105);
      byteArray1[6] = (byte)56;
      byteArray1[7] = (byte) (-66);
      Base64.encodeBase64(byteArray1, false, true);
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.avail();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-119);
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-44);
      Base64.decodeBase64("");
      base64_0.decode("(*Fu)<C");
      byteArray1[1] = (byte) (-44);
      byte byte0 = (byte)0;
      byteArray1[2] = (byte)0;
      Base64.decodeInteger(byteArray1);
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)11;
      Base64.isBase64(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isArrayByteBase64(byteArray1);
      Base64 base64_0 = new Base64(true);
      base64_0.avail();
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)29;
      byteArray2[1] = (byte)1;
      Base64.encodeBase64(byteArray2, true, true, (int) (byte)11);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)78;
      byte byte1 = (byte) (-28);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-30);
      byte byte2 = (byte)0;
      byteArray0[5] = (byte)0;
      byte byte3 = (byte) (-85);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)60;
      byte byte4 = (byte)49;
      byteArray0[8] = (byte)49;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte) (-85), byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\uFFFDN\uFFFD\uFFFD\u0000\uFFFD<1]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      base64_0.decode(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.subtract(bigInteger0);
      Base64.toIntegerBytes(bigInteger1);
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      int int0 = (-3824);
      Base64 base64_0 = new Base64((-3824), byteArray0, false);
      Base64.encodeBase64URLSafeString(byteArray1);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)51;
      Base64.encodeBase64(byteArray0, false, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)43;
      base64_0.readResults(byteArray1, (-942), (byte)43);
      base64_0.encode(byteArray1, 0, (-942));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      base64_0.hasData();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)0;
      Base64 base64_0 = new Base64(3500, byteArray0, true);
      try { 
        base64_0.encode((Object) "org.apache.commons.codec.DecoderException");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)5;
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64((byte)0);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64(false);
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      base64_0.readResults(byteArray1, (byte)0, (byte)0);
      String string0 = "";
      Base64.isBase64("");
      Base64.encodeBase64(byteArray1);
      Base64.decodeInteger(byteArray0);
      byte[] byteArray2 = base64_0.decode(" E<qW|o}ce~e7");
      Base64.decodeBase64(byteArray2);
      base64_0.decode(byteArray0, 4625, 3709);
      Base64.encodeBase64Chunked(byteArray0);
      int int0 = (-1954);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true, true);
      Base64 base64_0 = new Base64(false);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64((-897));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte) (-88);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)72;
      byteArray1[2] = (byte) (-88);
      byteArray1[3] = (byte)110;
      byteArray1[4] = (byte)104;
      byteArray1[5] = (byte) (-111);
      byteArray1[6] = (byte) (-11);
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
      byteArray0[8] = (byte) (-1);
      base64_0.readResults(byteArray0, (-1226), (byte)0);
      Base64.isBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0);
      String string0 = null;
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      Base64.encodeBase64(byteArray0, false, false, 290);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-118);
      byte byte0 = (byte)9;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte) (-17);
      base64_0.encode(byteArray0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)52;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte2 = (byte) (-116);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)0;
      byte byte3 = (byte)90;
      byteArray0[6] = (byte)90;
      byte byte4 = (byte)0;
      byteArray0[7] = (byte)0;
      byte byte5 = (byte)36;
      byteArray0[8] = (byte)36;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(73, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [\u0000\u00014\u0000\uFFFD\u0000Z\u0000$]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Base64 base64_0 = new Base64(181);
      Base64.decodeBase64("");
      base64_0.isUrlSafe();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)1;
      byte byte0 = (byte) (-14);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)76;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 52, 1566);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Base64 base64_0 = new Base64((-1982));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(true);
      int int0 = 0;
      String string0 = "}:<U9Rr[yKFA/GH";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)107;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, true, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte byte0 = (byte)9;
      Base64.isBase64((byte)9);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)9;
      Base64 base64_0 = new Base64((-1), byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)9, (int) (byte)9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }
}
