/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 21:18:34 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger bigInteger0 = BigInteger.probablePrime(2362, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte)74;
      byteArray1[2] = (byte)69;
      byteArray1[3] = (byte)17;
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.divideAndRemainder(bigInteger1);
      byteArray1[5] = (byte)17;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false, false, 1175);
      Base64 base64_0 = new Base64(46);
      base64_0.decode(byteArray2, (int) (byte)17, (-168));
      byte[] byteArray3 = base64_0.encode(byteArray0);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, false, true, 920);
      byte[] byteArray5 = new byte[16];
      byteArray5[0] = (byte)17;
      base64_0.decode(byteArray4);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger bigInteger0 = BigInteger.probablePrime(2362, mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.longs();
      BigInteger bigInteger1 = BigInteger.probablePrime(2362, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger1);
      BigInteger bigInteger2 = BigInteger.TEN;
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(boolean0);
      int int0 = 65;
      Base64.encodeInteger(bigInteger2);
      int int1 = 581;
      base64_0.decode(byteArray0, int0, int1);
      Base64.encodeInteger(bigInteger0);
      Base64.encodeInteger(bigInteger2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger bigInteger0 = BigInteger.probablePrime(2348, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)69;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)123;
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.discardWhitespace(byteArray0);
      Base64 base64_0 = new Base64((byte)123);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)123, 393);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 392
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64.isBase64((byte)61);
      Random.setNextRandom((byte)61);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger bigInteger0 = BigInteger.probablePrime((byte)59, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)59);
      base64_0.encode(byteArray1);
      base64_0.avail();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger bigInteger0 = BigInteger.probablePrime(2362, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)69;
      byteArray1[3] = (byte)17;
      byteArray1[4] = (byte)46;
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray2 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, (int) (byte)123, (int) (byte)40);
      Base64 base64_1 = new Base64();
      base64_1.decode((Object) "Input array too big, the output array would be bigger (");
      base64_1.encode(byteArray2);
      base64_0.avail();
      Base64.toIntegerBytes(bigInteger1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, false, true, (int) (byte)69);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (408) than the specified maxium size of 69
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger bigInteger0 = BigInteger.probablePrime(2362, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)69;
      byteArray1[3] = (byte)17;
      byteArray1[4] = (byte)46;
      BigInteger bigInteger1 = BigInteger.TEN;
      Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)40);
      base64_0.encode(byteArray1);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Base64 base64_0 = new Base64((-2411));
      Base64 base64_1 = new Base64();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)115;
      // Undeclared exception!
      try { 
        base64_1.decode(byteArray0, 0, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(128, byteArray0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte) (-116);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MockRandom mockRandom0 = new MockRandom();
          mockRandom0.longs();
          BigInteger bigInteger0 = BigInteger.probablePrime(2362, mockRandom0);
          Base64.encodeInteger(bigInteger0);
          byte[] byteArray0 = new byte[7];
          byteArray0[0] = (byte)74;
          byteArray0[1] = (byte)123;
          byteArray0[2] = (byte)69;
          byteArray0[3] = (byte)17;
          byteArray0[4] = (byte)46;
          BigInteger bigInteger1 = BigInteger.TEN;
          bigInteger0.divideAndRemainder(bigInteger1);
          byteArray0[5] = (byte)0;
          byteArray0[6] = (byte) (-25);
          Base64.isBase64((byte)123);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(1945, byteArray0, false);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)63;
      byteArray1[1] = (byte) (-52);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)20;
      byteArray1[4] = (byte)43;
      byteArray1[5] = (byte)70;
      byteArray1[6] = (byte)98;
      // Undeclared exception!
      try { 
        base64_0.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-36);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-1);
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte)11;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)1;
      Base64.decodeBase64(byteArray1);
      Base64.isBase64((byte)127);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)32;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)0);
      base64_0.encode(byteArray2, 87, (-1737));
      Base64.encodeBase64String(byteArray1);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64("QUFnZw0K");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64(87);
      base64_0.encode(byteArray1, 2013265920, (int) (byte) (-20));
      Base64.encodeBase64String(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Base64.isBase64("7AA=");
      // Undeclared exception!
      try { 
        base64_0.readResults((byte[]) null, 87, (-1077));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs();
      BigInteger bigInteger0 = BigInteger.probablePrime(2362, mockRandom0);
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 2362);
      assertEquals(542, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.doubleValue();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-60);
      byteArray0[8] = (byte)12;
      Base64.encodeBase64(byteArray0, false, false, 428);
      Base64 base64_0 = new Base64(586, (byte[]) null, true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte) (-4);
      byteArray1[2] = (byte)12;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 1, 2818);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-18);
      Base64.isArrayByteBase64(byteArray0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.encodeBase64((byte[]) null, false, true);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        BigInteger.probablePrime((-82), mockRandom0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // bitLength < 2
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.TEN;
      BigInteger bigInteger3 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger0, bigInteger1);
       //  fail("Expecting exception: ArithmeticException");
       // Unstable assertion
      } catch(ArithmeticException e) {
         //
         // BigInteger not invertible.
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      //  // Unstable assertion: assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-20);
      byteArray2[1] = (byte)46;
      byteArray2[2] = (byte) (-20);
      byteArray2[3] = (byte) (-20);
      byteArray2[4] = (byte) (-20);
      byteArray2[5] = (byte) (-20);
      Base64 base64_0 = new Base64(102, byteArray2, true);
      byte[] byteArray3 = Base64.encodeBase64(byteArray0, true, true, 2765);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)55, (byte)65, (byte)65, (byte) (-20), (byte)0}, byteArray3);
      
      base64_0.decode(byteArray0, 1, 1);
      byte[] byteArray4 = base64_0.encode(byteArray2);
      //  // Unstable assertion: assertEquals(14, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64(87);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      Base64.isBase64("~:$EYxG|@hY6gIU");
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-20);
      byteArray2[1] = (byte) (-20);
      byteArray2[2] = (byte) (-20);
      byteArray2[3] = (byte) (-20);
      byteArray2[4] = (byte) (-124);
      byteArray2[5] = (byte) (-1);
      base64_0.readResults(byteArray2, (byte) (-1), 2479);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)8;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = new byte[0];
      base64_0.encode(byteArray1, 0, 0);
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = Base64.discardWhitespace(byteArray1);
      base64_0.encode(byteArray2);
      base64_0.decode(byteArray1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Base64 base64_0 = new Base64((-1148));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)0;
      base64_0.encode(byteArray0, (-2459), (int) (byte) (-87));
      base64_0.hasData();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = base64_0.decode("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      byte[] byteArray2 = base64_0.encode(byteArray1);
      Base64.encodeBase64String(byteArray2);
      Base64.encodeBase64(byteArray0, false, true, 76);
      Base64.isBase64((byte) (-12));
      Base64.isBase64((byte) (-12));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.doubleValue();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)9;
      Base64.encodeBase64(byteArray0, false);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte)9;
      byteArray1[5] = (byte)9;
      byteArray1[6] = (byte)9;
      byteArray1[7] = (byte)9;
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      Base64 base64_1 = new Base64(1330);
      base64_1.readResults(byteArray0, (-1), 30);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_2 = new Base64((byte) (-1), (byte[]) null);
      // Undeclared exception!
      try { 
        base64_2.decode((byte[]) null, (-4215), 117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64();
      Base64.isBase64("Parameter supplied to Base64 encode is not a byte[]");
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1, false);
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64(117);
      base64_0.readResults((byte[]) null, 27, 106);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.flipBit(105);
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Base64 base64_0 = new Base64((-1));
      base64_0.readResults((byte[]) null, (-1), (-1));
      base64_0.decode((byte[]) null);
      base64_0.readResults((byte[]) null, 118, (-1));
      Base64.isBase64((byte) (-19));
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 8176, 714);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-63);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-935));
      base64_0.readResults(byteArray0, 187, 102);
      Base64.encodeBase64URLSafe(byteArray0);
      base64_0.decode(byteArray1, 65, 0);
      base64_0.hasData();
      Base64.isBase64((byte) (-66));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.flipBit(95);
      bigInteger0.and(bigInteger1);
      BigInteger bigInteger2 = BigInteger.ONE;
      Base64.encodeInteger(bigInteger1);
      Base64.isBase64((byte)0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, true);
      Base64.decodeBase64((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.flipBit(105);
      Base64.isBase64("w!g[z@Lc3<P(|OiJsN");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((byte) (-78));
      Base64 base64_1 = new Base64((byte) (-78), byteArray2);
      base64_1.readResults(byteArray0, 72, (byte) (-78));
      Base64.encodeBase64URLSafe(byteArray2);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)96;
      byteArray3[2] = (byte) (-118);
      byteArray3[3] = (byte)92;
      Base64.encodeBase64(byteArray0, true, false, 42);
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)124;
      byteArray3[7] = (byte) (-118);
      byteArray3[8] = (byte)0;
      base64_1.decode(byteArray3, (-4282), (-4282));
      Base64.encodeInteger(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-8);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64(7);
      Base64.decodeInteger(byteArray3);
      base64_0.encode(byteArray0, 3, (int) (byte) (-63));
      Base64.encodeBase64String(byteArray0);
      Base64.discardWhitespace(byteArray2);
      Base64.encodeBase64Chunked(byteArray3);
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray1, (byte) (-63), (byte) (-57));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64 base64_0 = new Base64();
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.encode(byteArray3);
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.encodeBase64(byteArray2, true);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64.isBase64((byte) (-6));
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-63);
      base64_0.readResults(byteArray0, (byte) (-63), 32);
      byte[] byteArray1 = new byte[1];
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      Base64 base64_1 = new Base64();
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, true);
      base64_1.encode(byteArray2);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64(byteArray3, true);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.flipBit(105);
      Base64.isBase64("w!g[z@Lc3<P(|OiJsN");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-126);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64 base64_0 = new Base64((-2592));
      BigInteger bigInteger1 = Base64.decodeInteger(byteArray0);
      base64_0.encode(byteArray2, (int) (byte) (-126), (-1));
      Base64.encodeBase64String(byteArray0);
      Base64.discardWhitespace(byteArray2);
      Base64.toIntegerBytes(bigInteger1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64((byte)0);
      base64_0.encodeToString((byte[]) null);
      byte[] byteArray1 = null;
      base64_0.encode(byteArray0, 1551, (int) (byte)0);
      Base64.encodeBase64((byte[]) null);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64 base64_0 = new Base64(false);
      base64_0.readResults(byteArray0, (byte)104, (byte) (-1));
      base64_0.decode(byteArray0);
      base64_0.readResults(byteArray0, (-2573), (-3095));
      base64_0.encodeToString(byteArray0);
      base64_0.encode((byte[]) null, 101, 1551);
      Base64.encodeBase64(byteArray0);
      Object object0 = base64_0.decode((Object) "AAA=\r\n");
      base64_0.encode(object0);
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64.encodeBase64String((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = bigInteger0.flipBit(105);
      String string0 = "w!g[z@Lc3<P(|OiJsN";
      Base64.isBase64("w!g[z@Lc3<P(|OiJsN");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)78;
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger0.multiply(bigInteger2);
      Base64 base64_0 = new Base64();
      try { 
        base64_0.encode((Object) bigInteger1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = Base64.isBase64((byte)86);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-40);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-118);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)12;
      byteArray2[1] = (byte)12;
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      byte[] byteArray4 = Base64.decodeBase64(byteArray2);
      Base64 base64_0 = new Base64((byte) (-118));
      Base64.decodeInteger(byteArray1);
      base64_0.encode(byteArray4, 32, (-1));
      String string0 = Base64.encodeBase64String(byteArray4);
      //  // Unstable assertion: assertEquals("", string0);
      
      byte[] byteArray5 = Base64.discardWhitespace(byteArray3);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)68, (byte)65, (byte)119, (byte)61, (byte)1, (byte)0}, byteArray5);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)37;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true, (int) (byte)37);
      Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64();
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byte[] byteArray1 = base64_0.decode("");
      byteArray0[1] = (byte)74;
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray2);
      assertTrue(boolean0);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true);
      assertTrue(base64_0.isUrlSafe());
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true, false, 8);
      int int0 = 0;
      Base64 base64_0 = new Base64(0);
      Base64.decodeBase64("}<a?./UWt");
      int int1 = 108;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64URLSafeString((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.equals((Object) null);
      bigInteger0.toByteArray();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger1.andNot(bigInteger0);
      bigInteger0.subtract(bigInteger1);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      BigInteger bigInteger2 = bigInteger0.abs();
      bigInteger2.nextProbablePrime();
      bigInteger0.testBit(122);
      bigInteger1.doubleValue();
      Base64 base64_0 = new Base64((-783), byteArray1);
      byte[] byteArray2 = new byte[1];
      byte byte0 = (byte)100;
      byteArray2[0] = (byte)100;
      base64_0.encodeToString(byteArray2);
      try { 
        base64_0.encode((Object) "UTF-16BE");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null);
      base64_0.encode((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-40);
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      assertEquals(5, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)41, (byte)0, (byte) (-40)}, byteArray1);
      
      Base64 base64_0 = new Base64(true);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-40);
      byte[] byteArray3 = base64_0.decode("AAApANg=");
      assertEquals(5, byteArray3.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)41, (byte)0, (byte) (-40)}, byteArray3);
      
      boolean boolean0 = Base64.isBase64(byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray0, false, true);
      assertEquals(7, byteArray4.length);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Base64.isBase64("jg%2");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)120;
      Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.doubleValue();
      bigInteger0.nextProbablePrime();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.floatValue();
      bigInteger0.negate();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      Base64 base64_0 = new Base64(18, byteArray1, true);
      Base64 base64_1 = new Base64(479);
      base64_1.hasData();
      Base64.encodeBase64Chunked(byteArray1);
      base64_1.isUrlSafe();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray2, 18, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(10, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AAAAAAA=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-58);
      byteArray0[7] = (byte)100;
      Base64.encodeBase64String(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64 base64_0 = new Base64(false);
      base64_0.encode(byteArray0, (int) (byte) (-1), (int) (byte) (-58));
      base64_0.decode((Object) "AEf/AEOMxmQ=");
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.decodeBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray1, (int) (byte)67, 0);
      base64_0.decode("AEf/AEOMxmQ=");
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Object object0 = base64_0.decode((Object) "AEf_AEOMxmQ");
      base64_0.decode(object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      boolean boolean0 = false;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      byte[] byteArray2 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray2, true, true, (-1500));
      Base64.decodeBase64(byteArray1);
      String string0 = null;
      Base64.encodeBase64(byteArray2, false);
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64((-1505));
      byte[] byteArray2 = Base64.encodeBase64(byteArray1);
      base64_0.encode(byteArray2);
      Base64.isArrayByteBase64(byteArray2);
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-1);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true);
      Base64.decodeInteger(byteArray4);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-89);
      base64_0.decode((String) null);
      base64_0.readResults(byteArray1, 4216, (byte) (-89));
      base64_0.encode(byteArray1, 0, (-1524));
      byteArray1[1] = (byte)33;
      Base64.encodeBase64(byteArray1, false);
      try { 
        base64_0.encode((Object) "`BlmvWSr,\u0005Z!F<");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[0];
      Base64.encodeBase64(byteArray0, true);
      int int0 = 8;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 8, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(78);
      base64_0.readResults((byte[]) null, 78, (-1749));
      base64_0.readResults((byte[]) null, 78, 0);
      Base64.encodeBase64((byte[]) null, false);
      Base64.encodeBase64((byte[]) null, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)39;
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.doubleValue();
      bigInteger0.nextProbablePrime();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      bigInteger0.floatValue();
      boolean boolean0 = true;
      BigInteger bigInteger1 = bigInteger0.negate();
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.encodeBase64String(byteArray1);
      bigInteger1.longValueExact();
      bigInteger0.bitCount();
      bigInteger0.compareTo(bigInteger1);
      Base64 base64_0 = new Base64(0, byteArray1, true);
      bigInteger0.nextProbablePrime();
      BigInteger.valueOf(0);
      Base64.encodeBase64URLSafeString(byteArray0);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, 0, 932);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-59);
      Base64.decodeInteger(byteArray0);
      base64_0.decode((Object) "?k\t3:!D:!:qDt,_");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte) (-1);
      Base64.encodeBase64Chunked(byteArray1);
      byteArray1[2] = (byte)0;
      Base64.decodeBase64("encodeInteger called with null parameter");
      byteArray1[3] = (byte) (-76);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-48);
      byteArray1[6] = (byte) (-75);
      byteArray1[7] = (byte)0;
      try { 
        base64_0.encode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)1;
      Base64 base64_0 = new Base64((-121), byteArray0);
      byte[] byteArray1 = base64_0.encode(byteArray0);
      base64_0.encode(byteArray1);
      Base64.encodeBase64String(byteArray0);
      base64_0.hasData();
      Base64.encodeBase64(byteArray0, false);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)50;
      Base64.encodeBase64(byteArray1);
      base64_0.decode(byteArray1, 43, (-1));
      base64_0.decode(byteArray1, (-3731), 0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[7];
      Base64.encodeBase64URLSafe(byteArray0);
      byte byte0 = (byte)104;
      byteArray0[0] = (byte)104;
      base64_0.readResults(byteArray0, (byte) (-1), (byte) (-1));
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)127;
      byte byte1 = (byte) (-78);
      byte[] byteArray1 = base64_0.decode(byteArray0);
      base64_0.readResults(byteArray1, (byte)127, 4178);
      base64_0.encodeToString(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, 0, 81);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)112;
      base64_0.encode(byteArray0, 1, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Base64.toIntegerBytes(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      Base64 base64_0 = new Base64(45, byteArray0, true);
      base64_0.encode(byteArray0, 0, 0);
      try { 
        base64_0.encode((Object) "\"$Gq");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)115;
      Base64.discardWhitespace(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)12;
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray1);
      Base64 base64_0 = new Base64((byte)115);
      base64_0.readResults(byteArray3, (byte)12, (byte)12);
      base64_0.isUrlSafe();
      Base64.isArrayByteBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-118);
      base64_0.encode(byteArray0, (int) (byte) (-80), (int) (byte) (-118));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-85);
      byte byte0 = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-69);
      byte byte1 = (byte)0;
      byteArray0[6] = (byte)0;
      Base64.discardWhitespace(byteArray0);
      Base64.decodeBase64(byteArray0);
      boolean boolean0 = false;
      Base64 base64_0 = new Base64(false);
      base64_0.decode(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.and(bigInteger0);
      bigInteger1.andNot(bigInteger0);
      bigInteger1.pow(1);
      bigInteger0.or(bigInteger1);
      bigInteger0.toString();
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(1075, byteArray1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [QVE9PQ\uFFFD\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-1);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(false);
      Base64 base64_1 = new Base64(false);
      try { 
        base64_0.encode((Object) base64_1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)0;
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      Base64.encodeBase64(byteArray0, false);
      Base64.encodeBase64String(byteArray3);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)0, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [AA]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)78;
      base64_0.encode(byteArray0, 0, (int) (byte)3);
      byte[] byteArray1 = base64_0.decode("T{j\"Y*elo Eg");
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)78, (byte)54, (byte)30, (byte) (-106), (byte) (-127), (byte)32}, byteArray1);
      
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-48);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
      Base64.isArrayByteBase64(byteArray1);
      Base64.isBase64(byteArray1);
      Base64 base64_0 = new Base64((-1505));
      Object object0 = null;
      Base64.encodeBase64(byteArray1, true);
      Base64.decodeBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, true, true, (-719));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -719
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Object object0 = new Object();
      Base64.decodeBase64("CP]j_}*$0");
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("_yMBlkEAAA0A", string0);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertTrue(boolean0);
      
      byte[] byteArray1 = base64_0.decode("");
      base64_0.decode((Object) "");
      base64_0.encode(byteArray1, (-1), (-1));
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)94;
      byteArray0[8] = (byte)114;
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte) (-33);
      byteArray1[2] = (byte)118;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-34);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray1, false, true, (int) (byte) (-34));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (10) than the specified maxium size of -34
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte byte0 = (byte)0;
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base64_0.encodeToString(byteArray0);
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      boolean boolean0 = Base64.isBase64("");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-37);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("AAABAABoMds=", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Base64 base64_0 = new Base64(1568);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)78;
      byteArray0[0] = (byte)78;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte)78;
      Base64.encodeBase64Chunked(byteArray0);
      byteArray1[2] = (byte)78;
      Base64.encodeBase64(byteArray1);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      Base64 base64_0 = new Base64((-702), byteArray0, true);
      assertTrue(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-23);
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)8;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      assertEquals(12, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte byte0 = (byte)17;
      Base64.isBase64((byte)17);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      //  // Unstable assertion: assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)61;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      //  // Unstable assertion: assertEquals(8, byteArray1.length);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-1);
      byte[] byteArray3 = base64_0.encode(byteArray2);
      boolean boolean0 = Base64.isArrayByteBase64(byteArray3);
      //  // Unstable assertion: assertFalse(boolean0);
      
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true);
      //  // Unstable assertion: assertArrayEquals(new byte[] {(byte)47, (byte)119, (byte)61, (byte)61, (byte) (-52), (byte) (-1)}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-1);
      Base64 base64_0 = new Base64(853, byteArray0, false);
      int int0 = 0;
      base64_0.readResults(byteArray0, 0, 853);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (-3740));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of -3740
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (14) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.encodeBase64((byte[]) null, true, false, 8);
      Base64 base64_0 = new Base64(0);
      base64_0.hasData();
      try { 
        base64_0.encode((Object) "cjg");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-63);
      String string0 = Base64.encodeBase64String(byteArray0);
      assertEquals("ZAGGT+gAwQ==", string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = "jg%2";
      Base64.isBase64("jg%2");
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      assertEquals(12, byteArray1.length);
  }
}
