* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.codec.binary.Base64
* Starting Client-0
* Connecting to master process on port 14148
* Analyzing classpath: 
  - subjects/buggy-versions/Codec-9/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.codec.binary.Base64
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1539
* Using seed 37142603
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 419 / 1539
Number of times BBC is called for org.apache.commons.codec.binary.Base64.isWhiteSpace(B)Z: I3 Branch 75 LOOKUPSWITCH L897 Case 32 - true: 60
Number of times BBC is called for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: I24 Branch 67 LOOKUPSWITCH L874 Case 9 - true: 112
Number of times BBC is called for org.apache.commons.codec.binary.Base64.encode([BII)V: I30 Branch 16 IF_ICMPGE L445 - false: 2033
Number of times BBC is called for org.apache.commons.codec.binary.Base64.decode([BII)V: I180 Branch 44 IFNULL L562 - true: 6455
Number of times BBC is called for org.apache.commons.codec.binary.Base64.resizeBuffer()V: I4 Branch 9 IFNONNULL L383 - true: 6660
Number of times BBC is called for org.apache.commons.codec.binary.Base64.encode([BII)V: I224 Branch 24 IF_ICMPEQ L472 - true: 245
Number of times BBC is called for org.apache.commons.codec.binary.Base64.decode([BII)V: I38 Branch 36 IF_ICMPGE L534 - false: 2147
Number of times BBC is called for org.apache.commons.codec.binary.Base64.readResults([BII)I: I36 Branch 11 IF_ICMPLT L411 - true: 19187
Number of times BBC is called for org.apache.commons.codec.binary.Base64.getEncodeLength([BI[B)J: I73 Branch 83 IFNE L981 - true: 1625
Number of times BBC is called for org.apache.commons.codec.binary.Base64.encode([BII)V: I215 Branch 23 IFLE L472 - true: 6
Number of times BBC is called for org.apache.commons.codec.binary.Base64.decode([BII)V: I189 Branch 45 IF_ICMPGE L562 - false: 2293
Number of times BBC is called for org.apache.commons.codec.binary.Base64.hasData()Z: I4 Branch 7 IFNULL L369 - false: 261
Number of times BBC is called for org.apache.commons.codec.binary.Base64.decode(Ljava/lang/Object;)Ljava/lang/Object;: I4 Branch 58 IFEQ L733 - false: 24
Number of times BBC is called for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: Line 872: 147
Number of times BBC is called for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: Line 873: 147
Number of times BBC is called for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: Line 884: 147
Number of times BBC is called for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: I24 Branch 70 LOOKUPSWITCH L874 Case 32 - true: 137
Number of times BBC is called for org.apache.commons.codec.binary.Base64.isWhiteSpace(B)Z: I3 Branch 72 LOOKUPSWITCH L897 Case 9 - true: 839
Number of times BBC is called for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: Line 885: 147
Number of times BBC is called for org.apache.commons.codec.binary.Base64.getEncodeLength([BI[B)J: I50 Branch 82 IFNE L979 - false: 757
Number of times BBC is called for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: Line 886: 147
Number of times BBC is called for org.apache.commons.codec.binary.Base64.toIntegerBytes(Ljava/math/BigInteger;)[B: I56 Branch 87 IFNE L1039 - true: 3895
Number of times BBC is called for org.apache.commons.codec.binary.Base64.encode([BII)V: I272 Branch 27 IF_ICMPGE L478 - false: 401
Number of times BBC is called for org.apache.commons.codec.binary.Base64.encode([B)[B: I10 Branch 79 IFNE L948 - false: 13
Number of times BBC is called for org.apache.commons.codec.binary.Base64.isBase64(B)Z: I10 Branch 51 IF_ICMPGE L593 - true: 40
Number of times BBC is called for org.apache.commons.codec.binary.Base64.isUrlSafe()Z: I5 Branch 6 IF_ACMPNE L360 - false: 38
Number of times BBC is called for org.apache.commons.codec.binary.Base64.getEncodeLength([BI[B)J: I41 Branch 81 IFLE L978 - true: 16400
Number of times BBC is called for org.apache.commons.codec.binary.Base64.encode([BII)V: I419 Branch 31 IF_ICMPGT L493 - false: 35
Number of times BBC is called for org.apache.commons.codec.binary.Base64.toIntegerBytes(Ljava/math/BigInteger;)[B: I36 Branch 86 IF_ICMPNE L1031 - true: 12082
Number of times BBC is called for org.apache.commons.codec.binary.Base64.encode(Ljava/lang/Object;)Ljava/lang/Object;: I4 Branch 77 IFNE L921 - true: 127
Number of times BBC is called for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: I18 Branch 66 IF_ICMPGE L873 - false: 147
Number of times BBC is called for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: Line 871: 147
Number of times BBC is called for org.apache.commons.codec.binary.Base64.discardWhitespace([B)[B: I18 Branch 66 IF_ICMPGE L873 - true: 147
Number of times BBC is called in total: 77048
* Search finished after 604s and 326 generations, 169394 statements, best individual has fitness: 89.0
* Minimizing test suite
[MASTER] 21:15:37.987 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 216
* Number of covered goals: 215
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 96%
* Total number of goals: 193
* Number of covered goals: 185
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 787
* Number of covered goals: 759
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 91%
* Total number of goals: 80
* Number of covered goals: 73
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 35
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 193
* Number of covered goals: 172
* Generated 99 tests with total length 1580
* Resulting test suite's coverage: 90% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:16:39.821 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 41%
* Compiling and checking tests
[MASTER] 21:17:05.246 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ArithmeticException: BigInteger not invertible.
[MASTER] 21:17:05.247 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[6];
byteArray0[0] = (byte)0;
byteArray0[1] = (byte)0;
byte byte0 = (byte)0;
byteArray0[2] = (byte)0;
byteArray0[3] = (byte)85;
byteArray0[4] = (byte)0;
byte byte1 = (byte)111;
byteArray0[5] = (byte)111;
boolean boolean0 = true;
byte[] byteArray1 = Base64.encodeBase64(byteArray0, true);
Base64 base64_0 = new Base64();
Base64.isBase64("TlHrcO@8 +~");
String string0 = base64_0.encodeToString(byteArray1);
byte[] byteArray2 = Base64.encodeBase64(byteArray0);
int int0 = 0;
BigInteger bigInteger0 = new BigInteger(byteArray2);
BigInteger bigInteger1 = new BigInteger(byteArray1);
bigInteger1.modInverse(bigInteger0);
bigInteger0.divideAndRemainder(bigInteger1);
Base64.toIntegerBytes(bigInteger0);
int int1 = 0;
base64_0.encode(byteArray2, int1, (int) byte0);
int int2 = 550;
base64_0.decode(byteArray2, int0, int2);
Base64.decodeInteger(byteArray1);
base64_0.encode((Object) string0);

[MASTER] 21:17:16.465 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [5]; expected:<99> but was:<81>
[MASTER] 21:17:16.465 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();
byte[] byteArray0 = new byte[2];
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
byte[] byteArray2 = Base64.encodeBase64(byteArray1);
Base64.decodeBase64((byte[]) null);
Base64 base64_1 = new Base64(579, byteArray0, false);
byte[] byteArray3 = Base64.encodeBase64Chunked(byteArray2);
assertEquals(14, byteArray3.length);
assertArrayEquals(new byte[] {(byte)81, (byte)85, (byte)70, (byte)66, (byte)80, (byte)99, (byte)71, (byte)112}, byteArray2);

base64_0.avail();
String string0 = base64_0.encodeToString((byte[]) null);
assertNull(string0);

byte[] byteArray4 = new byte[9];
byteArray4[0] = (byte)5;
byteArray4[1] = (byte)39;
byteArray4[2] = (byte) (-121);
byteArray4[3] = (byte)5;
byteArray4[4] = (byte) (-95);
byteArray4[5] = (byte) (-1);
byteArray4[6] = (byte)0;
byteArray4[7] = (byte)66;
byteArray4[8] = (byte)66;
boolean boolean0 = Base64.isBase64(byteArray4);
assertFalse(boolean0);


[MASTER] 21:17:16.524 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 21:17:16.524 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();
byte[] byteArray0 = new byte[2];
base64_0.decode(byteArray0);
byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
boolean boolean0 = Base64.isBase64(byteArray1);
Base64 base64_1 = new Base64(30, byteArray0, true);
Base64 base64_2 = new Base64(30);
boolean boolean1 = base64_2.isUrlSafe();
assertTrue(boolean1 == boolean0);


[MASTER] 21:17:16.953 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [4]; expected:<-63> but was:<13>
[MASTER] 21:17:16.954 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[1];
byteArray0[0] = (byte)0;
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
Base64 base64_0 = new Base64(true);
Base64.isBase64(" M)Ldb+sI.X*T");
BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
Base64.encodeBase64(byteArray1, true, true, 70);
byte[] byteArray2 = Base64.encodeBase64(byteArray0);
byte[] byteArray3 = base64_0.decode("-k");
byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, false, 15);
assertArrayEquals(new byte[] {(byte)43, (byte)103, (byte)61, (byte)61, (byte) (-63), (byte) (-87)}, byteArray4);

base64_0.decode(byteArray0, (int) (byte)0, 26);
Base64.isBase64((byte)0);
base64_0.decode((Object) "-k");
Base64.encodeBase64URLSafeString(byteArray1);
assertEquals(6, byteArray1.length);
assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61, (byte) (-63), (byte) (-87)}, byteArray1);

base64_0.encode(byteArray0);
base64_0.hasData();
base64_0.avail();
Base64.toIntegerBytes(bigInteger0);
base64_0.encode(byteArray2, 107, 107);
byte[] byteArray5 = Base64.toIntegerBytes(bigInteger0);
assertArrayEquals(new byte[] {}, byteArray5);


[MASTER] 21:17:17.431 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...QUFBQUFBQUFBQUFBQT09[+qk]=> but was:<...QUFBQUFBQUFBQUFBQT09[DQo]=>
[MASTER] 21:17:17.432 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);
byte[] byteArray0 = new byte[16];
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
assertFalse(boolean0);

Base64 base64_1 = new Base64(true);
base64_1.decode(byteArray1, 20, 20);
assertTrue(base64_1.isUrlSafe());

Base64.decodeBase64("");
String string0 = Base64.encodeBase64String(byteArray1);
assertEquals("QUFBQUFBQUFBQUFBQUFBQUFBQUFBQT09+qk=", string0);
assertEquals(26, byteArray1.length);

byte[] byteArray2 = new byte[9];
byteArray2[0] = (byte)6;
byteArray2[1] = (byte) (-114);
byteArray2[2] = (byte)32;
byteArray2[3] = (byte) (-27);
byteArray2[4] = (byte)40;
byteArray2[5] = (byte)103;
byteArray2[6] = (byte)116;
byteArray2[7] = (byte)43;
byteArray2[8] = (byte)62;
byte[] byteArray3 = Base64.discardWhitespace(byteArray2);
assertArrayEquals(new byte[] {(byte)6, (byte) (-114), (byte) (-27), (byte)40, (byte)103, (byte)116, (byte)43, (byte)62}, byteArray3);

byte[] byteArray4 = Base64.encodeBase64(byteArray2);
assertEquals(12, byteArray4.length);


[MASTER] 21:17:18.007 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...GQlFVRkJRVUZCUVVFOVB[mcXD6qQ]==> but was:<...GQlFVRkJRVUZCUVVFOVB[RMEsNCg]==>
[MASTER] 21:17:18.007 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);
byte[] byteArray0 = new byte[28];
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
Base64 base64_1 = new Base64(true);
byte[] byteArray2 = Base64.encodeBase64(byteArray1, true);
byte[] byteArray3 = Base64.encodeBase64(byteArray2, true, false);
assertEquals(84, byteArray3.length);

Base64 base64_2 = new Base64((-27));
base64_2.decode("");
base64_0.avail();
Base64 base64_3 = new Base64();
Base64.encodeBase64String(byteArray0);
String string0 = base64_3.encodeToString(byteArray2);
assertEquals("UVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVGQlFVRkJRVUZCUVVFOVBmcXD6qQ==", string0);

byte[] byteArray4 = new byte[5];
byteArray4[0] = (byte)10;
byteArray4[1] = (byte)10;
byteArray4[2] = (byte)71;
byteArray4[3] = (byte) (-125);
boolean boolean1 = Base64.isBase64((byte)42);
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);


[MASTER] 21:17:19.007 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<dgT/dgR2/wQE[??]> but was:<dgT/dgR2/wQE[
]>
[MASTER] 21:17:19.008 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64(true);
Base64 base64_1 = new Base64(12);
byte[] byteArray0 = new byte[5];
byteArray0[0] = (byte)118;
byteArray0[1] = (byte) (-31);
byteArray0[2] = (byte) (-1);
byteArray0[3] = (byte)4;
byte[] byteArray1 = new byte[9];
byteArray1[0] = (byte)118;
byteArray1[1] = (byte)4;
byteArray1[2] = (byte) (-1);
byteArray1[3] = (byte)118;
byteArray1[4] = (byte)4;
byteArray1[5] = (byte)118;
byteArray1[6] = (byte) (-1);
byteArray1[7] = (byte)4;
byteArray1[8] = (byte)4;
String string0 = base64_1.encodeToString(byteArray1);
assertEquals("dgT/dgR2/wQE\uFFFD\uFFFD", string0);

byteArray0[4] = (byte)111;
base64_1.encode(byteArray0, (-699), 426);
assertFalse(base64_1.isUrlSafe());


[MASTER] 21:17:19.264 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.internal.ArrayComparisonFailure: arrays first differed at element [8]; expected:<-6> but was:<13>
[MASTER] 21:17:19.264 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Base64 base64_0 = new Base64();
Base64 base64_1 = new Base64(false);
byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte) (-100);
byteArray0[1] = (byte)120;
byteArray0[2] = (byte) (-33);
byteArray0[3] = (byte)0;
byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
Base64 base64_2 = new Base64(false);
base64_2.decode(byteArray1, 1, 74);
assertEquals(10, byteArray1.length);
assertArrayEquals(new byte[] {(byte)110, (byte)72, (byte)106, (byte)102, (byte)65, (byte)65, (byte)61, (byte)61, (byte) (-6), (byte) (-87)}, byteArray1);


[MASTER] 21:17:25.944 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.runners.model.TestTimedOutException: test timed out after 4000 milliseconds
[MASTER] 21:17:25.944 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 8192;
int int1 = 1908874353;
MockRandom mockRandom0 = new MockRandom();
BigInteger bigInteger0 = new BigInteger(1908874353, mockRandom0);
Base64.encodeInteger(bigInteger0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing tests to file
* Writing JUnit test case 'Base64_ESTest' to results/Codec-9/org.apache.commons.codec.binary.Base64/BBC-F0-50/tests/15
* Done!

* Computation finished
