/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 01:02:00 GMT 2021
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.readResults(byteArray0, 1, 103);
      base64_0.decode(byteArray1, 1, 2013);
      Base64.encodeBase64URLSafe(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
      Base64.isBase64((byte)1);
      base64_0.readResults(byteArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MockRandom mockRandom0 = new MockRandom(888L);
      BigInteger bigInteger0 = BigInteger.probablePrime(326, mockRandom0);
      byte[] byteArray1 = Base64.encodeInteger(bigInteger0);
      byte[] byteArray2 = Base64.CHUNK_SEPARATOR;
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((-893));
      Base64.encodeBase64URLSafe(byteArray1);
      byte[] byteArray3 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte) (-18));
      Base64 base64_1 = new Base64(26);
      Base64 base64_2 = new Base64();
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray3, 2321, 326);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2321
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2900);
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)127;
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, (int) (byte)0, (int) (byte)127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      base64_0.hasData();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)49;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)1);
      Base64 base64_1 = new Base64(64);
      base64_0.decode(byteArray0, (int) (byte)1, 4);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray1, 1272, (-1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 1, 2013);
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)49;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)1);
      Base64 base64_1 = new Base64(64);
      base64_0.decode(byteArray0, (int) (byte)1, 4);
      Base64.encodeBase64URLSafe(byteArray1);
      base64_0.encode(byteArray1, 1272, (-1));
      base64_0.avail();
      Base64.encodeBase64(byteArray0, false, false, 3044);
      byte[] byteArray2 = new byte[0];
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(byteArray2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)112;
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(true);
      base64_0.decode(byteArray1, 1, 2013);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-80);
      byteArray2[1] = (byte)17;
      byteArray2[2] = (byte)117;
      byteArray2[3] = (byte)36;
      byteArray2[4] = (byte) (-22);
      byteArray2[5] = (byte)0;
      Base64.encodeBase64URLSafe(byteArray2);
      Base64.decodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)1;
      Base64.isBase64(byteArray0);
      Base64.isBase64(byteArray0);
      MockRandom mockRandom0 = new MockRandom(1L);
      BigInteger bigInteger0 = new BigInteger(1073741824, mockRandom0);
      // Undeclared exception!
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.hasData();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)49;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      boolean boolean0 = Base64.isBase64((byte)118);
      assertTrue(boolean0);
      
      Base64 base64_1 = new Base64(64);
      base64_0.decode(byteArray0, (int) (byte)1, 4);
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(16, byteArray2.length);
      
      byte[] byteArray3 = new byte[0];
      base64_0.encode(byteArray3, 1247, (-1));
      byte[] byteArray4 = Base64.decodeBase64(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      boolean boolean0 = base64_0.hasData();
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)49;
      byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
      Base64.isBase64((byte)118);
      Base64 base64_1 = new Base64(64);
      base64_0.decode(byteArray0, (int) (byte)1, 4);
      assertTrue(base64_0.isUrlSafe());
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray1);
      assertEquals(16, byteArray2.length);
      
      byte[] byteArray3 = new byte[0];
      base64_0.encode(byteArray3, 1272, (-1));
      byte[] byteArray4 = Base64.decodeBase64(byteArray1);
      assertEquals(0, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64(3201);
      int int0 = base64_0.readResults(byteArray0, 0, 0);
      assertEquals(0, int0);
      
      base64_0.decode(byteArray1, 50, 32);
      assertEquals(54, byteArray1.length);
      
      byte[] byteArray2 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      assertEquals(50, byteArray2.length);
      assertEquals(37, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byte byte0 = (byte) (-4);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)10;
      Base64.encodeBase64(byteArray0, false, true, (int) (byte)10);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (-797), 871);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = Base64.isBase64("Input array too big, the output array would be bigger (");
      boolean boolean1 = Base64.isBase64((byte)61);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Base64 base64_0 = new Base64();
      String string0 = base64_0.encodeToString((byte[]) null);
      assertNull(string0);
      
      String string1 = Base64.encodeBase64URLSafeString((byte[]) null);
      assertNull(string1);
      
      base64_0.encode((byte[]) null, (-789), (-789));
      boolean boolean0 = base64_0.hasData();
      assertTrue(boolean0);
      assertFalse(base64_0.isUrlSafe());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeBase64("s B");
      Base64 base64_0 = new Base64(1552, byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)20;
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte)109;
      byteArray2[3] = (byte)10;
      byteArray2[4] = (byte) (-4);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Base64 base64_0 = new Base64(961);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-9);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray1, 1, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AA", string0);
      
      byte[] byteArray1 = Base64.decodeBase64("AA");
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(1, byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)118;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)34;
      byteArray2[4] = (byte)0;
      boolean boolean0 = Base64.isBase64("v{,,:(jM#rXX\",1");
      assertFalse(boolean0);
      
      base64_0.decode((Object) "v{,,:(jM#rXX\",1");
      byte[] byteArray3 = base64_0.encode(byteArray2);
      assertEquals(8, byteArray3.length);
      
      byte[] byteArray4 = base64_0.decode("AA");
      assertArrayEquals(new byte[] {(byte)0}, byteArray4);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)1;
      Base64 base64_0 = new Base64(5, byteArray0, false);
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      assertEquals(8, byteArray1.length);
      
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      assertEquals((short)0, bigInteger0.shortValue());
      
      byte[] byteArray2 = base64_0.encode(byteArray0);
      base64_0.decode(byteArray2, (int) (byte) (-1), 47);
      base64_0.encode(byteArray2, (-1), (-1812));
      assertEquals(20, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-65);
      Base64.discardWhitespace(byteArray0);
      Base64.discardWhitespace(byteArray0);
      Random.setNextRandom((byte) (-104));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64 base64_0 = new Base64();
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64 base64_1 = new Base64((-4852));
      Base64.isBase64("oCkKX>u/~U'2n,k9");
      Base64.isArrayByteBase64(byteArray1);
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray2, true, false, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (104) than the specified maxium size of -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Base64.isBase64((byte)70);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.decodeBase64(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.isBase64((byte)126);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.longValue();
      Base64.toIntegerBytes(bigInteger0);
      Base64.decodeBase64("AA");
      byte[] byteArray1 = Base64.decodeBase64(")II93coZ`@;");
      Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.discardWhitespace(byteArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.encode(byteArray1, (-789), (-791));
      // Undeclared exception!
      try { 
        base64_0.readResults(byteArray0, 3681, 3681);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64((-1015), byteArray0, true);
      Base64 base64_1 = new Base64(64);
      Object object0 = base64_1.decode((Object) "#;1Rho+;5h::hhUoEp");
      Object object1 = base64_0.decode(object0);
      // Undeclared exception!
      try { 
        base64_0.encode(object1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte)32;
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray0);
      BigInteger bigInteger1 = BigInteger.valueOf(1054L);
      bigInteger0.add(bigInteger1);
      bigInteger0.pow((byte)28);
      Base64.toIntegerBytes(bigInteger0);
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64(35);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)78, (int) (byte)32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 78
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = Base64.CHUNK_SEPARATOR;
      Base64.discardWhitespace(byteArray1);
      boolean boolean0 = false;
      Base64 base64_1 = new Base64(false);
      try { 
        base64_0.encode((Object) "2$#Z~g");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64 base64_0 = new Base64((-430), (byte[]) null, false);
      Object object0 = base64_0.decode((Object) "oDcTSo<W$0Y");
      base64_0.decode(object0);
      try { 
        base64_0.encode((Object) "oDcTSo<W$0Y");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Base64 base64_0 = new Base64(624, byteArray0, true);
      Base64.decodeBase64("U()NUvtMd");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)0;
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, 624);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = null;
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        Base64.isBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = null;
      byte byte0 = (byte)98;
      Base64.isBase64((byte)98);
      Base64 base64_0 = new Base64((byte)98, (byte[]) null);
      Base64.decodeBase64("");
      // Undeclared exception!
      try { 
        base64_0.encode((byte[]) null, 720, (int) (byte)98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      base64_0.decode((byte[]) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.add(bigInteger1);
      Base64.encodeInteger(bigInteger0);
      base64_0.encode((byte[]) null);
      try { 
        base64_0.encode((Object) "-ADMFNa'@7tJ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte byte0 = (byte)0;
      base64_0.decode((byte[]) null);
      base64_0.decode((String) null);
      Base64.decodeBase64((byte[]) null);
      base64_0.decode((byte[]) null, 20, (int) (byte)0);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = false;
      Base64.encodeBase64(byteArray0, false, false);
      base64_0.decode("encodeInteger called with null parameter");
      base64_0.readResults((byte[]) null, (-2865), 75);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.decodeBase64("");
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray2 = Base64.decodeBase64("");
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64.encodeBase64(byteArray2, true, true);
      Base64.encodeBase64(byteArray2);
      Base64.discardWhitespace(byteArray1);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-44);
      byteArray3[1] = (byte) (-16);
      byteArray3[2] = (byte) (-94);
      byteArray3[3] = (byte) (-82);
      byteArray3[4] = (byte)25;
      byteArray3[5] = (byte)100;
      byteArray3[6] = (byte) (-82);
      Base64.encodeBase64(byteArray3, false, true, 49);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      byte[] byteArray0 = Base64.decodeBase64("oDcTSo<W$0Y");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray0, true, true);
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.discardWhitespace((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64Chunked((byte[]) null);
      Base64.decodeBase64((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64 base64_0 = new Base64(961, (byte[]) null);
      Base64.encodeBase64((byte[]) null, false, false, (-3330));
      Base64.encodeBase64((byte[]) null, true, false, 999);
      Base64 base64_1 = new Base64(1329);
      // Undeclared exception!
      try { 
        base64_1.decode((byte[]) null, (-2070), 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Base64 base64_0 = new Base64(961);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)87;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-9);
      Base64.encodeBase64URLSafeString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)87;
      Base64.encodeBase64(byteArray1, true, true, 58);
      Base64.encodeBase64(byteArray0, true, true, 8162);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 0, 8162);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64();
      Base64.encodeBase64(byteArray0, false);
      Object object0 = base64_0.decode((Object) "ETjjxZ8");
      base64_0.encode(object0);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.equals("");
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.isBase64((byte) (-86));
      Base64 base64_1 = new Base64((byte) (-106), byteArray0);
      base64_1.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-106);
      byteArray1[1] = (byte)81;
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte)72;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-86);
      byteArray1[6] = (byte)54;
      byteArray1[7] = (byte)0;
      // Undeclared exception!
      try { 
        base64_1.encodeToString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      Base64.isBase64((byte)0);
      Base64 base64_0 = new Base64((-3344), (byte[]) null);
      base64_0.encodeToString((byte[]) null);
      Base64.encodeBase64String((byte[]) null);
      base64_0.decode((byte[]) null, (int) (byte) (-1), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Base64 base64_0 = new Base64(false);
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)18;
      byteArray1[2] = (byte) (-4);
      byteArray1[3] = (byte)108;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)127;
      Base64.decodeInteger(byteArray1);
      byteArray0[0] = (byte) (-30);
      base64_0.readResults(byteArray0, (byte) (-30), (byte) (-30));
      Base64.encodeBase64((byte[]) null, true, false, 0);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byte byte0 = (byte)15;
      try { 
        base64_0.decode((Object) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      base64_0.decode("LGZ$zKCu9RKU");
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      Base64.encodeBase64(byteArray2, false, true);
      byte[] byteArray3 = base64_0.decode("LGZ$zKCu9RKU");
      base64_0.readResults(byteArray3, (-952), (-952));
      base64_0.isUrlSafe();
      Base64.isArrayByteBase64(byteArray3);
      base64_0.encode(byteArray0);
      Base64 base64_1 = new Base64();
      base64_1.decode("XoCm42,|Bgpcr^\"");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.getLowestSetBit();
      bigInteger0.andNot(bigInteger1);
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64("WiCSGb/a2 A");
      base64_0.hasData();
      Base64.isBase64(byteArray1);
      byte[] byteArray2 = base64_0.decode("");
      byte[] byteArray3 = Base64.decodeBase64("WiCSGb/a2 A");
      Base64.encodeBase64URLSafeString(byteArray2);
      Base64.encodeBase64(byteArray1, true, true);
      byte[] byteArray4 = Base64.encodeBase64(byteArray3);
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)0;
      Base64.discardWhitespace(byteArray5);
      Base64.discardWhitespace(byteArray4);
      Base64.encodeBase64(byteArray4, false, false, 64);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      base64_0.decode(byteArray0);
      byte[] byteArray1 = base64_0.decode("tL_KU5?B#");
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      base64_0.decode(byteArray3, 61, (int) (byte)0);
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)0;
      byte[] byteArray4 = Base64.encodeBase64(byteArray3, true, true);
      base64_0.decode("tL_KU5?B#");
      base64_0.readResults(byteArray3, 6, 0);
      base64_0.isUrlSafe();
      Base64.isArrayByteBase64(byteArray4);
      base64_0.encode(byteArray2);
      base64_0.decode("LC(lQK");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      base64_0.encode(byteArray0);
      Base64.decodeBase64("U()NUvtMd");
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Base64.decodeBase64(byteArray0);
      Base64.decodeBase64("T+ebM|/++L");
      Base64.isBase64("");
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      // Undeclared exception!
      try { 
        Base64.isArrayByteBase64((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-69);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, true, true, 24);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      bigInteger0.bitLength();
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [LwDNu7s\uFFFD\uFFFD]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Base64.decodeBase64((byte[]) null);
      byte[] byteArray0 = Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.isBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      Base64.encodeBase64((byte[]) null);
      Base64.encodeBase64((byte[]) null);
      Base64.isArrayByteBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      Base64.isBase64("]");
      Base64.encodeBase64URLSafe((byte[]) null);
      Base64.encodeBase64URLSafeString((byte[]) null);
      base64_0.decode((byte[]) null, (int) (byte)0, (int) (byte)0);
      Base64.isBase64((byte)0);
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.isBase64("]");
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_0 = new Base64(true);
      // Undeclared exception!
      try { 
        base64_0.decode(byteArray0, 887, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 887
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Base64 base64_0 = new Base64(0);
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.isBase64("2$#Z~g");
      Base64.encodeBase64URLSafe(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      Base64 base64_1 = new Base64();
      base64_1.decode(byteArray1, (-789), (-789));
      Base64.isBase64((byte) (-53));
      Base64.decodeInteger(byteArray1);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafeString(byteArray1);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray2, (int) (byte)0, 117);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Base64 base64_0 = new Base64((-1283));
      base64_0.hasData();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-111);
      byteArray0[6] = (byte) (-1);
      Base64.decodeInteger(byteArray0);
      Base64 base64_1 = new Base64();
      base64_1.readResults(byteArray0, (byte) (-111), (byte)0);
      Base64.isBase64((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Base64.isBase64((byte)0);
      Base64.isBase64("(!,-a:9QF}g}3~");
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.encodeBase64(byteArray1);
      Base64.decodeBase64((String) null);
      Base64 base64_0 = new Base64(true);
      Base64.encodeBase64((byte[]) null, false);
      // Undeclared exception!
      try { 
        base64_0.decode((byte[]) null, (int) (byte) (-121), 61);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      byte[] byteArray2 = Base64.encodeBase64Chunked(byteArray1);
      Base64.isBase64(byteArray0);
      byte[] byteArray3 = base64_0.decode("");
      Base64.decodeBase64("WEA7.yL0V]~%");
      Base64.encodeBase64URLSafeString(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64(byteArray2, true, true);
      Base64.encodeBase64(byteArray4);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Base64 base64_0 = new Base64();
      Base64.decodeBase64("}KWQs");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)1;
      Base64.isBase64((byte)0);
      String string0 = "/{:UM(Kxe";
      Base64.isBase64("}KWQs");
      Object object0 = new Object();
      Base64 base64_1 = new Base64(2035, byteArray0);
      try { 
        base64_1.encode((Object) "/{:UM(Kxe");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)0;
      Base64.encodeBase64(byteArray0, true);
      Base64.isBase64((byte)81);
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64((byte)72, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: []\u0000\uFFFD\u0000H\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      Base64.decodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(64);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = Base64.decodeBase64("");
      Base64 base64_2 = new Base64(true);
      base64_2.hasData();
      Base64.isBase64(byteArray1);
      base64_1.decode("");
      Base64.decodeBase64("uzlmiv");
      Base64.encodeBase64String((byte[]) null);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.encodeBase64(byteArray0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0);
      base64_0.encode(byteArray0, (-95), (-1620));
      assertEquals(64, Base64.PEM_CHUNK_SIZE);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)98;
      base64_0.encodeToString(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)98;
      byteArray1[2] = (byte)98;
      byteArray1[3] = (byte)98;
      byteArray1[4] = (byte)98;
      base64_0.decode(byteArray1);
      byteArray1[5] = (byte)98;
      byteArray1[6] = (byte)98;
      byteArray1[7] = (byte)98;
      byteArray1[8] = (byte)98;
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      base64_0.readResults(byteArray1, 0, (byte)98);
      Base64.isArrayByteBase64(byteArray1);
      byte[] byteArray3 = Base64.decodeBase64(byteArray2);
      base64_0.encodeToString(byteArray2);
      assertArrayEquals(new byte[] {(byte)64, (byte)98, (byte)98, (byte)98, (byte)98, (byte)98, (byte)98, (byte)98, (byte)98}, byteArray1);
      
      byte[] byteArray4 = new byte[3];
      Base64.isBase64("");
      byteArray4[0] = (byte)98;
      byteArray4[1] = (byte)98;
      byteArray4[2] = (byte)98;
      Base64.discardWhitespace(byteArray4);
      Base64.encodeBase64URLSafeString(byteArray0);
      base64_0.readResults(byteArray4, (byte)98, 0);
      base64_0.encode(byteArray4);
      byte[] byteArray5 = Base64.encodeBase64(byteArray3, true, true, (int) (byte)98);
      assertNotSame(byteArray3, byteArray5);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Base64 base64_0 = new Base64(2521);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(0, byteArray1.length);
      
      byteArray0[2] = (byte)0;
      boolean boolean0 = Base64.isBase64("]");
      assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = Base64.encodeBase64URLSafe(byteArray2);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)0;
      String string0 = Base64.encodeBase64URLSafeString(byteArray0);
      assertEquals("AAAAAGIA", string0);
      
      base64_0.decode(byteArray0, 1, (int) (byte)0);
      Base64.isBase64((byte)0);
      Base64.decodeInteger(byteArray3);
      byte[] byteArray4 = Base64.encodeBase64Chunked(byteArray0);
      assertEquals(10, byteArray4.length);
      
      Base64.encodeBase64URLSafeString(byteArray3);
      base64_0.encode(byteArray0, 117, (-305));
      assertNotSame(byteArray0, byteArray4);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Base64 base64_0 = new Base64(0, byteArray0, false);
      Base64.decodeBase64("U()NUvtMd");
      base64_0.encode(byteArray0, (int) (byte)0, (int) (byte)0);
      Base64.encodeBase64String(byteArray0);
      Base64.encodeBase64URLSafe((byte[]) null);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray1);
      Base64.encodeInteger(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64 base64_0 = new Base64(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.longValue();
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray2 = Base64.decodeBase64("AA");
      base64_0.hasData();
      Base64.isBase64(byteArray0);
      base64_0.decode("AA");
      Base64.decodeBase64("AA");
      Base64.encodeBase64URLSafeString(byteArray0);
      Base64.encodeBase64(byteArray2, false, true);
      Base64.encodeBase64(byteArray1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)38;
      Base64.isBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)38);
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray0, (int) (byte)38, (int) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 38
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)12;
      Base64.encodeBase64(byteArray0, false, true, 93);
      Base64.encodeBase64(byteArray0, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.longValue();
      bigInteger0.longValueExact();
      bigInteger0.abs();
      Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64((byte)0);
      Object object0 = new Object();
      try { 
        base64_0.encode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-121);
      Base64.encodeBase64URLSafe(byteArray0);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0);
      Base64.decodeBase64("/>");
      Base64 base64_0 = new Base64(false);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)118;
      byteArray2[3] = (byte)118;
      byteArray2[4] = (byte) (-121);
      byteArray2[5] = (byte)118;
      byteArray2[6] = (byte)118;
      byteArray2[7] = (byte)0;
      byteArray2[8] = (byte)1;
      Base64.encodeBase64(byteArray2, false);
      base64_0.decode(byteArray1, (int) (byte) (-121), (-1639));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = base64_0.decode(byteArray0);
      Base64.encodeBase64Chunked(byteArray1);
      Base64.encodeBase64URLSafeString(byteArray1);
      base64_0.avail();
      base64_0.avail();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64Chunked(byteArray0);
      Base64.encodeBase64URLSafe(byteArray0);
      Base64 base64_0 = new Base64(true);
      String string0 = "org.apache.commons.codec.EncoderException";
      Base64.encodeBase64String(byteArray1);
      Base64.decodeBase64("org.apache.commons.codec.EncoderException");
      Base64.decodeBase64("QVRRQUdRQT0NCg==");
      // Undeclared exception!
      try { 
        base64_0.encode(byteArray1, (int) (byte)0, (int) (byte)25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = null;
      Base64.decodeBase64((byte[]) null);
      int int0 = (-2142);
      Base64 base64_0 = new Base64((-2142));
      // Undeclared exception!
      try { 
        Base64.decodeInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-46);
      Base64.encodeBase64(byteArray0);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-11);
      Base64.decodeBase64(byteArray0);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte byte0 = (byte)22;
      // Undeclared exception!
      try { 
        Base64.toIntegerBytes((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        Base64.encodeBase64(byteArray0, false, false, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Input array too big, the output array would be bigger (6) than the specified maxium size of 0
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-5);
      byteArray0[0] = (byte) (-5);
      base64_0.decode(byteArray0);
      byteArray0[1] = (byte) (-55);
      String string0 = "]";
      Base64.decodeBase64("]");
      byteArray0[2] = (byte)0;
      byte byte1 = (byte) (-1);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64 base64_0 = new Base64(0, byteArray0);
      Base64.encodeBase64(byteArray0, false);
      try { 
        base64_0.encode((Object) "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Base64.isBase64("org.apache.commons.codec.EncoderException");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-90);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, true);
      Base64 base64_0 = new Base64(899);
      base64_0.encode(byteArray0, (int) (byte) (-90), 0);
      base64_0.encode(byteArray0, (int) (byte)0, 0);
      Base64.discardWhitespace(byteArray0);
      base64_0.decode((Object) "org.apache.commons.codec.EncoderException");
      base64_0.encode(byteArray1);
      base64_0.decode("org.apache.commons.codec.EncoderException");
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Base64.isBase64(byteArray0);
      Base64.decodeInteger(byteArray0);
      Base64 base64_0 = new Base64((-541), byteArray0, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Base64.isBase64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)0;
      base64_0.encode(byteArray1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      Base64.encodeBase64String(byteArray0);
      base64_0.avail();
      byte[] byteArray2 = base64_0.decode("O{o:T,^}x4!8");
      base64_0.encode(byteArray2);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Base64 base64_0 = new Base64(0, (byte[]) null, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      Base64.decodeInteger(byteArray0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray1 = Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64((byte[]) null, true, true);
      Base64.decodeInteger(byteArray1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Base64 base64_0 = new Base64(94);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)22;
      base64_0.readResults(byteArray0, (byte)0, 1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[0];
      base64_0.decode(byteArray0);
      Base64.decodeBase64(byteArray0);
      Base64.isBase64("b@M");
      byte[] byteArray1 = base64_0.decode("/");
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-57);
      byteArray2[1] = (byte) (-103);
      byteArray2[2] = (byte)114;
      byteArray2[3] = (byte) (-4);
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte) (-105);
      byteArray2[6] = (byte)38;
      byteArray2[7] = (byte)95;
      Base64.decodeBase64(byteArray2);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Base64.isBase64(">UrD");
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-66);
      base64_0.readResults(byteArray0, (byte)0, (-658));
      Base64.isBase64("[M,%Q0@p");
      base64_0.hasData();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      Base64.encodeBase64String(byteArray1);
      byte[] byteArray2 = new byte[3];
      base64_0.decode((Object) "AA==");
      Base64.encodeBase64String(byteArray2);
      byteArray2[0] = (byte) (-34);
      base64_0.decode(byteArray1, 901, 0);
      byteArray2[1] = (byte) (-99);
      byteArray2[2] = (byte)5;
      byte[] byteArray3 = base64_0.decode(byteArray2);
      Base64.encodeBase64(byteArray3);
      byte[] byteArray4 = new byte[1];
      byteArray4[0] = (byte)0;
      base64_0.encodeToString(byteArray4);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Base64.encodeBase64String(byteArray0);
      Base64 base64_0 = new Base64(false);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigInteger bigInteger2 = BigInteger.ONE;
      bigInteger0.divideAndRemainder(bigInteger2);
      bigInteger1.divide(bigInteger0);
      bigInteger0.max(bigInteger1);
      bigInteger0.shortValueExact();
      Base64.toIntegerBytes(bigInteger0);
      byte[] byteArray1 = base64_0.decode("KSr)[-]=<1/cG1P*N^");
      byte[] byteArray2 = Base64.decodeBase64(byteArray1);
      byte[] byteArray3 = Base64.encodeBase64(byteArray1, false, false);
      base64_0.decode("encodeInteger called with null parameter");
      base64_0.readResults(byteArray3, 0, (-952));
      base64_0.isUrlSafe();
      Base64.isArrayByteBase64(byteArray0);
      base64_0.encode(byteArray2);
      base64_0.decode("XoCm42,|Bgpcr^\"");
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)53;
      byteArray0[0] = (byte)53;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      Base64.encodeBase64(byteArray1, true, true, 1711);
      int int0 = 1;
      boolean boolean0 = true;
      Base64.encodeBase64(byteArray1, true);
      base64_0.encode(byteArray1, 3297, 0);
      Base64.encodeBase64(byteArray0, true);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        Base64.encodeInteger((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodeInteger called with null parameter
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(13, byteArray0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [Z\uFFFDd\uFFFD\uFFFD\u0000\u0000]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-69);
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false, 57);
      BigInteger bigInteger0 = Base64.decodeInteger(byteArray1);
      Base64.isArrayByteBase64(byteArray1);
      bigInteger0.bitLength();
      Base64 base64_0 = null;
      try {
        base64_0 = new Base64(0, byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lineSeperator must not contain base64 characters: [LwDNu7s=]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte byte0 = (byte)0;
      Base64.isBase64((byte)0);
      Base64.isBase64("(!,-a:9QF}g}3~");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false, false);
      Base64 base64_0 = new Base64((byte)0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = new BigInteger(byteArray1);
      bigInteger1.isProbablePrime(137);
      bigInteger0.min(bigInteger1);
      Base64.decodeBase64(byteArray0);
      Base64.toIntegerBytes(bigInteger0);
      Base64.encodeBase64Chunked(byteArray1);
      try { 
        base64_0.encode((Object) "(!,-a:9QF}g}3~");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 encode is not a byte[]
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)55;
      byte[] byteArray1 = Base64.encodeBase64URLSafe(byteArray0);
      Base64.decodeInteger(byteArray1);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64();
      Object object0 = new Object();
      try { 
        base64_0.decode(object0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Base64 base64_0 = new Base64(true);
      byte[] byteArray0 = null;
      String string0 = "Parameter supplied to Base64 decode is not a byte[] or a String";
      Base64.decodeBase64((byte[]) null);
      Base64 base64_1 = new Base64(64);
      Base64.decodeBase64("Parameter supplied to Base64 decode is not a byte[] or a String");
      try { 
        base64_1.decode((Object) base64_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parameter supplied to Base64 decode is not a byte[] or a String
         //
         verifyException("org.apache.commons.codec.binary.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Base64 base64_0 = new Base64(961);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-9);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)110;
      byteArray0[8] = (byte)0;
      base64_0.encode(byteArray0, (-1620), (-4400));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-48);
      Base64.isArrayByteBase64(byteArray0);
      Base64 base64_0 = new Base64((byte)0, byteArray0, true);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-30);
      byteArray1[2] = (byte) (-38);
      byteArray1[3] = (byte)72;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte) (-38);
      byteArray1[6] = (byte)0;
      Base64.encodeBase64(byteArray1, false, true);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Base64 base64_0 = new Base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = base64_0.encode(byteArray0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)65, (byte)65, (byte)61, (byte)61}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Base64 base64_0 = new Base64(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)118;
      byte[] byteArray1 = Base64.decodeBase64(byteArray0);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-106)}, byteArray1);
      
      boolean boolean0 = base64_0.isUrlSafe();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = Base64.encodeBase64(byteArray0, false);
      assertArrayEquals(new byte[] {(byte)108, (byte)122, (byte)73, (byte)116, (byte)65, (byte)65, (byte)65, (byte)65}, byteArray1);
      assertEquals(8, byteArray1.length);
  }
}
